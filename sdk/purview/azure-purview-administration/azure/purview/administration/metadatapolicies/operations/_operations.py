# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import abc
import sys
from typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TypeVar, Union, cast, overload

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._vendor import _format_url_section
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_entity_create_or_update_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_list_by_guids_request(
    *,
    guids: List[str],
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    exclude_relationship_types: Optional[List[str]] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct parameters
    _params['guid'] = [_SERIALIZER.query("guids", q, 'str') if q is not None else '' for q in guids]
    if min_ext_info is not None:
        _params['minExtInfo'] = _SERIALIZER.query("min_ext_info", min_ext_info, 'bool')
    if ignore_relationships is not None:
        _params['ignoreRelationships'] = _SERIALIZER.query("ignore_relationships", ignore_relationships, 'bool')
    if exclude_relationship_types is not None:
        _params['excludeRelationshipTypes'] = [_SERIALIZER.query("exclude_relationship_types", q, 'str') if q is not None else '' for q in exclude_relationship_types]

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_create_or_update_entities_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_by_guids_request(
    *,
    guids: List[str],
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct parameters
    _params['guid'] = [_SERIALIZER.query("guids", q, 'str') if q is not None else '' for q in guids]

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_add_classification_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/classification"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_by_guid_request(
    guid: str,
    *,
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if min_ext_info is not None:
        _params['minExtInfo'] = _SERIALIZER.query("min_ext_info", min_ext_info, 'bool')
    if ignore_relationships is not None:
        _params['ignoreRelationships'] = _SERIALIZER.query("ignore_relationships", ignore_relationships, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_partial_update_entity_attribute_by_guid_request(
    guid: str,
    *,
    name: str,
    json: JSON,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['name'] = _SERIALIZER.query("name", name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        json=json,
        **kwargs
    )


def build_entity_delete_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_classification_request(
    guid: str,
    classification_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url("classification_name", classification_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_classification_request(
    guid: str,
    classification_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url("classification_name", classification_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_classifications_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_add_classifications_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_update_classifications_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_by_unique_attributes_request(
    type_name: str,
    *,
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    attr_qualified_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if min_ext_info is not None:
        _params['minExtInfo'] = _SERIALIZER.query("min_ext_info", min_ext_info, 'bool')
    if ignore_relationships is not None:
        _params['ignoreRelationships'] = _SERIALIZER.query("ignore_relationships", ignore_relationships, 'bool')
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_partial_update_entity_by_unique_attributes_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_by_unique_attribute_request(
    type_name: str,
    *,
    attr_qualified_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_classification_by_unique_attribute_request(
    type_name: str,
    classification_name: str,
    *,
    attr_qualified_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url("classification_name", classification_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_add_classifications_by_unique_attribute_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_update_classifications_by_unique_attribute_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_set_classifications_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/setClassifications"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_entities_by_unique_attributes_request(
    type_name: str,
    *,
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    attr_n_qualified_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if min_ext_info is not None:
        _params['minExtInfo'] = _SERIALIZER.query("min_ext_info", min_ext_info, 'bool')
    if ignore_relationships is not None:
        _params['ignoreRelationships'] = _SERIALIZER.query("ignore_relationships", ignore_relationships, 'bool')
    if attr_n_qualified_name is not None:
        _params['attr_N:qualifiedName'] = _SERIALIZER.query("attr_n_qualified_name", attr_n_qualified_name, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_get_header_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/header"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_business_metadata_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_add_or_update_business_metadata_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    is_overwrite = kwargs.pop('is_overwrite', _params.pop('isOverwrite', None))  # type: Optional[bool]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if is_overwrite is not None:
        _params['isOverwrite'] = _SERIALIZER.query("is_overwrite", is_overwrite, 'bool')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_business_attributes_request(
    bm_name: str,
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}"
    path_format_arguments = {
        "bmName": _SERIALIZER.url("bm_name", bm_name, 'str'),
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_add_or_update_business_attributes_request(
    bm_name: str,
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}"
    path_format_arguments = {
        "bmName": _SERIALIZER.url("bm_name", bm_name, 'str'),
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_get_sample_business_metadata_template_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/octet-stream")

    # Construct URL
    _url = "/atlas/v2/entity/businessmetadata/import/template"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_import_business_attributes_request(
    *args,
    **kwargs
) -> HttpRequest:
    raise NotImplementedError(
        "You need to write a custom operation for 'build_entity_import_business_attributes_request'. "
        "Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize."
    )

def build_entity_delete_labels_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_set_labels_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_add_label_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_entity_delete_labels_by_unique_attribute_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_set_labels_by_unique_attribute_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_entity_add_labels_by_unique_attribute_request(
    type_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    attr_qualified_name = kwargs.pop('attr_qualified_name', _params.pop('attr:qualifiedName', None))  # type: Optional[str]
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attr_qualified_name is not None:
        _params['attr:qualifiedName'] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_glossaries_request(
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    ignore_terms_and_categories: bool = False,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary"

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')
    if ignore_terms_and_categories is not None:
        _params['ignoreTermsAndCategories'] = _SERIALIZER.query("ignore_terms_and_categories", ignore_terms_and_categories, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_create_glossary_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_create_glossary_categories_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/categories"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_create_glossary_category_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_get_glossary_category_request(
    category_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_update_glossary_category_request(
    category_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_delete_glossary_category_request(
    category_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_partial_update_glossary_category_request(
    category_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/partial"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_related_categories_request(
    category_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/related"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_category_terms_request(
    category_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/terms"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_create_glossary_term_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    include_term_hierarchy = kwargs.pop('include_term_hierarchy', _params.pop('includeTermHierarchy', False))  # type: bool
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term"

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_get_glossary_term_request(
    term_guid: str,
    *,
    include_term_hierarchy: bool = False,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_update_glossary_term_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_delete_glossary_term_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_partial_update_glossary_term_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    include_term_hierarchy = kwargs.pop('include_term_hierarchy', _params.pop('includeTermHierarchy', False))  # type: bool
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}/partial"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_create_glossary_terms_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    include_term_hierarchy = kwargs.pop('include_term_hierarchy', _params.pop('includeTermHierarchy', False))  # type: bool
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms"

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_get_entities_assigned_with_term_request(
    term_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_assign_term_to_entities_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_remove_term_assignment_from_entities_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_delete_term_assignment_from_entities_request(
    term_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_related_terms_request(
    term_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/related"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_get_glossary_request(
    glossary_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_update_glossary_request(
    glossary_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_delete_glossary_request(
    glossary_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_glossary_categories_request(
    glossary_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/categories"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_glossary_categories_headers_request(
    glossary_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/categories/headers"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_get_detailed_glossary_request(
    glossary_guid: str,
    *,
    include_term_hierarchy: bool = False,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/detailed"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_partial_update_glossary_request(
    glossary_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    include_term_hierarchy = kwargs.pop('include_term_hierarchy', _params.pop('includeTermHierarchy', False))  # type: bool
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/partial"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_glossary_terms_request(
    glossary_guid: str,
    *,
    include_term_hierarchy: bool = False,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/terms"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_glossary_term_headers_request(
    glossary_guid: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/terms/headers"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if sort is not None:
        _params['sort'] = _SERIALIZER.query("sort", sort, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_import_glossary_terms_via_csv_request(
    *args,
    **kwargs
) -> HttpRequest:
    raise NotImplementedError(
        "You need to write a custom operation for 'build_glossary_import_glossary_terms_via_csv_request'. "
        "Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize."
    )

def build_glossary_import_glossary_terms_via_csv_by_glossary_name_request(
    *args,
    **kwargs
) -> HttpRequest:
    raise NotImplementedError(
        "You need to write a custom operation for 'build_glossary_import_glossary_terms_via_csv_by_glossary_name_request'. "
        "Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize."
    )

def build_glossary_get_import_csv_operation_status_request(
    operation_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/glossary/terms/import/{operationGuid}"
    path_format_arguments = {
        "operationGuid": _SERIALIZER.url("operation_guid", operation_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_export_glossary_terms_as_csv_request(
    glossary_guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    include_term_hierarchy = kwargs.pop('include_term_hierarchy', _params.pop('includeTermHierarchy', False))  # type: bool
    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "text/csv")

    # Construct URL
    _url = "/glossary/{glossaryGuid}/terms/export"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_glossary_list_terms_by_glossary_name_request(
    glossary_name: str,
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    include_term_hierarchy: bool = False,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/glossary/name/{glossaryName}/terms"
    path_format_arguments = {
        "glossaryName": _SERIALIZER.url("glossary_name", glossary_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if include_term_hierarchy is not None:
        _params['includeTermHierarchy'] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, 'bool')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_discovery_query_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/search/query"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_discovery_suggest_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/search/suggest"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_discovery_browse_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/browse"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_discovery_auto_complete_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/search/autocomplete"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_lineage_get_lineage_graph_request(
    guid: str,
    *,
    direction: str,
    depth: int = 3,
    width: int = 10,
    include_parent: Optional[bool] = None,
    get_derived_lineage: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/lineage/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if depth is not None:
        _params['depth'] = _SERIALIZER.query("depth", depth, 'int')
    if width is not None:
        _params['width'] = _SERIALIZER.query("width", width, 'int')
    _params['direction'] = _SERIALIZER.query("direction", direction, 'str')
    if include_parent is not None:
        _params['includeParent'] = _SERIALIZER.query("include_parent", include_parent, 'bool')
    if get_derived_lineage is not None:
        _params['getDerivedLineage'] = _SERIALIZER.query("get_derived_lineage", get_derived_lineage, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_lineage_next_page_lineage_request(
    guid: str,
    *,
    direction: str,
    get_derived_lineage: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/lineage/{guid}/next/"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['direction'] = _SERIALIZER.query("direction", direction, 'str')
    if get_derived_lineage is not None:
        _params['getDerivedLineage'] = _SERIALIZER.query("get_derived_lineage", get_derived_lineage, 'bool')
    if offset is not None:
        _params['offset'] = _SERIALIZER.query("offset", offset, 'int')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_lineage_get_lineage_by_unique_attribute_request(
    type_name: str,
    *,
    direction: str,
    depth: int = 3,
    width: int = 10,
    include_parent: Optional[bool] = None,
    get_derived_lineage: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/lineage/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if depth is not None:
        _params['depth'] = _SERIALIZER.query("depth", depth, 'int')
    if width is not None:
        _params['width'] = _SERIALIZER.query("width", width, 'int')
    _params['direction'] = _SERIALIZER.query("direction", direction, 'str')
    if include_parent is not None:
        _params['includeParent'] = _SERIALIZER.query("include_parent", include_parent, 'bool')
    if get_derived_lineage is not None:
        _params['getDerivedLineage'] = _SERIALIZER.query("get_derived_lineage", get_derived_lineage, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_relationship_create_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_relationship_update_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_relationship_get_request(
    guid: str,
    *,
    extended_info: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if extended_info is not None:
        _params['extendedInfo'] = _SERIALIZER.query("extended_info", extended_info, 'bool')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_relationship_delete_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_business_metadata_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/businessmetadatadef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_business_metadata_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/businessmetadatadef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_classification_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/classificationdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_classification_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/classificationdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_entity_definition_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/entitydef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_entity_definition_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/entitydef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_enum_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/enumdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_enum_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/enumdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_relationship_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/relationshipdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_relationship_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/relationshipdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_struct_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/structdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_struct_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/structdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_type_definition_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_type_definition_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_delete_type_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_get_all_type_definitions_request(
    *,
    include_term_template: bool = False,
    type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct parameters
    if include_term_template is not None:
        _params['includeTermTemplate'] = _SERIALIZER.query("include_term_template", include_term_template, 'bool')
    if type is not None:
        _params['type'] = _SERIALIZER.query("type", type, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_types_create_type_definitions_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_update_atlas_type_definitions_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_delete_type_definitions_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_types_list_type_definition_headers_request(
    *,
    include_term_template: bool = False,
    type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs/headers"

    # Construct parameters
    if include_term_template is not None:
        _params['includeTermTemplate'] = _SERIALIZER.query("include_term_template", include_term_template, 'bool')
    if type is not None:
        _params['type'] = _SERIALIZER.query("type", type, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_types_get_term_template_def_by_guid_request(
    guid: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/types/termtemplatedef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_types_get_term_template_def_by_name_request(
    name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/types/termtemplatedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str', max_length=4096, min_length=1),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_collection_create_or_update_request(
    collection: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/collections/{collection}/entity"
    path_format_arguments = {
        "collection": _SERIALIZER.url("collection", collection, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_collection_create_or_update_bulk_request(
    collection: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/collections/{collection}/entity/bulk"
    path_format_arguments = {
        "collection": _SERIALIZER.url("collection", collection, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_collection_move_entities_to_collection_request(
    collection: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-03-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/collections/{collection}/entity/moveHere"
    path_format_arguments = {
        "collection": _SERIALIZER.url("collection", collection, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_key_vault_connections_get_request(
    key_vault_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/azureKeyVaults/{keyVaultName}"
    path_format_arguments = {
        "keyVaultName": _SERIALIZER.url("key_vault_name", key_vault_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_key_vault_connections_create_request(
    key_vault_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/azureKeyVaults/{keyVaultName}"
    path_format_arguments = {
        "keyVaultName": _SERIALIZER.url("key_vault_name", key_vault_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_key_vault_connections_delete_request(
    key_vault_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/azureKeyVaults/{keyVaultName}"
    path_format_arguments = {
        "keyVaultName": _SERIALIZER.url("key_vault_name", key_vault_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_key_vault_connections_list_all_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/azureKeyVaults"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_get_request(
    classification_rule_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules/{classificationRuleName}"
    path_format_arguments = {
        "classificationRuleName": _SERIALIZER.url("classification_rule_name", classification_rule_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_create_or_update_request(
    classification_rule_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules/{classificationRuleName}"
    path_format_arguments = {
        "classificationRuleName": _SERIALIZER.url("classification_rule_name", classification_rule_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_delete_request(
    classification_rule_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules/{classificationRuleName}"
    path_format_arguments = {
        "classificationRuleName": _SERIALIZER.url("classification_rule_name", classification_rule_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_list_all_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_list_versions_by_classification_rule_name_request(
    classification_rule_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules/{classificationRuleName}/versions"
    path_format_arguments = {
        "classificationRuleName": _SERIALIZER.url("classification_rule_name", classification_rule_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_classification_rules_tag_classification_version_request(
    classification_rule_name: str,
    classification_rule_version: int,
    *,
    action: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/classificationrules/{classificationRuleName}/versions/{classificationRuleVersion}/:tag"
    path_format_arguments = {
        "classificationRuleName": _SERIALIZER.url("classification_rule_name", classification_rule_name, 'str'),
        "classificationRuleVersion": _SERIALIZER.url("classification_rule_version", classification_rule_version, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['action'] = _SERIALIZER.query("action", action, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_data_sources_create_or_update_request(
    data_source_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_data_sources_get_request(
    data_source_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_data_sources_delete_request(
    data_source_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_data_sources_list_all_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_filters_get_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/filters/custom"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_filters_create_or_update_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/filters/custom"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scans_create_or_update_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scans_get_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scans_delete_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scans_list_by_data_source_request(
    data_source_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_result_run_scan_request(
    data_source_name: str,
    scan_name: str,
    run_id: str,
    *,
    scan_level: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/runs/{runId}"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
        "runId": _SERIALIZER.url("run_id", run_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if scan_level is not None:
        _params['scanLevel'] = _SERIALIZER.query("scan_level", scan_level, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_result_cancel_scan_request(
    data_source_name: str,
    scan_name: str,
    run_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/runs/{runId}/:cancel"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
        "runId": _SERIALIZER.url("run_id", run_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_result_list_scan_history_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/runs"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_rulesets_get_request(
    scan_ruleset_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/scanrulesets/{scanRulesetName}"
    path_format_arguments = {
        "scanRulesetName": _SERIALIZER.url("scan_ruleset_name", scan_ruleset_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_rulesets_create_or_update_request(
    scan_ruleset_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/scanrulesets/{scanRulesetName}"
    path_format_arguments = {
        "scanRulesetName": _SERIALIZER.url("scan_ruleset_name", scan_ruleset_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_rulesets_delete_request(
    scan_ruleset_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/scanrulesets/{scanRulesetName}"
    path_format_arguments = {
        "scanRulesetName": _SERIALIZER.url("scan_ruleset_name", scan_ruleset_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_scan_rulesets_list_all_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/scanrulesets"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_system_scan_rulesets_list_all_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/systemScanRulesets"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_system_scan_rulesets_get_request(
    data_source_type: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/systemScanRulesets/datasources/{dataSourceType}"
    path_format_arguments = {
        "dataSourceType": _SERIALIZER.url("data_source_type", data_source_type, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_system_scan_rulesets_get_by_version_request(
    version: int,
    *,
    data_source_type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/systemScanRulesets/versions/{version}"
    path_format_arguments = {
        "version": _SERIALIZER.url("version", version, 'int'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if data_source_type is not None:
        _params['dataSourceType'] = _SERIALIZER.query("data_source_type", data_source_type, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_system_scan_rulesets_get_latest_request(
    *,
    data_source_type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/systemScanRulesets/versions/latest"

    # Construct parameters
    if data_source_type is not None:
        _params['dataSourceType'] = _SERIALIZER.query("data_source_type", data_source_type, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_system_scan_rulesets_list_versions_by_data_source_request(
    *,
    data_source_type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/systemScanRulesets/versions"

    # Construct parameters
    if data_source_type is not None:
        _params['dataSourceType'] = _SERIALIZER.query("data_source_type", data_source_type, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_triggers_get_trigger_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/triggers/default"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_triggers_create_trigger_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/triggers/default"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_triggers_delete_trigger_request(
    data_source_name: str,
    scan_name: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2018-12-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/datasources/{dataSourceName}/scans/{scanName}/triggers/default"
    path_format_arguments = {
        "dataSourceName": _SERIALIZER.url("data_source_name", data_source_name, 'str'),
        "scanName": _SERIALIZER.url("scan_name", scan_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_metadata_roles_list_request(
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2021-07-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/metadataRoles"

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_metadata_policy_list_all_request(
    *,
    collection_name: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2021-07-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/metadataPolicies"

    # Construct parameters
    if collection_name is not None:
        _params['collectionName'] = _SERIALIZER.query("collection_name", collection_name, 'str')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_metadata_policy_update_request(
    policy_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2021-07-01-preview"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/metadataPolicies/{policyId}"
    path_format_arguments = {
        "policyId": _SERIALIZER.url("policy_id", policy_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_metadata_policy_get_request(
    policy_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2021-07-01-preview"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/metadataPolicies/{policyId}"
    path_format_arguments = {
        "policyId": _SERIALIZER.url("policy_id", policy_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

class EntityOperations(abc.ABC):  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`entity` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def create_or_update(
        self,
        entity: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update an entity in Atlas.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entity: Atlas entity with extended information. Required.
        :type entity: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed from Atlas store. Known values are:
                          "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def create_or_update(
        self,
        entity: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update an entity in Atlas.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entity: Atlas entity with extended information. Required.
        :type entity: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        entity: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create or update an entity in Atlas.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entity: Atlas entity with extended information. Is either a model type or a IO type.
         Required.
        :type entity: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entity, (IO, bytes)):
            _content = entity
        else:
            _json = entity

        request = build_entity_create_or_update_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def list_by_guids(
        self,
        *,
        guids: List[str],
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        exclude_relationship_types: Optional[List[str]] = None,
        **kwargs: Any
    ) -> JSON:
        """List entities in bulk identified by its GUIDs.

        :keyword guids: An array of GUIDs of entities to list. Required.
        :paramtype guids: list[str]
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :keyword exclude_relationship_types: An array of the relationship types need to be excluded
         from the response. Default value is None.
        :paramtype exclude_relationship_types: list[str]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_list_by_guids_request(
            guids=guids,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            exclude_relationship_types=exclude_relationship_types,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update_entities(
        self,
        entities: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update entities in Atlas in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entities: An array of entities to create or update. Required.
        :type entities: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entities = {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def create_or_update_entities(
        self,
        entities: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update entities in Atlas in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entities: An array of entities to create or update. Required.
        :type entities: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_or_update_entities(
        self,
        entities: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create or update entities in Atlas in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param entities: An array of entities to create or update. Is either a model type or a IO type.
         Required.
        :type entities: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entities, (IO, bytes)):
            _content = entities
        else:
            _json = entities

        request = build_entity_create_or_update_entities_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_by_guids(
        self,
        *,
        guids: List[str],
        **kwargs: Any
    ) -> JSON:
        """Delete a list of entities in bulk identified by their GUIDs or unique attributes.

        :keyword guids: An array of GUIDs of entities to delete. Required.
        :paramtype guids: list[str]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_delete_by_guids_request(
            guids=guids,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self,
        request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Required.
        :type request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                request = {
                    "classification": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    },
                    "entityGuids": [
                        "str"  # Optional. The GUID of the entity.
                    ]
                }
        """

    @overload
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self,
        request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Required.
        :type request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self,
        request: Union[JSON, IO],
        **kwargs: Any
    ) -> None:
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Is either a
         model type or a IO type. Required.
        :type request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request, (IO, bytes)):
            _content = request
        else:
            _json = request

        request = build_entity_add_classification_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_by_guid(
        self,
        guid: str,
        *,
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Get complete definition of an entity given its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed from Atlas store. Known values are:
                          "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_by_guid_request(
            guid=guid,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def partial_update_entity_attribute_by_guid(
        self,
        guid: str,
        body: JSON,
        *,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Update entity partially - create or update entity attribute identified by its GUID.
        Supports only primitive attribute type and entity references.
        It does not support updating complex types like arrays, and maps.
        Null updates are not possible.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: The value of the attribute. Required.
        :type body: JSON
        :keyword name: The name of the attribute. Required.
        :paramtype name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        _json = body

        request = build_entity_partial_update_entity_attribute_by_guid_request(
            guid=guid,
            name=name,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Delete an entity identified by its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_delete_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_classification(
        self,
        guid: str,
        classification_name: str,
        **kwargs: Any
    ) -> JSON:
        """List classifications for a given entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "entityGuid": "str",  # Optional. The GUID of the entity.
                    "entityStatus": "str",  # Optional. Status of the entity - can be active or
                      deleted. Deleted entities are not removed from Atlas store. Known values are:
                      "ACTIVE" and "DELETED".
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                      propagations will be removed on entity deletion.
                    "source": "str",  # Optional. indicate the source who create the
                      classification detail.
                    "sourceDetails": {
                        "str": {}  # Optional. more detail on source information.
                    },
                    "typeName": "str",  # Optional. The name of the type.
                    "validityPeriods": [
                        {
                            "endTime": "str",  # Optional. The end of the time boundary.
                            "startTime": "str",  # Optional. The start of the time
                              boundary.
                            "timeZone": "str"  # Optional. The timezone of the time
                              boundary.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_classification_request(
            guid=guid,
            classification_name=classification_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_classification(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classification_name: str,
        **kwargs: Any
    ) -> None:
        """Delete a given classification from an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_entity_delete_classification_request(
            guid=guid,
            classification_name=classification_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_classifications(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """List classifications for a given entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "list": [
                        {}  # Optional. An array of objects.
                    ],
                    "pageSize": 0,  # Optional. The size of the page.
                    "sortBy": "str",  # Optional. The sorted by field.
                    "sortType": "str",  # Optional. to specify whether the result should be
                      sorted? If yes, whether asc or desc. Known values are: "NONE", "ASC", and "DESC".
                    "startIndex": 0,  # Optional. The start index of the page.
                    "totalCount": 0  # Optional. The total count of items.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_classifications_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Required.
        :type classifications: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                classifications = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Required.
        :type classifications: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: Union[List[JSON], IO],
        **kwargs: Any
    ) -> None:
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Is either a list type or a IO
         type. Required.
        :type classifications: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(classifications, (IO, bytes)):
            _content = classifications
        else:
            _json = classifications

        request = build_entity_add_classifications_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Required.
        :type classifications: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                classifications = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Required.
        :type classifications: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        classifications: Union[List[JSON], IO],
        **kwargs: Any
    ) -> None:
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Is either a list type or a
         IO type. Required.
        :type classifications: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(classifications, (IO, bytes)):
            _content = classifications
        else:
            _json = classifications

        request = build_entity_update_classifications_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_by_unique_attributes(
        self,
        type_name: str,
        *,
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Get complete definition of an entity given its type and unique attribute.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr:\:code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed from Atlas store. Known values are:
                          "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_by_unique_attributes_request(
            type_name=type_name,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def partial_update_entity_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: JSON,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update entity partially - Allow a subset of attributes to be updated on
        an entity which is identified by its type and unique attribute  eg:
        Referenceable.qualifiedName.
        Null updates are not possible.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Required.
        :type atlas_entity_with_ext_info: JSON
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_entity_with_ext_info = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed from Atlas store. Known values are:
                          "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def partial_update_entity_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: IO,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update entity partially - Allow a subset of attributes to be updated on
        an entity which is identified by its type and unique attribute  eg:
        Referenceable.qualifiedName.
        Null updates are not possible.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Required.
        :type atlas_entity_with_ext_info: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def partial_update_entity_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: Union[JSON, IO],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Update entity partially - Allow a subset of attributes to be updated on
        an entity which is identified by its type and unique attribute  eg:
        Referenceable.qualifiedName.
        Null updates are not possible.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Is either a model
         type or a IO type. Required.
        :type atlas_entity_with_ext_info: JSON or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_entity_with_ext_info, (IO, bytes)):
            _content = atlas_entity_with_ext_info
        else:
            _json = atlas_entity_with_ext_info

        request = build_entity_partial_update_entity_by_unique_attributes_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_by_unique_attribute(
        self,
        type_name: str,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Delete an entity identified by its type and unique attributes.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr:\:code:`<attrName>`=\:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_delete_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_classification_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        classification_name: str,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Delete a given classification from an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_entity_delete_classification_by_unique_attribute_request(
            type_name=type_name,
            classification_name=classification_name,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: List[JSON],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Required.
        :type atlas_classification_array: list[JSON]
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_classification_array = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: IO,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Required.
        :type atlas_classification_array: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: Union[List[JSON], IO],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Is either a list
         type or a IO type. Required.
        :type atlas_classification_array: list[JSON] or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_classification_array, (IO, bytes)):
            _content = atlas_classification_array
        else:
            _json = atlas_classification_array

        request = build_entity_add_classifications_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: List[JSON],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Required.
        :type atlas_classification_array: list[JSON]
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_classification_array = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: IO,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Required.
        :type atlas_classification_array: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: Union[List[JSON], IO],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Is either a list
         type or a IO type. Required.
        :type atlas_classification_array: list[JSON] or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_classification_array, (IO, bytes)):
            _content = atlas_classification_array
        else:
            _json = atlas_classification_array

        request = build_entity_update_classifications_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def set_classifications(
        self,
        entity_headers: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[str]:
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Required.
        :type entity_headers: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity_headers = {
                    "guidHeaderMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """

    @overload
    def set_classifications(
        self,
        entity_headers: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[str]:
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Required.
        :type entity_headers: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """


    @distributed_trace
    def set_classifications(
        self,
        entity_headers: Union[JSON, IO],
        **kwargs: Any
    ) -> List[str]:
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Is either a model type or a IO type. Required.
        :type entity_headers: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[List[str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entity_headers, (IO, bytes)):
            _content = entity_headers
        else:
            _json = entity_headers

        request = build_entity_set_classifications_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)



    @distributed_trace
    def get_entities_by_unique_attributes(
        self,
        type_name: str,
        *,
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        attr_n_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Bulk API to retrieve list of entities identified by its unique attributes.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format

        typeName=\:code:`<typeName>`&attr_1:\:code:`<attrName>`=\:code:`<attrValue>`&attr_2:\:code:`<attrName>`=\:code:`<attrValue>`&attr_3:\:code:`<attrName>`=\:code:`<attrValue>`

        NOTE: The attrName should be an unique attribute for the given entity-type

        The REST request would look something like this

        GET
        /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&attr_2:qualifiedName=db2@cl1.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :keyword attr_n_qualified_name: Qualified name of an entity. E.g. to find 2 entities you can
         set attrs_0:qualifiedName=db1@cl1&attrs_2:qualifiedName=db2@cl1. Default value is None.
        :paramtype attr_n_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_entities_by_unique_attributes_request(
            type_name=type_name,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            attr_n_qualified_name=attr_n_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_header(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get entity header given its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "classificationNames": [
                        "str"  # Optional. An array of classification names.
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "displayText": "str",  # Optional. The display text.
                    "guid": "str",  # Optional. The GUID of the record.
                    "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                    "labels": [
                        "str"  # Optional. labels.
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "meaningNames": [
                        "str"  # Optional. An array of meanings.
                    ],
                    "meanings": [
                        {
                            "confidence": 0,  # Optional. The confidence of the term
                              assignment.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "description": "str",  # Optional. The description of the
                              term assignment.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term
                              assignment.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of terms assignment.
                              Known values are: "DISCOVERED", "PROPOSED", "IMPORTED", "VALIDATED",
                              "DEPRECATED", "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "status": "str",  # Optional. Status of the entity - can be active or
                      deleted. Deleted entities are not removed from Atlas store. Known values are:
                      "ACTIVE" and "DELETED".
                    "typeName": "str"  # Optional. The name of the type.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_entity_get_header_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def delete_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessMetadata. Default value is None.
        :type body: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def delete_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessMetadata. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Union[Dict[str, JSON], IO]] = None,
        **kwargs: Any
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessMetadata. Is either a dict type or a IO type. Default value is None.
        :type body: dict[str, JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_delete_business_metadata_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Dict[str, JSON]] = None,
        *,
        is_overwrite: Optional[bool] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: Business Metadata. Default value is None.
        :type body: dict[str, JSON]
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[IO] = None,
        *,
        is_overwrite: Optional[bool] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: Business Metadata. Default value is None.
        :type body: IO
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Union[Dict[str, JSON], IO]] = None,
        *,
        is_overwrite: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: Business Metadata. Is either a dict type or a IO type. Default value is None.
        :type body: dict[str, JSON] or IO
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_add_or_update_business_metadata_request(
            guid=guid,
            is_overwrite=is_overwrite,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def delete_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete business metadata from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Default value is None.
        :type body: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def delete_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete business metadata from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[Union[Dict[str, JSON], IO]] = None,
        **kwargs: Any
    ) -> None:
        """Delete business metadata from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Is either a dict type or a IO type. Default value is None.
        :type body: dict[str, JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_delete_business_attributes_request(
            bm_name=bm_name,
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def add_or_update_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add or update business attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Default value is None.
        :type body: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def add_or_update_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add or update business attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_or_update_business_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        body: Optional[Union[Dict[str, JSON], IO]] = None,
        **kwargs: Any
    ) -> None:
        """Add or update business attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: BusinessAttribute. Is either a dict type or a IO type. Default value is None.
        :type body: dict[str, JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_add_or_update_business_attributes_request(
            bm_name=bm_name,
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_sample_business_metadata_template(
        self,
        **kwargs: Any
    ) -> Optional[Iterator[bytes]]:
        """Get the sample Template for uploading/creating bulk BusinessMetaData.

        :return: Iterator of the response bytes or None
        :rtype: Iterator[bytes] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Iterator[bytes]]]

        
        request = build_entity_get_sample_business_metadata_template_request(
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=True,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    @abc.abstractmethod
    def import_business_attributes(
        self,
        *args,
        **kwargs
    ) -> Optional[JSON]:
        """You need to write a custom operation for "import_business_attributes". Please refer to
        https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.


        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "failedImportInfoList": [
                        {
                            "childObjectName": "str",  # Optional. childObjectName.
                            "importStatus": "str",  # Optional. importStatus. Known
                              values are: "SUCCESS" and "FAILED".
                            "parentObjectName": "str",  # Optional. parentObjectName.
                            "remarks": "str"  # Optional. remarks.
                        }
                    ],
                    "successImportInfoList": [
                        {
                            "childObjectName": "str",  # Optional. childObjectName.
                            "importStatus": "str",  # Optional. importStatus. Known
                              values are: "SUCCESS" and "FAILED".
                            "parentObjectName": "str",  # Optional. parentObjectName.
                            "remarks": "str"  # Optional. remarks.
                        }
                    ]
                }
        """


    @overload
    def delete_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def delete_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> None:
        """delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Is either a list type or a IO type. Default value is
         None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_delete_labels_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Is either a list type or a IO type. Default
         value is None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_set_labels_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def add_label(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def add_label(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_label(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> None:
        """add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Is either a list type or a IO type. Default value is
         None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_add_label_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def delete_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attributes, if labels
        is null/empty, no labels will be removed. If any labels in labels set are non-existing labels,
        they will be ignored, only existing labels will be removed. In addition to the typeName path
        parameter, attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def delete_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attributes, if labels
        is null/empty, no labels will be removed. If any labels in labels set are non-existing labels,
        they will be ignored, only existing labels will be removed. In addition to the typeName path
        parameter, attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attributes, if labels
        is null/empty, no labels will be removed. If any labels in labels set are non-existing labels,
        they will be ignored, only existing labels will be removed. In addition to the typeName path
        parameter, attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Is either a list type or a IO type. Default value is
         None.
        :type body: list[str] or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_delete_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, existing labels will all be removed. In addition to the typeName path parameter,
        attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, existing labels will all be removed. In addition to the typeName path parameter,
        attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Default value is None.
        :type body: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, existing labels will all be removed. In addition to the typeName path parameter,
        attribute key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Is either a list type or a IO type. Default value is
         None.
        :type body: list[str] or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_set_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, no labels will be added. In addition to the typeName path parameter, attribute
        key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, no labels will be added. In addition to the typeName path parameter, attribute
        key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Default value is None.
        :type body: IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes, if labels is
        null/empty, no labels will be added. In addition to the typeName path parameter, attribute
        key-value pair(s) can be provided in the following format:
        attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The attrName and attrValue should be unique
        across entities, eg. qualifiedName. The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Is either a list type or a IO type. Default value is
         None.
        :type body: list[str] or IO
        :keyword attr_qualified_name: The qualified name of the entity. Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_entity_add_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class GlossaryOperations(abc.ABC):  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`glossary` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_glossaries(
        self,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        ignore_terms_and_categories: bool = False,
        **kwargs: Any
    ) -> List[JSON]:
        """Get all glossaries registered with Atlas.

        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "language": "str",  # Optional. The language of the glossary.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "usage": "str"  # Optional. The usage of the glossary.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_glossaries_request(
            limit=limit,
            offset=offset,
            sort=sort,
            ignore_terms_and_categories=ignore_terms_and_categories,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @overload
    def create_glossary(
        self,
        atlas_glossary: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Required.
        :type atlas_glossary: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @overload
    def create_glossary(
        self,
        atlas_glossary: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Required.
        :type atlas_glossary: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """


    @distributed_trace
    def create_glossary(
        self,
        atlas_glossary: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Is either a model type or a IO
         type. Required.
        :type atlas_glossary: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_glossary, (IO, bytes)):
            _content = atlas_glossary
        else:
            _json = atlas_glossary

        request = build_glossary_create_glossary_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_glossary_categories(
        self,
        glossary_category: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Required.
        :type glossary_category: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]

                # response body for status code(s): 200
                response.json() == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """

    @overload
    def create_glossary_categories(
        self,
        glossary_category: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Required.
        :type glossary_category: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """


    @distributed_trace
    def create_glossary_categories(
        self,
        glossary_category: Union[List[JSON], IO],
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Is either a
         list type or a IO type. Required.
        :type glossary_category: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IO, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        request = build_glossary_create_glossary_categories_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @overload
    def create_glossary_category(
        self,
        glossary_category: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Required.
        :type glossary_category: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def create_glossary_category(
        self,
        glossary_category: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Required.
        :type glossary_category: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_glossary_category(
        self,
        glossary_category: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Is either a model type or a IO type. Required.
        :type glossary_category: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IO, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        request = build_glossary_create_glossary_category_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_glossary_category(
        self,
        category_guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get specific glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_glossary_get_glossary_category_request(
            category_guid=category_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def update_glossary_category(
        self,
        category_guid: str,
        glossary_category: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Required.
        :type glossary_category: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def update_glossary_category(
        self,
        category_guid: str,
        glossary_category: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Required.
        :type glossary_category: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def update_glossary_category(
        self,
        category_guid: str,
        glossary_category: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Is either a model type or a IO
         type. Required.
        :type glossary_category: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IO, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        request = build_glossary_update_glossary_category_request(
            category_guid=category_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_glossary_category(  # pylint: disable=inconsistent-return-statements
        self,
        category_guid: str,
        **kwargs: Any
    ) -> None:
        """Delete a glossary category.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_glossary_delete_glossary_category_request(
            category_guid=category_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def partial_update_glossary_category(
        self,
        category_guid: str,
        partial_updates: Dict[str, str],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary category partially.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values for partial update. Required.
        :type partial_updates: dict[str, str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                partial_updates = {
                    "str": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def partial_update_glossary_category(
        self,
        category_guid: str,
        partial_updates: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary category partially.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values for partial update. Required.
        :type partial_updates: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def partial_update_glossary_category(
        self,
        category_guid: str,
        partial_updates: Union[Dict[str, str], IO],
        **kwargs: Any
    ) -> JSON:
        """Update the glossary category partially.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values for partial update. Is either a dict type or a IO type. Required.
        :type partial_updates: dict[str, str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(partial_updates, (IO, bytes)):
            _content = partial_updates
        else:
            _json = partial_updates

        request = build_glossary_partial_update_glossary_category_request(
            category_guid=category_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def list_related_categories(
        self,
        category_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> Dict[str, List[JSON]]:
        """Get all related categories (parent and children). Limit, offset, and sort parameters are
        currently not being enabled and won't work even they are passed.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: dict mapping str to list of JSON object
        :rtype: dict[str, list[JSON]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, List[JSON]]]

        
        request = build_glossary_list_related_categories_request(
            category_guid=category_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, List[JSON]], deserialized), {})

        return cast(Dict[str, List[JSON]], deserialized)



    @distributed_trace
    def list_category_terms(
        self,
        category_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get all terms associated with the specific category.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "description": "str",  # Optional. The description of the related
                          term.
                        "displayText": "str",  # Optional. The display text.
                        "expression": "str",  # Optional. The expression of the term.
                        "relationGuid": "str",  # Optional. The GUID of the relationship.
                        "source": "str",  # Optional. The source of the term.
                        "status": "str",  # Optional. The status of term relationship. Known
                          values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and "OTHER".
                        "steward": "str",  # Optional. The steward of the term.
                        "termGuid": "str"  # Optional. The GUID of the term.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_category_terms_request(
            category_guid=category_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @overload
    def create_glossary_term(
        self,
        glossary_term: JSON,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Required.
        :type glossary_term: JSON
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def create_glossary_term(
        self,
        glossary_term: IO,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Required.
        :type glossary_term: IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_glossary_term(
        self,
        glossary_term: Union[JSON, IO],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Is either a model type or a IO type. Required.
        :type glossary_term: JSON or IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IO, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        request = build_glossary_create_glossary_term_request(
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_glossary_term(
        self,
        term_guid: str,
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Get a specific glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_glossary_get_glossary_term_request(
            term_guid=term_guid,
            include_term_hierarchy=include_term_hierarchy,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def update_glossary_term(
        self,
        term_guid: str,
        glossary_term: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Required.
        :type glossary_term: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def update_glossary_term(
        self,
        term_guid: str,
        glossary_term: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Required.
        :type glossary_term: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def update_glossary_term(
        self,
        term_guid: str,
        glossary_term: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Is either a model type or a IO type.
         Required.
        :type glossary_term: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IO, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        request = build_glossary_update_glossary_term_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_glossary_term(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        **kwargs: Any
    ) -> None:
        """Delete a glossary term.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_glossary_delete_glossary_term_request(
            term_guid=term_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def partial_update_glossary_term(
        self,
        term_guid: str,
        partial_updates: Dict[str, str],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary term partially.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values to be updated. Required.
        :type partial_updates: dict[str, str]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                partial_updates = {
                    "str": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def partial_update_glossary_term(
        self,
        term_guid: str,
        partial_updates: IO,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary term partially.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values to be updated. Required.
        :type partial_updates: IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """


    @distributed_trace
    def partial_update_glossary_term(
        self,
        term_guid: str,
        partial_updates: Union[Dict[str, str], IO],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Update the glossary term partially.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values to be updated. Is either a dict type or a IO type. Required.
        :type partial_updates: dict[str, str] or IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>."nThe key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(partial_updates, (IO, bytes)):
            _content = partial_updates
        else:
            _json = partial_updates

        request = build_glossary_partial_update_glossary_term_request(
            term_guid=term_guid,
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_glossary_terms(
        self,
        glossary_term: List[JSON],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Required.
        :type glossary_term: list[JSON]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]

                # response body for status code(s): 200
                response.json() == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """

    @overload
    def create_glossary_terms(
        self,
        glossary_term: IO,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Required.
        :type glossary_term: IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """


    @distributed_trace
    def create_glossary_terms(
        self,
        glossary_term: Union[List[JSON], IO],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> List[JSON]:
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Is either a
         list type or a IO type. Required.
        :type glossary_term: list[JSON] or IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IO, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        request = build_glossary_create_glossary_terms_request(
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @distributed_trace
    def get_entities_assigned_with_term(
        self,
        term_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get all related objects assigned with the specified term.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_get_entities_assigned_with_term_request(
            term_guid=term_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @overload
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Assign the given term to the provided list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Required.
        :type related_object_ids: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                related_object_ids = [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """

    @overload
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Assign the given term to the provided list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Required.
        :type related_object_ids: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: Union[List[JSON], IO],
        **kwargs: Any
    ) -> None:
        """Assign the given term to the provided list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Is either a list type or a IO type. Required.
        :type related_object_ids: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(related_object_ids, (IO, bytes)):
            _content = related_object_ids
        else:
            _json = related_object_ids

        request = build_glossary_assign_term_to_entities_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def remove_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                related_object_ids = [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """

    @overload
    def remove_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def remove_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: Union[List[JSON], IO],
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Is either a list type or a IO type. Required.
        :type related_object_ids: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(related_object_ids, (IO, bytes)):
            _content = related_object_ids
        else:
            _json = related_object_ids

        request = build_glossary_remove_term_assignment_from_entities_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @overload
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: List[JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                related_object_ids = [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed from Atlas store. Known
                          values are: "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """

    @overload
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self,
        term_guid: str,
        related_object_ids: Union[List[JSON], IO],
        **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Is either a list type or a IO type. Required.
        :type related_object_ids: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(related_object_ids, (IO, bytes)):
            _content = related_object_ids
        else:
            _json = related_object_ids

        request = build_glossary_delete_term_assignment_from_entities_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def list_related_terms(
        self,
        term_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> Dict[str, List[JSON]]:
        """Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are
        currently not being enabled and won't work even they are passed.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: dict mapping str to list of JSON object
        :rtype: dict[str, list[JSON]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, List[JSON]]]

        
        request = build_glossary_list_related_terms_request(
            term_guid=term_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, List[JSON]], deserialized), {})

        return cast(Dict[str, List[JSON]], deserialized)



    @distributed_trace
    def get_glossary(
        self,
        glossary_guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get a specific Glossary by its GUID.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_glossary_get_glossary_request(
            glossary_guid=glossary_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def update_glossary(
        self,
        glossary_guid: str,
        updated_glossary: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Required.
        :type updated_glossary: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                updated_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @overload
    def update_glossary(
        self,
        glossary_guid: str,
        updated_glossary: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Required.
        :type updated_glossary: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """


    @distributed_trace
    def update_glossary(
        self,
        glossary_guid: str,
        updated_glossary: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Is either a model type or a IO
         type. Required.
        :type updated_glossary: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(updated_glossary, (IO, bytes)):
            _content = updated_glossary
        else:
            _json = updated_glossary

        request = build_glossary_update_glossary_request(
            glossary_guid=glossary_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_glossary(  # pylint: disable=inconsistent-return-statements
        self,
        glossary_guid: str,
        **kwargs: Any
    ) -> None:
        """Delete a glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_glossary_delete_glossary_request(
            glossary_guid=glossary_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def list_glossary_categories(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get the categories belonging to a specific glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_glossary_categories_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @distributed_trace
    def list_glossary_categories_headers(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get the category headers belonging to a specific glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_glossary_categories_headers_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @distributed_trace
    def get_detailed_glossary(
        self,
        glossary_guid: str,
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Get a specific glossary with detailed information.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "categoryInfo": {
                        "str": {
                            "anchor": {
                                "displayText": "str",  # Optional. The display text.
                                "glossaryGuid": "str",  # Optional. The GUID of the
                                  glossary.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "childrenCategories": [
                                {
                                    "categoryGuid": "str",  # Optional. The GUID
                                      of the category.
                                    "description": "str",  # Optional. The
                                      description of the category header.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "parentCategoryGuid": "str",  # Optional. The
                                      GUID of the parent category.
                                    "relationGuid": "str"  # Optional. The GUID
                                      of the relationship.
                                }
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the object.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "longDescription": "str",  # Optional. The long version
                              description.
                            "name": "str",  # Optional. The name of the glossary object.
                            "parentCategory": {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the glossary object.
                            "shortDescription": "str",  # Optional. The short version of
                              description.
                            "terms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ]
                        }
                    },
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "termInfo": {
                        "str": {
                            "abbreviation": "str",  # Optional. The abbreviation of the
                              term.
                            "anchor": {
                                "displayText": "str",  # Optional. The display text.
                                "glossaryGuid": "str",  # Optional. The GUID of the
                                  glossary.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "antonyms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "assignedEntities": [
                                {
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "guid": "str",  # Optional. The GUID of the
                                      object.
                                    "relationshipAttributes": {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "typeName": "str"  # Optional. The
                                          name of the type.
                                    },
                                    "relationshipGuid": "str",  # Optional. The
                                      GUID of the relationship.
                                    "relationshipStatus": "str",  # Optional. The
                                      enum of relationship status. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "relationshipType": "str",  # Optional. An
                                      array of related object IDs.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "uniqueAttributes": {
                                        "str": {}  # Optional. The unique
                                          attributes of the object.
                                    }
                                }
                            ],
                            "attributes": {
                                "str": {
                                    "str": {}  # Optional. The custom attributes
                                      of the term, which is map<string,map<string,object>>."nThe key of
                                      the first layer map is term template name.
                                }
                            },
                            "categories": [
                                {
                                    "categoryGuid": "str",  # Optional. The GUID
                                      of the category.
                                    "description": "str",  # Optional. The
                                      description of the record.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str"  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                }
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "classifies": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "examples": [
                                "str"  # Optional. An array of examples.
                            ],
                            "guid": "str",  # Optional. The GUID of the object.
                            "isA": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "longDescription": "str",  # Optional. The long version
                              description.
                            "name": "str",  # Optional. The name of the glossary object.
                            "preferredTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "preferredToTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the glossary object.
                            "replacedBy": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "replacementTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "resources": [
                                {
                                    "displayName": "str",  # Optional. Display
                                      name for url.
                                    "url": "str"  # Optional. web url. http or
                                      https.
                                }
                            ],
                            "seeAlso": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "shortDescription": "str",  # Optional. The short version of
                              description.
                            "status": "str",  # Optional. Status of the
                              AtlasGlossaryTerm. Known values are: "Draft", "Approved", "Alert", and
                              "Expired".
                            "synonyms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "templateName": [
                                {}  # Optional. The glossary term information.
                            ],
                            "translatedTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "translationTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "usage": "str",  # Optional. The usage of the term.
                            "validValues": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "validValuesFor": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ]
                        }
                    },
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_glossary_get_detailed_glossary_request(
            glossary_guid=glossary_guid,
            include_term_hierarchy=include_term_hierarchy,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def partial_update_glossary(
        self,
        glossary_guid: str,
        partial_updates: Dict[str, str],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary partially. Some properties such as qualifiedName are not allowed to be
        updated.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values. Required.
        :type partial_updates: dict[str, str]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                partial_updates = {
                    "str": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @overload
    def partial_update_glossary(
        self,
        glossary_guid: str,
        partial_updates: IO,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update the glossary partially. Some properties such as qualifiedName are not allowed to be
        updated.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values. Required.
        :type partial_updates: IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """


    @distributed_trace
    def partial_update_glossary(
        self,
        glossary_guid: str,
        partial_updates: Union[Dict[str, str], IO],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        """Update the glossary partially. Some properties such as qualifiedName are not allowed to be
        updated.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values. Is either a dict type or a IO type. Required.
        :type partial_updates: dict[str, str] or IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed from Atlas
                              store. Known values are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "source": "str",  # Optional. The source of the term.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(partial_updates, (IO, bytes)):
            _content = partial_updates
        else:
            _json = partial_updates

        request = build_glossary_partial_update_glossary_request(
            glossary_guid=glossary_guid,
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def list_glossary_terms(
        self,
        glossary_guid: str,
        *,
        include_term_hierarchy: bool = False,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get terms belonging to a specific glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_glossary_terms_request(
            glossary_guid=glossary_guid,
            include_term_hierarchy=include_term_hierarchy,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @distributed_trace
    def list_glossary_term_headers(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any
    ) -> List[JSON]:
        """Get term headers belonging to a specific glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "description": "str",  # Optional. The description of the related
                          term.
                        "displayText": "str",  # Optional. The display text.
                        "expression": "str",  # Optional. The expression of the term.
                        "relationGuid": "str",  # Optional. The GUID of the relationship.
                        "source": "str",  # Optional. The source of the term.
                        "status": "str",  # Optional. The status of term relationship. Known
                          values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and "OTHER".
                        "steward": "str",  # Optional. The steward of the term.
                        "termGuid": "str"  # Optional. The GUID of the term.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_glossary_term_headers_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    def _import_glossary_terms_via_csv_initial(
        self,
        glossary_guid: str,
        file: IO,
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        # Construct form data
        _files = {
            "file": file,
        }

        request = build_glossary_import_glossary_terms_via_csv_request(
            glossary_guid=glossary_guid,
            include_term_hierarchy=include_term_hierarchy,
            api_version=api_version,
            content_type=content_type,
            files=_files,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    @abc.abstractmethod
    def begin_import_glossary_terms_via_csv(
        self,
        *args,
        **kwargs
    ) -> LROPoller[JSON]:
        """You need to write a custom operation for "begin_import_glossary_terms_via_csv". Please refer to
        https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.


        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response.json() == {
                    "createTime": "str",  # Optional. The created time of the record.
                    "error": {
                        "errorCode": 0,  # Optional. Error code from async import job if
                          fail.
                        "errorMessage": "str"  # Optional. Error message from async import
                          job if fail.
                    },
                    "id": "str",  # Optional. guid string.
                    "lastUpdateTime": "str",  # Optional. The last updated time of the record.
                    "properties": {
                        "importedTerms": "str",  # Optional. Term numbers that already
                          imported successfully.
                        "totalTermsDetected": "str"  # Optional. Total term numbers that
                          detected in csv.
                    },
                    "status": "str"  # Optional. Enum of the status of import csv operation.
                      Known values are: "NotStarted", "Succeeded", "Failed", and "Running".
                }
        """


    def _import_glossary_terms_via_csv_by_glossary_name_initial(
        self,
        glossary_name: str,
        file: IO,
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        # Construct form data
        _files = {
            "file": file,
        }

        request = build_glossary_import_glossary_terms_via_csv_by_glossary_name_request(
            glossary_name=glossary_name,
            include_term_hierarchy=include_term_hierarchy,
            api_version=api_version,
            content_type=content_type,
            files=_files,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    @abc.abstractmethod
    def begin_import_glossary_terms_via_csv_by_glossary_name(
        self,
        *args,
        **kwargs
    ) -> LROPoller[JSON]:
        """You need to write a custom operation for
        "begin_import_glossary_terms_via_csv_by_glossary_name". Please refer to
        https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.


        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response.json() == {
                    "createTime": "str",  # Optional. The created time of the record.
                    "error": {
                        "errorCode": 0,  # Optional. Error code from async import job if
                          fail.
                        "errorMessage": "str"  # Optional. Error message from async import
                          job if fail.
                    },
                    "id": "str",  # Optional. guid string.
                    "lastUpdateTime": "str",  # Optional. The last updated time of the record.
                    "properties": {
                        "importedTerms": "str",  # Optional. Term numbers that already
                          imported successfully.
                        "totalTermsDetected": "str"  # Optional. Total term numbers that
                          detected in csv.
                    },
                    "status": "str"  # Optional. Enum of the status of import csv operation.
                      Known values are: "NotStarted", "Succeeded", "Failed", and "Running".
                }
        """


    @distributed_trace
    def get_import_csv_operation_status(
        self,
        operation_guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the status of import csv operation.

        :param operation_guid: The globally unique identifier for async operation/job. Required.
        :type operation_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createTime": "str",  # Optional. The created time of the record.
                    "error": {
                        "errorCode": 0,  # Optional. Error code from async import job if
                          fail.
                        "errorMessage": "str"  # Optional. Error message from async import
                          job if fail.
                    },
                    "id": "str",  # Optional. guid string.
                    "lastUpdateTime": "str",  # Optional. The last updated time of the record.
                    "properties": {
                        "importedTerms": "str",  # Optional. Term numbers that already
                          imported successfully.
                        "totalTermsDetected": "str"  # Optional. Total term numbers that
                          detected in csv.
                    },
                    "status": "str"  # Optional. Enum of the status of import csv operation.
                      Known values are: "NotStarted", "Succeeded", "Failed", and "Running".
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_glossary_get_import_csv_operation_status_request(
            operation_guid=operation_guid,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def export_glossary_terms_as_csv(
        self,
        glossary_guid: str,
        term_guids: List[str],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Iterator[bytes]:
        """Export Glossary Terms as csv file.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param term_guids: An array of term guids. Required.
        :type term_guids: list[str]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                term_guids = [
                    "str"  # Optional.
                ]
        """

    @overload
    def export_glossary_terms_as_csv(
        self,
        glossary_guid: str,
        term_guids: IO,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Iterator[bytes]:
        """Export Glossary Terms as csv file.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param term_guids: An array of term guids. Required.
        :type term_guids: IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def export_glossary_terms_as_csv(
        self,
        glossary_guid: str,
        term_guids: Union[List[str], IO],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> Iterator[bytes]:
        """Export Glossary Terms as csv file.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param term_guids: An array of term guids. Is either a list type or a IO type. Required.
        :type term_guids: list[str] or IO
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Iterator[bytes]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(term_guids, (IO, bytes)):
            _content = term_guids
        else:
            _json = term_guids

        request = build_glossary_export_glossary_terms_as_csv_request(
            glossary_guid=glossary_guid,
            include_term_hierarchy=include_term_hierarchy,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=True,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), {})

        return cast(Iterator[bytes], deserialized)



    @distributed_trace
    def list_terms_by_glossary_name(
        self,
        glossary_name: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        include_term_hierarchy: bool = False,
        **kwargs: Any
    ) -> List[JSON]:
        """Get terms by glossary name.

        :param glossary_name: The name of the glossary. Required.
        :type glossary_name: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>."nThe key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_glossary_list_terms_by_glossary_name_request(
            glossary_name=glossary_name,
            limit=limit,
            offset=offset,
            include_term_hierarchy=include_term_hierarchy,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)


class DiscoveryOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`discovery` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def query(
        self,
        search_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Gets data using search.

        :param search_request: An object specifying the search criteria. Required.
        :type search_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                search_request = {
                    "facets": [
                        {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    ],
                    "filter": {},  # Optional. The filter for the search. See examples for the
                      usage of supported filters.
                    "keywords": "str",  # Optional. The keywords applied to all searchable
                      fields.
                    "limit": 0,  # Optional. The limit of the number of the search result.
                      default value is 50; maximum value is 1000.
                    "offset": 0,  # Optional. The offset. The default value is 0. The maximum
                      value is 100000.
                    "taxonomySetting": {
                        "assetTypes": [
                            "str"  # Optional.
                        ],
                        "facet": {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classificationCategory": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "fileExtension": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """

    @overload
    def query(
        self,
        search_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Gets data using search.

        :param search_request: An object specifying the search criteria. Required.
        :type search_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classificationCategory": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "fileExtension": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """


    @distributed_trace
    def query(
        self,
        search_request: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Gets data using search.

        :param search_request: An object specifying the search criteria. Is either a model type or a IO
         type. Required.
        :type search_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classificationCategory": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "fileExtension": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(search_request, (IO, bytes)):
            _content = search_request
        else:
            _json = search_request

        request = build_discovery_query_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def suggest(
        self,
        suggest_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Required.
        :type suggest_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                suggest_request = {
                    "filter": {},  # Optional. The filter for the search.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support suggest operation. It must be at least 1 character, and no more than 100
                      characters. In the index schema we defined a default suggester which lists all
                      the supported fields and specifies a search mode.
                    "limit": 0  # Optional. The number of suggestions we hope to return. The
                      default value is 5. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """

    @overload
    def suggest(
        self,
        suggest_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Required.
        :type suggest_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """


    @distributed_trace
    def suggest(
        self,
        suggest_request: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Is either a model type or a
         IO type. Required.
        :type suggest_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the record.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "description": "str",  # Optional. The description of the
                              record.
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the record.
                            ],
                            "name": "str",  # Optional. The name of the record.
                            "owner": "str",  # Optional. The owner of the record. This is
                              an Atlas native attribute.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(suggest_request, (IO, bytes)):
            _content = suggest_request
        else:
            _json = suggest_request

        request = build_discovery_suggest_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def browse(
        self,
        browse_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Browse entities by path or entity type.

        :param browse_request: An object specifying the browse criteria. Required.
        :type browse_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                browse_request = {
                    "entityType": "str",  # Optional. The entity type to browse as the root level
                      entry point.
                    "limit": 0,  # Optional. The number of browse items we hope to return. The
                      maximum value is 10000.
                    "offset": 0,  # Optional. The offset. The default value is 0. The maximum
                      value is 100000.
                    "path": "str"  # Optional. The path to browse the next level child entities.
                }

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of browse results.
                    "value": [
                        {
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "isLeaf": bool,  # Optional. If the record is a leaf entity.
                            "name": "str",  # Optional. The name of the record.
                            "owner": [
                                {
                                    "contactType": "str",  # Optional. The
                                      contact type of the owner. The value will be Owner.
                                    "displayName": "str",  # Optional. The
                                      display name of the owner.
                                    "id": "str",  # Optional. The GUID of the
                                      owner.
                                    "mail": "str"  # Optional. The mail of the
                                      owner.
                                }
                            ],
                            "path": "str",  # Optional. The path of the record.
                            "qualifiedName": "str"  # Optional. The qualified name of the
                              record.
                        }
                    ]
                }
        """

    @overload
    def browse(
        self,
        browse_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Browse entities by path or entity type.

        :param browse_request: An object specifying the browse criteria. Required.
        :type browse_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of browse results.
                    "value": [
                        {
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "isLeaf": bool,  # Optional. If the record is a leaf entity.
                            "name": "str",  # Optional. The name of the record.
                            "owner": [
                                {
                                    "contactType": "str",  # Optional. The
                                      contact type of the owner. The value will be Owner.
                                    "displayName": "str",  # Optional. The
                                      display name of the owner.
                                    "id": "str",  # Optional. The GUID of the
                                      owner.
                                    "mail": "str"  # Optional. The mail of the
                                      owner.
                                }
                            ],
                            "path": "str",  # Optional. The path of the record.
                            "qualifiedName": "str"  # Optional. The qualified name of the
                              record.
                        }
                    ]
                }
        """


    @distributed_trace
    def browse(
        self,
        browse_request: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Browse entities by path or entity type.

        :param browse_request: An object specifying the browse criteria. Is either a model type or a IO
         type. Required.
        :type browse_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "@search.count": 0,  # Optional. The total number of browse results.
                    "value": [
                        {
                            "entityType": "str",  # Optional. The type name of the
                              record.
                            "id": "str",  # Optional. The GUID of the record.
                            "isLeaf": bool,  # Optional. If the record is a leaf entity.
                            "name": "str",  # Optional. The name of the record.
                            "owner": [
                                {
                                    "contactType": "str",  # Optional. The
                                      contact type of the owner. The value will be Owner.
                                    "displayName": "str",  # Optional. The
                                      display name of the owner.
                                    "id": "str",  # Optional. The GUID of the
                                      owner.
                                    "mail": "str"  # Optional. The mail of the
                                      owner.
                                }
                            ],
                            "path": "str",  # Optional. The path of the record.
                            "qualifiedName": "str"  # Optional. The qualified name of the
                              record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(browse_request, (IO, bytes)):
            _content = browse_request
        else:
            _json = browse_request

        request = build_discovery_browse_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def auto_complete(
        self,
        auto_complete_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Required.
        :type auto_complete_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                auto_complete_request = {
                    "filter": {},  # Optional. The filter for the autocomplete request.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support autocomplete operation. It must be at least 1 character, and no more than
                      100 characters.
                    "limit": 0  # Optional. The number of autocomplete results we hope to return.
                      The default value is 50. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """

    @overload
    def auto_complete(
        self,
        auto_complete_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Required.
        :type auto_complete_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """


    @distributed_trace
    def auto_complete(
        self,
        auto_complete_request: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Is either a model
         type or a IO type. Required.
        :type auto_complete_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(auto_complete_request, (IO, bytes)):
            _content = auto_complete_request
        else:
            _json = auto_complete_request

        request = build_discovery_auto_complete_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class LineageOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`lineage` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_lineage_graph(
        self,
        guid: str,
        *,
        direction: str,
        depth: int = 3,
        width: int = 10,
        include_parent: Optional[bool] = None,
        get_derived_lineage: Optional[bool] = None,
        **kwargs: Any
    ) -> JSON:
        """Get lineage info of the entity specified by GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword depth: The number of hops for lineage. Default value is 3.
        :paramtype depth: int
        :keyword width: The number of max expanding width in lineage. Default value is 10.
        :paramtype width: int
        :keyword include_parent: True to include the parent chain in the response. Default value is
         None.
        :paramtype include_parent: bool
        :keyword get_derived_lineage: True to include derived lineage in the response. Default value is
         None.
        :paramtype get_derived_lineage: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "includeParent": bool,  # Optional. True to return the parent of the base
                      entity.
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_lineage_get_lineage_graph_request(
            guid=guid,
            direction=direction,
            depth=depth,
            width=width,
            include_parent=include_parent,
            get_derived_lineage=get_derived_lineage,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def next_page_lineage(
        self,
        guid: str,
        *,
        direction: str,
        get_derived_lineage: Optional[bool] = None,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
        **kwargs: Any
    ) -> JSON:
        """Return immediate next page lineage info about entity with pagination.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword get_derived_lineage: True to include derived lineage in the response. Default value is
         None.
        :paramtype get_derived_lineage: bool
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "includeParent": bool,  # Optional. True to return the parent of the base
                      entity.
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_lineage_next_page_lineage_request(
            guid=guid,
            direction=direction,
            get_derived_lineage=get_derived_lineage,
            offset=offset,
            limit=limit,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_lineage_by_unique_attribute(
        self,
        type_name: str,
        *,
        direction: str,
        depth: int = 3,
        width: int = 10,
        include_parent: Optional[bool] = None,
        get_derived_lineage: Optional[bool] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Returns lineage info about entity.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format

        attr:[attrName]=[attrValue]

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword depth: The number of hops for lineage. Default value is 3.
        :paramtype depth: int
        :keyword width: The number of max expanding width in lineage. Default value is 10.
        :paramtype width: int
        :keyword include_parent: True to include the parent chain in the response. Default value is
         None.
        :paramtype include_parent: bool
        :keyword get_derived_lineage: True to include derived lineage in the response. Default value is
         None.
        :paramtype get_derived_lineage: bool
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "includeParent": bool,  # Optional. True to return the parent of the base
                      entity.
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_lineage_get_lineage_by_unique_attribute_request(
            type_name=type_name,
            direction=direction,
            depth=depth,
            width=width,
            include_parent=include_parent,
            get_derived_lineage=get_derived_lineage,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


class RelationshipOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`relationship` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def create(
        self,
        relationship: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @overload
    def create(
        self,
        relationship: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """


    @distributed_trace
    def create(
        self,
        relationship: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Is either a model type or a IO type. Required.
        :type relationship: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(relationship, (IO, bytes)):
            _content = relationship
        else:
            _json = relationship

        request = build_relationship_create_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def update(
        self,
        relationship: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @overload
    def update(
        self,
        relationship: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """


    @distributed_trace
    def update(
        self,
        relationship: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Is either a model type or a IO type. Required.
        :type relationship: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(relationship, (IO, bytes)):
            _content = relationship
        else:
            _json = relationship

        request = build_relationship_update_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get(
        self,
        guid: str,
        *,
        extended_info: Optional[bool] = None,
        **kwargs: Any
    ) -> JSON:
        """Get relationship information between entities by its GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :keyword extended_info: Limits whether includes extended information. Default value is None.
        :paramtype extended_info: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "relationship": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "end1": {
                            "guid": "str",  # Optional. The GUID of the object.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        },
                        "end2": {
                            "guid": "str",  # Optional. The GUID of the object.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        },
                        "guid": "str",  # Optional. The GUID of the relationship.
                        "homeId": "str",  # Optional. The home ID of the relationship.
                        "label": "str",  # Optional. The label of the relationship.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "status": "str",  # Optional. The enum of relationship status. Known
                          values are: "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the relationship.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_relationship_get_request(
            guid=guid,
            extended_info=extended_info,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        **kwargs: Any
    ) -> None:
        """Delete a relationship between entities by its GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_relationship_delete_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class TypesOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`types` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_business_metadata_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Get the businessMetadata definition for the given guid.

        :param guid: businessMetadata guid. Required.
        :type guid: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_types_get_business_metadata_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_business_metadata_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Get the businessMetadata definition by it's name (unique).

        :param name: businessMetadata name. Required.
        :type name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_types_get_business_metadata_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_classification_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the classification definition for the given GUID.

        :param guid: The globally unique identifier of the classification. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can"nonly be applied to those
                          entityTypes."n"n"n.. raw:: html"n"n   <ul>"n   <li>Any subtypes of the entity
                          types inherit the restriction</li>"n   <li>Any classificationDef subtypes
                          inherit the parents entityTypes restrictions</li>"n   <li>Any
                          classificationDef subtypes can further restrict the parents entityTypes
                          restrictions by specifying a subset of the entityTypes</li>"n   <li>An empty
                          entityTypes list when there are no parent restrictions means there are no
                          restrictions</li>"n   <li>An empty entityTypes list when there are parent
                          restrictions means that the subtype picks up the parents restrictions</li>"n
                          <li>If a list of entityTypes are supplied, where one inherits from another,
                          this will be rejected. This should encourage cleaner
                          classificationsDefs</li>"n   </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_classification_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_classification_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the classification definition by its name (unique).

        :param name: The name of the classification. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can"nonly be applied to those
                          entityTypes."n"n"n.. raw:: html"n"n   <ul>"n   <li>Any subtypes of the entity
                          types inherit the restriction</li>"n   <li>Any classificationDef subtypes
                          inherit the parents entityTypes restrictions</li>"n   <li>Any
                          classificationDef subtypes can further restrict the parents entityTypes
                          restrictions by specifying a subset of the entityTypes</li>"n   <li>An empty
                          entityTypes list when there are no parent restrictions means there are no
                          restrictions</li>"n   <li>An empty entityTypes list when there are parent
                          restrictions means that the subtype picks up the parents restrictions</li>"n
                          <li>If a list of entityTypes are supplied, where one inherits from another,
                          this will be rejected. This should encourage cleaner
                          classificationsDefs</li>"n   </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_classification_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_entity_definition_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the Entity definition for the given GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_entity_definition_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_entity_definition_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the entity definition by its name (unique).

        :param name: The name of the entity. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_entity_definition_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_enum_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the enum definition for the given GUID.

        :param guid: The globally unique identifier of the enum. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_enum_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_enum_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the enum definition by its name (unique).

        :param name: The name of the enum. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_enum_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_relationship_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the relationship definition for the given GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle."nUML
                      terminology is used for the values."n"n:code:`<p>`"nASSOCIATION is a relationship
                      with no containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                      relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case,"nthe children cannot exist
                      without the container. For AGGREGATION, the life cycles"nof the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_relationship_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_relationship_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the relationship definition by its name (unique).

        :param name: The name of the relationship. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle."nUML
                      terminology is used for the values."n"n:code:`<p>`"nASSOCIATION is a relationship
                      with no containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                      relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case,"nthe children cannot exist
                      without the container. For AGGREGATION, the life cycles"nof the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_relationship_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_struct_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the struct definition for the given GUID.

        :param guid: The globally unique identifier of the struct. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_struct_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_struct_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the struct definition by its name (unique).

        :param name: The name of the struct. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_struct_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_type_definition_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the type definition for the given GUID.

        :param guid: The globally unique identifier of the type. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can"nonly be applied to those
                          entityTypes."n"n"n.. raw:: html"n"n   <ul>"n   <li>Any subtypes of the entity
                          types inherit the restriction</li>"n   <li>Any classificationDef subtypes
                          inherit the parents entityTypes restrictions</li>"n   <li>Any
                          classificationDef subtypes can further restrict the parents entityTypes
                          restrictions by specifying a subset of the entityTypes</li>"n   <li>An empty
                          entityTypes list when there are no parent restrictions means there are no
                          restrictions</li>"n   <li>An empty entityTypes list when there are parent
                          restrictions means that the subtype picks up the parents restrictions</li>"n
                          <li>If a list of entityTypes are supplied, where one inherits from another,
                          this will be rejected. This should encourage cleaner
                          classificationsDefs</li>"n   </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle."nUML
                      terminology is used for the values."n"n:code:`<p>`"nASSOCIATION is a relationship
                      with no containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                      relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case,"nthe children cannot exist
                      without the container. For AGGREGATION, the life cycles"nof the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_type_definition_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_type_definition_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the type definition by its name (unique).

        :param name: The name of the type. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can"nonly be applied to those
                          entityTypes."n"n"n.. raw:: html"n"n   <ul>"n   <li>Any subtypes of the entity
                          types inherit the restriction</li>"n   <li>Any classificationDef subtypes
                          inherit the parents entityTypes restrictions</li>"n   <li>Any
                          classificationDef subtypes can further restrict the parents entityTypes
                          restrictions by specifying a subset of the entityTypes</li>"n   <li>An empty
                          entityTypes list when there are no parent restrictions means there are no
                          restrictions</li>"n   <li>An empty entityTypes list when there are parent
                          restrictions means that the subtype picks up the parents restrictions</li>"n
                          <li>If a list of entityTypes are supplied, where one inherits from another,
                          this will be rejected. This should encourage cleaner
                          classificationsDefs</li>"n   </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle."nUML
                      terminology is used for the values."n"n:code:`<p>`"nASSOCIATION is a relationship
                      with no containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                      relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case,"nthe children cannot exist
                      without the container. For AGGREGATION, the life cycles"nof the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_type_definition_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_type_by_name(  # pylint: disable=inconsistent-return-statements
        self,
        name: str,
        **kwargs: Any
    ) -> None:
        """Delete API for type identified by its name.

        :param name: The name of the type. Required.
        :type name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_types_delete_type_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_all_type_definitions(
        self,
        *,
        include_term_template: bool = False,
        type: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Get all type definitions in Atlas in bulk.

        :keyword include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template. Default value is False.
        :paramtype include_term_template: bool
        :keyword type: Typedef name as search filter when get typedefs. Known values are: "enum",
         "entity", "classification", "relationship", "struct", and "term_template". Default value is
         None.
        :paramtype type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_all_type_definitions_request(
            include_term_template=include_term_template,
            type=type,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_type_definitions(
        self,
        types_def: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def create_type_definitions(
        self,
        types_def: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Required.
        :type types_def: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_type_definitions(
        self,
        types_def: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Is either a model type or a IO type. Required.
        :type types_def: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IO, bytes)):
            _content = types_def
        else:
            _json = types_def

        request = build_types_create_type_definitions_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def update_atlas_type_definitions(
        self,
        types_def: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def update_atlas_type_definitions(
        self,
        types_def: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Required.
        :type types_def: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """


    @distributed_trace
    def update_atlas_type_definitions(
        self,
        types_def: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Is either a
         model type or a IO type. Required.
        :type types_def: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IO, bytes)):
            _content = types_def
        else:
            _json = types_def

        request = build_types_update_atlas_type_definitions_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def delete_type_definitions(  # pylint: disable=inconsistent-return-statements
        self,
        types_def: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications
                                  can"nonly be applied to those entityTypes."n"n"n.. raw:: html"n"n
                                  <ul>"n   <li>Any subtypes of the entity types inherit the
                                  restriction</li>"n   <li>Any classificationDef subtypes inherit the
                                  parents entityTypes restrictions</li>"n   <li>Any classificationDef
                                  subtypes can further restrict the parents entityTypes restrictions by
                                  specifying a subset of the entityTypes</li>"n   <li>An empty
                                  entityTypes list when there are no parent restrictions means there
                                  are no restrictions</li>"n   <li>An empty entityTypes list when there
                                  are parent restrictions means that the subtype picks up the parents
                                  restrictions</li>"n   <li>If a list of entityTypes are supplied,
                                  where one inherits from another, this will be rejected. This should
                                  encourage cleaner classificationsDefs</li>"n   </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle."nUML terminology is used for the
                              values."n"n:code:`<p>`"nASSOCIATION is a relationship with no
                              containment. :code:`<br>`"nCOMPOSITION and AGGREGATION are containment
                              relationships."n"n:code:`<p>`"nThe difference being in the lifecycles of
                              the container and its children. In the COMPOSITION case,"nthe children
                              cannot exist without the container. For AGGREGATION, the life cycles"nof
                              the container and children are totally independent. Known values are:
                              "ASSOCIATION", "AGGREGATION", and "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def delete_type_definitions(  # pylint: disable=inconsistent-return-statements
        self,
        types_def: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Required.
        :type types_def: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def delete_type_definitions(  # pylint: disable=inconsistent-return-statements
        self,
        types_def: Union[JSON, IO],
        **kwargs: Any
    ) -> None:
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Is either a model
         type or a IO type. Required.
        :type types_def: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IO, bytes)):
            _content = types_def
        else:
            _json = types_def

        request = build_types_delete_type_definitions_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def list_type_definition_headers(
        self,
        *,
        include_term_template: bool = False,
        type: Optional[str] = None,
        **kwargs: Any
    ) -> List[JSON]:
        """List all type definitions returned as a list of minimal information header.

        :keyword include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template. Default value is False.
        :paramtype include_term_template: bool
        :keyword type: Typedef name as search filter when get typedefs. Known values are: "enum",
         "entity", "classification", "relationship", "struct", and "term_template". Default value is
         None.
        :paramtype type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "category": "str",  # Optional. The enum of type category. Known
                          values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                          "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                          "TERM_TEMPLATE".
                        "guid": "str",  # Optional. The GUID of the type definition.
                        "name": "str"  # Optional. The name of the type definition.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[JSON]]

        
        request = build_types_list_type_definition_headers_request(
            include_term_template=include_term_template,
            type=type,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)



    @distributed_trace
    def get_term_template_def_by_guid(
        self,
        guid: str,
        **kwargs: Any
    ) -> JSON:
        """Get the term template definition for the given GUID.

        :param guid: The globally unique identifier of the term template. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_term_template_def_by_guid_request(
            guid=guid,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_term_template_def_by_name(
        self,
        name: str,
        **kwargs: Any
    ) -> JSON:
        """Get the term template definition by its name (unique).

        :param name: The name of the term template. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0.0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0.0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_types_get_term_template_def_by_name_request(
            name=name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class CollectionOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`collection` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def create_or_update(
        self,
        collection: str,
        entity: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates an entity to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entity: Atlas entity with extended information. Required.
        :type entity: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed
                                  from Atlas store. Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "source": "str",  # Optional. indicate the source who
                                  create the classification detail.
                                "sourceDetails": {
                                    "str": {}  # Optional. more detail on source
                                      information.
                                },
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0.0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "source": "str",  # Optional. The source of the term.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "source": "str",  # Optional. indicate the source who create the
                          classification detail.
                        "sourceDetails": {
                            "str": {}  # Optional. more detail on source information.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed from Atlas store. Known values are:
                          "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0.0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def create_or_update(
        self,
        collection: str,
        entity: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates an entity to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entity: Atlas entity with extended information. Required.
        :type entity: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        collection: str,
        entity: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates or updates an entity to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entity: Atlas entity with extended information. Is either a model type or a IO type.
         Required.
        :type entity: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entity, (IO, bytes)):
            _content = entity
        else:
            _json = entity

        request = build_collection_create_or_update_request(
            collection=collection,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update_bulk(
        self,
        collection: str,
        entities: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates entities in bulk to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entities: Atlas entities with extended information. Required.
        :type entities: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entities = {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0.0,  # Optional. The created time of the
                              record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "source": "str",  # Optional. indicate the source who create
                              the classification detail.
                            "sourceDetails": {
                                "str": {}  # Optional. more detail on source
                                  information.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0.0,  # Optional. The update time of the
                              record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def create_or_update_bulk(
        self,
        collection: str,
        entities: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates entities in bulk to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entities: Atlas entities with extended information. Required.
        :type entities: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def create_or_update_bulk(
        self,
        collection: str,
        entities: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates or updates entities in bulk to a collection.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param entities: Atlas entities with extended information. Is either a model type or a IO type.
         Required.
        :type entities: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entities, (IO, bytes)):
            _content = entities
        else:
            _json = entities

        request = build_collection_create_or_update_bulk_request(
            collection=collection,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def move_entities_to_collection(
        self,
        collection: str,
        move_entities_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Move existing entities to the target collection.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param move_entities_request: Entity guids to be moved to target collection. Required.
        :type move_entities_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                move_entities_request = {
                    "entityGuids": [
                        "str"  # Optional. An array of entity guids to be moved to target
                          collection.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def move_entities_to_collection(
        self,
        collection: str,
        move_entities_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Move existing entities to the target collection.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param move_entities_request: Entity guids to be moved to target collection. Required.
        :type move_entities_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """


    @distributed_trace
    def move_entities_to_collection(
        self,
        collection: str,
        move_entities_request: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Move existing entities to the target collection.

        :param collection: the collection unique name. Required.
        :type collection: str
        :param move_entities_request: Entity guids to be moved to target collection. Is either a model
         type or a IO type. Required.
        :type move_entities_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed from Atlas store. Known values are:
                                          "ACTIVE" and "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "source": "str",  # Optional.
                                          indicate the source who create the classification detail.
                                        "sourceDetails": {
                                            "str": {}  # Optional. more
                                              detail on source information.
                                        },
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "source": "str",  # Optional. The
                                          source of the term.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed from Atlas
                                  store. Known values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed from Atlas store. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "source": "str",  # Optional. indicate the
                                      source who create the classification detail.
                                    "sourceDetails": {
                                        "str": {}  # Optional. more detail on
                                          source information.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "source": "str",  # Optional. The source of
                                      the term.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed from Atlas store.
                              Known values are: "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(move_entities_request, (IO, bytes)):
            _content = move_entities_request
        else:
            _json = move_entities_request

        request = build_collection_move_entities_to_collection_request(
            collection=collection,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class KeyVaultConnectionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`key_vault_connections` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get(
        self,
        key_vault_name: str,
        **kwargs: Any
    ) -> JSON:
        """Gets key vault information.

        :param key_vault_name: Required.
        :type key_vault_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_key_vault_connections_get_request(
            key_vault_name=key_vault_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create(
        self,
        key_vault_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a key vault connection.

        :param key_vault_name: Required.
        :type key_vault_name: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """

    @overload
    def create(
        self,
        key_vault_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a key vault connection.

        :param key_vault_name: Required.
        :type key_vault_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """


    @distributed_trace
    def create(
        self,
        key_vault_name: str,
        body: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a key vault connection.

        :param key_vault_name: Required.
        :type key_vault_name: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_key_vault_connections_create_request(
            key_vault_name=key_vault_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(
        self,
        key_vault_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes the key vault connection associated with the account.

        :param key_vault_name: Required.
        :type key_vault_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_key_vault_connections_delete_request(
            key_vault_name=key_vault_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_all(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List key vault connections in account.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "baseUrl": "str",  # Optional.
                        "description": "str"  # Optional.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_key_vault_connections_list_all_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_key_vault_connections_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class ClassificationRulesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`classification_rules` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get(
        self,
        classification_rule_name: str,
        **kwargs: Any
    ) -> JSON:
        """Get a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_classification_rules_get_request(
            classification_rule_name=classification_rule_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update(
        self,
        classification_rule_name: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                kind = 'Custom' or 'System'

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """

    @overload
    def create_or_update(
        self,
        classification_rule_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        classification_rule_name: str,
        body: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_classification_rules_create_or_update_request(
            classification_rule_name=classification_rule_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(
        self,
        classification_rule_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_classification_rules_delete_request(
            classification_rule_name=classification_rule_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_all(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List classification rules in Account.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_classification_rules_list_all_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_classification_rules_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def list_versions_by_classification_rule_name(
        self,
        classification_rule_name: str,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists the rule versions of a classification rule.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_classification_rules_list_versions_by_classification_rule_name_request(
                    classification_rule_name=classification_rule_name,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_classification_rules_list_versions_by_classification_rule_name_request(
                    classification_rule_name=classification_rule_name,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def tag_classification_version(
        self,
        classification_rule_name: str,
        classification_rule_version: int,
        *,
        action: str,
        **kwargs: Any
    ) -> JSON:
        """Sets Classification Action on a specific classification rule version.

        :param classification_rule_name: Required.
        :type classification_rule_name: str
        :param classification_rule_version: Required.
        :type classification_rule_version: int
        :keyword action: Known values are: "Keep" and "Delete". Required.
        :paramtype action: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response.json() == {
                    "endTime": "2020-02-20 00:00:00",  # Optional.
                    "error": {
                        "code": "str",  # Optional.
                        "details": [
                            {
                                "code": "str",  # Optional.
                                "details": [
                                    ...
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            }
                        ],
                        "message": "str",  # Optional.
                        "target": "str"  # Optional.
                    },
                    "scanResultId": "str",  # Optional.
                    "startTime": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Known values are: "Accepted", "InProgress",
                      "TransientFailure", "Succeeded", "Failed", and "Canceled".
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_classification_rules_tag_classification_version_request(
            classification_rule_name=classification_rule_name,
            classification_rule_version=classification_rule_version,
            action=action,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class DataSourcesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`data_sources` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def create_or_update(
        self,
        data_source_name: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                kind = 'AdlsGen1' or 'AdlsGen2' or 'AmazonAccount' or 'AmazonPostgreSql' or
                  'AmazonS3' or 'AmazonSql' or 'AzureCosmosDb' or 'AzureDataExplorer' or
                  'AzureFileService' or 'AzureMySql' or 'AzurePostgreSql' or 'AzureResourceGroup' or
                  'AzureSqlDataWarehouse' or 'AzureSqlDatabase' or 'AzureSqlDatabaseManagedInstance' or
                  'AzureStorage' or 'AzureSubscription' or 'AzureSynapse' or 'AzureSynapseWorkspace' or
                  'Oracle' or 'PowerBI' or 'SapEcc' or 'SapS4Hana' or 'SqlServerDatabase' or 'Teradata'

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """

    @overload
    def create_or_update(
        self,
        data_source_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        data_source_name: str,
        body: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_data_sources_create_or_update_request(
            data_source_name=data_source_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get(
        self,
        data_source_name: str,
        **kwargs: Any
    ) -> JSON:
        """Get a data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_data_sources_get_request(
            data_source_name=data_source_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(
        self,
        data_source_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes a data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_data_sources_delete_request(
            data_source_name=data_source_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_all(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List data sources in Data catalog.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scans": [
                        {
                            "id": "str",  # Optional.
                            "name": "str",  # Optional.
                            "scanResults": [
                                {
                                    "assetsClassified": 0,  # Optional.
                                    "assetsDiscovered": 0,  # Optional.
                                    "dataSourceType": "str",  # Optional. Known
                                      values are: "None", "AzureSubscription", "AzureResourceGroup",
                                      "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                                      "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                                      "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse",
                                      "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
                                      "SapEcc", and "PowerBI".
                                    "diagnostics": {
                                        "exceptionCountMap": {
                                            "str": 0  # Optional.
                                              Dictionary of :code:`<integer>`.
                                        },
                                        "notifications": [
                                            {
                                                "code": 0,  #
                                                  Optional.
                                                "message": "str"  #
                                                  Optional.
                                            }
                                        ]
                                    },
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "error": {
                                        "code": "str",  # Optional.
                                        "details": [
                                            {
                                                "code": "str",  #
                                                  Optional.
                                                "details": [
                                                    ...
                                                ],
                                                "message": "str",  #
                                                  Optional.
                                                "target": "str"  #
                                                  Optional.
                                            }
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    },
                                    "errorMessage": "str",  # Optional.
                                    "id": "str",  # Optional.
                                    "parentId": "str",  # Optional.
                                    "pipelineStartTime": "2020-02-20 00:00:00",
                                      # Optional.
                                    "queuedTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "resourceId": "str",  # Optional.
                                    "runType": "str",  # Optional.
                                    "scanLevelType": "str",  # Optional. Known
                                      values are: "Full" and "Incremental".
                                    "scanRulesetType": "str",  # Optional. Known
                                      values are: "Custom" and "System".
                                    "scanRulesetVersion": 0,  # Optional.
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional.
                                    "status": "str"  # Optional.
                                }
                            ],
                            kind: kind
                        }
                    ],
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_data_sources_list_all_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_data_sources_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class FiltersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`filters` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> JSON:
        """Get a filter.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "excludeUriPrefixes": [
                            "str"  # Optional.
                        ],
                        "includeUriPrefixes": [
                            "str"  # Optional.
                        ]
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_filters_get_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a filter.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "excludeUriPrefixes": [
                            "str"  # Optional.
                        ],
                        "includeUriPrefixes": [
                            "str"  # Optional.
                        ]
                    }
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "excludeUriPrefixes": [
                            "str"  # Optional.
                        ],
                        "includeUriPrefixes": [
                            "str"  # Optional.
                        ]
                    }
                }
        """

    @overload
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a filter.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "excludeUriPrefixes": [
                            "str"  # Optional.
                        ],
                        "includeUriPrefixes": [
                            "str"  # Optional.
                        ]
                    }
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a filter.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "excludeUriPrefixes": [
                            "str"  # Optional.
                        ],
                        "includeUriPrefixes": [
                            "str"  # Optional.
                        ]
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_filters_create_or_update_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class ScansOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`scans` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                kind = 'AdlsGen1Credential' or 'AdlsGen1Msi' or 'AdlsGen2Credential' or 'AdlsGen2Msi'
                  or 'AmazonAccountCredential' or 'AmazonPostgreSqlCredential' or 'AmazonS3Credential'
                  or 'AmazonS3RoleARN' or 'AmazonSqlCredential' or 'AzureCosmosDbCredential' or
                  'AzureDataExplorerCredential' or 'AzureDataExplorerMsi' or
                  'AzureFileServiceCredential' or 'AzureMySqlCredential' or 'AzurePostgreSqlCredential'
                  or 'AzureResourceGroupCredential' or 'AzureResourceGroupMsi' or
                  'AzureSqlDataWarehouseCredential' or 'AzureSqlDataWarehouseMsi' or
                  'AzureSqlDatabaseCredential' or 'AzureSqlDatabaseManagedInstanceCredential' or
                  'AzureSqlDatabaseManagedInstanceMsi' or 'AzureSqlDatabaseMsi' or
                  'AzureStorageCredential' or 'AzureStorageMsi' or 'AzureSubscriptionCredential' or
                  'AzureSubscriptionMsi' or 'AzureSynapseCredential' or 'AzureSynapseMsi' or
                  'AzureSynapseWorkspaceCredential' or 'AzureSynapseWorkspaceMsi' or
                  'OracleOracleCredential' or 'OracleOracleUserPass' or 'PowerBIDelegated' or
                  'PowerBIMsi' or 'SapEccSapEccCredential' or 'SapEccSapEccUserPass' or
                  'SapS4HanaSapS4HanaCredential' or 'SapS4HanaSapS4HanaUserPass' or
                  'SqlServerDatabaseCredential' or 'TeradataTeradataCredential' or
                  'TeradataTeradataUserPass' or 'TeradataUserPass'

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """

    @overload
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        data_source_name: str,
        scan_name: str,
        body: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_scans_create_or_update_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> JSON:
        """Gets a scan information.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_scans_get_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes the scan associated with the data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_scans_delete_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_by_data_source(
        self,
        data_source_name: str,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List scans in data source.

        :param data_source_name: Required.
        :type data_source_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanResults": [
                        {
                            "assetsClassified": 0,  # Optional.
                            "assetsDiscovered": 0,  # Optional.
                            "dataSourceType": "str",  # Optional. Known values are:
                              "None", "AzureSubscription", "AzureResourceGroup",
                              "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2",
                              "AmazonAccount", "AmazonS3", "AmazonSql", "AzureCosmosDb",
                              "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                              "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                              "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                              "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and
                              "PowerBI".
                            "diagnostics": {
                                "exceptionCountMap": {
                                    "str": 0  # Optional. Dictionary of
                                      :code:`<integer>`.
                                },
                                "notifications": [
                                    {
                                        "code": 0,  # Optional.
                                        "message": "str"  # Optional.
                                    }
                                ]
                            },
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "error": {
                                "code": "str",  # Optional.
                                "details": [
                                    {
                                        "code": "str",  # Optional.
                                        "details": [
                                            ...
                                        ],
                                        "message": "str",  # Optional.
                                        "target": "str"  # Optional.
                                    }
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            },
                            "errorMessage": "str",  # Optional.
                            "id": "str",  # Optional.
                            "parentId": "str",  # Optional.
                            "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                            "queuedTime": "2020-02-20 00:00:00",  # Optional.
                            "resourceId": "str",  # Optional.
                            "runType": "str",  # Optional.
                            "scanLevelType": "str",  # Optional. Known values are: "Full"
                              and "Incremental".
                            "scanRulesetType": "str",  # Optional. Known values are:
                              "Custom" and "System".
                            "scanRulesetVersion": 0,  # Optional.
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_scans_list_by_data_source_request(
                    data_source_name=data_source_name,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_scans_list_by_data_source_request(
                    data_source_name=data_source_name,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class ScanResultOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`scan_result` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def run_scan(
        self,
        data_source_name: str,
        scan_name: str,
        run_id: str,
        *,
        scan_level: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Runs the scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param run_id: Required.
        :type run_id: str
        :keyword scan_level: Known values are: "Full" and "Incremental". Default value is None.
        :paramtype scan_level: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response.json() == {
                    "endTime": "2020-02-20 00:00:00",  # Optional.
                    "error": {
                        "code": "str",  # Optional.
                        "details": [
                            {
                                "code": "str",  # Optional.
                                "details": [
                                    ...
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            }
                        ],
                        "message": "str",  # Optional.
                        "target": "str"  # Optional.
                    },
                    "scanResultId": "str",  # Optional.
                    "startTime": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Known values are: "Accepted", "InProgress",
                      "TransientFailure", "Succeeded", "Failed", and "Canceled".
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_scan_result_run_scan_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            run_id=run_id,
            scan_level=scan_level,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def cancel_scan(
        self,
        data_source_name: str,
        scan_name: str,
        run_id: str,
        **kwargs: Any
    ) -> JSON:
        """Cancels a scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param run_id: Required.
        :type run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response.json() == {
                    "endTime": "2020-02-20 00:00:00",  # Optional.
                    "error": {
                        "code": "str",  # Optional.
                        "details": [
                            {
                                "code": "str",  # Optional.
                                "details": [
                                    ...
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            }
                        ],
                        "message": "str",  # Optional.
                        "target": "str"  # Optional.
                    },
                    "scanResultId": "str",  # Optional.
                    "startTime": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional. Known values are: "Accepted", "InProgress",
                      "TransientFailure", "Succeeded", "Failed", and "Canceled".
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_scan_result_cancel_scan_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            run_id=run_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def list_scan_history(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists the scan history of a scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "assetsClassified": 0,  # Optional.
                    "assetsDiscovered": 0,  # Optional.
                    "dataSourceType": "str",  # Optional. Known values are: "None",
                      "AzureSubscription", "AzureResourceGroup", "AzureSynapseWorkspace",
                      "AzureSynapse", "AdlsGen1", "AdlsGen2", "AmazonAccount", "AmazonS3", "AmazonSql",
                      "AzureCosmosDb", "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
                      "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase",
                      "AzureSqlDatabaseManagedInstance", "AzureSqlDataWarehouse", "AzureMySql",
                      "AzureStorage", "Teradata", "Oracle", "SapS4Hana", "SapEcc", and "PowerBI".
                    "diagnostics": {
                        "exceptionCountMap": {
                            "str": 0  # Optional. Dictionary of :code:`<integer>`.
                        },
                        "notifications": [
                            {
                                "code": 0,  # Optional.
                                "message": "str"  # Optional.
                            }
                        ]
                    },
                    "endTime": "2020-02-20 00:00:00",  # Optional.
                    "error": {
                        "code": "str",  # Optional.
                        "details": [
                            {
                                "code": "str",  # Optional.
                                "details": [
                                    ...
                                ],
                                "message": "str",  # Optional.
                                "target": "str"  # Optional.
                            }
                        ],
                        "message": "str",  # Optional.
                        "target": "str"  # Optional.
                    },
                    "errorMessage": "str",  # Optional.
                    "id": "str",  # Optional.
                    "parentId": "str",  # Optional.
                    "pipelineStartTime": "2020-02-20 00:00:00",  # Optional.
                    "queuedTime": "2020-02-20 00:00:00",  # Optional.
                    "resourceId": "str",  # Optional.
                    "runType": "str",  # Optional.
                    "scanLevelType": "str",  # Optional. Known values are: "Full" and
                      "Incremental".
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "scanRulesetVersion": 0,  # Optional.
                    "startTime": "2020-02-20 00:00:00",  # Optional.
                    "status": "str"  # Optional.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_scan_result_list_scan_history_request(
                    data_source_name=data_source_name,
                    scan_name=scan_name,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_scan_result_list_scan_history_request(
                    data_source_name=data_source_name,
                    scan_name=scan_name,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class ScanRulesetsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`scan_rulesets` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get(
        self,
        scan_ruleset_name: str,
        **kwargs: Any
    ) -> JSON:
        """Get a scan ruleset.

        :param scan_ruleset_name: Required.
        :type scan_ruleset_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_scan_rulesets_get_request(
            scan_ruleset_name=scan_ruleset_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update(
        self,
        scan_ruleset_name: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a scan ruleset.

        :param scan_ruleset_name: Required.
        :type scan_ruleset_name: str
        :param body: Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                kind = 'AdlsGen1' or 'AdlsGen2' or 'AmazonAccount' or 'AmazonPostgreSql' or
                  'AmazonS3' or 'AmazonSql' or 'AzureCosmosDb' or 'AzureDataExplorer' or
                  'AzureFileService' or 'AzureMySql' or 'AzurePostgreSql' or 'AzureResourceGroup' or
                  'AzureSqlDataWarehouse' or 'AzureSqlDatabase' or 'AzureSqlDatabaseManagedInstance' or
                  'AzureStorage' or 'AzureSubscription' or 'AzureSynapse' or 'AzureSynapseWorkspace' or
                  'Oracle' or 'PowerBI' or 'SapEcc' or 'SapS4Hana' or 'SqlServerDatabase' or 'Teradata'

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """

    @overload
    def create_or_update(
        self,
        scan_ruleset_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a scan ruleset.

        :param scan_ruleset_name: Required.
        :type scan_ruleset_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """


    @distributed_trace
    def create_or_update(
        self,
        scan_ruleset_name: str,
        body: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """Creates or Updates a scan ruleset.

        :param scan_ruleset_name: Required.
        :type scan_ruleset_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_scan_rulesets_create_or_update_request(
            scan_ruleset_name=scan_ruleset_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete(
        self,
        scan_ruleset_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes a scan ruleset.

        :param scan_ruleset_name: Required.
        :type scan_ruleset_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_scan_rulesets_delete_request(
            scan_ruleset_name=scan_ruleset_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_all(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List scan rulesets in Data catalog.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_scan_rulesets_list_all_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_scan_rulesets_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class SystemScanRulesetsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`system_scan_rulesets` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_all(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List all system scan rulesets for an account.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_system_scan_rulesets_list_all_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_system_scan_rulesets_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get(
        self,
        data_source_type: str,
        **kwargs: Any
    ) -> JSON:
        """Get a system scan ruleset for a data source.

        :param data_source_type: Known values are: "None", "AzureSubscription", "AzureResourceGroup",
         "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2", "AmazonAccount", "AmazonS3",
         "AmazonSql", "AzureCosmosDb", "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
         "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase", "AzureSqlDatabaseManagedInstance",
         "AzureSqlDataWarehouse", "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
         "SapEcc", and "PowerBI". Required.
        :type data_source_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_system_scan_rulesets_get_request(
            data_source_type=data_source_type,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_by_version(
        self,
        version: int,
        *,
        data_source_type: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Get a scan ruleset by version.

        :param version: Required.
        :type version: int
        :keyword data_source_type: Known values are: "None", "AzureSubscription", "AzureResourceGroup",
         "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2", "AmazonAccount", "AmazonS3",
         "AmazonSql", "AzureCosmosDb", "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
         "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase", "AzureSqlDatabaseManagedInstance",
         "AzureSqlDataWarehouse", "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
         "SapEcc", and "PowerBI". Default value is None.
        :paramtype data_source_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_system_scan_rulesets_get_by_version_request(
            version=version,
            data_source_type=data_source_type,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_latest(
        self,
        *,
        data_source_type: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Get the latest version of a system scan ruleset.

        :keyword data_source_type: Known values are: "None", "AzureSubscription", "AzureResourceGroup",
         "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2", "AmazonAccount", "AmazonS3",
         "AmazonSql", "AzureCosmosDb", "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
         "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase", "AzureSqlDatabaseManagedInstance",
         "AzureSqlDataWarehouse", "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
         "SapEcc", and "PowerBI". Default value is None.
        :paramtype data_source_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_system_scan_rulesets_get_latest_request(
            data_source_type=data_source_type,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def list_versions_by_data_source(
        self,
        *,
        data_source_type: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List system scan ruleset versions in Data catalog.

        :keyword data_source_type: Known values are: "None", "AzureSubscription", "AzureResourceGroup",
         "AzureSynapseWorkspace", "AzureSynapse", "AdlsGen1", "AdlsGen2", "AmazonAccount", "AmazonS3",
         "AmazonSql", "AzureCosmosDb", "AzureDataExplorer", "AzureFileService", "AzureSqlDatabase",
         "AmazonPostgreSql", "AzurePostgreSql", "SqlServerDatabase", "AzureSqlDatabaseManagedInstance",
         "AzureSqlDataWarehouse", "AzureMySql", "AzureStorage", "Teradata", "Oracle", "SapS4Hana",
         "SapEcc", and "PowerBI". Default value is None.
        :paramtype data_source_type: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "scanRulesetType": "str",  # Optional. Known values are: "Custom" and
                      "System".
                    "status": "str",  # Optional. Known values are: "Enabled" and "Disabled".
                    "version": 0,  # Optional.
                    kind: kind
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_system_scan_rulesets_list_versions_by_data_source_request(
                    data_source_type=data_source_type,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_system_scan_rulesets_list_versions_by_data_source_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class TriggersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`triggers` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_trigger(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> JSON:
        """Gets trigger information.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_triggers_get_trigger_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_trigger(
        self,
        data_source_name: str,
        scan_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a trigger.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }
        """

    @overload
    def create_trigger(
        self,
        data_source_name: str,
        scan_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a trigger.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }
        """


    @distributed_trace
    def create_trigger(
        self,
        data_source_name: str,
        scan_name: str,
        body: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates an instance of a trigger.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_triggers_create_trigger_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_trigger(
        self,
        data_source_name: str,
        scan_name: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Deletes the trigger associated with the scan.

        :param data_source_name: Required.
        :type data_source_name: str
        :param scan_name: Required.
        :type scan_name: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional.
                        "incrementalScanStartTime": "2020-02-20 00:00:00",  # Optional.
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional.
                        "lastScheduled": "2020-02-20 00:00:00",  # Optional.
                        "recurrence": {
                            "endTime": "2020-02-20 00:00:00",  # Optional.
                            "frequency": "str",  # Optional. Known values are: "Week" and
                              "Month".
                            "interval": 0,  # Optional.
                            "schedule": {
                                "hours": [
                                    0  # Optional.
                                ],
                                "minutes": [
                                    0  # Optional.
                                ],
                                "monthDays": [
                                    0  # Optional.
                                ],
                                "monthlyOccurrences": [
                                    {
                                        "day": "str",  # Optional. Known
                                          values are: "Sunday", "Monday", "Tuesday", "Wednesday",
                                          "Thursday", "Friday", and "Saturday".
                                        "occurrence": 0  # Optional.
                                    }
                                ],
                                "weekDays": [
                                    "str"  # Optional.
                                ]
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional.
                            "timeZone": "str"  # Optional.
                        },
                        "recurrenceInterval": "str",  # Optional.
                        "scanLevel": "str"  # Optional. Known values are: "Full" and
                          "Incremental".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_triggers_delete_trigger_request(
            data_source_name=data_source_name,
            scan_name=scan_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


class MetadataRolesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`metadata_roles` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists roles for Purview Account.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The Id of role.
                    "name": "str",  # Optional. The name of role.
                    "properties": {
                        "cnfCondition": [
                            [
                                {
                                    "attributeName": "str",  # Optional.
                                      AttributeName.
                                    "attributeValueExcludedIn": [
                                        "str"  # Optional. List of values
                                          excluded for attribute.
                                    ],
                                    "attributeValueExcludes": "str",  # Optional.
                                      Value excluded for attribute.
                                    "attributeValueIncludedIn": [
                                        "str"  # Optional. List of values for
                                          attribute.
                                    ],
                                    "attributeValueIncludes": "str"  # Optional.
                                      Value for attribute.
                                }
                            ]
                        ],
                        "description": "str",  # Optional. The description of role.
                        "dnfCondition": [
                            [
                                {
                                    "attributeName": "str",  # Optional.
                                      AttributeName.
                                    "attributeValueExcludedIn": [
                                        "str"  # Optional. List of values
                                          excluded for attribute.
                                    ],
                                    "attributeValueExcludes": "str",  # Optional.
                                      Value excluded for attribute.
                                    "attributeValueIncludedIn": [
                                        "str"  # Optional. List of values for
                                          attribute.
                                    ],
                                    "attributeValueIncludes": "str"  # Optional.
                                      Value for attribute.
                                }
                            ]
                        ],
                        "friendlyName": "str",  # Optional. The friendly name of role.
                        "provisioningState": "str",  # Optional. The provisioningState of
                          role.
                        "roleType": "str",  # Optional. The type of role.
                        "version": 0  # Optional. The version of role.
                    },
                    "type": "str"  # Optional. The type of role.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_metadata_roles_list_request(
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_metadata_roles_list_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class MetadataPolicyOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.administration.metadatapolicies.PurviewMetadataPoliciesClient`'s
        :attr:`metadata_policy` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def list_all(
        self,
        *,
        collection_name: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """List or Get metadata policies.

        :keyword collection_name: The name of an existing collection for which one policy needs to be
         fetched. Default value is None.
        :paramtype collection_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_metadata_policy_list_all_request(
                    collection_name=collection_name,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_metadata_policy_list_all_request(
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @overload
    def update(
        self,
        policy_id: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """

    @overload
    def update(
        self,
        policy_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """


    @distributed_trace
    def update(
        self,
        policy_id: str,
        body: Optional[Union[JSON, IO]] = None,
        **kwargs: Any
    ) -> JSON:
        """Updates a metadata policy.

        :param policy_id: Unique policy id. Required.
        :type policy_id: str
        :param body: Policy to be updated. Is either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_metadata_policy_update_request(
            policy_id=policy_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get(
        self,
        policy_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets a metadata policy.

        :param policy_id: Id of an existing policy that needs to be fetched. Required.
        :type policy_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. The id of policy.
                    "name": "str",  # Optional. The name of policy.
                    "properties": {
                        "attributeRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "id": "str",  # Optional. The id for rule.
                                "kind": "str",  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                                "name": "str"  # Optional. The name for rule.
                            }
                        ],
                        "collection": {
                            "referenceName": "str",  # Optional. The name of reference.
                            "type": "CollectionReference"  # Optional. Default value is
                              "CollectionReference". The type of reference.
                        },
                        "decisionRules": [
                            {
                                "dnfCondition": [
                                    [
                                        {
                                            "attributeName": "str",  #
                                              Optional. AttributeName.
                                            "attributeValueExcludedIn": [
                                                "str"  # Optional.
                                                  List of values excluded for attribute.
                                            ],
                                            "attributeValueExcludes":
                                              "str",  # Optional. Value excluded for attribute.
                                            "attributeValueIncludedIn": [
                                                "str"  # Optional.
                                                  List of values for attribute.
                                            ],
                                            "attributeValueIncludes":
                                              "str"  # Optional. Value for attribute.
                                        }
                                    ]
                                ],
                                "effect": "str",  # Optional. The effect for rule.
                                  Known values are: "Deny" and "Permit".
                                "kind": "str"  # Optional. The kind of rule. Known
                                  values are: "decisionrule" and "attributerule".
                            }
                        ],
                        "description": "str",  # Optional. The description of policy.
                        "parentCollectionName": "str"  # Optional. The parent collection of
                          the policy.
                    },
                    "version": 0  # Optional. The version of policy.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_metadata_policy_get_request(
            policy_id=policy_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


