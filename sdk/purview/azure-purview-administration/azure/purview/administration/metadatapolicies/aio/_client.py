# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from msrest import Deserializer, Serializer

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest

from ._configuration import PurviewMetadataPoliciesClientConfiguration
from .operations import ClassificationRulesOperations, CollectionOperations, DataSourcesOperations, DiscoveryOperations, EntityOperations, FiltersOperations, GlossaryOperations, KeyVaultConnectionsOperations, LineageOperations, MetadataPolicyOperations, MetadataRolesOperations, RelationshipOperations, ScanResultOperations, ScanRulesetsOperations, ScansOperations, SystemScanRulesetsOperations, TriggersOperations, TypesOperations

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Dict

    from azure.core.credentials_async import AsyncTokenCredential

class PurviewMetadataPoliciesClient:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """Purview Catalog Service is a fully managed cloud service whose users can discover the data
    sources they need and understand the data sources they find. At the same time, Data Catalog
    helps organizations get more value from their existing investments. This spec defines REST API
    of Purview Catalog Service.

    :ivar entity: EntityOperations operations
    :vartype entity: azure.purview.administration.metadatapolicies.aio.operations.EntityOperations
    :ivar glossary: GlossaryOperations operations
    :vartype glossary:
     azure.purview.administration.metadatapolicies.aio.operations.GlossaryOperations
    :ivar discovery: DiscoveryOperations operations
    :vartype discovery:
     azure.purview.administration.metadatapolicies.aio.operations.DiscoveryOperations
    :ivar lineage: LineageOperations operations
    :vartype lineage:
     azure.purview.administration.metadatapolicies.aio.operations.LineageOperations
    :ivar relationship: RelationshipOperations operations
    :vartype relationship:
     azure.purview.administration.metadatapolicies.aio.operations.RelationshipOperations
    :ivar types: TypesOperations operations
    :vartype types: azure.purview.administration.metadatapolicies.aio.operations.TypesOperations
    :ivar collection: CollectionOperations operations
    :vartype collection:
     azure.purview.administration.metadatapolicies.aio.operations.CollectionOperations
    :ivar key_vault_connections: KeyVaultConnectionsOperations operations
    :vartype key_vault_connections:
     azure.purview.administration.metadatapolicies.aio.operations.KeyVaultConnectionsOperations
    :ivar classification_rules: ClassificationRulesOperations operations
    :vartype classification_rules:
     azure.purview.administration.metadatapolicies.aio.operations.ClassificationRulesOperations
    :ivar data_sources: DataSourcesOperations operations
    :vartype data_sources:
     azure.purview.administration.metadatapolicies.aio.operations.DataSourcesOperations
    :ivar filters: FiltersOperations operations
    :vartype filters:
     azure.purview.administration.metadatapolicies.aio.operations.FiltersOperations
    :ivar scans: ScansOperations operations
    :vartype scans: azure.purview.administration.metadatapolicies.aio.operations.ScansOperations
    :ivar scan_result: ScanResultOperations operations
    :vartype scan_result:
     azure.purview.administration.metadatapolicies.aio.operations.ScanResultOperations
    :ivar scan_rulesets: ScanRulesetsOperations operations
    :vartype scan_rulesets:
     azure.purview.administration.metadatapolicies.aio.operations.ScanRulesetsOperations
    :ivar system_scan_rulesets: SystemScanRulesetsOperations operations
    :vartype system_scan_rulesets:
     azure.purview.administration.metadatapolicies.aio.operations.SystemScanRulesetsOperations
    :ivar triggers: TriggersOperations operations
    :vartype triggers:
     azure.purview.administration.metadatapolicies.aio.operations.TriggersOperations
    :ivar metadata_roles: MetadataRolesOperations operations
    :vartype metadata_roles:
     azure.purview.administration.metadatapolicies.aio.operations.MetadataRolesOperations
    :ivar metadata_policy: MetadataPolicyOperations operations
    :vartype metadata_policy:
     azure.purview.administration.metadatapolicies.aio.operations.MetadataPolicyOperations
    :param endpoint: The catalog endpoint of your Purview account. Example:
     https://{accountName}.purview.azure.com. Required.
    :type endpoint: str
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        endpoint: str,
        credential: "AsyncTokenCredential",
        **kwargs: Any
    ) -> None:
        _endpoint = '{Endpoint}/catalog/api'
        self._config = PurviewMetadataPoliciesClientConfiguration(endpoint=endpoint, credential=credential, **kwargs)
        self._client = AsyncPipelineClient(base_url=_endpoint, config=self._config, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.entity = EntityOperations(  # type: ignore  # pylint: disable=abstract-class-instantiated
            self._client, self._config, self._serialize, self._deserialize
        )
        self.glossary = GlossaryOperations(  # type: ignore  # pylint: disable=abstract-class-instantiated
            self._client, self._config, self._serialize, self._deserialize
        )
        self.discovery = DiscoveryOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.lineage = LineageOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.relationship = RelationshipOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.types = TypesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.collection = CollectionOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.key_vault_connections = KeyVaultConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.classification_rules = ClassificationRulesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.data_sources = DataSourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.filters = FiltersOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.scans = ScansOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.scan_result = ScanResultOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.scan_rulesets = ScanRulesetsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.system_scan_rulesets = SystemScanRulesetsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.triggers = TriggersOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.metadata_roles = MetadataRolesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.metadata_policy = MetadataPolicyOperations(
            self._client, self._config, self._serialize, self._deserialize
        )


    def send_request(
        self,
        request: HttpRequest,
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/protocol/quickstart

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "PurviewMetadataPoliciesClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
