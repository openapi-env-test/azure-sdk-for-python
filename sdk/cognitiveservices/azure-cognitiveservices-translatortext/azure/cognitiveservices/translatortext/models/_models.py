# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class BreakSentenceResultItem(msrest.serialization.Model):
    """BreakSentenceResultItem.

    :param sent_len:
    :type sent_len: list[int]
    """

    _attribute_map = {
        'sent_len': {'key': 'sentLen', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BreakSentenceResultItem, self).__init__(**kwargs)
        self.sent_len = kwargs.get('sent_len', None)


class BreakSentenceTextInput(msrest.serialization.Model):
    """Text needed for break sentence request.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BreakSentenceTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)


class DetectResultItem(msrest.serialization.Model):
    """DetectResultItem.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DetectResultItem, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)


class DetectTextInput(msrest.serialization.Model):
    """Text needed for detect request.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DetectTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)


class DictionaryExampleResultItem(msrest.serialization.Model):
    """DictionaryExampleResultItem.

    :param normalized_source:
    :type normalized_source: str
    :param normalized_target:
    :type normalized_target: str
    :param examples:
    :type examples:
     list[~azure.cognitiveservices.translatortext.models.DictionaryExampleResultPropertiesItemsItem]
    """

    _attribute_map = {
        'normalized_source': {'key': 'normalizedSource', 'type': 'str'},
        'normalized_target': {'key': 'normalizedTarget', 'type': 'str'},
        'examples': {'key': 'examples', 'type': '[DictionaryExampleResultPropertiesItemsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryExampleResultItem, self).__init__(**kwargs)
        self.normalized_source = kwargs.get('normalized_source', None)
        self.normalized_target = kwargs.get('normalized_target', None)
        self.examples = kwargs.get('examples', None)


class DictionaryExampleResultPropertiesItemsItem(msrest.serialization.Model):
    """DictionaryExampleResultPropertiesItemsItem.

    :param source_prefix:
    :type source_prefix: str
    :param source_term:
    :type source_term: str
    :param source_suffix:
    :type source_suffix: str
    :param target_prefix:
    :type target_prefix: str
    :param target_term:
    :type target_term: str
    :param target_suffix:
    :type target_suffix: str
    """

    _attribute_map = {
        'source_prefix': {'key': 'sourcePrefix', 'type': 'str'},
        'source_term': {'key': 'sourceTerm', 'type': 'str'},
        'source_suffix': {'key': 'sourceSuffix', 'type': 'str'},
        'target_prefix': {'key': 'targetPrefix', 'type': 'str'},
        'target_term': {'key': 'targetTerm', 'type': 'str'},
        'target_suffix': {'key': 'targetSuffix', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryExampleResultPropertiesItemsItem, self).__init__(**kwargs)
        self.source_prefix = kwargs.get('source_prefix', None)
        self.source_term = kwargs.get('source_term', None)
        self.source_suffix = kwargs.get('source_suffix', None)
        self.target_prefix = kwargs.get('target_prefix', None)
        self.target_term = kwargs.get('target_term', None)
        self.target_suffix = kwargs.get('target_suffix', None)


class DictionaryExampleTextInput(msrest.serialization.Model):
    """Text needed for a dictionary example request.

    :param text:
    :type text: str
    :param translation:
    :type translation: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'translation': {'key': 'translation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryExampleTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
        self.translation = kwargs.get('translation', None)


class DictionaryLookupResultItem(msrest.serialization.Model):
    """DictionaryLookupResultItem.

    :param normalized_source:
    :type normalized_source: str
    :param display_source:
    :type display_source: str
    :param translations:
    :type translations:
     list[~azure.cognitiveservices.translatortext.models.DictionaryLookupResultPropertiesItemsItem]
    """

    _attribute_map = {
        'normalized_source': {'key': 'normalizedSource', 'type': 'str'},
        'display_source': {'key': 'displaySource', 'type': 'str'},
        'translations': {'key': 'translations', 'type': '[DictionaryLookupResultPropertiesItemsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryLookupResultItem, self).__init__(**kwargs)
        self.normalized_source = kwargs.get('normalized_source', None)
        self.display_source = kwargs.get('display_source', None)
        self.translations = kwargs.get('translations', None)


class DictionaryLookupResultPropertiesItemsBackTranslationsItem(msrest.serialization.Model):
    """DictionaryLookupResultPropertiesItemsBackTranslationsItem.

    :param normalized_text:
    :type normalized_text: str
    :param display_text:
    :type display_text: str
    :param num_examples:
    :type num_examples: int
    :param frequency_count:
    :type frequency_count: int
    """

    _attribute_map = {
        'normalized_text': {'key': 'normalizedText', 'type': 'str'},
        'display_text': {'key': 'displayText', 'type': 'str'},
        'num_examples': {'key': 'numExamples', 'type': 'int'},
        'frequency_count': {'key': 'frequencyCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryLookupResultPropertiesItemsBackTranslationsItem, self).__init__(**kwargs)
        self.normalized_text = kwargs.get('normalized_text', None)
        self.display_text = kwargs.get('display_text', None)
        self.num_examples = kwargs.get('num_examples', None)
        self.frequency_count = kwargs.get('frequency_count', None)


class DictionaryLookupResultPropertiesItemsItem(msrest.serialization.Model):
    """DictionaryLookupResultPropertiesItemsItem.

    :param normalized_target:
    :type normalized_target: str
    :param display_target:
    :type display_target: str
    :param pos_tag:
    :type pos_tag: str
    :param confidence:
    :type confidence: float
    :param prefix_word:
    :type prefix_word: str
    :param back_translations:
    :type back_translations:
     list[~azure.cognitiveservices.translatortext.models.DictionaryLookupResultPropertiesItemsBackTranslationsItem]
    """

    _attribute_map = {
        'normalized_target': {'key': 'normalizedTarget', 'type': 'str'},
        'display_target': {'key': 'displayTarget', 'type': 'str'},
        'pos_tag': {'key': 'posTag', 'type': 'str'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'prefix_word': {'key': 'prefixWord', 'type': 'str'},
        'back_translations': {'key': 'backTranslations', 'type': '[DictionaryLookupResultPropertiesItemsBackTranslationsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryLookupResultPropertiesItemsItem, self).__init__(**kwargs)
        self.normalized_target = kwargs.get('normalized_target', None)
        self.display_target = kwargs.get('display_target', None)
        self.pos_tag = kwargs.get('pos_tag', None)
        self.confidence = kwargs.get('confidence', None)
        self.prefix_word = kwargs.get('prefix_word', None)
        self.back_translations = kwargs.get('back_translations', None)


class DictionaryLookupTextInput(msrest.serialization.Model):
    """Text needed for a dictionary lookup request.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DictionaryLookupTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)


class ErrorMessage(msrest.serialization.Model):
    """ErrorMessage.

    :param error:
    :type error: ~azure.cognitiveservices.translatortext.models.ErrorMessageError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorMessageError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorMessage, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorMessageError(msrest.serialization.Model):
    """ErrorMessageError.

    :param code:
    :type code: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorMessageError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class LanguagesResult(msrest.serialization.Model):
    """Example of a successful languages request.

    :param translation:
    :type translation: ~azure.cognitiveservices.translatortext.models.LanguagesResultTranslation
    :param transliteration:
    :type transliteration:
     ~azure.cognitiveservices.translatortext.models.LanguagesResultTransliteration
    :param dictionary:
    :type dictionary: ~azure.cognitiveservices.translatortext.models.LanguagesResultDictionary
    """

    _attribute_map = {
        'translation': {'key': 'translation', 'type': 'LanguagesResultTranslation'},
        'transliteration': {'key': 'transliteration', 'type': 'LanguagesResultTransliteration'},
        'dictionary': {'key': 'dictionary', 'type': 'LanguagesResultDictionary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResult, self).__init__(**kwargs)
        self.translation = kwargs.get('translation', None)
        self.transliteration = kwargs.get('transliteration', None)
        self.dictionary = kwargs.get('dictionary', None)


class LanguagesResultDictionary(msrest.serialization.Model):
    """LanguagesResultDictionary.

    :param language_code:
    :type language_code:
     ~azure.cognitiveservices.translatortext.models.LanguagesResultDictionaryLanguageCode
    """

    _attribute_map = {
        'language_code': {'key': 'languageCode', 'type': 'LanguagesResultDictionaryLanguageCode'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultDictionary, self).__init__(**kwargs)
        self.language_code = kwargs.get('language_code', None)


class LanguagesResultDictionaryLanguageCode(msrest.serialization.Model):
    """LanguagesResultDictionaryLanguageCode.

    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param dir:
    :type dir: str
    :param translations:
    :type translations:
     list[~azure.cognitiveservices.translatortext.models.LanguagesResultDictionaryLanguageCodeTranslationsItem]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'dir': {'key': 'dir', 'type': 'str'},
        'translations': {'key': 'translations', 'type': '[LanguagesResultDictionaryLanguageCodeTranslationsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultDictionaryLanguageCode, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.dir = kwargs.get('dir', None)
        self.translations = kwargs.get('translations', None)


class LanguagesResultDictionaryLanguageCodeTranslationsItem(msrest.serialization.Model):
    """LanguagesResultDictionaryLanguageCodeTranslationsItem.

    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param dir:
    :type dir: str
    :param code:
    :type code: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'dir': {'key': 'dir', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultDictionaryLanguageCodeTranslationsItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.dir = kwargs.get('dir', None)
        self.code = kwargs.get('code', None)


class LanguagesResultTranslation(msrest.serialization.Model):
    """LanguagesResultTranslation.

    :param language_code:
    :type language_code:
     ~azure.cognitiveservices.translatortext.models.LanguagesResultTranslationLanguageCode
    """

    _attribute_map = {
        'language_code': {'key': 'languageCode', 'type': 'LanguagesResultTranslationLanguageCode'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTranslation, self).__init__(**kwargs)
        self.language_code = kwargs.get('language_code', None)


class LanguagesResultTranslationLanguageCode(msrest.serialization.Model):
    """LanguagesResultTranslationLanguageCode.

    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param dir:
    :type dir: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'dir': {'key': 'dir', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTranslationLanguageCode, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.dir = kwargs.get('dir', None)


class LanguagesResultTransliteration(msrest.serialization.Model):
    """LanguagesResultTransliteration.

    :param language_code:
    :type language_code:
     ~azure.cognitiveservices.translatortext.models.LanguagesResultTransliterationLanguageCode
    """

    _attribute_map = {
        'language_code': {'key': 'languageCode', 'type': 'LanguagesResultTransliterationLanguageCode'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTransliteration, self).__init__(**kwargs)
        self.language_code = kwargs.get('language_code', None)


class LanguagesResultTransliterationLanguageCode(msrest.serialization.Model):
    """LanguagesResultTransliterationLanguageCode.

    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param scripts:
    :type scripts:
     list[~azure.cognitiveservices.translatortext.models.LanguagesResultTransliterationLanguageCodeScriptsItem]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'scripts': {'key': 'scripts', 'type': '[LanguagesResultTransliterationLanguageCodeScriptsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTransliterationLanguageCode, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.scripts = kwargs.get('scripts', None)


class LanguagesResultTransliterationLanguageCodeScriptsItem(msrest.serialization.Model):
    """LanguagesResultTransliterationLanguageCodeScriptsItem.

    :param code:
    :type code: str
    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param dir:
    :type dir: str
    :param to_scripts:
    :type to_scripts:
     list[~azure.cognitiveservices.translatortext.models.LanguagesResultTransliterationLanguageCodeScriptsPropertiesItemsItem]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'dir': {'key': 'dir', 'type': 'str'},
        'to_scripts': {'key': 'toScripts', 'type': '[LanguagesResultTransliterationLanguageCodeScriptsPropertiesItemsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTransliterationLanguageCodeScriptsItem, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.dir = kwargs.get('dir', None)
        self.to_scripts = kwargs.get('to_scripts', None)


class LanguagesResultTransliterationLanguageCodeScriptsPropertiesItemsItem(msrest.serialization.Model):
    """LanguagesResultTransliterationLanguageCodeScriptsPropertiesItemsItem.

    :param code:
    :type code: str
    :param name:
    :type name: str
    :param native_name:
    :type native_name: str
    :param dir:
    :type dir: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'native_name': {'key': 'nativeName', 'type': 'str'},
        'dir': {'key': 'dir', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LanguagesResultTransliterationLanguageCodeScriptsPropertiesItemsItem, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.name = kwargs.get('name', None)
        self.native_name = kwargs.get('native_name', None)
        self.dir = kwargs.get('dir', None)


class TranslateResultAllItem(msrest.serialization.Model):
    """TranslateResultAllItem.

    :param detected_language:
    :type detected_language:
     ~azure.cognitiveservices.translatortext.models.TranslateResultAllItemDetectedLanguage
    :param translations:
    :type translations:
     list[~azure.cognitiveservices.translatortext.models.TranslateResultAllPropertiesItemsItem]
    """

    _attribute_map = {
        'detected_language': {'key': 'detectedLanguage', 'type': 'TranslateResultAllItemDetectedLanguage'},
        'translations': {'key': 'translations', 'type': '[TranslateResultAllPropertiesItemsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllItem, self).__init__(**kwargs)
        self.detected_language = kwargs.get('detected_language', None)
        self.translations = kwargs.get('translations', None)


class TranslateResultAllItemDetectedLanguage(msrest.serialization.Model):
    """TranslateResultAllItemDetectedLanguage.

    :param language:
    :type language: str
    :param score:
    :type score: float
    """

    _attribute_map = {
        'language': {'key': 'language', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllItemDetectedLanguage, self).__init__(**kwargs)
        self.language = kwargs.get('language', None)
        self.score = kwargs.get('score', None)


class TranslateResultAllItemTranslationsItemAlignment(msrest.serialization.Model):
    """TranslateResultAllItemTranslationsItemAlignment.

    :param proj:
    :type proj: str
    """

    _attribute_map = {
        'proj': {'key': 'proj', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllItemTranslationsItemAlignment, self).__init__(**kwargs)
        self.proj = kwargs.get('proj', None)


class TranslateResultAllItemTranslationsItemSentLen(msrest.serialization.Model):
    """TranslateResultAllItemTranslationsItemSentLen.

    :param src_sent_len:
    :type src_sent_len:
     list[~azure.cognitiveservices.translatortext.models.TranslateResultAllPropertiesItemsSentLenSrcSentLenItem]
    :param trans_sent_len:
    :type trans_sent_len:
     list[~azure.cognitiveservices.translatortext.models.TranslateResultAllPropertiesItemsSentLenTransSentLenItem]
    """

    _attribute_map = {
        'src_sent_len': {'key': 'srcSentLen', 'type': '[TranslateResultAllPropertiesItemsSentLenSrcSentLenItem]'},
        'trans_sent_len': {'key': 'transSentLen', 'type': '[TranslateResultAllPropertiesItemsSentLenTransSentLenItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllItemTranslationsItemSentLen, self).__init__(**kwargs)
        self.src_sent_len = kwargs.get('src_sent_len', None)
        self.trans_sent_len = kwargs.get('trans_sent_len', None)


class TranslateResultAllItemTranslationsItemTransliteration(msrest.serialization.Model):
    """TranslateResultAllItemTranslationsItemTransliteration.

    :param text:
    :type text: str
    :param script:
    :type script: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'script': {'key': 'script', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllItemTranslationsItemTransliteration, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
        self.script = kwargs.get('script', None)


class TranslateResultAllPropertiesItemsItem(msrest.serialization.Model):
    """TranslateResultAllPropertiesItemsItem.

    :param text:
    :type text: str
    :param transliteration:
    :type transliteration:
     ~azure.cognitiveservices.translatortext.models.TranslateResultAllItemTranslationsItemTransliteration
    :param to:
    :type to: str
    :param alignment:
    :type alignment:
     ~azure.cognitiveservices.translatortext.models.TranslateResultAllItemTranslationsItemAlignment
    :param sent_len:
    :type sent_len:
     ~azure.cognitiveservices.translatortext.models.TranslateResultAllItemTranslationsItemSentLen
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'transliteration': {'key': 'transliteration', 'type': 'TranslateResultAllItemTranslationsItemTransliteration'},
        'to': {'key': 'to', 'type': 'str'},
        'alignment': {'key': 'alignment', 'type': 'TranslateResultAllItemTranslationsItemAlignment'},
        'sent_len': {'key': 'sentLen', 'type': 'TranslateResultAllItemTranslationsItemSentLen'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllPropertiesItemsItem, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
        self.transliteration = kwargs.get('transliteration', None)
        self.to = kwargs.get('to', None)
        self.alignment = kwargs.get('alignment', None)
        self.sent_len = kwargs.get('sent_len', None)


class TranslateResultAllPropertiesItemsSentLenSrcSentLenItem(msrest.serialization.Model):
    """TranslateResultAllPropertiesItemsSentLenSrcSentLenItem.

    :param integer:
    :type integer: int
    """

    _attribute_map = {
        'integer': {'key': 'integer', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllPropertiesItemsSentLenSrcSentLenItem, self).__init__(**kwargs)
        self.integer = kwargs.get('integer', None)


class TranslateResultAllPropertiesItemsSentLenTransSentLenItem(msrest.serialization.Model):
    """TranslateResultAllPropertiesItemsSentLenTransSentLenItem.

    :param integer:
    :type integer: int
    """

    _attribute_map = {
        'integer': {'key': 'integer', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultAllPropertiesItemsSentLenTransSentLenItem, self).__init__(**kwargs)
        self.integer = kwargs.get('integer', None)


class TranslateResultItem(msrest.serialization.Model):
    """TranslateResultItem.

    :param translation:
    :type translation:
     list[~azure.cognitiveservices.translatortext.models.TranslateResultPropertiesItemsItem]
    """

    _attribute_map = {
        'translation': {'key': 'translation', 'type': '[TranslateResultPropertiesItemsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultItem, self).__init__(**kwargs)
        self.translation = kwargs.get('translation', None)


class TranslateResultPropertiesItemsItem(msrest.serialization.Model):
    """TranslateResultPropertiesItemsItem.

    :param text:
    :type text: str
    :param to:
    :type to: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'to': {'key': 'to', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateResultPropertiesItemsItem, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
        self.to = kwargs.get('to', None)


class TranslateTextInput(msrest.serialization.Model):
    """Text needed for a translate request.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TranslateTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)


class TransliterateResultItem(msrest.serialization.Model):
    """TransliterateResultItem.

    :param text:
    :type text: str
    :param script:
    :type script: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'script': {'key': 'script', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TransliterateResultItem, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
        self.script = kwargs.get('script', None)


class TransliterateTextInput(msrest.serialization.Model):
    """Text needed for a transliterate request.

    :param text:
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TransliterateTextInput, self).__init__(**kwargs)
        self.text = kwargs.get('text', None)
