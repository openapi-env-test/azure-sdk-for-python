# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Resource(Model):
    """The base model for Azure resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The ID of the resource
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The fully qualified type of the resource
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The base model for the tracked Azure resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The ID of the resource
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The fully qualified type of the resource
    :vartype type: str
    :param location: Required. The location of the resource
    :type location: str
    :param tags: The tags of the resource
    :type tags: dict[str, str]
    :param sku: Required. The SKU of the resource
    :type sku: ~azure.mgmt.engagementfabric.models.SKU
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'sku': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'SKU'},
    }

    def __init__(self, *, location: str, sku, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.sku = sku


class Account(TrackedResource):
    """The EngagementFabric account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The ID of the resource
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The fully qualified type of the resource
    :vartype type: str
    :param location: Required. The location of the resource
    :type location: str
    :param tags: The tags of the resource
    :type tags: dict[str, str]
    :param sku: Required. The SKU of the resource
    :type sku: ~azure.mgmt.engagementfabric.models.SKU
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'sku': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'SKU'},
    }

    def __init__(self, *, location: str, sku, tags=None, **kwargs) -> None:
        super(Account, self).__init__(location=location, tags=tags, sku=sku, **kwargs)


class AccountPatch(Model):
    """The patch of EngagementFabric account.

    :param tags: The tags of the resource
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, tags=None, **kwargs) -> None:
        super(AccountPatch, self).__init__(**kwargs)
        self.tags = tags


class ProxyOnlyResource(Resource):
    """The base model for the proxy-only Azure resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The ID of the resource
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The fully qualified type of the resource
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyOnlyResource, self).__init__(**kwargs)


class Channel(ProxyOnlyResource):
    """The EngagementFabric channel.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The ID of the resource
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The fully qualified type of the resource
    :vartype type: str
    :param channel_type: Required. The channel type
    :type channel_type: str
    :param channel_functions: The functions to be enabled for the channel
    :type channel_functions: list[str]
    :param credentials: The channel credentials
    :type credentials: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'channel_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'channel_type': {'key': 'properties.channelType', 'type': 'str'},
        'channel_functions': {'key': 'properties.channelFunctions', 'type': '[str]'},
        'credentials': {'key': 'properties.credentials', 'type': '{str}'},
    }

    def __init__(self, *, channel_type: str, channel_functions=None, credentials=None, **kwargs) -> None:
        super(Channel, self).__init__(**kwargs)
        self.channel_type = channel_type
        self.channel_functions = channel_functions
        self.credentials = credentials


class ChannelTypeDescription(Model):
    """EngagementFabric channel description.

    :param channel_type: Channel type
    :type channel_type: str
    :param channel_description: Text description for the channel
    :type channel_description: str
    :param channel_functions: All the available functions for the channel
    :type channel_functions: list[str]
    """

    _attribute_map = {
        'channel_type': {'key': 'channelType', 'type': 'str'},
        'channel_description': {'key': 'channelDescription', 'type': 'str'},
        'channel_functions': {'key': 'channelFunctions', 'type': '[str]'},
    }

    def __init__(self, *, channel_type: str=None, channel_description: str=None, channel_functions=None, **kwargs) -> None:
        super(ChannelTypeDescription, self).__init__(**kwargs)
        self.channel_type = channel_type
        self.channel_description = channel_description
        self.channel_functions = channel_functions


class ChannelTypeDescriptionList(Model):
    """List of the EngagementFabric channel descriptions.

    :param value: Channel descriptions
    :type value:
     list[~azure.mgmt.engagementfabric.models.ChannelTypeDescription]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ChannelTypeDescription]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ChannelTypeDescriptionList, self).__init__(**kwargs)
        self.value = value


class CheckNameAvailabilityParameter(Model):
    """The parameter for name availability check.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name to be checked
    :type name: str
    :param type: Required. The fully qualified resource type for the name to
     be checked
    :type type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str, type: str, **kwargs) -> None:
        super(CheckNameAvailabilityParameter, self).__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResult(Model):
    """The result of name availability check.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name_available: The name to be checked
    :vartype name_available: bool
    :ivar reason: The reason if name is unavailable. Possible values include:
     'Invalid', 'AlreadyExists'
    :vartype reason: str or
     ~azure.mgmt.engagementfabric.models.CheckNameUnavailableReason
    :ivar message: The message if name is unavailable
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudError(Model):
    """The default error response.

    :param error: Content of the error
    :type error: ~azure.mgmt.engagementfabric.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """Content of the default error response.

    :param code: The error code
    :type code: str
    :param message: The error message
    :type message: str
    :param target: The target of the particular error
    :type target: str
    :param details: The list of additional details
    :type details: list[~azure.mgmt.engagementfabric.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class KeyDescription(Model):
    """The description of the EngagementFabric account key.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: The name of the key
    :vartype name: str
    :ivar rank: The rank of the key. Possible values include: 'PrimaryKey',
     'SecondaryKey'
    :vartype rank: str or ~azure.mgmt.engagementfabric.models.KeyRank
    :ivar value: The value of the key
    :vartype value: str
    """

    _validation = {
        'name': {'readonly': True},
        'rank': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(KeyDescription, self).__init__(**kwargs)
        self.name = None
        self.rank = None
        self.value = None


class Operation(Model):
    """The EngagementFabric operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: The name of the EngagementFabric operation
    :vartype name: str
    :ivar display: The display content of the EngagementFabric operation
    :vartype display: ~azure.mgmt.engagementfabric.models.OperationDisplay
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(self, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = None


class OperationDisplay(Model):
    """The display information of the EngagementFabric operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: The resource provider namespace of the EngagementFabric
     operation
    :vartype provider: str
    :ivar resource: The resource type of the EngagementFabric operation
    :vartype resource: str
    :ivar operation: The name of the EngagementFabric operation
    :vartype operation: str
    :ivar description: The description of the EngagementFabric operation
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class RegenerateKeyParameter(Model):
    """The parameter to regenerate single EngagementFabric account key.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of key to be regenerated
    :type name: str
    :param rank: Required. The rank of the key to be regenerated. Possible
     values include: 'PrimaryKey', 'SecondaryKey'
    :type rank: str or ~azure.mgmt.engagementfabric.models.KeyRank
    """

    _validation = {
        'name': {'required': True},
        'rank': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'str'},
    }

    def __init__(self, *, name: str, rank, **kwargs) -> None:
        super(RegenerateKeyParameter, self).__init__(**kwargs)
        self.name = name
        self.rank = rank


class SKU(Model):
    """The EngagementFabric SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU
    :type name: str
    :param tier: The price tier of the SKU
    :type tier: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(self, *, name: str, tier: str=None, **kwargs) -> None:
        super(SKU, self).__init__(**kwargs)
        self.name = name
        self.tier = tier


class SkuDescription(Model):
    """The EngagementFabric SKU description of given resource type.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar resource_type: The fully qualified resource type
    :vartype resource_type: str
    :ivar name: The name of the SKU
    :vartype name: str
    :ivar tier: The price tier of the SKU
    :vartype tier: str
    :ivar locations: The set of locations that the SKU is available
    :vartype locations: list[str]
    :ivar location_info: Locations and zones
    :vartype location_info:
     list[~azure.mgmt.engagementfabric.models.SkuLocationInfoItem]
    :ivar restrictions: The restrictions because of which SKU cannot be used
    :vartype restrictions: list[object]
    """

    _validation = {
        'resource_type': {'readonly': True},
        'name': {'readonly': True},
        'tier': {'readonly': True},
        'locations': {'readonly': True},
        'location_info': {'readonly': True},
        'restrictions': {'readonly': True},
    }

    _attribute_map = {
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'location_info': {'key': 'locationInfo', 'type': '[SkuLocationInfoItem]'},
        'restrictions': {'key': 'restrictions', 'type': '[object]'},
    }

    def __init__(self, **kwargs) -> None:
        super(SkuDescription, self).__init__(**kwargs)
        self.resource_type = None
        self.name = None
        self.tier = None
        self.locations = None
        self.location_info = None
        self.restrictions = None


class SkuLocationInfoItem(Model):
    """The Locations and zones info for SKU.

    :param location: The available location of the SKU
    :type location: str
    :param zones: The available zone of the SKU
    :type zones: list[str]
    """

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
    }

    def __init__(self, *, location: str=None, zones=None, **kwargs) -> None:
        super(SkuLocationInfoItem, self).__init__(**kwargs)
        self.location = location
        self.zones = zones
