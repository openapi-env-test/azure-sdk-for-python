# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._device_update_client_enums import *


class AccessCondition(msrest.serialization.Model):
    """Parameter group.

    :ivar if_none_match: Defines the If-None-Match condition. The operation will be performed only
     if the ETag on the server does not match this value.
    :vartype if_none_match: str
    """

    _attribute_map = {
        'if_none_match': {'key': 'If-None-Match', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        if_none_match: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword if_none_match: Defines the If-None-Match condition. The operation will be performed
         only if the ETag on the server does not match this value.
        :paramtype if_none_match: str
        """
        super(AccessCondition, self).__init__(**kwargs)
        self.if_none_match = if_none_match


class Deployment(msrest.serialization.Model):
    """Deployment metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar deployment_id: Required. The deployment identifier.
    :vartype deployment_id: str
    :ivar start_date_time: Required. The deployment start datetime.
    :vartype start_date_time: ~datetime.datetime
    :ivar update_id: Required. Update identity.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar group_id: Required. The group identity.
    :vartype group_id: str
    :ivar is_canceled: Boolean flag indicating whether the deployment was canceled.
    :vartype is_canceled: bool
    :ivar is_retried: Boolean flag indicating whether the deployment has been retried.
    :vartype is_retried: bool
    """

    _validation = {
        'deployment_id': {'required': True},
        'start_date_time': {'required': True},
        'update_id': {'required': True},
        'group_id': {'required': True},
    }

    _attribute_map = {
        'deployment_id': {'key': 'deploymentId', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'is_canceled': {'key': 'isCanceled', 'type': 'bool'},
        'is_retried': {'key': 'isRetried', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        deployment_id: str,
        start_date_time: datetime.datetime,
        update_id: "UpdateId",
        group_id: str,
        is_canceled: Optional[bool] = None,
        is_retried: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword deployment_id: Required. The deployment identifier.
        :paramtype deployment_id: str
        :keyword start_date_time: Required. The deployment start datetime.
        :paramtype start_date_time: ~datetime.datetime
        :keyword update_id: Required. Update identity.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword group_id: Required. The group identity.
        :paramtype group_id: str
        :keyword is_canceled: Boolean flag indicating whether the deployment was canceled.
        :paramtype is_canceled: bool
        :keyword is_retried: Boolean flag indicating whether the deployment has been retried.
        :paramtype is_retried: bool
        """
        super(Deployment, self).__init__(**kwargs)
        self.deployment_id = deployment_id
        self.start_date_time = start_date_time
        self.update_id = update_id
        self.group_id = group_id
        self.is_canceled = is_canceled
        self.is_retried = is_retried


class DeploymentDeviceState(msrest.serialization.Model):
    """Deployment device status.

    All required parameters must be populated in order to send to Azure.

    :ivar device_id: Required. Device identity.
    :vartype device_id: str
    :ivar module_id: Device module identity.
    :vartype module_id: str
    :ivar retry_count: Required. The number of times this deployment has been retried on this
     device.
    :vartype retry_count: int
    :ivar moved_on_to_new_deployment: Required. Boolean flag indicating whether this device is in a
     newer deployment and can no longer retry this deployment.
    :vartype moved_on_to_new_deployment: bool
    :ivar device_state: Required. Deployment device state. Possible values include: "Succeeded",
     "InProgress", "Failed", "Canceled", "Incompatible".
    :vartype device_state: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
    """

    _validation = {
        'device_id': {'required': True},
        'retry_count': {'required': True},
        'moved_on_to_new_deployment': {'required': True},
        'device_state': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'retry_count': {'key': 'retryCount', 'type': 'int'},
        'moved_on_to_new_deployment': {'key': 'movedOnToNewDeployment', 'type': 'bool'},
        'device_state': {'key': 'deviceState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        device_id: str,
        retry_count: int,
        moved_on_to_new_deployment: bool,
        device_state: Union[str, "DeviceDeploymentState"],
        module_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword device_id: Required. Device identity.
        :paramtype device_id: str
        :keyword module_id: Device module identity.
        :paramtype module_id: str
        :keyword retry_count: Required. The number of times this deployment has been retried on this
         device.
        :paramtype retry_count: int
        :keyword moved_on_to_new_deployment: Required. Boolean flag indicating whether this device is
         in a newer deployment and can no longer retry this deployment.
        :paramtype moved_on_to_new_deployment: bool
        :keyword device_state: Required. Deployment device state. Possible values include: "Succeeded",
         "InProgress", "Failed", "Canceled", "Incompatible".
        :paramtype device_state: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
        """
        super(DeploymentDeviceState, self).__init__(**kwargs)
        self.device_id = device_id
        self.module_id = module_id
        self.retry_count = retry_count
        self.moved_on_to_new_deployment = moved_on_to_new_deployment
        self.device_state = device_state


class DeploymentDeviceStatesFilter(msrest.serialization.Model):
    """Deployment device state filter.

    :ivar device_id: Device Identifier.
    :vartype device_id: str
    :ivar module_id: Device module Identifier.
    :vartype module_id: str
    :ivar device_state: The deployment device state. Possible values include: "NotStarted",
     "Incompatible", "AlreadyInDeployment", "Canceled", "InProgress", "Failed", "Succeeded".
    :vartype device_state: str or ~azure.iot.deviceupdate.models.DeviceState
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'device_state': {'key': 'deviceState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        device_id: Optional[str] = None,
        module_id: Optional[str] = None,
        device_state: Optional[Union[str, "DeviceState"]] = None,
        **kwargs
    ):
        """
        :keyword device_id: Device Identifier.
        :paramtype device_id: str
        :keyword module_id: Device module Identifier.
        :paramtype module_id: str
        :keyword device_state: The deployment device state. Possible values include: "NotStarted",
         "Incompatible", "AlreadyInDeployment", "Canceled", "InProgress", "Failed", "Succeeded".
        :paramtype device_state: str or ~azure.iot.deviceupdate.models.DeviceState
        """
        super(DeploymentDeviceStatesFilter, self).__init__(**kwargs)
        self.device_id = device_id
        self.module_id = module_id
        self.device_state = device_state


class DeploymentDeviceStatesList(msrest.serialization.Model):
    """The list of deployment device states.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.DeploymentDeviceState]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeploymentDeviceState]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DeploymentDeviceState"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.DeploymentDeviceState]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DeploymentDeviceStatesList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeploymentFilter(msrest.serialization.Model):
    """Deployment filter.

    :ivar provider: Update provider.
    :vartype provider: str
    :ivar name: Update name.
    :vartype name: str
    :ivar version: Update version.
    :vartype version: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Update provider.
        :paramtype provider: str
        :keyword name: Update name.
        :paramtype name: str
        :keyword version: Update version.
        :paramtype version: str
        """
        super(DeploymentFilter, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version


class DeploymentsList(msrest.serialization.Model):
    """The list of deployments.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.Deployment]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Deployment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Deployment"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.Deployment]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DeploymentsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeploymentStatus(msrest.serialization.Model):
    """Deployment status metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar deployment_state: Required. The state of the deployment. Possible values include:
     "Active", "Inactive", "Canceled".
    :vartype deployment_state: str or ~azure.iot.deviceupdate.models.DeploymentState
    :ivar total_devices: The total number of devices in the deployment.
    :vartype total_devices: int
    :ivar devices_in_progress_count: The number of devices that are currently in deployment.
    :vartype devices_in_progress_count: int
    :ivar devices_completed_failed_count: The number of devices that have completed deployment with
     a failure.
    :vartype devices_completed_failed_count: int
    :ivar devices_completed_succeeded_count: The number of devices which have successfully
     completed deployment.
    :vartype devices_completed_succeeded_count: int
    :ivar devices_canceled_count: The number of devices which have had their deployment canceled.
    :vartype devices_canceled_count: int
    """

    _validation = {
        'deployment_state': {'required': True},
    }

    _attribute_map = {
        'deployment_state': {'key': 'deploymentState', 'type': 'str'},
        'total_devices': {'key': 'totalDevices', 'type': 'int'},
        'devices_in_progress_count': {'key': 'devicesInProgressCount', 'type': 'int'},
        'devices_completed_failed_count': {'key': 'devicesCompletedFailedCount', 'type': 'int'},
        'devices_completed_succeeded_count': {'key': 'devicesCompletedSucceededCount', 'type': 'int'},
        'devices_canceled_count': {'key': 'devicesCanceledCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        deployment_state: Union[str, "DeploymentState"],
        total_devices: Optional[int] = None,
        devices_in_progress_count: Optional[int] = None,
        devices_completed_failed_count: Optional[int] = None,
        devices_completed_succeeded_count: Optional[int] = None,
        devices_canceled_count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword deployment_state: Required. The state of the deployment. Possible values include:
         "Active", "Inactive", "Canceled".
        :paramtype deployment_state: str or ~azure.iot.deviceupdate.models.DeploymentState
        :keyword total_devices: The total number of devices in the deployment.
        :paramtype total_devices: int
        :keyword devices_in_progress_count: The number of devices that are currently in deployment.
        :paramtype devices_in_progress_count: int
        :keyword devices_completed_failed_count: The number of devices that have completed deployment
         with a failure.
        :paramtype devices_completed_failed_count: int
        :keyword devices_completed_succeeded_count: The number of devices which have successfully
         completed deployment.
        :paramtype devices_completed_succeeded_count: int
        :keyword devices_canceled_count: The number of devices which have had their deployment
         canceled.
        :paramtype devices_canceled_count: int
        """
        super(DeploymentStatus, self).__init__(**kwargs)
        self.deployment_state = deployment_state
        self.total_devices = total_devices
        self.devices_in_progress_count = devices_in_progress_count
        self.devices_completed_failed_count = devices_completed_failed_count
        self.devices_completed_succeeded_count = devices_completed_succeeded_count
        self.devices_canceled_count = devices_canceled_count


class Device(msrest.serialization.Model):
    """Device metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar device_id: Required. Device identity.
    :vartype device_id: str
    :ivar module_id: Device module identity.
    :vartype module_id: str
    :ivar device_class_id: Required. Device class identity.
    :vartype device_class_id: str
    :ivar manufacturer: Required. Device manufacturer.
    :vartype manufacturer: str
    :ivar model: Required. Device model.
    :vartype model: str
    :ivar group_id: Device group identity.
    :vartype group_id: str
    :ivar last_attempted_update_id: Update identity.
    :vartype last_attempted_update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar deployment_status: State of the device in its last deployment. Possible values include:
     "Succeeded", "InProgress", "Failed", "Canceled", "Incompatible".
    :vartype deployment_status: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
    :ivar installed_update_id: Update identity.
    :vartype installed_update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar on_latest_update: Required. Boolean flag indicating whether the latest update is
     installed on the device.
    :vartype on_latest_update: bool
    :ivar last_deployment_id: The deployment identifier for the last deployment to the device.
    :vartype last_deployment_id: str
    :ivar last_install_result: Last install result.
    :vartype last_install_result: ~azure.iot.deviceupdate.models.InstallResult
    """

    _validation = {
        'device_id': {'required': True},
        'device_class_id': {'required': True},
        'manufacturer': {'required': True},
        'model': {'required': True},
        'on_latest_update': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'last_attempted_update_id': {'key': 'lastAttemptedUpdateId', 'type': 'UpdateId'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'str'},
        'installed_update_id': {'key': 'installedUpdateId', 'type': 'UpdateId'},
        'on_latest_update': {'key': 'onLatestUpdate', 'type': 'bool'},
        'last_deployment_id': {'key': 'lastDeploymentId', 'type': 'str'},
        'last_install_result': {'key': 'lastInstallResult', 'type': 'InstallResult'},
    }

    def __init__(
        self,
        *,
        device_id: str,
        device_class_id: str,
        manufacturer: str,
        model: str,
        on_latest_update: bool,
        module_id: Optional[str] = None,
        group_id: Optional[str] = None,
        last_attempted_update_id: Optional["UpdateId"] = None,
        deployment_status: Optional[Union[str, "DeviceDeploymentState"]] = None,
        installed_update_id: Optional["UpdateId"] = None,
        last_deployment_id: Optional[str] = None,
        last_install_result: Optional["InstallResult"] = None,
        **kwargs
    ):
        """
        :keyword device_id: Required. Device identity.
        :paramtype device_id: str
        :keyword module_id: Device module identity.
        :paramtype module_id: str
        :keyword device_class_id: Required. Device class identity.
        :paramtype device_class_id: str
        :keyword manufacturer: Required. Device manufacturer.
        :paramtype manufacturer: str
        :keyword model: Required. Device model.
        :paramtype model: str
        :keyword group_id: Device group identity.
        :paramtype group_id: str
        :keyword last_attempted_update_id: Update identity.
        :paramtype last_attempted_update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword deployment_status: State of the device in its last deployment. Possible values
         include: "Succeeded", "InProgress", "Failed", "Canceled", "Incompatible".
        :paramtype deployment_status: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
        :keyword installed_update_id: Update identity.
        :paramtype installed_update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword on_latest_update: Required. Boolean flag indicating whether the latest update is
         installed on the device.
        :paramtype on_latest_update: bool
        :keyword last_deployment_id: The deployment identifier for the last deployment to the device.
        :paramtype last_deployment_id: str
        :keyword last_install_result: Last install result.
        :paramtype last_install_result: ~azure.iot.deviceupdate.models.InstallResult
        """
        super(Device, self).__init__(**kwargs)
        self.device_id = device_id
        self.module_id = module_id
        self.device_class_id = device_class_id
        self.manufacturer = manufacturer
        self.model = model
        self.group_id = group_id
        self.last_attempted_update_id = last_attempted_update_id
        self.deployment_status = deployment_status
        self.installed_update_id = installed_update_id
        self.on_latest_update = on_latest_update
        self.last_deployment_id = last_deployment_id
        self.last_install_result = last_install_result


class DeviceClass(msrest.serialization.Model):
    """Device class metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar device_class_id: Required. The device class identifier.
    :vartype device_class_id: str
    :ivar compat_properties: Required. The compat properties of the device class. This object can
     be thought of as a set of key-value pairs where the key is the name of the compatibility
     property and the value is the value of the compatibility property. There will always be at
     least 1 compat property.
    :vartype compat_properties: dict[str, str]
    :ivar best_compatible_update_id: Required. Update identity.
    :vartype best_compatible_update_id: ~azure.iot.deviceupdate.models.UpdateId
    """

    _validation = {
        'device_class_id': {'required': True},
        'compat_properties': {'required': True},
        'best_compatible_update_id': {'required': True},
    }

    _attribute_map = {
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
        'compat_properties': {'key': 'compatProperties', 'type': '{str}'},
        'best_compatible_update_id': {'key': 'bestCompatibleUpdateId', 'type': 'UpdateId'},
    }

    def __init__(
        self,
        *,
        device_class_id: str,
        compat_properties: Dict[str, str],
        best_compatible_update_id: "UpdateId",
        **kwargs
    ):
        """
        :keyword device_class_id: Required. The device class identifier.
        :paramtype device_class_id: str
        :keyword compat_properties: Required. The compat properties of the device class. This object
         can be thought of as a set of key-value pairs where the key is the name of the compatibility
         property and the value is the value of the compatibility property. There will always be at
         least 1 compat property.
        :paramtype compat_properties: dict[str, str]
        :keyword best_compatible_update_id: Required. Update identity.
        :paramtype best_compatible_update_id: ~azure.iot.deviceupdate.models.UpdateId
        """
        super(DeviceClass, self).__init__(**kwargs)
        self.device_class_id = device_class_id
        self.compat_properties = compat_properties
        self.best_compatible_update_id = best_compatible_update_id


class DeviceClassesList(msrest.serialization.Model):
    """The list of device classes.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.DeviceClass]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceClass]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DeviceClass"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.DeviceClass]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DeviceClassesList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceFilter(msrest.serialization.Model):
    """Operation status filter.

    :ivar group_id: Device group identity.
    :vartype group_id: str
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        group_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword group_id: Device group identity.
        :paramtype group_id: str
        """
        super(DeviceFilter, self).__init__(**kwargs)
        self.group_id = group_id


class DeviceOperation(msrest.serialization.Model):
    """Operation metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: Required. Operation Id.
    :vartype operation_id: str
    :ivar status: Required. Operation status. Possible values include: "Undefined", "NotStarted",
     "Running", "Succeeded", "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar error: Operation error encountered, if any.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar trace_id: Operation correlation identity that can used by Microsoft Support for
     troubleshooting.
    :vartype trace_id: str
    :ivar last_action_date_time: Required. Date and time in UTC when the operation status was last
     updated.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar created_date_time: Required. Date and time in UTC when the operation was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Operation ETag.
    :vartype etag: str
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'last_action_date_time': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'trace_id': {'key': 'traceId', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_id: str,
        status: Union[str, "OperationStatus"],
        last_action_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        error: Optional["Error"] = None,
        trace_id: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_id: Required. Operation Id.
        :paramtype operation_id: str
        :keyword status: Required. Operation status. Possible values include: "Undefined",
         "NotStarted", "Running", "Succeeded", "Failed".
        :paramtype status: str or ~azure.iot.deviceupdate.models.OperationStatus
        :keyword error: Operation error encountered, if any.
        :paramtype error: ~azure.iot.deviceupdate.models.Error
        :keyword trace_id: Operation correlation identity that can used by Microsoft Support for
         troubleshooting.
        :paramtype trace_id: str
        :keyword last_action_date_time: Required. Date and time in UTC when the operation status was
         last updated.
        :paramtype last_action_date_time: ~datetime.datetime
        :keyword created_date_time: Required. Date and time in UTC when the operation was created.
        :paramtype created_date_time: ~datetime.datetime
        :keyword etag: Operation ETag.
        :paramtype etag: str
        """
        super(DeviceOperation, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.error = error
        self.trace_id = trace_id
        self.last_action_date_time = last_action_date_time
        self.created_date_time = created_date_time
        self.etag = etag


class DeviceOperationsList(msrest.serialization.Model):
    """The list of device operations with server paging support.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.DeviceOperation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceOperation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DeviceOperation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.DeviceOperation]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DeviceOperationsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DevicesList(msrest.serialization.Model):
    """The list of devices.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.Device]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Device]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Device"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.Device]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DevicesList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceTag(msrest.serialization.Model):
    """Device tag properties.

    All required parameters must be populated in order to send to Azure.

    :ivar tag_name: Required. Tag name.
    :vartype tag_name: str
    :ivar device_count: Required. Number of devices with this tag.
    :vartype device_count: int
    """

    _validation = {
        'tag_name': {'required': True},
        'device_count': {'required': True},
    }

    _attribute_map = {
        'tag_name': {'key': 'tagName', 'type': 'str'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        tag_name: str,
        device_count: int,
        **kwargs
    ):
        """
        :keyword tag_name: Required. Tag name.
        :paramtype tag_name: str
        :keyword device_count: Required. Number of devices with this tag.
        :paramtype device_count: int
        """
        super(DeviceTag, self).__init__(**kwargs)
        self.tag_name = tag_name
        self.device_count = device_count


class DeviceTagsList(msrest.serialization.Model):
    """The list of device tags.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.DeviceTag]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceTag]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DeviceTag"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.DeviceTag]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(DeviceTagsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceUpdateAgentId(msrest.serialization.Model):
    """Device Update agent id.

    All required parameters must be populated in order to send to Azure.

    :ivar device_id: Required. Device Id.
    :vartype device_id: str
    :ivar module_id: Module Id.
    :vartype module_id: str
    """

    _validation = {
        'device_id': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        device_id: str,
        module_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword device_id: Required. Device Id.
        :paramtype device_id: str
        :keyword module_id: Module Id.
        :paramtype module_id: str
        """
        super(DeviceUpdateAgentId, self).__init__(**kwargs)
        self.device_id = device_id
        self.module_id = module_id


class Error(msrest.serialization.Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. Server defined error code.
    :vartype code: str
    :ivar message: Required. A human-readable representation of the error.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of errors that led to the reported error.
    :vartype details: list[~azure.iot.deviceupdate.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.iot.deviceupdate.models.InnerError
    :ivar occurred_date_time: Date and time in UTC when the error occurred.
    :vartype occurred_date_time: ~datetime.datetime
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'occurred_date_time': {'key': 'occurredDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerError"] = None,
        occurred_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword code: Required. Server defined error code.
        :paramtype code: str
        :keyword message: Required. A human-readable representation of the error.
        :paramtype message: str
        :keyword target: The target of the error.
        :paramtype target: str
        :keyword details: An array of errors that led to the reported error.
        :paramtype details: list[~azure.iot.deviceupdate.models.Error]
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.iot.deviceupdate.models.InnerError
        :keyword occurred_date_time: Date and time in UTC when the error occurred.
        :paramtype occurred_date_time: ~datetime.datetime
        """
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
        self.occurred_date_time = occurred_date_time


class ErrorResponse(msrest.serialization.Model):
    """Common error response.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The error details.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: "Error",
        **kwargs
    ):
        """
        :keyword error: Required. The error details.
        :paramtype error: ~azure.iot.deviceupdate.models.Error
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class FileImportMetadata(msrest.serialization.Model):
    """Metadata describing an update file.

    All required parameters must be populated in order to send to Azure.

    :ivar filename: Required. Update file name as specified inside import manifest.
    :vartype filename: str
    :ivar url: Required. Azure Blob location from which the update file can be downloaded by Device
     Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set
     to at least 4 hours.
    :vartype url: str
    """

    _validation = {
        'filename': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'filename': {'key': 'filename', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        filename: str,
        url: str,
        **kwargs
    ):
        """
        :keyword filename: Required. Update file name as specified inside import manifest.
        :paramtype filename: str
        :keyword url: Required. Azure Blob location from which the update file can be downloaded by
         Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an
         expiration set to at least 4 hours.
        :paramtype url: str
        """
        super(FileImportMetadata, self).__init__(**kwargs)
        self.filename = filename
        self.url = url


class Group(msrest.serialization.Model):
    """Group details.

    All required parameters must be populated in order to send to Azure.

    :ivar group_id: Required. Group identity.
    :vartype group_id: str
    :ivar group_type: Required. Group type. Possible values include: "DeviceClassIdAndIoTHubTag",
     "InvalidDeviceClassIdAndIoTHubTag", "DefaultDeviceClassId".
    :vartype group_type: str or ~azure.iot.deviceupdate.models.GroupType
    :ivar tags: Required. A set of tags. IoT Hub tags.
    :vartype tags: list[str]
    :ivar created_date_time: Required. Date and time when the update was created.
    :vartype created_date_time: str
    :ivar device_count: The number of devices in the group.
    :vartype device_count: int
    :ivar deployment_id: The deployment Id for the group.
    :vartype deployment_id: str
    :ivar device_class_id: The device class Id for the group.
    :vartype device_class_id: str
    """

    _validation = {
        'group_id': {'required': True},
        'group_type': {'required': True},
        'tags': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
        'deployment_id': {'key': 'deploymentId', 'type': 'str'},
        'device_class_id': {'key': 'deviceClassId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        group_id: str,
        group_type: Union[str, "GroupType"],
        tags: List[str],
        created_date_time: str,
        device_count: Optional[int] = None,
        deployment_id: Optional[str] = None,
        device_class_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword group_id: Required. Group identity.
        :paramtype group_id: str
        :keyword group_type: Required. Group type. Possible values include:
         "DeviceClassIdAndIoTHubTag", "InvalidDeviceClassIdAndIoTHubTag", "DefaultDeviceClassId".
        :paramtype group_type: str or ~azure.iot.deviceupdate.models.GroupType
        :keyword tags: Required. A set of tags. IoT Hub tags.
        :paramtype tags: list[str]
        :keyword created_date_time: Required. Date and time when the update was created.
        :paramtype created_date_time: str
        :keyword device_count: The number of devices in the group.
        :paramtype device_count: int
        :keyword deployment_id: The deployment Id for the group.
        :paramtype deployment_id: str
        :keyword device_class_id: The device class Id for the group.
        :paramtype device_class_id: str
        """
        super(Group, self).__init__(**kwargs)
        self.group_id = group_id
        self.group_type = group_type
        self.tags = tags
        self.created_date_time = created_date_time
        self.device_count = device_count
        self.deployment_id = deployment_id
        self.device_class_id = device_class_id


class GroupBestUpdatesFilter(msrest.serialization.Model):
    """Group best updates filter.

    :ivar provider: Update provider.
    :vartype provider: str
    :ivar name: Update name.
    :vartype name: str
    :ivar version: Update version.
    :vartype version: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Update provider.
        :paramtype provider: str
        :keyword name: Update name.
        :paramtype name: str
        :keyword version: Update version.
        :paramtype version: str
        """
        super(GroupBestUpdatesFilter, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version


class GroupsList(msrest.serialization.Model):
    """The list of groups.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.Group]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Group]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Group"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.Group]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(GroupsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ImportManifestMetadata(msrest.serialization.Model):
    """Metadata describing the import manifest, a document which describes the files and other metadata about an update version.

    All required parameters must be populated in order to send to Azure.

    :ivar url: Required. Azure Blob location from which the import manifest can be downloaded by
     Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an
     expiration set to at least 4 hours.
    :vartype url: str
    :ivar size_in_bytes: Required. File size in number of bytes.
    :vartype size_in_bytes: long
    :ivar hashes: Required. A JSON object containing the hash(es) of the file. At least SHA256 hash
     is required. This object can be thought of as a set of key-value pairs where the key is the
     hash algorithm, and the value is the hash of the file calculated using that algorithm.
    :vartype hashes: dict[str, str]
    """

    _validation = {
        'url': {'required': True},
        'size_in_bytes': {'required': True},
        'hashes': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'size_in_bytes': {'key': 'sizeInBytes', 'type': 'long'},
        'hashes': {'key': 'hashes', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        url: str,
        size_in_bytes: int,
        hashes: Dict[str, str],
        **kwargs
    ):
        """
        :keyword url: Required. Azure Blob location from which the import manifest can be downloaded by
         Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an
         expiration set to at least 4 hours.
        :paramtype url: str
        :keyword size_in_bytes: Required. File size in number of bytes.
        :paramtype size_in_bytes: long
        :keyword hashes: Required. A JSON object containing the hash(es) of the file. At least SHA256
         hash is required. This object can be thought of as a set of key-value pairs where the key is
         the hash algorithm, and the value is the hash of the file calculated using that algorithm.
        :paramtype hashes: dict[str, str]
        """
        super(ImportManifestMetadata, self).__init__(**kwargs)
        self.url = url
        self.size_in_bytes = size_in_bytes
        self.hashes = hashes


class ImportUpdateInputItem(msrest.serialization.Model):
    """Import update input item metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar import_manifest: Required. Import manifest metadata like source URL, file size/hashes,
     etc.
    :vartype import_manifest: ~azure.iot.deviceupdate.models.ImportManifestMetadata
    :ivar friendly_name: Friendly update name.
    :vartype friendly_name: str
    :ivar files: One or more update file properties like filename and source URL.
    :vartype files: list[~azure.iot.deviceupdate.models.FileImportMetadata]
    """

    _validation = {
        'import_manifest': {'required': True},
        'friendly_name': {'max_length': 512, 'min_length': 1},
        'files': {'max_items': 5, 'min_items': 1},
    }

    _attribute_map = {
        'import_manifest': {'key': 'importManifest', 'type': 'ImportManifestMetadata'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
        'files': {'key': 'files', 'type': '[FileImportMetadata]'},
    }

    def __init__(
        self,
        *,
        import_manifest: "ImportManifestMetadata",
        friendly_name: Optional[str] = None,
        files: Optional[List["FileImportMetadata"]] = None,
        **kwargs
    ):
        """
        :keyword import_manifest: Required. Import manifest metadata like source URL, file size/hashes,
         etc.
        :paramtype import_manifest: ~azure.iot.deviceupdate.models.ImportManifestMetadata
        :keyword friendly_name: Friendly update name.
        :paramtype friendly_name: str
        :keyword files: One or more update file properties like filename and source URL.
        :paramtype files: list[~azure.iot.deviceupdate.models.FileImportMetadata]
        """
        super(ImportUpdateInputItem, self).__init__(**kwargs)
        self.import_manifest = import_manifest
        self.friendly_name = friendly_name
        self.files = files


class InnerError(msrest.serialization.Model):
    """An object containing more specific information than the current object about the error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. A more specific error code than what was provided by the containing
     error.
    :vartype code: str
    :ivar message: A human-readable representation of the error.
    :vartype message: str
    :ivar error_detail: The internal error or exception message.
    :vartype error_detail: str
    :ivar inner_error: An object containing more specific information than the current object about
     the error.
    :vartype inner_error: ~azure.iot.deviceupdate.models.InnerError
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'error_detail': {'key': 'errorDetail', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'InnerError'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: Optional[str] = None,
        error_detail: Optional[str] = None,
        inner_error: Optional["InnerError"] = None,
        **kwargs
    ):
        """
        :keyword code: Required. A more specific error code than what was provided by the containing
         error.
        :paramtype code: str
        :keyword message: A human-readable representation of the error.
        :paramtype message: str
        :keyword error_detail: The internal error or exception message.
        :paramtype error_detail: str
        :keyword inner_error: An object containing more specific information than the current object
         about the error.
        :paramtype inner_error: ~azure.iot.deviceupdate.models.InnerError
        """
        super(InnerError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.error_detail = error_detail
        self.inner_error = inner_error


class InstallResult(msrest.serialization.Model):
    """The install result of an update and any step results under it.

    All required parameters must be populated in order to send to Azure.

    :ivar result_code: Required. Install result code.
    :vartype result_code: int
    :ivar extended_result_code: Required. Install extended result code.
    :vartype extended_result_code: int
    :ivar result_details: A string containing further details about the install result.
    :vartype result_details: str
    :ivar step_results: Array of step results.
    :vartype step_results: list[~azure.iot.deviceupdate.models.StepResult]
    """

    _validation = {
        'result_code': {'required': True},
        'extended_result_code': {'required': True},
    }

    _attribute_map = {
        'result_code': {'key': 'resultCode', 'type': 'int'},
        'extended_result_code': {'key': 'extendedResultCode', 'type': 'int'},
        'result_details': {'key': 'resultDetails', 'type': 'str'},
        'step_results': {'key': 'stepResults', 'type': '[StepResult]'},
    }

    def __init__(
        self,
        *,
        result_code: int,
        extended_result_code: int,
        result_details: Optional[str] = None,
        step_results: Optional[List["StepResult"]] = None,
        **kwargs
    ):
        """
        :keyword result_code: Required. Install result code.
        :paramtype result_code: int
        :keyword extended_result_code: Required. Install extended result code.
        :paramtype extended_result_code: int
        :keyword result_details: A string containing further details about the install result.
        :paramtype result_details: str
        :keyword step_results: Array of step results.
        :paramtype step_results: list[~azure.iot.deviceupdate.models.StepResult]
        """
        super(InstallResult, self).__init__(**kwargs)
        self.result_code = result_code
        self.extended_result_code = extended_result_code
        self.result_details = result_details
        self.step_results = step_results


class Instructions(msrest.serialization.Model):
    """Instructions.

    All required parameters must be populated in order to send to Azure.

    :ivar steps: Required. Collection of installation steps.
    :vartype steps: list[~azure.iot.deviceupdate.models.Step]
    """

    _validation = {
        'steps': {'required': True, 'max_items': 10, 'min_items': 1},
    }

    _attribute_map = {
        'steps': {'key': 'steps', 'type': '[Step]'},
    }

    def __init__(
        self,
        *,
        steps: List["Step"],
        **kwargs
    ):
        """
        :keyword steps: Required. Collection of installation steps.
        :paramtype steps: list[~azure.iot.deviceupdate.models.Step]
        """
        super(Instructions, self).__init__(**kwargs)
        self.steps = steps


class LogCollectionOperation(msrest.serialization.Model):
    """Diagnostics request body.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: The diagnostics operation id.
    :vartype operation_id: str
    :ivar device_list: Required. Array of Device Update agent ids.
    :vartype device_list: list[~azure.iot.deviceupdate.models.DeviceUpdateAgentId]
    :ivar description: Description of the diagnostics operation.
    :vartype description: str
    :ivar created_date_time: The timestamp when the operation was created.
    :vartype created_date_time: str
    :ivar last_action_date_time: A timestamp for when the current state was entered.
    :vartype last_action_date_time: str
    :ivar status: Operation status. Possible values include: "Undefined", "NotStarted", "Running",
     "Succeeded", "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    """

    _validation = {
        'device_list': {'required': True},
        'description': {'max_length': 512, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'device_list': {'key': 'deviceList', 'type': '[DeviceUpdateAgentId]'},
        'description': {'key': 'description', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        device_list: List["DeviceUpdateAgentId"],
        operation_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_id: The diagnostics operation id.
        :paramtype operation_id: str
        :keyword device_list: Required. Array of Device Update agent ids.
        :paramtype device_list: list[~azure.iot.deviceupdate.models.DeviceUpdateAgentId]
        :keyword description: Description of the diagnostics operation.
        :paramtype description: str
        """
        super(LogCollectionOperation, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.device_list = device_list
        self.description = description
        self.created_date_time = None
        self.last_action_date_time = None
        self.status = None


class LogCollectionOperationDetailedStatus(msrest.serialization.Model):
    """Device diagnostics operation detailed status.

    :ivar operation_id: The device diagnostics operation id.
    :vartype operation_id: str
    :ivar created_date_time: The timestamp when the operation was created.
    :vartype created_date_time: str
    :ivar last_action_date_time: A timestamp for when the current state was entered.
    :vartype last_action_date_time: str
    :ivar status: Operation status. Possible values include: "Undefined", "NotStarted", "Running",
     "Succeeded", "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar device_status: Status of the devices in the operation.
    :vartype device_status: list[~azure.iot.deviceupdate.models.LogCollectionOperationDeviceStatus]
    :ivar description: Device diagnostics operation description.
    :vartype description: str
    """

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'device_status': {'key': 'deviceStatus', 'type': '[LogCollectionOperationDeviceStatus]'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_id: Optional[str] = None,
        created_date_time: Optional[str] = None,
        last_action_date_time: Optional[str] = None,
        status: Optional[Union[str, "OperationStatus"]] = None,
        device_status: Optional[List["LogCollectionOperationDeviceStatus"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_id: The device diagnostics operation id.
        :paramtype operation_id: str
        :keyword created_date_time: The timestamp when the operation was created.
        :paramtype created_date_time: str
        :keyword last_action_date_time: A timestamp for when the current state was entered.
        :paramtype last_action_date_time: str
        :keyword status: Operation status. Possible values include: "Undefined", "NotStarted",
         "Running", "Succeeded", "Failed".
        :paramtype status: str or ~azure.iot.deviceupdate.models.OperationStatus
        :keyword device_status: Status of the devices in the operation.
        :paramtype device_status:
         list[~azure.iot.deviceupdate.models.LogCollectionOperationDeviceStatus]
        :keyword description: Device diagnostics operation description.
        :paramtype description: str
        """
        super(LogCollectionOperationDetailedStatus, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.created_date_time = created_date_time
        self.last_action_date_time = last_action_date_time
        self.status = status
        self.device_status = device_status
        self.description = description


class LogCollectionOperationDetailedStatusList(msrest.serialization.Model):
    """The list of diagnostics operations with detailed status, with server paging support.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.LogCollectionOperationDetailedStatus]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LogCollectionOperationDetailedStatus]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["LogCollectionOperationDetailedStatus"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.LogCollectionOperationDetailedStatus]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(LogCollectionOperationDetailedStatusList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class LogCollectionOperationDeviceStatus(msrest.serialization.Model):
    """Diagnostics operation device status.

    All required parameters must be populated in order to send to Azure.

    :ivar device_id: Required. Device id.
    :vartype device_id: str
    :ivar module_id: Module id.
    :vartype module_id: str
    :ivar status: Required. Log upload status. Possible values include: "Undefined", "NotStarted",
     "Running", "Succeeded", "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar result_code: Log upload result code.
    :vartype result_code: str
    :ivar extended_result_code: Log upload extended result code.
    :vartype extended_result_code: str
    :ivar log_location: Log upload location.
    :vartype log_location: str
    """

    _validation = {
        'device_id': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
        'extended_result_code': {'key': 'extendedResultCode', 'type': 'str'},
        'log_location': {'key': 'logLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        device_id: str,
        status: Union[str, "OperationStatus"],
        module_id: Optional[str] = None,
        result_code: Optional[str] = None,
        extended_result_code: Optional[str] = None,
        log_location: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword device_id: Required. Device id.
        :paramtype device_id: str
        :keyword module_id: Module id.
        :paramtype module_id: str
        :keyword status: Required. Log upload status. Possible values include: "Undefined",
         "NotStarted", "Running", "Succeeded", "Failed".
        :paramtype status: str or ~azure.iot.deviceupdate.models.OperationStatus
        :keyword result_code: Log upload result code.
        :paramtype result_code: str
        :keyword extended_result_code: Log upload extended result code.
        :paramtype extended_result_code: str
        :keyword log_location: Log upload location.
        :paramtype log_location: str
        """
        super(LogCollectionOperationDeviceStatus, self).__init__(**kwargs)
        self.device_id = device_id
        self.module_id = module_id
        self.status = status
        self.result_code = result_code
        self.extended_result_code = extended_result_code
        self.log_location = log_location


class LogCollectionOperationList(msrest.serialization.Model):
    """The list of diagnostics operations with server paging support.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.LogCollectionOperation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LogCollectionOperation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["LogCollectionOperation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.LogCollectionOperation]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(LogCollectionOperationList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationFilter(msrest.serialization.Model):
    """Operation status filter.

    :ivar status: Operation status filter. Possible values include: "Running", "NotStarted".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationFilterStatus
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "OperationFilterStatus"]] = None,
        **kwargs
    ):
        """
        :keyword status: Operation status filter. Possible values include: "Running", "NotStarted".
        :paramtype status: str or ~azure.iot.deviceupdate.models.OperationFilterStatus
        """
        super(OperationFilter, self).__init__(**kwargs)
        self.status = status


class Step(msrest.serialization.Model):
    """Update install instruction step.

    :ivar type: Step type. Possible values include: "Inline", "Reference". Default value: "inline".
    :vartype type: str or ~azure.iot.deviceupdate.models.StepType
    :ivar description: Step description.
    :vartype description: str
    :ivar handler: Identity of handler that will execute this step. Required if step type is
     inline.
    :vartype handler: str
    :ivar handler_properties: Parameters to be passed to handler during execution.
    :vartype handler_properties: any
    :ivar files: Collection of file names to be passed to handler during execution. Required if
     step type is inline.
    :vartype files: list[str]
    :ivar update_id: Referenced child update identity.  Required if step type is reference.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    """

    _validation = {
        'description': {'max_length': 64, 'min_length': 1},
        'handler': {'max_length': 32, 'min_length': 1},
        'files': {'max_items': 5, 'min_items': 1},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'handler': {'key': 'handler', 'type': 'str'},
        'handler_properties': {'key': 'handlerProperties', 'type': 'object'},
        'files': {'key': 'files', 'type': '[str]'},
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "StepType"]] = "inline",
        description: Optional[str] = None,
        handler: Optional[str] = None,
        handler_properties: Optional[Any] = None,
        files: Optional[List[str]] = None,
        update_id: Optional["UpdateId"] = None,
        **kwargs
    ):
        """
        :keyword type: Step type. Possible values include: "Inline", "Reference". Default value:
         "inline".
        :paramtype type: str or ~azure.iot.deviceupdate.models.StepType
        :keyword description: Step description.
        :paramtype description: str
        :keyword handler: Identity of handler that will execute this step. Required if step type is
         inline.
        :paramtype handler: str
        :keyword handler_properties: Parameters to be passed to handler during execution.
        :paramtype handler_properties: any
        :keyword files: Collection of file names to be passed to handler during execution. Required if
         step type is inline.
        :paramtype files: list[str]
        :keyword update_id: Referenced child update identity.  Required if step type is reference.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        """
        super(Step, self).__init__(**kwargs)
        self.type = type
        self.description = description
        self.handler = handler
        self.handler_properties = handler_properties
        self.files = files
        self.update_id = update_id


class StepResult(msrest.serialization.Model):
    """The step result under an update.

    All required parameters must be populated in order to send to Azure.

    :ivar update_id: It is update id for update steps; otherwise it is null.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar description: Step description. It might be null for update steps.
    :vartype description: str
    :ivar result_code: Required. Install result code.
    :vartype result_code: int
    :ivar extended_result_code: Required. Install extended result code.
    :vartype extended_result_code: int
    :ivar result_details: A string containing further details about the install result.
    :vartype result_details: str
    """

    _validation = {
        'result_code': {'required': True},
        'extended_result_code': {'required': True},
    }

    _attribute_map = {
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'description': {'key': 'description', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'int'},
        'extended_result_code': {'key': 'extendedResultCode', 'type': 'int'},
        'result_details': {'key': 'resultDetails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        result_code: int,
        extended_result_code: int,
        update_id: Optional["UpdateId"] = None,
        description: Optional[str] = None,
        result_details: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword update_id: It is update id for update steps; otherwise it is null.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword description: Step description. It might be null for update steps.
        :paramtype description: str
        :keyword result_code: Required. Install result code.
        :paramtype result_code: int
        :keyword extended_result_code: Required. Install extended result code.
        :paramtype extended_result_code: int
        :keyword result_details: A string containing further details about the install result.
        :paramtype result_details: str
        """
        super(StepResult, self).__init__(**kwargs)
        self.update_id = update_id
        self.description = description
        self.result_code = result_code
        self.extended_result_code = extended_result_code
        self.result_details = result_details


class StringsList(msrest.serialization.Model):
    """The list of strings with server paging support.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[str]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[str]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List[str],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[str]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(StringsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdatableDevices(msrest.serialization.Model):
    """Update identifier and the number of devices for which the update is applicable.

    All required parameters must be populated in order to send to Azure.

    :ivar update_id: Required. Update identity.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar device_count: Required. Total number of devices for which the update is applicable.
    :vartype device_count: int
    """

    _validation = {
        'update_id': {'required': True},
        'device_count': {'required': True},
    }

    _attribute_map = {
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        update_id: "UpdateId",
        device_count: int,
        **kwargs
    ):
        """
        :keyword update_id: Required. Update identity.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword device_count: Required. Total number of devices for which the update is applicable.
        :paramtype device_count: int
        """
        super(UpdatableDevices, self).__init__(**kwargs)
        self.update_id = update_id
        self.device_count = device_count


class UpdatableDevicesList(msrest.serialization.Model):
    """The list of updatable devices.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.UpdatableDevices]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UpdatableDevices]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["UpdatableDevices"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.UpdatableDevices]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(UpdatableDevicesList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Update(msrest.serialization.Model):
    """Update metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar update_id: Required. Update identity.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar description: Update description specified by creator.
    :vartype description: str
    :ivar friendly_name: Friendly update name specified by importer.
    :vartype friendly_name: str
    :ivar is_deployable: Whether the update can be deployed to a device on its own.
    :vartype is_deployable: bool
    :ivar update_type: Update type. Deprecated in latest import manifest schema.
    :vartype update_type: str
    :ivar installed_criteria: String interpreted by Device Update client to determine if the update
     is installed on the device. Deprecated in latest import manifest schema.
    :vartype installed_criteria: str
    :ivar compatibility: Required. List of update compatibility information.
    :vartype compatibility: list[dict[str, str]]
    :ivar instructions: Update install instructions.
    :vartype instructions: ~azure.iot.deviceupdate.models.Instructions
    :ivar referenced_by: List of update identities that reference this update.
    :vartype referenced_by: list[~azure.iot.deviceupdate.models.UpdateId]
    :ivar scan_result: Update aggregate scan result (calculated from payload file scan results).
    :vartype scan_result: str
    :ivar manifest_version: Required. Schema version of manifest used to import the update.
    :vartype manifest_version: str
    :ivar imported_date_time: Required. Date and time in UTC when the update was imported.
    :vartype imported_date_time: ~datetime.datetime
    :ivar created_date_time: Required. Date and time in UTC when the update was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Update ETag.
    :vartype etag: str
    """

    _validation = {
        'update_id': {'required': True},
        'description': {'max_length': 512, 'min_length': 1},
        'friendly_name': {'max_length': 512, 'min_length': 1},
        'compatibility': {'required': True, 'max_items': 10, 'min_items': 1},
        'referenced_by': {'min_items': 1},
        'manifest_version': {'required': True},
        'imported_date_time': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'description': {'key': 'description', 'type': 'str'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
        'is_deployable': {'key': 'isDeployable', 'type': 'bool'},
        'update_type': {'key': 'updateType', 'type': 'str'},
        'installed_criteria': {'key': 'installedCriteria', 'type': 'str'},
        'compatibility': {'key': 'compatibility', 'type': '[{str}]'},
        'instructions': {'key': 'instructions', 'type': 'Instructions'},
        'referenced_by': {'key': 'referencedBy', 'type': '[UpdateId]'},
        'scan_result': {'key': 'scanResult', 'type': 'str'},
        'manifest_version': {'key': 'manifestVersion', 'type': 'str'},
        'imported_date_time': {'key': 'importedDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        update_id: "UpdateId",
        compatibility: List[Dict[str, str]],
        manifest_version: str,
        imported_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        description: Optional[str] = None,
        friendly_name: Optional[str] = None,
        is_deployable: Optional[bool] = True,
        update_type: Optional[str] = None,
        installed_criteria: Optional[str] = None,
        instructions: Optional["Instructions"] = None,
        referenced_by: Optional[List["UpdateId"]] = None,
        scan_result: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword update_id: Required. Update identity.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword description: Update description specified by creator.
        :paramtype description: str
        :keyword friendly_name: Friendly update name specified by importer.
        :paramtype friendly_name: str
        :keyword is_deployable: Whether the update can be deployed to a device on its own.
        :paramtype is_deployable: bool
        :keyword update_type: Update type. Deprecated in latest import manifest schema.
        :paramtype update_type: str
        :keyword installed_criteria: String interpreted by Device Update client to determine if the
         update is installed on the device. Deprecated in latest import manifest schema.
        :paramtype installed_criteria: str
        :keyword compatibility: Required. List of update compatibility information.
        :paramtype compatibility: list[dict[str, str]]
        :keyword instructions: Update install instructions.
        :paramtype instructions: ~azure.iot.deviceupdate.models.Instructions
        :keyword referenced_by: List of update identities that reference this update.
        :paramtype referenced_by: list[~azure.iot.deviceupdate.models.UpdateId]
        :keyword scan_result: Update aggregate scan result (calculated from payload file scan results).
        :paramtype scan_result: str
        :keyword manifest_version: Required. Schema version of manifest used to import the update.
        :paramtype manifest_version: str
        :keyword imported_date_time: Required. Date and time in UTC when the update was imported.
        :paramtype imported_date_time: ~datetime.datetime
        :keyword created_date_time: Required. Date and time in UTC when the update was created.
        :paramtype created_date_time: ~datetime.datetime
        :keyword etag: Update ETag.
        :paramtype etag: str
        """
        super(Update, self).__init__(**kwargs)
        self.update_id = update_id
        self.description = description
        self.friendly_name = friendly_name
        self.is_deployable = is_deployable
        self.update_type = update_type
        self.installed_criteria = installed_criteria
        self.compatibility = compatibility
        self.instructions = instructions
        self.referenced_by = referenced_by
        self.scan_result = scan_result
        self.manifest_version = manifest_version
        self.imported_date_time = imported_date_time
        self.created_date_time = created_date_time
        self.etag = etag


class UpdateCompliance(msrest.serialization.Model):
    """Update compliance information.

    All required parameters must be populated in order to send to Azure.

    :ivar total_device_count: Required. Total number of devices.
    :vartype total_device_count: int
    :ivar on_latest_update_device_count: Required. Number of devices on the latest update.
    :vartype on_latest_update_device_count: int
    :ivar new_updates_available_device_count: Required. Number of devices with a newer update
     available.
    :vartype new_updates_available_device_count: int
    :ivar updates_in_progress_device_count: Required. Number of devices with update in-progress.
    :vartype updates_in_progress_device_count: int
    """

    _validation = {
        'total_device_count': {'required': True},
        'on_latest_update_device_count': {'required': True},
        'new_updates_available_device_count': {'required': True},
        'updates_in_progress_device_count': {'required': True},
    }

    _attribute_map = {
        'total_device_count': {'key': 'totalDeviceCount', 'type': 'int'},
        'on_latest_update_device_count': {'key': 'onLatestUpdateDeviceCount', 'type': 'int'},
        'new_updates_available_device_count': {'key': 'newUpdatesAvailableDeviceCount', 'type': 'int'},
        'updates_in_progress_device_count': {'key': 'updatesInProgressDeviceCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        total_device_count: int,
        on_latest_update_device_count: int,
        new_updates_available_device_count: int,
        updates_in_progress_device_count: int,
        **kwargs
    ):
        """
        :keyword total_device_count: Required. Total number of devices.
        :paramtype total_device_count: int
        :keyword on_latest_update_device_count: Required. Number of devices on the latest update.
        :paramtype on_latest_update_device_count: int
        :keyword new_updates_available_device_count: Required. Number of devices with a newer update
         available.
        :paramtype new_updates_available_device_count: int
        :keyword updates_in_progress_device_count: Required. Number of devices with update in-progress.
        :paramtype updates_in_progress_device_count: int
        """
        super(UpdateCompliance, self).__init__(**kwargs)
        self.total_device_count = total_device_count
        self.on_latest_update_device_count = on_latest_update_device_count
        self.new_updates_available_device_count = new_updates_available_device_count
        self.updates_in_progress_device_count = updates_in_progress_device_count


class UpdateFile(msrest.serialization.Model):
    """Update file metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar file_id: Required. File identity, generated by server at import time.
    :vartype file_id: str
    :ivar file_name: Required. File name.
    :vartype file_name: str
    :ivar size_in_bytes: Required. File size in number of bytes.
    :vartype size_in_bytes: long
    :ivar hashes: Required. Mapping of hashing algorithm to base64 encoded hash values.
    :vartype hashes: dict[str, str]
    :ivar mime_type: File MIME type.
    :vartype mime_type: str
    :ivar scan_result: Anti-malware scan result.
    :vartype scan_result: str
    :ivar scan_details: Anti-malware scan details.
    :vartype scan_details: str
    :ivar etag: File ETag.
    :vartype etag: str
    """

    _validation = {
        'file_id': {'required': True},
        'file_name': {'required': True},
        'size_in_bytes': {'required': True},
        'hashes': {'required': True},
    }

    _attribute_map = {
        'file_id': {'key': 'fileId', 'type': 'str'},
        'file_name': {'key': 'fileName', 'type': 'str'},
        'size_in_bytes': {'key': 'sizeInBytes', 'type': 'long'},
        'hashes': {'key': 'hashes', 'type': '{str}'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'scan_result': {'key': 'scanResult', 'type': 'str'},
        'scan_details': {'key': 'scanDetails', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_id: str,
        file_name: str,
        size_in_bytes: int,
        hashes: Dict[str, str],
        mime_type: Optional[str] = None,
        scan_result: Optional[str] = None,
        scan_details: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword file_id: Required. File identity, generated by server at import time.
        :paramtype file_id: str
        :keyword file_name: Required. File name.
        :paramtype file_name: str
        :keyword size_in_bytes: Required. File size in number of bytes.
        :paramtype size_in_bytes: long
        :keyword hashes: Required. Mapping of hashing algorithm to base64 encoded hash values.
        :paramtype hashes: dict[str, str]
        :keyword mime_type: File MIME type.
        :paramtype mime_type: str
        :keyword scan_result: Anti-malware scan result.
        :paramtype scan_result: str
        :keyword scan_details: Anti-malware scan details.
        :paramtype scan_details: str
        :keyword etag: File ETag.
        :paramtype etag: str
        """
        super(UpdateFile, self).__init__(**kwargs)
        self.file_id = file_id
        self.file_name = file_name
        self.size_in_bytes = size_in_bytes
        self.hashes = hashes
        self.mime_type = mime_type
        self.scan_result = scan_result
        self.scan_details = scan_details
        self.etag = etag


class UpdateFilter(msrest.serialization.Model):
    """Update filter.

    :ivar is_deployable: Update isDeployable property.
    :vartype is_deployable: bool
    """

    _attribute_map = {
        'is_deployable': {'key': 'isDeployable', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        is_deployable: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword is_deployable: Update isDeployable property.
        :paramtype is_deployable: bool
        """
        super(UpdateFilter, self).__init__(**kwargs)
        self.is_deployable = is_deployable


class UpdateId(msrest.serialization.Model):
    """Update identifier.

    All required parameters must be populated in order to send to Azure.

    :ivar provider: Required. Update provider.
    :vartype provider: str
    :ivar name: Required. Update name.
    :vartype name: str
    :ivar version: Required. Update version.
    :vartype version: str
    """

    _validation = {
        'provider': {'required': True},
        'name': {'required': True},
        'version': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: str,
        name: str,
        version: str,
        **kwargs
    ):
        """
        :keyword provider: Required. Update provider.
        :paramtype provider: str
        :keyword name: Required. Update name.
        :paramtype name: str
        :keyword version: Required. Update version.
        :paramtype version: str
        """
        super(UpdateId, self).__init__(**kwargs)
        self.provider = provider
        self.name = name
        self.version = version


class UpdateIdsList(msrest.serialization.Model):
    """The list of update identities.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.UpdateId]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UpdateId]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["UpdateId"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.UpdateId]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(UpdateIdsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdateList(msrest.serialization.Model):
    """The list of updates.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.Update]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Update]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Update"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.Update]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(UpdateList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdateOperation(msrest.serialization.Model):
    """Operation metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: Required. Operation Id.
    :vartype operation_id: str
    :ivar status: Required. Operation status. Possible values include: "Undefined", "NotStarted",
     "Running", "Succeeded", "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar update_id: The identity of update being imported or deleted. For import, this property
     will only be populated after import manifest is processed successfully.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar resource_location: Location of the imported update when operation is successful.
    :vartype resource_location: str
    :ivar error: Operation error encountered, if any.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar trace_id: Operation correlation identity that can used by Microsoft Support for
     troubleshooting.
    :vartype trace_id: str
    :ivar last_action_date_time: Required. Date and time in UTC when the operation status was last
     updated.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar created_date_time: Required. Date and time in UTC when the operation was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Operation ETag.
    :vartype etag: str
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'last_action_date_time': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'update_id': {'key': 'updateId', 'type': 'UpdateId'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'trace_id': {'key': 'traceId', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_id: str,
        status: Union[str, "OperationStatus"],
        last_action_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        update_id: Optional["UpdateId"] = None,
        resource_location: Optional[str] = None,
        error: Optional["Error"] = None,
        trace_id: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_id: Required. Operation Id.
        :paramtype operation_id: str
        :keyword status: Required. Operation status. Possible values include: "Undefined",
         "NotStarted", "Running", "Succeeded", "Failed".
        :paramtype status: str or ~azure.iot.deviceupdate.models.OperationStatus
        :keyword update_id: The identity of update being imported or deleted. For import, this property
         will only be populated after import manifest is processed successfully.
        :paramtype update_id: ~azure.iot.deviceupdate.models.UpdateId
        :keyword resource_location: Location of the imported update when operation is successful.
        :paramtype resource_location: str
        :keyword error: Operation error encountered, if any.
        :paramtype error: ~azure.iot.deviceupdate.models.Error
        :keyword trace_id: Operation correlation identity that can used by Microsoft Support for
         troubleshooting.
        :paramtype trace_id: str
        :keyword last_action_date_time: Required. Date and time in UTC when the operation status was
         last updated.
        :paramtype last_action_date_time: ~datetime.datetime
        :keyword created_date_time: Required. Date and time in UTC when the operation was created.
        :paramtype created_date_time: ~datetime.datetime
        :keyword etag: Operation ETag.
        :paramtype etag: str
        """
        super(UpdateOperation, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.update_id = update_id
        self.resource_location = resource_location
        self.error = error
        self.trace_id = trace_id
        self.last_action_date_time = last_action_date_time
        self.created_date_time = created_date_time
        self.etag = etag


class UpdateOperationsList(msrest.serialization.Model):
    """The list of operations with server paging support.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The collection of pageable items.
    :vartype value: list[~azure.iot.deviceupdate.models.UpdateOperation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UpdateOperation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["UpdateOperation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The collection of pageable items.
        :paramtype value: list[~azure.iot.deviceupdate.models.UpdateOperation]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super(UpdateOperationsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link
