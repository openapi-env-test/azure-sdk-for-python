# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class DeploymentCancelAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Cancel action.
    CANCEL = "cancel"

class DeploymentRetryAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Retry action.
    RETRY = "retry"

class DeploymentState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Deployment state.
    """

    #: The deployment can be sent to devices targeted in the deployment.
    ACTIVE = "Active"
    #: A newer deployment for this group has been created and no devices in the group will receive
    #: this deployment.
    INACTIVE = "Inactive"
    #: The deployment has been canceled and no devices will receive it.
    CANCELED = "Canceled"

class DeviceDeploymentState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Deployment state.
    """

    #: Deployment has completed with success.
    SUCCEEDED = "Succeeded"
    #: Deployment is in progress.
    IN_PROGRESS = "InProgress"
    #: Deployment has completed with failure.
    FAILED = "Failed"
    #: Deployment was canceled.
    CANCELED = "Canceled"
    #: Deployment is not compatible with the device.
    INCOMPATIBLE = "Incompatible"

class DeviceState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The deployment device state.
    """

    #: Not started (or uninitialized).
    NOT_STARTED = "NotStarted"
    #: Deployment incompatible for this device.
    INCOMPATIBLE = "Incompatible"
    #: Another Deployment is underway for this device.
    ALREADY_IN_DEPLOYMENT = "AlreadyInDeployment"
    #: Deployment has been canceled for this device.
    CANCELED = "Canceled"
    #: Deployment underway.
    IN_PROGRESS = "InProgress"
    #: Deployment failed.
    FAILED = "Failed"
    #: Deployment completed successfully.
    SUCCEEDED = "Succeeded"

class GroupType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Supported group types.
    """

    #: DeviceClassId IoT Hub tag based group, all devices in the group are compatible with the same
    #: updates and share a tag and deviceClassId.
    DEVICE_CLASS_ID_AND_IO_T_HUB_TAG = "DeviceClassIdAndIoTHubTag"
    #: Invalid deviceClassId IoT Hub tag based group, all devices in the group do not match the
    #: deviceClassId of the valid group they were tagged to join.
    INVALID_DEVICE_CLASS_ID_AND_IO_T_HUB_TAG = "InvalidDeviceClassIdAndIoTHubTag"
    #: Default deviceClassId based group, all devices in the group have no tags but are part of the
    #: same deviceClassId.  All devices will be part of one of these groups until a user tags them to
    #: join another group.
    DEFAULT_DEVICE_CLASS_ID = "DefaultDeviceClassId"

class ImportAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Import action.
    IMPORT_ENUM = "import"

class ImportType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The device import type.
    """

    #: Import only devices but not modules.
    DEVICES = "Devices"
    #: Import only modules but not devices.
    MODULES = "Modules"
    #: Import both devices and modules.
    ALL = "All"

class OperationFilterStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Operation status filter.
    """

    RUNNING = "Running"
    NOT_STARTED = "NotStarted"

class OperationStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Operation status.
    """

    #: Undefined operation status.
    UNDEFINED = "Undefined"
    #: Background operation created but not started yet.
    NOT_STARTED = "NotStarted"
    #: Background operation is currently running.
    RUNNING = "Running"
    #: Background operation finished with success.
    SUCCEEDED = "Succeeded"
    #: Background operation finished with failure.
    FAILED = "Failed"

class StepType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Step type.
    """

    #: Step type that performs code execution.
    INLINE = "Inline"
    #: Step type that installs another update.
    REFERENCE = "Reference"
