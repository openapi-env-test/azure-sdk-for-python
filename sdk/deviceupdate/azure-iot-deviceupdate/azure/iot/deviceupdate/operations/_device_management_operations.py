# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section
T = TypeVar('T')
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_list_device_classes_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceclasses')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_device_class_request(
    instance_id: str,
    device_class_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceclasses/{deviceClassId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceClassId": _SERIALIZER.url("device_class_id", device_class_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_installable_updates_for_device_class_request(
    instance_id: str,
    device_class_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceclasses/{deviceClassId}/installableupdates')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceClassId": _SERIALIZER.url("device_class_id", device_class_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_devices_request(
    instance_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devices')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if filter is not None:
        query_parameters['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_import_devices_request_initial(
    instance_id: str,
    *,
    action: Union[str, "_models.ImportAction"],
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devices')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_get_device_request(
    instance_id: str,
    device_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devices/{deviceId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceId": _SERIALIZER.url("device_id", device_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_device_module_request(
    instance_id: str,
    device_id: str,
    module_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devices/{deviceId}/modules/{moduleId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceId": _SERIALIZER.url("device_id", device_id, 'str'),
        "moduleId": _SERIALIZER.url("module_id", module_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_update_compliance_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/updatecompliance')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_device_tags_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devicetags')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_device_tag_request(
    instance_id: str,
    tag_name: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/devicetags/{tagName}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "tagName": _SERIALIZER.url("tag_name", tag_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_groups_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_group_request(
    instance_id: str,
    group_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_group_request(
    instance_id: str,
    group_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_group_request(
    instance_id: str,
    group_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_group_update_compliance_request(
    instance_id: str,
    group_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/updateCompliance')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_best_updates_for_group_request(
    instance_id: str,
    group_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/bestUpdates')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if filter is not None:
        query_parameters['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_deployments_for_group_request(
    instance_id: str,
    group_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if filter is not None:
        query_parameters['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_deployment_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_deployment_request(
    instance_id: str,
    deployment_id: str,
    group_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_deployment_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_deployment_status_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}/status')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_deployment_devices_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}/devicestates')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if filter is not None:
        query_parameters['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_operation_request(
    instance_id: str,
    operation_id: str,
    *,
    if_none_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/operations/{operationId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "operationId": _SERIALIZER.url("operation_id", operation_id, 'str', max_length=256, min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if if_none_match is not None:
        header_parameters['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_operations_request(
    instance_id: str,
    *,
    filter: Optional[str] = None,
    top: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/operations')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if filter is not None:
        query_parameters['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    if top is not None:
        query_parameters['$top'] = _SERIALIZER.query("top", top, 'int')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_collect_logs_request(
    instance_id: str,
    operation_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "operationId": _SERIALIZER.url("operation_id", operation_id, 'str', max_length=256, min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_get_log_collection_operation_request(
    instance_id: str,
    operation_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "operationId": _SERIALIZER.url("operation_id", operation_id, 'str', max_length=256, min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_log_collection_operations_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_log_collection_operation_detailed_status_request(
    instance_id: str,
    operation_id: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}/detailedStatus')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "operationId": _SERIALIZER.url("operation_id", operation_id, 'str', max_length=256, min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stop_deployment_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    *,
    action: Union[str, "_models.DeploymentCancelAction"],
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_retry_deployment_request(
    instance_id: str,
    group_id: str,
    deployment_id: str,
    *,
    action: Union[str, "_models.DeploymentRetryAction"],
    **kwargs: Any
) -> HttpRequest:
    api_version = "2021-06-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}')
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['action'] = _SERIALIZER.query("action", action, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

class DeviceManagementOperations(object):
    """DeviceManagementOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.iot.deviceupdate.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list_device_classes(
        self,
        **kwargs: Any
    ) -> Iterable["_models.DeviceClassesList"]:
        """Gets a list of all device classes (unique combinations of device manufacturer and model) for
        all devices connected to Device Update for IoT Hub.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeviceClassesList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DeviceClassesList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeviceClassesList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_device_classes_request(
                    instance_id=self._config.instance_id,
                    template_url=self.list_device_classes.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_device_classes_request(
                    instance_id=self._config.instance_id,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeviceClassesList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_device_classes.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceclasses'}  # type: ignore

    @distributed_trace
    def get_device_class(
        self,
        device_class_id: str,
        **kwargs: Any
    ) -> "_models.DeviceClass":
        """Gets the properties of a device class.

        :param device_class_id: Device class identifier.
        :type device_class_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeviceClass, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.DeviceClass
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeviceClass"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_device_class_request(
            instance_id=self._config.instance_id,
            device_class_id=device_class_id,
            template_url=self.get_device_class.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('DeviceClass', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_device_class.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceclasses/{deviceClassId}'}  # type: ignore


    @distributed_trace
    def list_installable_updates_for_device_class(
        self,
        device_class_id: str,
        **kwargs: Any
    ) -> Iterable["_models.UpdateIdsList"]:
        """Gets a list of installable updates for a device class.

        :param device_class_id: Device class identifier.
        :type device_class_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either UpdateIdsList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.UpdateIdsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.UpdateIdsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_installable_updates_for_device_class_request(
                    instance_id=self._config.instance_id,
                    device_class_id=device_class_id,
                    template_url=self.list_installable_updates_for_device_class.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_installable_updates_for_device_class_request(
                    instance_id=self._config.instance_id,
                    device_class_id=device_class_id,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("UpdateIdsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_installable_updates_for_device_class.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceclasses/{deviceClassId}/installableupdates'}  # type: ignore

    @distributed_trace
    def list_devices(
        self,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.DevicesList"]:
        """Gets a list of devices connected to Device Update for IoT Hub.

        :param filter: Restricts the set of devices returned. You can filter on device GroupId or
         DeviceClassId.
        :type filter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DevicesList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DevicesList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DevicesList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_devices_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    template_url=self.list_devices.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_devices_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DevicesList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_devices.metadata = {'url': '/deviceupdate/{instanceId}/management/devices'}  # type: ignore

    def _import_devices_initial(
        self,
        action: Union[str, "_models.ImportAction"],
        import_type: Union[str, "_models.ImportType"],
        **kwargs: Any
    ) -> None:
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(import_type, 'str')

        request = build_import_devices_request_initial(
            instance_id=self._config.instance_id,
            content_type=content_type,
            action=action,
            json=_json,
            template_url=self._import_devices_initial.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    _import_devices_initial.metadata = {'url': '/deviceupdate/{instanceId}/management/devices'}  # type: ignore


    @distributed_trace
    def begin_import_devices(
        self,
        action: Union[str, "_models.ImportAction"],
        import_type: Union[str, "_models.ImportType"],
        **kwargs: Any
    ) -> LROPoller[None]:
        """Import existing devices from IoT Hub.

        :param action: Devices action.
        :type action: str or ~azure.iot.deviceupdate.models.ImportAction
        :param import_type: The types of devices to import.
        :type import_type: str or ~azure.iot.deviceupdate.models.ImportType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]
        polling = kwargs.pop('polling', True)  # type: Union[bool, azure.core.polling.PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._import_devices_initial(
                action=action,
                import_type=import_type,
                content_type=content_type,
                cls=lambda x,y,z: x,
                **kwargs
            )
        kwargs.pop('error_map', None)

        def get_long_running_output(pipeline_response):
            if cls:
                return cls(pipeline_response, None, {})


        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    begin_import_devices.metadata = {'url': '/deviceupdate/{instanceId}/management/devices'}  # type: ignore

    @distributed_trace
    def get_device(
        self,
        device_id: str,
        **kwargs: Any
    ) -> "_models.Device":
        """Gets the device properties and latest deployment status for a device connected to Device Update
        for IoT Hub.

        :param device_id: Device identifier in Azure IoT Hub.
        :type device_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Device
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Device"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_device_request(
            instance_id=self._config.instance_id,
            device_id=device_id,
            template_url=self.get_device.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Device', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_device.metadata = {'url': '/deviceupdate/{instanceId}/management/devices/{deviceId}'}  # type: ignore


    @distributed_trace
    def get_device_module(
        self,
        device_id: str,
        module_id: str,
        **kwargs: Any
    ) -> "_models.Device":
        """Gets the device module properties and latest deployment status for a device module connected to
        Device Update for IoT Hub.

        :param device_id: Device identifier in Azure IoT Hub.
        :type device_id: str
        :param module_id: Device module identifier in Azure IoT Hub.
        :type module_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Device, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Device
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Device"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_device_module_request(
            instance_id=self._config.instance_id,
            device_id=device_id,
            module_id=module_id,
            template_url=self.get_device_module.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Device', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_device_module.metadata = {'url': '/deviceupdate/{instanceId}/management/devices/{deviceId}/modules/{moduleId}'}  # type: ignore


    @distributed_trace
    def get_update_compliance(
        self,
        **kwargs: Any
    ) -> "_models.UpdateCompliance":
        """Gets the breakdown of how many devices are on their latest update, have new updates available,
        or are in progress receiving new updates.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UpdateCompliance, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.UpdateCompliance
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.UpdateCompliance"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_update_compliance_request(
            instance_id=self._config.instance_id,
            template_url=self.get_update_compliance.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('UpdateCompliance', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_update_compliance.metadata = {'url': '/deviceupdate/{instanceId}/management/updatecompliance'}  # type: ignore


    @distributed_trace
    def list_device_tags(
        self,
        **kwargs: Any
    ) -> Iterable["_models.DeviceTagsList"]:
        """Gets a list of available group device tags for all devices connected to Device Update for IoT
        Hub.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeviceTagsList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DeviceTagsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeviceTagsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_device_tags_request(
                    instance_id=self._config.instance_id,
                    template_url=self.list_device_tags.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_device_tags_request(
                    instance_id=self._config.instance_id,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeviceTagsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_device_tags.metadata = {'url': '/deviceupdate/{instanceId}/management/devicetags'}  # type: ignore

    @distributed_trace
    def get_device_tag(
        self,
        tag_name: str,
        **kwargs: Any
    ) -> "_models.DeviceTag":
        """Gets a count of how many devices have a device tag.

        :param tag_name: Tag name.
        :type tag_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeviceTag, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.DeviceTag
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeviceTag"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_device_tag_request(
            instance_id=self._config.instance_id,
            tag_name=tag_name,
            template_url=self.get_device_tag.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('DeviceTag', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_device_tag.metadata = {'url': '/deviceupdate/{instanceId}/management/devicetags/{tagName}'}  # type: ignore


    @distributed_trace
    def list_groups(
        self,
        **kwargs: Any
    ) -> Iterable["_models.GroupsList"]:
        """Gets a list of all device groups.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either GroupsList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.GroupsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.GroupsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_groups_request(
                    instance_id=self._config.instance_id,
                    template_url=self.list_groups.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_groups_request(
                    instance_id=self._config.instance_id,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("GroupsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_groups.metadata = {'url': '/deviceupdate/{instanceId}/management/groups'}  # type: ignore

    @distributed_trace
    def get_group(
        self,
        group_id: str,
        **kwargs: Any
    ) -> "_models.Group":
        """Gets the properties of a group.

        :param group_id: Group identity.
        :type group_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Group, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Group
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Group"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_group_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            template_url=self.get_group.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Group', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_group.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}'}  # type: ignore


    @distributed_trace
    def create_or_update_group(
        self,
        group_id: str,
        group: "_models.Group",
        **kwargs: Any
    ) -> "_models.Group":
        """Create or update a device group.

        :param group_id: Group identity.
        :type group_id: str
        :param group: The group properties.
        :type group: ~azure.iot.deviceupdate.models.Group
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Group, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Group
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Group"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(group, 'Group')

        request = build_create_or_update_group_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_group.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Group', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_group.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}'}  # type: ignore


    @distributed_trace
    def delete_group(
        self,
        group_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a device group.

        :param group_id: Group identity.
        :type group_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_group_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            template_url=self.delete_group.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_group.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}'}  # type: ignore


    @distributed_trace
    def get_group_update_compliance(
        self,
        group_id: str,
        **kwargs: Any
    ) -> "_models.UpdateCompliance":
        """Get group update compliance information such as how many devices are on their latest update,
        how many need new updates, and how many are in progress on receiving a new update.

        :param group_id: Group identity.
        :type group_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UpdateCompliance, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.UpdateCompliance
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.UpdateCompliance"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_group_update_compliance_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            template_url=self.get_group_update_compliance.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('UpdateCompliance', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_group_update_compliance.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/updateCompliance'}  # type: ignore


    @distributed_trace
    def list_best_updates_for_group(
        self,
        group_id: str,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.UpdatableDevicesList"]:
        """Get the best available updates for a group and a count of how many devices need each update.

        :param group_id: Group identity.
        :type group_id: str
        :param filter: Restricts the set of bestUpdates returned. You can filter on update Provider,
         Name and Version property.
        :type filter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either UpdatableDevicesList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.UpdatableDevicesList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.UpdatableDevicesList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_best_updates_for_group_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    filter=filter,
                    template_url=self.list_best_updates_for_group.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_best_updates_for_group_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    filter=filter,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("UpdatableDevicesList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_best_updates_for_group.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/bestUpdates'}  # type: ignore

    @distributed_trace
    def list_deployments_for_group(
        self,
        group_id: str,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.DeploymentsList"]:
        """Gets a list of deployments for a group.

        :param group_id: Group identity.
        :type group_id: str
        :param filter: Restricts the set of deployments returned. You can filter on update Provider,
         Name and Version property.
        :type filter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeploymentsList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DeploymentsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeploymentsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_deployments_for_group_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    filter=filter,
                    template_url=self.list_deployments_for_group.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_deployments_for_group_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    filter=filter,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeploymentsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_deployments_for_group.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments'}  # type: ignore

    @distributed_trace
    def get_deployment(
        self,
        group_id: str,
        deployment_id: str,
        **kwargs: Any
    ) -> "_models.Deployment":
        """Gets the properties of a deployment.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Deployment, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Deployment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Deployment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_deployment_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            deployment_id=deployment_id,
            template_url=self.get_deployment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Deployment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_deployment.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}'}  # type: ignore


    @distributed_trace
    def create_or_update_deployment(
        self,
        deployment_id: str,
        group_id: str,
        deployment: "_models.Deployment",
        **kwargs: Any
    ) -> "_models.Deployment":
        """Creates or updates a deployment.

        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :param group_id: Group identity.
        :type group_id: str
        :param deployment: The deployment properties.
        :type deployment: ~azure.iot.deviceupdate.models.Deployment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Deployment, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Deployment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Deployment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(deployment, 'Deployment')

        request = build_create_or_update_deployment_request(
            instance_id=self._config.instance_id,
            deployment_id=deployment_id,
            group_id=group_id,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_deployment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Deployment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_deployment.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}'}  # type: ignore


    @distributed_trace
    def delete_deployment(
        self,
        group_id: str,
        deployment_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a deployment.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_deployment_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            deployment_id=deployment_id,
            template_url=self.delete_deployment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_deployment.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}'}  # type: ignore


    @distributed_trace
    def get_deployment_status(
        self,
        group_id: str,
        deployment_id: str,
        **kwargs: Any
    ) -> "_models.DeploymentStatus":
        """Gets the status of a deployment including a breakdown of how many devices in the deployment are
        in progress, completed, or failed.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeploymentStatus, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.DeploymentStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeploymentStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_deployment_status_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            deployment_id=deployment_id,
            template_url=self.get_deployment_status.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('DeploymentStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_deployment_status.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}/status'}  # type: ignore


    @distributed_trace
    def list_deployment_devices(
        self,
        group_id: str,
        deployment_id: str,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.DeploymentDeviceStatesList"]:
        """Gets a list of devices in a deployment along with their state. Useful for getting a list of
        failed devices.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :param filter: Restricts the set of deployment device states returned. You can filter on
         deviceId and moduleId and/or deviceState.
        :type filter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeploymentDeviceStatesList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DeploymentDeviceStatesList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeploymentDeviceStatesList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_deployment_devices_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    deployment_id=deployment_id,
                    filter=filter,
                    template_url=self.list_deployment_devices.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_deployment_devices_request(
                    instance_id=self._config.instance_id,
                    group_id=group_id,
                    deployment_id=deployment_id,
                    filter=filter,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeploymentDeviceStatesList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_deployment_devices.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}/devicestates'}  # type: ignore

    @distributed_trace
    def get_operation(
        self,
        operation_id: str,
        access_condition: Optional["_models.AccessCondition"] = None,
        **kwargs: Any
    ) -> Optional["_models.DeviceOperation"]:
        """Retrieve operation status.

        :param operation_id: Operation identifier.
        :type operation_id: str
        :param access_condition: Parameter group.
        :type access_condition: ~azure.iot.deviceupdate.models.AccessCondition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeviceOperation, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.DeviceOperation or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.DeviceOperation"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _if_none_match = None
        if access_condition is not None:
            _if_none_match = access_condition.if_none_match

        request = build_get_operation_request(
            instance_id=self._config.instance_id,
            operation_id=operation_id,
            if_none_match=_if_none_match,
            template_url=self.get_operation.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 304]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            response_headers['Retry-After']=self._deserialize('str', response.headers.get('Retry-After'))
            
            deserialized = self._deserialize('DeviceOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    get_operation.metadata = {'url': '/deviceupdate/{instanceId}/management/operations/{operationId}'}  # type: ignore


    @distributed_trace
    def list_operations(
        self,
        filter: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> Iterable["_models.DeviceOperationsList"]:
        """Get a list of all device import operations. Completed operations are kept for 7 days before
        auto-deleted.

        :param filter: Restricts the set of operations returned. Only one specific filter is supported:
         "status eq 'NotStarted' or status eq 'Running'".
        :type filter: str
        :param top: Specifies a non-negative integer n that limits the number of items returned from a
         collection. The service returns the number of available items up to but not greater than the
         specified value n.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeviceOperationsList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.DeviceOperationsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeviceOperationsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_operations_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    top=top,
                    template_url=self.list_operations.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_operations_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    top=top,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeviceOperationsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_operations.metadata = {'url': '/deviceupdate/{instanceId}/management/operations'}  # type: ignore

    @distributed_trace
    def collect_logs(
        self,
        operation_id: str,
        log_collection_request: "_models.LogCollectionOperation",
        **kwargs: Any
    ) -> "_models.LogCollectionOperation":
        """Start the device diagnostics log collection operation on specified devices.

        :param operation_id: Operation identifier.
        :type operation_id: str
        :param log_collection_request: The deployment properties.
        :type log_collection_request: ~azure.iot.deviceupdate.models.LogCollectionOperation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LogCollectionOperation, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.LogCollectionOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LogCollectionOperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(log_collection_request, 'LogCollectionOperation')

        request = build_collect_logs_request(
            instance_id=self._config.instance_id,
            operation_id=operation_id,
            content_type=content_type,
            json=_json,
            template_url=self.collect_logs.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LogCollectionOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    collect_logs.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}'}  # type: ignore


    @distributed_trace
    def get_log_collection_operation(
        self,
        operation_id: str,
        **kwargs: Any
    ) -> "_models.LogCollectionOperation":
        """Get the device diagnostics log collection operation.

        :param operation_id: Operation identifier.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LogCollectionOperation, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.LogCollectionOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LogCollectionOperation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_log_collection_operation_request(
            instance_id=self._config.instance_id,
            operation_id=operation_id,
            template_url=self.get_log_collection_operation.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LogCollectionOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_log_collection_operation.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}'}  # type: ignore


    @distributed_trace
    def list_log_collection_operations(
        self,
        **kwargs: Any
    ) -> Iterable["_models.LogCollectionOperationList"]:
        """Get all device diagnostics log collection operations.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either LogCollectionOperationList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.iot.deviceupdate.models.LogCollectionOperationList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LogCollectionOperationList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_log_collection_operations_request(
                    instance_id=self._config.instance_id,
                    template_url=self.list_log_collection_operations.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_log_collection_operations_request(
                    instance_id=self._config.instance_id,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("LogCollectionOperationList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_log_collection_operations.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections'}  # type: ignore

    @distributed_trace
    def get_log_collection_operation_detailed_status(
        self,
        operation_id: str,
        **kwargs: Any
    ) -> "_models.LogCollectionOperationDetailedStatus":
        """Get device diagnostics log collection operation with detailed status.

        :param operation_id: Operation identifier.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LogCollectionOperationDetailedStatus, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.LogCollectionOperationDetailedStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LogCollectionOperationDetailedStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_log_collection_operation_detailed_status_request(
            instance_id=self._config.instance_id,
            operation_id=operation_id,
            template_url=self.get_log_collection_operation_detailed_status.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LogCollectionOperationDetailedStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_log_collection_operation_detailed_status.metadata = {'url': '/deviceupdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}/detailedStatus'}  # type: ignore


    @distributed_trace
    def stop_deployment(
        self,
        group_id: str,
        deployment_id: str,
        action: Union[str, "_models.DeploymentCancelAction"],
        **kwargs: Any
    ) -> "_models.Deployment":
        """Stops a deployment.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :param action: Cancel deployment action.
        :type action: str or ~azure.iot.deviceupdate.models.DeploymentCancelAction
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Deployment, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Deployment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Deployment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_stop_deployment_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            deployment_id=deployment_id,
            action=action,
            template_url=self.stop_deployment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Deployment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    stop_deployment.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}'}  # type: ignore


    @distributed_trace
    def retry_deployment(
        self,
        group_id: str,
        deployment_id: str,
        action: Union[str, "_models.DeploymentRetryAction"],
        **kwargs: Any
    ) -> "_models.Deployment":
        """Retries a deployment with failed devices.

        :param group_id: Group identity.
        :type group_id: str
        :param deployment_id: Deployment identifier.
        :type deployment_id: str
        :param action: Retry deployment action.
        :type action: str or ~azure.iot.deviceupdate.models.DeploymentRetryAction
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Deployment, or the result of cls(response)
        :rtype: ~azure.iot.deviceupdate.models.Deployment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Deployment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_retry_deployment_request(
            instance_id=self._config.instance_id,
            group_id=group_id,
            deployment_id=deployment_id,
            action=action,
            template_url=self.retry_deployment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Deployment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    retry_deployment.metadata = {'url': '/deviceupdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}'}  # type: ignore

