# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._vendor import _format_url_section
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_updates_import_update_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    action = kwargs.pop('action', _params.pop('action', "import"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['action'] = _SERIALIZER.query("action", action, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_updates_get_update_request(
    provider: str,
    name: str,
    version: str,
    instance_id: str,
    *,
    if_none_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
        "name": _SERIALIZER.url("name", name, 'str'),
        "version": _SERIALIZER.url("version", version, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_delete_update_request(
    provider: str,
    name: str,
    version: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
        "name": _SERIALIZER.url("name", name, 'str'),
        "version": _SERIALIZER.url("version", version, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_updates_get_providers_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_get_names_request(
    provider: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_get_versions_request(
    provider: str,
    name: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
        "name": _SERIALIZER.url("name", name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_get_files_request(
    provider: str,
    name: str,
    version: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
        "name": _SERIALIZER.url("name", name, 'str'),
        "version": _SERIALIZER.url("version", version, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_get_file_request(
    provider: str,
    name: str,
    version: str,
    file_id: str,
    instance_id: str,
    *,
    if_none_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files/{fileId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "provider": _SERIALIZER.url("provider", provider, 'str'),
        "name": _SERIALIZER.url("name", name, 'str'),
        "version": _SERIALIZER.url("version", version, 'str'),
        "fileId": _SERIALIZER.url("file_id", file_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_updates_get_operations_request(
    instance_id: str,
    *,
    filter: Optional[str] = None,
    top: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/operations"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    if top is not None:
        _params['$top'] = _SERIALIZER.query("top", top, 'int')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_updates_get_operation_request(
    operation_id: str,
    instance_id: str,
    *,
    if_none_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/updates/operations/{operationId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "operationId": _SERIALIZER.url("operation_id", operation_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_all_device_classes_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deviceclasses"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_device_class_request(
    device_class_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceClassId": _SERIALIZER.url("device_class_id", device_class_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_device_class_device_ids_request(
    device_class_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/deviceids"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceClassId": _SERIALIZER.url("device_class_id", device_class_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_device_class_installable_updates_request(
    device_class_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/installableupdates"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceClassId": _SERIALIZER.url("device_class_id", device_class_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_all_devices_request(
    instance_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/devices"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_devices_get_device_request(
    device_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/devices/{deviceId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deviceId": _SERIALIZER.url("device_id", device_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_update_compliance_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/updatecompliance"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_all_device_tags_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/devicetags"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_device_tag_request(
    tag_name: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/devicetags/{tagName}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "tagName": _SERIALIZER.url("tag_name", tag_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_all_groups_request(
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_group_request(
    group_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups/{groupId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_create_or_update_group_request(
    group_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups/{groupId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_delete_group_request(
    group_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups/{groupId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_devices_get_group_update_compliance_request(
    group_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups/{groupId}/updateCompliance"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_devices_get_group_best_updates_request(
    group_id: str,
    instance_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/groups/{groupId}/bestUpdates"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "groupId": _SERIALIZER.url("group_id", group_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_deployments_get_all_deployments_request(
    instance_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_deployments_get_deployment_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_deployments_create_or_update_deployment_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_deployments_delete_deployment_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=_url,
        **kwargs
    )


def build_deployments_get_deployment_status_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/status"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_deployments_get_deployment_devices_request(
    deployment_id: str,
    instance_id: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/devicestates"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_deployments_cancel_deployment_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    action = kwargs.pop('action', _params.pop('action', "cancel"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['action'] = _SERIALIZER.query("action", action, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_deployments_retry_deployment_request(
    deployment_id: str,
    instance_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    action = kwargs.pop('action', _params.pop('action', "retry"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}"
    path_format_arguments = {
        "instanceId": _SERIALIZER.url("instance_id", instance_id, 'str', skip_quote=True),
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['action'] = _SERIALIZER.query("action", action, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

class UpdatesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.iot.deviceupdate.DeviceUpdateClient`'s
        :attr:`updates` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @overload
    def import_update(  # pylint: disable=inconsistent-return-statements
        self,
        update_to_import: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Import new update version.

        :param update_to_import: The update to be imported. Required.
        :type update_to_import: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword action: Import update action. Default value is "import". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype action: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_to_import = {
                    "files": [
                        {
                            "filename": "str",  # Update file name as specified inside
                              import manifest. Required.
                            "url": "str"  # Azure Blob location from which the update
                              file can be downloaded by Device Update for IoT Hub. This is typically a
                              read-only SAS-protected blob URL with an expiration set to at least 4
                              hours. Required.
                        }
                    ],
                    "importManifest": {
                        "hashes": {
                            "str": "str"  # A JSON object containing the hash(es) of the
                              file. At least SHA256 hash is required. This object can be thought of as
                              a set of key-value pairs where the key is the hash algorithm, and the
                              value is the hash of the file calculated using that algorithm. Required.
                        },
                        "sizeInBytes": 0,  # File size in number of bytes. Required.
                        "url": "str"  # Azure Blob location from which the import manifest
                          can be downloaded by Device Update for IoT Hub. This is typically a read-only
                          SAS-protected blob URL with an expiration set to at least 4 hours. Required.
                    }
                }
        """

    @overload
    def import_update(  # pylint: disable=inconsistent-return-statements
        self,
        update_to_import: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Import new update version.

        :param update_to_import: The update to be imported. Required.
        :type update_to_import: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword action: Import update action. Default value is "import". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype action: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace
    def import_update(  # pylint: disable=inconsistent-return-statements
        self,
        update_to_import: Union[JSON, IO],
        **kwargs: Any
    ) -> None:
        """Import new update version.

        :param update_to_import: The update to be imported. Is either a model type or a IO type.
         Required.
        :type update_to_import: JSON or IO
        :keyword action: Import update action. Default value is "import". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype action: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        action = kwargs.pop('action', _params.pop('action', "import"))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(update_to_import, (IO, bytes)):
            _content = update_to_import
        else:
            _json = update_to_import

        request = build_updates_import_update_request(
            instance_id=self._config.instance_id,
            action=action,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Location']=self._deserialize('str', response.headers.get('Location'))
        response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))


        if cls:
            return cls(pipeline_response, None, response_headers)



    @distributed_trace
    def get_update(
        self,
        provider: str,
        name: str,
        version: str,
        *,
        if_none_match: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Get a specific update version.

        :param provider: Update provider. Required.
        :type provider: str
        :param name: Update name. Required.
        :type name: str
        :param version: Update version. Required.
        :type version: str
        :keyword if_none_match: Defines the If-None-Match condition. The operation will be performed
         only if the ETag on the server does not match this value. Default value is None.
        :paramtype if_none_match: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "compatibility": [
                        {
                            "deviceManufacturer": "str",  # The manufacturer of device
                              the update is compatible with. Required.
                            "deviceModel": "str"  # The model of device the update is
                              compatible with. Required.
                        }
                    ],
                    "createdDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      update was created. Required.
                    "etag": "str",  # Optional. Update ETag.
                    "importedDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      update was imported. Required.
                    "installedCriteria": "str",  # String interpreted by Device Update client to
                      determine if the update is installed on the device. Required.
                    "manifestVersion": "str",  # Schema version of manifest used to import the
                      update. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "updateType": "str"  # Update type. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_updates_get_update_request(
            provider=provider,
            name=name,
            version=version,
            instance_id=self._config.instance_id,
            if_none_match=if_none_match,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 304]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def delete_update(  # pylint: disable=inconsistent-return-statements
        self,
        provider: str,
        name: str,
        version: str,
        **kwargs: Any
    ) -> None:
        """Delete a specific update version.

        :param provider: Update provider. Required.
        :type provider: str
        :param name: Update name. Required.
        :type name: str
        :param version: Update version. Required.
        :type version: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_updates_delete_update_request(
            provider=provider,
            name=name,
            version=version,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Location']=self._deserialize('str', response.headers.get('Location'))
        response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))


        if cls:
            return cls(pipeline_response, None, response_headers)



    @distributed_trace
    def get_providers(
        self,
        **kwargs: Any
    ) -> Iterable[str]:
        """Get a list of all update providers that have been imported to Device Update for IoT Hub.

        :return: An iterator like instance of str
        :rtype: ~azure.core.paging.ItemPaged[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_updates_get_providers_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_updates_get_providers_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_names(
        self,
        provider: str,
        **kwargs: Any
    ) -> Iterable[str]:
        """Get a list of all update names that match the specified provider.

        :param provider: Update provider. Required.
        :type provider: str
        :return: An iterator like instance of str
        :rtype: ~azure.core.paging.ItemPaged[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_updates_get_names_request(
                    provider=provider,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_updates_get_names_request(
                    provider=provider,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_versions(
        self,
        provider: str,
        name: str,
        **kwargs: Any
    ) -> Iterable[str]:
        """Get a list of all update versions that match the specified provider and name.

        :param provider: Update provider. Required.
        :type provider: str
        :param name: Update name. Required.
        :type name: str
        :return: An iterator like instance of str
        :rtype: ~azure.core.paging.ItemPaged[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_updates_get_versions_request(
                    provider=provider,
                    name=name,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_updates_get_versions_request(
                    provider=provider,
                    name=name,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_files(
        self,
        provider: str,
        name: str,
        version: str,
        **kwargs: Any
    ) -> Iterable[str]:
        """Get a list of all update file identifiers for the specified version.

        :param provider: Update provider. Required.
        :type provider: str
        :param name: Update name. Required.
        :type name: str
        :param version: Update version. Required.
        :type version: str
        :return: An iterator like instance of str
        :rtype: ~azure.core.paging.ItemPaged[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_updates_get_files_request(
                    provider=provider,
                    name=name,
                    version=version,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_updates_get_files_request(
                    provider=provider,
                    name=name,
                    version=version,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_file(
        self,
        provider: str,
        name: str,
        version: str,
        file_id: str,
        *,
        if_none_match: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Get a specific update file from the version.

        :param provider: Update provider. Required.
        :type provider: str
        :param name: Update name. Required.
        :type name: str
        :param version: Update version. Required.
        :type version: str
        :param file_id: File identifier. Required.
        :type file_id: str
        :keyword if_none_match: Defines the If-None-Match condition. The operation will be performed
         only if the ETag on the server does not match this value. Default value is None.
        :paramtype if_none_match: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "etag": "str",  # Optional. File ETag.
                    "fileId": "str",  # File identity, generated by server at import time.
                      Required.
                    "fileName": "str",  # File name. Required.
                    "hashes": {
                        "str": "str"  # Mapping of hashing algorithm to base64 encoded hash
                          values. Required.
                    },
                    "mimeType": "str",  # Optional. File MIME type.
                    "sizeInBytes": 0  # File size in number of bytes. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_updates_get_file_request(
            provider=provider,
            name=name,
            version=version,
            file_id=file_id,
            instance_id=self._config.instance_id,
            if_none_match=if_none_match,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 304]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_operations(
        self,
        *,
        filter: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Get a list of all import update operations. Completed operations are kept for 7 days before
        auto-deleted. Delete operations are not returned by this API version.

        :keyword filter: Restricts the set of operations returned. Only one specific filter is
         supported: "status eq 'NotStarted' or status eq 'Running'". Default value is None.
        :paramtype filter: str
        :keyword top: Specifies a non-negative integer n that limits the number of items returned from
         a collection. The service returns the number of available items up to but not greater than the
         specified value n. Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      operation was created. Required.
                    "error": {
                        "code": "str",  # Server defined error code. Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # A more specific error code than what was
                              provided by the containing error. Required.
                            "errorDetail": "str",  # Optional. The internal error or
                              exception message.
                            "innerError": ...,
                            "message": "str"  # Optional. A human-readable representation
                              of the error.
                        },
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "occurredDateTime": "2020-02-20 00:00:00",  # Optional. Date and time
                          in UTC when the error occurred.
                        "target": "str"  # Optional. The target of the error.
                    },
                    "etag": "str",  # Optional. Operation ETag.
                    "lastActionDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      operation status was last updated. Required.
                    "operationId": "str",  # Operation Id. Required.
                    "resourceLocation": "str",  # Optional. Location of the imported update when
                      operation is successful.
                    "status": "str",  # Operation status. Required. Known values are:
                      "Undefined", "NotStarted", "Running", "Succeeded", and "Failed".
                    "traceId": "str",  # Optional. Operation correlation identity that can used
                      by Microsoft Support for troubleshooting.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_updates_get_operations_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    top=top,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_updates_get_operations_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_operation(
        self,
        operation_id: str,
        *,
        if_none_match: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """Retrieve operation status.

        :param operation_id: Operation identifier. Required.
        :type operation_id: str
        :keyword if_none_match: Defines the If-None-Match condition. The operation will be performed
         only if the ETag on the server does not match this value. Default value is None.
        :paramtype if_none_match: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      operation was created. Required.
                    "error": {
                        "code": "str",  # Server defined error code. Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # A more specific error code than what was
                              provided by the containing error. Required.
                            "errorDetail": "str",  # Optional. The internal error or
                              exception message.
                            "innerError": ...,
                            "message": "str"  # Optional. A human-readable representation
                              of the error.
                        },
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "occurredDateTime": "2020-02-20 00:00:00",  # Optional. Date and time
                          in UTC when the error occurred.
                        "target": "str"  # Optional. The target of the error.
                    },
                    "etag": "str",  # Optional. Operation ETag.
                    "lastActionDateTime": "2020-02-20 00:00:00",  # Date and time in UTC when the
                      operation status was last updated. Required.
                    "operationId": "str",  # Operation Id. Required.
                    "resourceLocation": "str",  # Optional. Location of the imported update when
                      operation is successful.
                    "status": "str",  # Operation status. Required. Known values are:
                      "Undefined", "NotStarted", "Running", "Succeeded", and "Failed".
                    "traceId": "str",  # Optional. Operation correlation identity that can used
                      by Microsoft Support for troubleshooting.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
            429: HttpResponseError,
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_updates_get_operation_request(
            operation_id=operation_id,
            instance_id=self._config.instance_id,
            if_none_match=if_none_match,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 304]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            response_headers['Retry-After']=self._deserialize('str', response.headers.get('Retry-After'))
            
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized


class DevicesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.iot.deviceupdate.DeviceUpdateClient`'s
        :attr:`devices` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_all_device_classes(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of all device classes (unique combinations of device manufacturer and model) for
        all devices connected to Device Update for IoT Hub.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "bestCompatibleUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "deviceClassId": "str",  # The device class identifier. Required.
                    "manufacturer": "str",  # Device manufacturer. Required.
                    "model": "str"  # Device model. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_all_device_classes_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_all_device_classes_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_device_class(
        self,
        device_class_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets the properties of a device class.

        :param device_class_id: Device class identifier. Required.
        :type device_class_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "bestCompatibleUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "deviceClassId": "str",  # The device class identifier. Required.
                    "manufacturer": "str",  # Device manufacturer. Required.
                    "model": "str"  # Device model. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_device_class_request(
            device_class_id=device_class_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_device_class_device_ids(
        self,
        device_class_id: str,
        **kwargs: Any
    ) -> Iterable[str]:
        """Gets a list of device identifiers in a device class.

        :param device_class_id: Device class identifier. Required.
        :type device_class_id: str
        :return: An iterator like instance of str
        :rtype: ~azure.core.paging.ItemPaged[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_device_class_device_ids_request(
                    device_class_id=device_class_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_device_class_device_ids_request(
                    device_class_id=device_class_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_device_class_installable_updates(
        self,
        device_class_id: str,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of installable updates for a device class.

        :param device_class_id: Device class identifier. Required.
        :type device_class_id: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "name": "str",  # Update name. Required.
                    "provider": "str",  # Update provider. Required.
                    "version": "str"  # Update version. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_device_class_installable_updates_request(
                    device_class_id=device_class_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_device_class_installable_updates_request(
                    device_class_id=device_class_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_all_devices(
        self,
        *,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of devices connected to Device Update for IoT Hub.

        :keyword filter: Restricts the set of devices returned. You can only filter on device GroupId.
         Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentStatus": "str",  # Optional. State of the device in its last
                      deployment. Known values are: "Succeeded", "InProgress", "Failed", "Canceled",
                      and "Incompatible".
                    "deviceClassId": "str",  # Device class identity. Required.
                    "deviceId": "str",  # Device identity. Required.
                    "groupId": "str",  # Optional. Device group identity.
                    "installedUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "lastAttemptedUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "lastDeploymentId": "str",  # Optional. The deployment identifier for the
                      last deployment to the device.
                    "manufacturer": "str",  # Device manufacturer. Required.
                    "model": "str",  # Device model. Required.
                    "onLatestUpdate": bool  # Boolean flag indicating whether the latest update
                      is installed on the device. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_all_devices_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_all_devices_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_device(
        self,
        device_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets the device properties and latest deployment status for a device connected to Device Update
        for IoT Hub.

        :param device_id: Device identifier in Azure IOT Hub. Required.
        :type device_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentStatus": "str",  # Optional. State of the device in its last
                      deployment. Known values are: "Succeeded", "InProgress", "Failed", "Canceled",
                      and "Incompatible".
                    "deviceClassId": "str",  # Device class identity. Required.
                    "deviceId": "str",  # Device identity. Required.
                    "groupId": "str",  # Optional. Device group identity.
                    "installedUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "lastAttemptedUpdateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    },
                    "lastDeploymentId": "str",  # Optional. The deployment identifier for the
                      last deployment to the device.
                    "manufacturer": "str",  # Device manufacturer. Required.
                    "model": "str",  # Device model. Required.
                    "onLatestUpdate": bool  # Boolean flag indicating whether the latest update
                      is installed on the device. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_device_request(
            device_id=device_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_update_compliance(
        self,
        **kwargs: Any
    ) -> JSON:
        """Gets the breakdown of how many devices are on their latest update, have new updates available,
        or are in progress receiving new updates.

        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "newUpdatesAvailableDeviceCount": 0,  # Number of devices with a newer update
                      available. Required.
                    "onLatestUpdateDeviceCount": 0,  # Number of devices on the latest update.
                      Required.
                    "totalDeviceCount": 0,  # Total number of devices. Required.
                    "updatesInProgressDeviceCount": 0  # Number of devices with update
                      in-progress. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_update_compliance_request(
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_all_device_tags(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of available group device tags for all devices connected to Device Update for IoT
        Hub.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deviceCount": 0,  # Number of devices with this tag. Required.
                    "tagName": "str"  # Tag name. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_all_device_tags_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_all_device_tags_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_device_tag(
        self,
        tag_name: str,
        **kwargs: Any
    ) -> JSON:
        """Gets a count of how many devices have a device tag.

        :param tag_name: Tag name. Required.
        :type tag_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deviceCount": 0,  # Number of devices with this tag. Required.
                    "tagName": "str"  # Tag name. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_device_tag_request(
            tag_name=tag_name,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_all_groups(
        self,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of all device groups.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_all_groups_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_all_groups_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_group(
        self,
        group_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets the properties of a group.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_group_request(
            group_id=group_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update_group(
        self,
        group_id: str,
        group: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update a device group.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :param group: The group properties. Required.
        :type group: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                group = {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }
        """

    @overload
    def create_or_update_group(
        self,
        group_id: str,
        group: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Create or update a device group.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :param group: The group properties. Required.
        :type group: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }
        """


    @distributed_trace
    def create_or_update_group(
        self,
        group_id: str,
        group: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Create or update a device group.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :param group: The group properties. Is either a model type or a IO type. Required.
        :type group: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdDateTime": "str",  # Date and time when the update was created.
                      Required.
                    "deviceCount": 0,  # Optional. The number of devices in the group.
                    "groupId": "str",  # Group identity. Required.
                    "groupType": "str",  # Group type. Required. "IoTHubTag"
                    "tags": [
                        "str"  # IoT Hub tags. Required.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            400: HttpResponseError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(group, (IO, bytes)):
            _content = group
        else:
            _json = group

        request = build_devices_create_or_update_group_request(
            group_id=group_id,
            instance_id=self._config.instance_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_group(  # pylint: disable=inconsistent-return-statements
        self,
        group_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a device group.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_devices_delete_group_request(
            group_id=group_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_group_update_compliance(
        self,
        group_id: str,
        **kwargs: Any
    ) -> JSON:
        """Get group update compliance information such as how many devices are on their latest update,
        how many need new updates, and how many are in progress on receiving a new update.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "newUpdatesAvailableDeviceCount": 0,  # Number of devices with a newer update
                      available. Required.
                    "onLatestUpdateDeviceCount": 0,  # Number of devices on the latest update.
                      Required.
                    "totalDeviceCount": 0,  # Total number of devices. Required.
                    "updatesInProgressDeviceCount": 0  # Number of devices with update
                      in-progress. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_devices_get_group_update_compliance_request(
            group_id=group_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_group_best_updates(
        self,
        group_id: str,
        *,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Get the best available updates for a group and a count of how many devices need each update.

        :param group_id: Group identifier. Required.
        :type group_id: str
        :keyword filter: Restricts the set of bestUpdates returned. You can filter on update Provider,
         Name and Version property. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deviceCount": 0,  # Total number of devices for which the update is
                      applicable. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_devices_get_group_best_updates_request(
                    group_id=group_id,
                    instance_id=self._config.instance_id,
                    filter=filter,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_devices_get_group_best_updates_request(
                    group_id=group_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )

class DeploymentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.iot.deviceupdate.DeviceUpdateClient`'s
        :attr:`deployments` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def get_all_deployments(
        self,
        *,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of deployments.

        :keyword filter: Restricts the set of deployments returned. You can filter on update Provider,
         Name and Version property. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_deployments_get_all_deployments_request(
                    instance_id=self._config.instance_id,
                    filter=filter,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_deployments_get_all_deployments_request(
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def get_deployment(
        self,
        deployment_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets the properties of a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_deployments_get_deployment_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @overload
    def create_or_update_deployment(
        self,
        deployment_id: str,
        deployment: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :param deployment: The deployment properties. Required.
        :type deployment: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                deployment = {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """

    @overload
    def create_or_update_deployment(
        self,
        deployment_id: str,
        deployment: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :param deployment: The deployment properties. Required.
        :type deployment: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """


    @distributed_trace
    def create_or_update_deployment(
        self,
        deployment_id: str,
        deployment: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Creates or updates a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :param deployment: The deployment properties. Is either a model type or a IO type. Required.
        :type deployment: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(deployment, (IO, bytes)):
            _content = deployment
        else:
            _json = deployment

        request = build_deployments_create_or_update_deployment_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def delete_deployment(  # pylint: disable=inconsistent-return-statements
        self,
        deployment_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_deployments_delete_deployment_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def get_deployment_status(
        self,
        deployment_id: str,
        **kwargs: Any
    ) -> JSON:
        """Gets the status of a deployment including a breakdown of how many devices in the deployment are
        in progress, completed, or failed.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentState": "str",  # Gets or sets the state of the deployment.
                      Required. Known values are: "Active", "Superseded", and "Canceled".
                    "devicesCanceledCount": 0,  # Optional. Gets or sets the number of devices
                      which have had their deployment canceled.
                    "devicesCompletedFailedCount": 0,  # Optional. Gets or sets the number of
                      devices that have completed deployment with a failure.
                    "devicesCompletedSucceededCount": 0,  # Optional. Gets or sets the number of
                      devices which have successfully completed deployment.
                    "devicesInProgressCount": 0,  # Optional. Gets or sets the number of devices
                      that are currently in deployment.
                    "devicesIncompatibleCount": 0,  # Optional. Gets or sets the number of
                      incompatible devices in the deployment.
                    "totalDevices": 0  # Optional. Gets or sets the total number of devices in
                      the deployment.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_deployments_get_deployment_status_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def get_deployment_devices(
        self,
        deployment_id: str,
        *,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of devices in a deployment along with their state. Useful for getting a list of
        failed devices.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :keyword filter: Restricts the set of deployment device states returned. You can filter on
         deviceId and/or deviceState. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deviceId": "str",  # Device identity. Required.
                    "deviceState": "str",  # Deployment device state. Required. Known values are:
                      "Succeeded", "InProgress", "Failed", "Canceled", and "Incompatible".
                    "movedOnToNewDeployment": bool,  # Boolean flag indicating whether this
                      device is in a newer deployment and can no longer retry this deployment.
                      Required.
                    "retryCount": 0  # The number of times this deployment has been retried on
                      this device. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_deployments_get_deployment_devices_request(
                    deployment_id=deployment_id,
                    instance_id=self._config.instance_id,
                    filter=filter,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                
                request = build_deployments_get_deployment_devices_request(
                    deployment_id=deployment_id,
                    instance_id=self._config.instance_id,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(next_link, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )


    @distributed_trace
    def cancel_deployment(
        self,
        deployment_id: str,
        **kwargs: Any
    ) -> JSON:
        """Cancels a deployment.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :keyword action: Cancel deployment action. Default value is "cancel". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype action: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        action = kwargs.pop('action', _params.pop('action', "cancel"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_deployments_cancel_deployment_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            action=action,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)



    @distributed_trace
    def retry_deployment(
        self,
        deployment_id: str,
        **kwargs: Any
    ) -> JSON:
        """Retries a deployment with failed devices.

        :param deployment_id: Deployment identifier. Required.
        :type deployment_id: str
        :keyword action: Retry deployment action. Default value is "retry". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype action: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "deploymentId": "str",  # Gets or sets the deployment identifier. Required.
                    "deploymentType": "str",  # Gets or sets the deployment type. Required. Known
                      values are: "Complete", "Download", and "Install".
                    "deviceClassId": "str",  # Optional. Gets or sets the device class
                      identifier.
                    "deviceGroupDefinition": [
                        "str"  # Gets or sets the device group definition. Required.
                    ],
                    "deviceGroupType": "str",  # Gets or sets the device group type. Required.
                      Known values are: "All", "Devices", and "DeviceGroupDefinitions".
                    "isCanceled": bool,  # Optional. Boolean flag indicating whether the
                      deployment was canceled.
                    "isCompleted": bool,  # Optional. Boolean flag indicating whether the
                      deployment was completed.
                    "isRetried": bool,  # Optional. Boolean flag indicating whether the
                      deployment has been retried.
                    "startDateTime": "2020-02-20 00:00:00",  # Gets or sets the Deployment start
                      datetime. Required.
                    "updateId": {
                        "name": "str",  # Update name. Required.
                        "provider": "str",  # Update provider. Required.
                        "version": "str"  # Update version. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            409: ResourceExistsError,
            404: lambda response: ResourceNotFoundError(response=response),
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        action = kwargs.pop('action', _params.pop('action', "retry"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[JSON]

        
        request = build_deployments_retry_deployment_request(
            deployment_id=deployment_id,
            instance_id=self._config.instance_id,
            action=action,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "accountEndpoint": self._serialize.url("self._config.account_endpoint", self._config.account_endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


