# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class OperationDisplayInfo(_serialization.Model):
    """The operation supported by Advisor.

    :ivar description: The description of the operation.
    :vartype description: str
    :ivar operation: The action that users can perform, based on their permission level.
    :vartype operation: str
    :ivar provider: Service provider: Microsoft Advisor.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        operation: Optional[str] = None,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: The description of the operation.
        :paramtype description: str
        :keyword operation: The action that users can perform, based on their permission level.
        :paramtype operation: str
        :keyword provider: Service provider: Microsoft Advisor.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed.
        :paramtype resource: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationEntity(_serialization.Model):
    """The operation supported by Advisor.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The operation supported by Advisor.
    :vartype display: ~azure.mgmt.advisor.models.OperationDisplayInfo
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "OperationDisplayInfo"},
    }

    def __init__(
        self, *, name: Optional[str] = None, display: Optional["_models.OperationDisplayInfo"] = None, **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: The operation supported by Advisor.
        :paramtype display: ~azure.mgmt.advisor.models.OperationDisplayInfo
        """
        super().__init__(**kwargs)
        self.name = name
        self.display = display


class OperationEntityListResult(_serialization.Model):
    """The list of Advisor operations.

    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    :ivar value: The list of operations.
    :vartype value: list[~azure.mgmt.advisor.models.OperationEntity]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[OperationEntity]"},
    }

    def __init__(
        self, *, next_link: Optional[str] = None, value: Optional[List["_models.OperationEntity"]] = None, **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of operations.
        :paramtype next_link: str
        :keyword value: The list of operations.
        :paramtype value: list[~azure.mgmt.advisor.models.OperationEntity]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Resource(_serialization.Model):
    """An Azure resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource ID.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource. This cannot be changed after the resource is
     created.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, location: Optional[str] = None, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword location: The location of the resource. This cannot be changed after the resource is
         created.
        :paramtype location: str
        :keyword tags: The tags of the resource.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class ResourceRecommendationBase(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Advisor Recommendation.

    :ivar id: The fully qualified recommendation ID, for example
     /subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.ClassicCompute/virtualMachines/vm1/providers/Microsoft.Advisor/recommendations/recommendationGUID.
    :vartype id: str
    :ivar name: The name of recommendation.
    :vartype name: str
    :ivar suppression_ids: The list of snoozed and dismissed rules for the recommendation.
    :vartype suppression_ids: list[str]
    :ivar type: The recommendation type: Microsoft.Advisor/recommendations.
    :vartype type: str
    :ivar category: The category of the recommendation. Known values are: "HighAvailability",
     "Security", "Performance", and "Cost".
    :vartype category: str or ~azure.mgmt.advisor.models.Category
    :ivar impact: The business impact of the recommendation. Known values are: "High", "Medium",
     and "Low".
    :vartype impact: str or ~azure.mgmt.advisor.models.Impact
    :ivar impacted_field: The resource type identified by Advisor.
    :vartype impacted_field: str
    :ivar impacted_value: The resource identified by Advisor.
    :vartype impacted_value: str
    :ivar last_updated: The most recent time that Advisor checked the validity of the
     recommendation.
    :vartype last_updated: ~datetime.datetime
    :ivar metadata: The recommendation metadata.
    :vartype metadata: dict[str, JSON]
    :ivar recommendation_type_id: The recommendation-type GUID.
    :vartype recommendation_type_id: str
    :ivar risk: The potential risk of not implementing the recommendation. Known values are:
     "Error", "Warning", and "None".
    :vartype risk: str or ~azure.mgmt.advisor.models.Risk
    :ivar short_description: A summary of the recommendation.
    :vartype short_description: ~azure.mgmt.advisor.models.ShortDescription
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "suppression_ids": {"key": "suppressionIds", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "category": {"key": "properties.category", "type": "str"},
        "impact": {"key": "properties.impact", "type": "str"},
        "impacted_field": {"key": "properties.impactedField", "type": "str"},
        "impacted_value": {"key": "properties.impactedValue", "type": "str"},
        "last_updated": {"key": "properties.lastUpdated", "type": "iso-8601"},
        "metadata": {"key": "properties.metadata", "type": "{object}"},
        "recommendation_type_id": {"key": "properties.recommendationTypeId", "type": "str"},
        "risk": {"key": "properties.risk", "type": "str"},
        "short_description": {"key": "properties.shortDescription", "type": "ShortDescription"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        suppression_ids: Optional[List[str]] = None,
        type: Optional[str] = None,
        category: Optional[Union[str, "_models.Category"]] = None,
        impact: Optional[Union[str, "_models.Impact"]] = None,
        impacted_field: Optional[str] = None,
        impacted_value: Optional[str] = None,
        last_updated: Optional[datetime.datetime] = None,
        metadata: Optional[Dict[str, JSON]] = None,
        recommendation_type_id: Optional[str] = None,
        risk: Optional[Union[str, "_models.Risk"]] = None,
        short_description: Optional["_models.ShortDescription"] = None,
        **kwargs
    ):
        """
        :keyword id: The fully qualified recommendation ID, for example
         /subscriptions/subscriptionId/resourceGroups/resourceGroup1/providers/Microsoft.ClassicCompute/virtualMachines/vm1/providers/Microsoft.Advisor/recommendations/recommendationGUID.
        :paramtype id: str
        :keyword name: The name of recommendation.
        :paramtype name: str
        :keyword suppression_ids: The list of snoozed and dismissed rules for the recommendation.
        :paramtype suppression_ids: list[str]
        :keyword type: The recommendation type: Microsoft.Advisor/recommendations.
        :paramtype type: str
        :keyword category: The category of the recommendation. Known values are: "HighAvailability",
         "Security", "Performance", and "Cost".
        :paramtype category: str or ~azure.mgmt.advisor.models.Category
        :keyword impact: The business impact of the recommendation. Known values are: "High", "Medium",
         and "Low".
        :paramtype impact: str or ~azure.mgmt.advisor.models.Impact
        :keyword impacted_field: The resource type identified by Advisor.
        :paramtype impacted_field: str
        :keyword impacted_value: The resource identified by Advisor.
        :paramtype impacted_value: str
        :keyword last_updated: The most recent time that Advisor checked the validity of the
         recommendation.
        :paramtype last_updated: ~datetime.datetime
        :keyword metadata: The recommendation metadata.
        :paramtype metadata: dict[str, JSON]
        :keyword recommendation_type_id: The recommendation-type GUID.
        :paramtype recommendation_type_id: str
        :keyword risk: The potential risk of not implementing the recommendation. Known values are:
         "Error", "Warning", and "None".
        :paramtype risk: str or ~azure.mgmt.advisor.models.Risk
        :keyword short_description: A summary of the recommendation.
        :paramtype short_description: ~azure.mgmt.advisor.models.ShortDescription
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.suppression_ids = suppression_ids
        self.type = type
        self.category = category
        self.impact = impact
        self.impacted_field = impacted_field
        self.impacted_value = impacted_value
        self.last_updated = last_updated
        self.metadata = metadata
        self.recommendation_type_id = recommendation_type_id
        self.risk = risk
        self.short_description = short_description


class ResourceRecommendationBaseListResult(_serialization.Model):
    """The list of Advisor recommendations.

    :ivar next_link: The link used to get the next page of recommendations.
    :vartype next_link: str
    :ivar value: The list of recommendations.
    :vartype value: list[~azure.mgmt.advisor.models.ResourceRecommendationBase]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ResourceRecommendationBase]"},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["_models.ResourceRecommendationBase"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of recommendations.
        :paramtype next_link: str
        :keyword value: The list of recommendations.
        :paramtype value: list[~azure.mgmt.advisor.models.ResourceRecommendationBase]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ShortDescription(_serialization.Model):
    """A summary of the recommendation.

    :ivar problem: The issue or opportunity identified by the recommendation.
    :vartype problem: str
    :ivar solution: The remediation action suggested by the recommendation.
    :vartype solution: str
    """

    _attribute_map = {
        "problem": {"key": "problem", "type": "str"},
        "solution": {"key": "solution", "type": "str"},
    }

    def __init__(self, *, problem: Optional[str] = None, solution: Optional[str] = None, **kwargs):
        """
        :keyword problem: The issue or opportunity identified by the recommendation.
        :paramtype problem: str
        :keyword solution: The remediation action suggested by the recommendation.
        :paramtype solution: str
        """
        super().__init__(**kwargs)
        self.problem = problem
        self.solution = solution


class SuppressionContract(Resource):
    """The details of the snoozed or dismissed rule; for example, the duration, name, and GUID associated with the rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource ID.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource. This cannot be changed after the resource is
     created.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar suppression_id: The GUID of the suppression.
    :vartype suppression_id: str
    :ivar ttl: The duration for which the suppression is valid.
    :vartype ttl: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "suppression_id": {"key": "suppressionId", "type": "str"},
        "ttl": {"key": "ttl", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        suppression_id: Optional[str] = None,
        ttl: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword location: The location of the resource. This cannot be changed after the resource is
         created.
        :paramtype location: str
        :keyword tags: The tags of the resource.
        :paramtype tags: dict[str, str]
        :keyword suppression_id: The GUID of the suppression.
        :paramtype suppression_id: str
        :keyword ttl: The duration for which the suppression is valid.
        :paramtype ttl: str
        """
        super().__init__(location=location, tags=tags, **kwargs)
        self.suppression_id = suppression_id
        self.ttl = ttl
