# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._advisor_management_client_enums import *


class AdvisorScoreEntity(msrest.serialization.Model):
    """The details of Advisor score for a single category.

    :ivar id: The ID of the resource.
    :vartype id: str
    :ivar name: The category.
    :vartype name: str
    :ivar type: The type of resource.
    :vartype type: str
    :ivar properties: The Advisor score data.
    :vartype properties: ~azure.mgmt.advisor.models.AdvisorScoreEntityProperties
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AdvisorScoreEntityProperties'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        type: Optional[str] = None,
        properties: Optional["AdvisorScoreEntityProperties"] = None,
        **kwargs
    ):
        """
        :keyword id: The ID of the resource.
        :paramtype id: str
        :keyword name: The category.
        :paramtype name: str
        :keyword type: The type of resource.
        :paramtype type: str
        :keyword properties: The Advisor score data.
        :paramtype properties: ~azure.mgmt.advisor.models.AdvisorScoreEntityProperties
        """
        super(AdvisorScoreEntity, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.properties = properties


class AdvisorScoreEntityProperties(msrest.serialization.Model):
    """The Advisor score data.

    :ivar last_refreshed_score: The details of latest available score.
    :vartype last_refreshed_score: ~azure.mgmt.advisor.models.ScoreEntity
    :ivar time_series: The historic Advisor score data.
    :vartype time_series: list[~azure.mgmt.advisor.models.TimeSeriesEntityItem]
    """

    _attribute_map = {
        'last_refreshed_score': {'key': 'lastRefreshedScore', 'type': 'ScoreEntity'},
        'time_series': {'key': 'timeSeries', 'type': '[TimeSeriesEntityItem]'},
    }

    def __init__(
        self,
        *,
        last_refreshed_score: Optional["ScoreEntity"] = None,
        time_series: Optional[List["TimeSeriesEntityItem"]] = None,
        **kwargs
    ):
        """
        :keyword last_refreshed_score: The details of latest available score.
        :paramtype last_refreshed_score: ~azure.mgmt.advisor.models.ScoreEntity
        :keyword time_series: The historic Advisor score data.
        :paramtype time_series: list[~azure.mgmt.advisor.models.TimeSeriesEntityItem]
        """
        super(AdvisorScoreEntityProperties, self).__init__(**kwargs)
        self.last_refreshed_score = last_refreshed_score
        self.time_series = time_series


class ArmErrorResponse(msrest.serialization.Model):
    """ArmErrorResponse.

    :ivar error: ARM error response body.
    :vartype error: ~azure.mgmt.advisor.models.ARMErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ARMErrorResponseBody'},
    }

    def __init__(
        self,
        *,
        error: Optional["ARMErrorResponseBody"] = None,
        **kwargs
    ):
        """
        :keyword error: ARM error response body.
        :paramtype error: ~azure.mgmt.advisor.models.ARMErrorResponseBody
        """
        super(ArmErrorResponse, self).__init__(**kwargs)
        self.error = error


class ARMErrorResponseBody(msrest.serialization.Model):
    """ARM error response body.

    :ivar message: Gets or sets the string that describes the error in detail and provides
     debugging information.
    :vartype message: str
    :ivar code: Gets or sets the string that can be used to programmatically identify the error.
    :vartype code: str
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        message: Optional[str] = None,
        code: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword message: Gets or sets the string that describes the error in detail and provides
         debugging information.
        :paramtype message: str
        :keyword code: Gets or sets the string that can be used to programmatically identify the error.
        :paramtype code: str
        """
        super(ARMErrorResponseBody, self).__init__(**kwargs)
        self.message = message
        self.code = code


class OperationDisplayInfo(msrest.serialization.Model):
    """The operation supported by Advisor.

    :ivar description: The description of the operation.
    :vartype description: str
    :ivar operation: The action that users can perform, based on their permission level.
    :vartype operation: str
    :ivar provider: Service provider: Microsoft Advisor.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        operation: Optional[str] = None,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: The description of the operation.
        :paramtype description: str
        :keyword operation: The action that users can perform, based on their permission level.
        :paramtype operation: str
        :keyword provider: Service provider: Microsoft Advisor.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed.
        :paramtype resource: str
        """
        super(OperationDisplayInfo, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationEntity(msrest.serialization.Model):
    """The operation supported by Advisor.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The operation supported by Advisor.
    :vartype display: ~azure.mgmt.advisor.models.OperationDisplayInfo
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplayInfo'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["OperationDisplayInfo"] = None,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: The operation supported by Advisor.
        :paramtype display: ~azure.mgmt.advisor.models.OperationDisplayInfo
        """
        super(OperationEntity, self).__init__(**kwargs)
        self.name = name
        self.display = display


class OperationEntityListResult(msrest.serialization.Model):
    """The list of Advisor operations.

    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    :ivar value: The list of operations.
    :vartype value: list[~azure.mgmt.advisor.models.OperationEntity]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[OperationEntity]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["OperationEntity"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of operations.
        :paramtype next_link: str
        :keyword value: The list of operations.
        :paramtype value: list[~azure.mgmt.advisor.models.OperationEntity]
        """
        super(OperationEntityListResult, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PathsW6Fm20SubscriptionsSubscriptionidProvidersMicrosoftAdvisorAdvisorscoreGetResponses200ContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsW6Fm20SubscriptionsSubscriptionidProvidersMicrosoftAdvisorAdvisorscoreGetResponses200ContentApplicationJsonSchema.

    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    :ivar value: The list of operations.
    :vartype value: list[~azure.mgmt.advisor.models.AdvisorScoreEntity]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[AdvisorScoreEntity]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["AdvisorScoreEntity"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of operations.
        :paramtype next_link: str
        :keyword value: The list of operations.
        :paramtype value: list[~azure.mgmt.advisor.models.AdvisorScoreEntity]
        """
        super(PathsW6Fm20SubscriptionsSubscriptionidProvidersMicrosoftAdvisorAdvisorscoreGetResponses200ContentApplicationJsonSchema, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScoreEntity(msrest.serialization.Model):
    """The details of Advisor Score.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar date: The date score was calculated.
    :vartype date: str
    :ivar score: The percentage score.
    :vartype score: float
    :ivar consumption_units: The consumption units for the score.
    :vartype consumption_units: float
    :ivar impacted_resource_count: The number of impacted resources.
    :vartype impacted_resource_count: float
    :ivar potential_score_increase: The potential percentage increase in overall score at
     subscription level once all recommendations in this scope are implemented.
    :vartype potential_score_increase: float
    :ivar category_count: The count of impacted categories.
    :vartype category_count: float
    """

    _validation = {
        'category_count': {'readonly': True},
    }

    _attribute_map = {
        'date': {'key': 'date', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
        'consumption_units': {'key': 'consumptionUnits', 'type': 'float'},
        'impacted_resource_count': {'key': 'impactedResourceCount', 'type': 'float'},
        'potential_score_increase': {'key': 'potentialScoreIncrease', 'type': 'float'},
        'category_count': {'key': 'categoryCount', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        date: Optional[str] = None,
        score: Optional[float] = None,
        consumption_units: Optional[float] = None,
        impacted_resource_count: Optional[float] = None,
        potential_score_increase: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword date: The date score was calculated.
        :paramtype date: str
        :keyword score: The percentage score.
        :paramtype score: float
        :keyword consumption_units: The consumption units for the score.
        :paramtype consumption_units: float
        :keyword impacted_resource_count: The number of impacted resources.
        :paramtype impacted_resource_count: float
        :keyword potential_score_increase: The potential percentage increase in overall score at
         subscription level once all recommendations in this scope are implemented.
        :paramtype potential_score_increase: float
        """
        super(ScoreEntity, self).__init__(**kwargs)
        self.date = date
        self.score = score
        self.consumption_units = consumption_units
        self.impacted_resource_count = impacted_resource_count
        self.potential_score_increase = potential_score_increase
        self.category_count = None


class TimeSeriesEntityItem(msrest.serialization.Model):
    """The data from different aggregation levels.

    :ivar aggregation_level: The aggregation level of the score. Possible values include: "week",
     "day", "month".
    :vartype aggregation_level: str or
     ~azure.mgmt.advisor.models.TimeSeriesEntityItemAggregationLevel
    :ivar score_history: The past score data.
    :vartype score_history: list[~azure.mgmt.advisor.models.ScoreEntity]
    """

    _attribute_map = {
        'aggregation_level': {'key': 'aggregationLevel', 'type': 'str'},
        'score_history': {'key': 'scoreHistory', 'type': '[ScoreEntity]'},
    }

    def __init__(
        self,
        *,
        aggregation_level: Optional[Union[str, "TimeSeriesEntityItemAggregationLevel"]] = None,
        score_history: Optional[List["ScoreEntity"]] = None,
        **kwargs
    ):
        """
        :keyword aggregation_level: The aggregation level of the score. Possible values include:
         "week", "day", "month".
        :paramtype aggregation_level: str or
         ~azure.mgmt.advisor.models.TimeSeriesEntityItemAggregationLevel
        :keyword score_history: The past score data.
        :paramtype score_history: list[~azure.mgmt.advisor.models.ScoreEntity]
        """
        super(TimeSeriesEntityItem, self).__init__(**kwargs)
        self.aggregation_level = aggregation_level
        self.score_history = score_history
