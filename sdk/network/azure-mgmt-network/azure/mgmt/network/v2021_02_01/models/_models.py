# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AadAuthenticationParameters(msrest.serialization.Model):
    """AAD Vpn authentication type related parameters.

    :ivar aad_tenant: AAD Vpn authentication parameter AAD tenant.
    :vartype aad_tenant: str
    :ivar aad_audience: AAD Vpn authentication parameter AAD audience.
    :vartype aad_audience: str
    :ivar aad_issuer: AAD Vpn authentication parameter AAD issuer.
    :vartype aad_issuer: str
    """

    _attribute_map = {
        'aad_tenant': {'key': 'aadTenant', 'type': 'str'},
        'aad_audience': {'key': 'aadAudience', 'type': 'str'},
        'aad_issuer': {'key': 'aadIssuer', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword aad_tenant: AAD Vpn authentication parameter AAD tenant.
        :paramtype aad_tenant: str
        :keyword aad_audience: AAD Vpn authentication parameter AAD audience.
        :paramtype aad_audience: str
        :keyword aad_issuer: AAD Vpn authentication parameter AAD issuer.
        :paramtype aad_issuer: str
        """
        super(AadAuthenticationParameters, self).__init__(**kwargs)
        self.aad_tenant = kwargs.get('aad_tenant', None)
        self.aad_audience = kwargs.get('aad_audience', None)
        self.aad_issuer = kwargs.get('aad_issuer', None)


class AddressSpace(msrest.serialization.Model):
    """AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.

    :ivar address_prefixes: A list of address blocks reserved for this virtual network in CIDR
     notation.
    :vartype address_prefixes: list[str]
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_prefixes: A list of address blocks reserved for this virtual network in CIDR
         notation.
        :paramtype address_prefixes: list[str]
        """
        super(AddressSpace, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(Resource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class ApplicationGateway(Resource):
    """Application gateway resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting where the resource needs to come from.
    :vartype zones: list[str]
    :ivar identity: The identity of the application gateway, if configured.
    :vartype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
    :ivar sku: SKU of the application gateway resource.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySku
    :ivar ssl_policy: SSL policy of the application gateway resource.
    :vartype ssl_policy: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicy
    :ivar operational_state: Operational state of the application gateway resource. Possible values
     include: "Stopped", "Starting", "Running", "Stopping".
    :vartype operational_state: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayOperationalState
    :ivar gateway_ip_configurations: Subnets of the application gateway resource. For default
     limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype gateway_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayIPConfiguration]
    :ivar authentication_certificates: Authentication certificates of the application gateway
     resource. For default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype authentication_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayAuthenticationCertificate]
    :ivar trusted_root_certificates: Trusted Root certificates of the application gateway resource.
     For default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype trusted_root_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTrustedRootCertificate]
    :ivar trusted_client_certificates: Trusted client certificates of the application gateway
     resource. For default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype trusted_client_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTrustedClientCertificate]
    :ivar ssl_certificates: SSL certificates of the application gateway resource. For default
     limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype ssl_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCertificate]
    :ivar frontend_ip_configurations: Frontend IP addresses of the application gateway resource.
     For default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype frontend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFrontendIPConfiguration]
    :ivar frontend_ports: Frontend ports of the application gateway resource. For default limits,
     see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype frontend_ports:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFrontendPort]
    :ivar probes: Probes of the application gateway resource.
    :vartype probes: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbe]
    :ivar backend_address_pools: Backend address pool of the application gateway resource. For
     default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype backend_address_pools:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool]
    :ivar backend_http_settings_collection: Backend http settings of the application gateway
     resource. For default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype backend_http_settings_collection:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHttpSettings]
    :ivar http_listeners: Http listeners of the application gateway resource. For default limits,
     see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype http_listeners:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHttpListener]
    :ivar ssl_profiles: SSL profiles of the application gateway resource. For default limits, see
     `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype ssl_profiles:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProfile]
    :ivar url_path_maps: URL path map of the application gateway resource. For default limits, see
     `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype url_path_maps:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayUrlPathMap]
    :ivar request_routing_rules: Request routing rules of the application gateway resource.
    :vartype request_routing_rules:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRequestRoutingRule]
    :ivar rewrite_rule_sets: Rewrite rules for the application gateway resource.
    :vartype rewrite_rule_sets:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleSet]
    :ivar redirect_configurations: Redirect configurations of the application gateway resource. For
     default limits, see `Application Gateway limits
     <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
    :vartype redirect_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRedirectConfiguration]
    :ivar web_application_firewall_configuration: Web application firewall configuration.
    :vartype web_application_firewall_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayWebApplicationFirewallConfiguration
    :ivar firewall_policy: Reference to the FirewallPolicy resource.
    :vartype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar enable_http2: Whether HTTP2 is enabled on the application gateway resource.
    :vartype enable_http2: bool
    :ivar enable_fips: Whether FIPS is enabled on the application gateway resource.
    :vartype enable_fips: bool
    :ivar autoscale_configuration: Autoscale Configuration.
    :vartype autoscale_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayAutoscaleConfiguration
    :ivar private_link_configurations: PrivateLink configurations on application gateway.
    :vartype private_link_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkConfiguration]
    :ivar private_endpoint_connections: Private Endpoint connections on application gateway.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateEndpointConnection]
    :ivar resource_guid: The resource GUID property of the application gateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the application gateway resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar custom_error_configurations: Custom error configurations of the application gateway
     resource.
    :vartype custom_error_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomError]
    :ivar force_firewall_policy_association: If true, associates a firewall policy with an
     application gateway regardless whether the policy differs from the WAF Config.
    :vartype force_firewall_policy_association: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'operational_state': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'sku': {'key': 'properties.sku', 'type': 'ApplicationGatewaySku'},
        'ssl_policy': {'key': 'properties.sslPolicy', 'type': 'ApplicationGatewaySslPolicy'},
        'operational_state': {'key': 'properties.operationalState', 'type': 'str'},
        'gateway_ip_configurations': {'key': 'properties.gatewayIPConfigurations', 'type': '[ApplicationGatewayIPConfiguration]'},
        'authentication_certificates': {'key': 'properties.authenticationCertificates', 'type': '[ApplicationGatewayAuthenticationCertificate]'},
        'trusted_root_certificates': {'key': 'properties.trustedRootCertificates', 'type': '[ApplicationGatewayTrustedRootCertificate]'},
        'trusted_client_certificates': {'key': 'properties.trustedClientCertificates', 'type': '[ApplicationGatewayTrustedClientCertificate]'},
        'ssl_certificates': {'key': 'properties.sslCertificates', 'type': '[ApplicationGatewaySslCertificate]'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[ApplicationGatewayFrontendIPConfiguration]'},
        'frontend_ports': {'key': 'properties.frontendPorts', 'type': '[ApplicationGatewayFrontendPort]'},
        'probes': {'key': 'properties.probes', 'type': '[ApplicationGatewayProbe]'},
        'backend_address_pools': {'key': 'properties.backendAddressPools', 'type': '[ApplicationGatewayBackendAddressPool]'},
        'backend_http_settings_collection': {'key': 'properties.backendHttpSettingsCollection', 'type': '[ApplicationGatewayBackendHttpSettings]'},
        'http_listeners': {'key': 'properties.httpListeners', 'type': '[ApplicationGatewayHttpListener]'},
        'ssl_profiles': {'key': 'properties.sslProfiles', 'type': '[ApplicationGatewaySslProfile]'},
        'url_path_maps': {'key': 'properties.urlPathMaps', 'type': '[ApplicationGatewayUrlPathMap]'},
        'request_routing_rules': {'key': 'properties.requestRoutingRules', 'type': '[ApplicationGatewayRequestRoutingRule]'},
        'rewrite_rule_sets': {'key': 'properties.rewriteRuleSets', 'type': '[ApplicationGatewayRewriteRuleSet]'},
        'redirect_configurations': {'key': 'properties.redirectConfigurations', 'type': '[ApplicationGatewayRedirectConfiguration]'},
        'web_application_firewall_configuration': {'key': 'properties.webApplicationFirewallConfiguration', 'type': 'ApplicationGatewayWebApplicationFirewallConfiguration'},
        'firewall_policy': {'key': 'properties.firewallPolicy', 'type': 'SubResource'},
        'enable_http2': {'key': 'properties.enableHttp2', 'type': 'bool'},
        'enable_fips': {'key': 'properties.enableFips', 'type': 'bool'},
        'autoscale_configuration': {'key': 'properties.autoscaleConfiguration', 'type': 'ApplicationGatewayAutoscaleConfiguration'},
        'private_link_configurations': {'key': 'properties.privateLinkConfigurations', 'type': '[ApplicationGatewayPrivateLinkConfiguration]'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[ApplicationGatewayPrivateEndpointConnection]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'custom_error_configurations': {'key': 'properties.customErrorConfigurations', 'type': '[ApplicationGatewayCustomError]'},
        'force_firewall_policy_association': {'key': 'properties.forceFirewallPolicyAssociation', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword zones: A list of availability zones denoting where the resource needs to come from.
        :paramtype zones: list[str]
        :keyword identity: The identity of the application gateway, if configured.
        :paramtype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
        :keyword sku: SKU of the application gateway resource.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySku
        :keyword ssl_policy: SSL policy of the application gateway resource.
        :paramtype ssl_policy: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicy
        :keyword gateway_ip_configurations: Subnets of the application gateway resource. For default
         limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype gateway_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayIPConfiguration]
        :keyword authentication_certificates: Authentication certificates of the application gateway
         resource. For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype authentication_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayAuthenticationCertificate]
        :keyword trusted_root_certificates: Trusted Root certificates of the application gateway
         resource. For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype trusted_root_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTrustedRootCertificate]
        :keyword trusted_client_certificates: Trusted client certificates of the application gateway
         resource. For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype trusted_client_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTrustedClientCertificate]
        :keyword ssl_certificates: SSL certificates of the application gateway resource. For default
         limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype ssl_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCertificate]
        :keyword frontend_ip_configurations: Frontend IP addresses of the application gateway resource.
         For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype frontend_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFrontendIPConfiguration]
        :keyword frontend_ports: Frontend ports of the application gateway resource. For default
         limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype frontend_ports:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFrontendPort]
        :keyword probes: Probes of the application gateway resource.
        :paramtype probes: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbe]
        :keyword backend_address_pools: Backend address pool of the application gateway resource. For
         default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool]
        :keyword backend_http_settings_collection: Backend http settings of the application gateway
         resource. For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype backend_http_settings_collection:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHttpSettings]
        :keyword http_listeners: Http listeners of the application gateway resource. For default
         limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype http_listeners:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHttpListener]
        :keyword ssl_profiles: SSL profiles of the application gateway resource. For default limits,
         see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype ssl_profiles:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProfile]
        :keyword url_path_maps: URL path map of the application gateway resource. For default limits,
         see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype url_path_maps:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayUrlPathMap]
        :keyword request_routing_rules: Request routing rules of the application gateway resource.
        :paramtype request_routing_rules:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRequestRoutingRule]
        :keyword rewrite_rule_sets: Rewrite rules for the application gateway resource.
        :paramtype rewrite_rule_sets:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleSet]
        :keyword redirect_configurations: Redirect configurations of the application gateway resource.
         For default limits, see `Application Gateway limits
         <https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits>`_.
        :paramtype redirect_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRedirectConfiguration]
        :keyword web_application_firewall_configuration: Web application firewall configuration.
        :paramtype web_application_firewall_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayWebApplicationFirewallConfiguration
        :keyword firewall_policy: Reference to the FirewallPolicy resource.
        :paramtype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword enable_http2: Whether HTTP2 is enabled on the application gateway resource.
        :paramtype enable_http2: bool
        :keyword enable_fips: Whether FIPS is enabled on the application gateway resource.
        :paramtype enable_fips: bool
        :keyword autoscale_configuration: Autoscale Configuration.
        :paramtype autoscale_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayAutoscaleConfiguration
        :keyword private_link_configurations: PrivateLink configurations on application gateway.
        :paramtype private_link_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkConfiguration]
        :keyword custom_error_configurations: Custom error configurations of the application gateway
         resource.
        :paramtype custom_error_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomError]
        :keyword force_firewall_policy_association: If true, associates a firewall policy with an
         application gateway regardless whether the policy differs from the WAF Config.
        :paramtype force_firewall_policy_association: bool
        """
        super(ApplicationGateway, self).__init__(**kwargs)
        self.etag = None
        self.zones = kwargs.get('zones', None)
        self.identity = kwargs.get('identity', None)
        self.sku = kwargs.get('sku', None)
        self.ssl_policy = kwargs.get('ssl_policy', None)
        self.operational_state = None
        self.gateway_ip_configurations = kwargs.get('gateway_ip_configurations', None)
        self.authentication_certificates = kwargs.get('authentication_certificates', None)
        self.trusted_root_certificates = kwargs.get('trusted_root_certificates', None)
        self.trusted_client_certificates = kwargs.get('trusted_client_certificates', None)
        self.ssl_certificates = kwargs.get('ssl_certificates', None)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.frontend_ports = kwargs.get('frontend_ports', None)
        self.probes = kwargs.get('probes', None)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)
        self.backend_http_settings_collection = kwargs.get('backend_http_settings_collection', None)
        self.http_listeners = kwargs.get('http_listeners', None)
        self.ssl_profiles = kwargs.get('ssl_profiles', None)
        self.url_path_maps = kwargs.get('url_path_maps', None)
        self.request_routing_rules = kwargs.get('request_routing_rules', None)
        self.rewrite_rule_sets = kwargs.get('rewrite_rule_sets', None)
        self.redirect_configurations = kwargs.get('redirect_configurations', None)
        self.web_application_firewall_configuration = kwargs.get('web_application_firewall_configuration', None)
        self.firewall_policy = kwargs.get('firewall_policy', None)
        self.enable_http2 = kwargs.get('enable_http2', None)
        self.enable_fips = kwargs.get('enable_fips', None)
        self.autoscale_configuration = kwargs.get('autoscale_configuration', None)
        self.private_link_configurations = kwargs.get('private_link_configurations', None)
        self.private_endpoint_connections = None
        self.resource_guid = None
        self.provisioning_state = None
        self.custom_error_configurations = kwargs.get('custom_error_configurations', None)
        self.force_firewall_policy_association = kwargs.get('force_firewall_policy_association', None)


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(SubResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ApplicationGatewayAuthenticationCertificate(SubResource):
    """Authentication certificates of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the authentication certificate that is unique within an Application
     Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Certificate public data.
    :vartype data: str
    :ivar provisioning_state: The provisioning state of the authentication certificate resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the authentication certificate that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword data: Certificate public data.
        :paramtype data: str
        """
        super(ApplicationGatewayAuthenticationCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.data = kwargs.get('data', None)
        self.provisioning_state = None


class ApplicationGatewayAutoscaleConfiguration(msrest.serialization.Model):
    """Application Gateway autoscale configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar min_capacity: Required. Lower bound on number of Application Gateway capacity.
    :vartype min_capacity: int
    :ivar max_capacity: Upper bound on number of Application Gateway capacity.
    :vartype max_capacity: int
    """

    _validation = {
        'min_capacity': {'required': True, 'minimum': 0},
        'max_capacity': {'minimum': 2},
    }

    _attribute_map = {
        'min_capacity': {'key': 'minCapacity', 'type': 'int'},
        'max_capacity': {'key': 'maxCapacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_capacity: Required. Lower bound on number of Application Gateway capacity.
        :paramtype min_capacity: int
        :keyword max_capacity: Upper bound on number of Application Gateway capacity.
        :paramtype max_capacity: int
        """
        super(ApplicationGatewayAutoscaleConfiguration, self).__init__(**kwargs)
        self.min_capacity = kwargs['min_capacity']
        self.max_capacity = kwargs.get('max_capacity', None)


class ApplicationGatewayAvailableSslOptions(Resource):
    """Response for ApplicationGatewayAvailableSslOptions API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar predefined_policies: List of available Ssl predefined policy.
    :vartype predefined_policies: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar default_policy: Name of the Ssl predefined policy applied by default to application
     gateway. Possible values include: "AppGwSslPolicy20150501", "AppGwSslPolicy20170401",
     "AppGwSslPolicy20170401S".
    :vartype default_policy: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyName
    :ivar available_cipher_suites: List of available Ssl cipher suites.
    :vartype available_cipher_suites: list[str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
    :ivar available_protocols: List of available Ssl protocols.
    :vartype available_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'predefined_policies': {'key': 'properties.predefinedPolicies', 'type': '[SubResource]'},
        'default_policy': {'key': 'properties.defaultPolicy', 'type': 'str'},
        'available_cipher_suites': {'key': 'properties.availableCipherSuites', 'type': '[str]'},
        'available_protocols': {'key': 'properties.availableProtocols', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword predefined_policies: List of available Ssl predefined policy.
        :paramtype predefined_policies: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword default_policy: Name of the Ssl predefined policy applied by default to application
         gateway. Possible values include: "AppGwSslPolicy20150501", "AppGwSslPolicy20170401",
         "AppGwSslPolicy20170401S".
        :paramtype default_policy: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyName
        :keyword available_cipher_suites: List of available Ssl cipher suites.
        :paramtype available_cipher_suites: list[str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
        :keyword available_protocols: List of available Ssl protocols.
        :paramtype available_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol]
        """
        super(ApplicationGatewayAvailableSslOptions, self).__init__(**kwargs)
        self.predefined_policies = kwargs.get('predefined_policies', None)
        self.default_policy = kwargs.get('default_policy', None)
        self.available_cipher_suites = kwargs.get('available_cipher_suites', None)
        self.available_protocols = kwargs.get('available_protocols', None)


class ApplicationGatewayAvailableSslPredefinedPolicies(msrest.serialization.Model):
    """Response for ApplicationGatewayAvailableSslOptions API service call.

    :ivar value: List of available Ssl predefined policy.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPredefinedPolicy]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewaySslPredefinedPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of available Ssl predefined policy.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPredefinedPolicy]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayAvailableSslPredefinedPolicies, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayAvailableWafRuleSetsResult(msrest.serialization.Model):
    """Response for ApplicationGatewayAvailableWafRuleSets API service call.

    :ivar value: The list of application gateway rule sets.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRuleSet]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewayFirewallRuleSet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of application gateway rule sets.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRuleSet]
        """
        super(ApplicationGatewayAvailableWafRuleSetsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ApplicationGatewayBackendAddress(msrest.serialization.Model):
    """Backend address of an application gateway.

    :ivar fqdn: Fully qualified domain name (FQDN).
    :vartype fqdn: str
    :ivar ip_address: IP address.
    :vartype ip_address: str
    """

    _attribute_map = {
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword fqdn: Fully qualified domain name (FQDN).
        :paramtype fqdn: str
        :keyword ip_address: IP address.
        :paramtype ip_address: str
        """
        super(ApplicationGatewayBackendAddress, self).__init__(**kwargs)
        self.fqdn = kwargs.get('fqdn', None)
        self.ip_address = kwargs.get('ip_address', None)


class ApplicationGatewayBackendAddressPool(SubResource):
    """Backend Address Pool of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the backend address pool that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar backend_ip_configurations: Collection of references to IPs defined in network interfaces.
    :vartype backend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
    :ivar backend_addresses: Backend addresses.
    :vartype backend_addresses:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddress]
    :ivar provisioning_state: The provisioning state of the backend address pool resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configurations': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'backend_addresses': {'key': 'properties.backendAddresses', 'type': '[ApplicationGatewayBackendAddress]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the backend address pool that is unique within an Application Gateway.
        :paramtype name: str
        :keyword backend_addresses: Backend addresses.
        :paramtype backend_addresses:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddress]
        """
        super(ApplicationGatewayBackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.backend_ip_configurations = None
        self.backend_addresses = kwargs.get('backend_addresses', None)
        self.provisioning_state = None


class ApplicationGatewayBackendHealth(msrest.serialization.Model):
    """Response for ApplicationGatewayBackendHealth API service call.

    :ivar backend_address_pools: A list of ApplicationGatewayBackendHealthPool resources.
    :vartype backend_address_pools:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthPool]
    """

    _attribute_map = {
        'backend_address_pools': {'key': 'backendAddressPools', 'type': '[ApplicationGatewayBackendHealthPool]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_address_pools: A list of ApplicationGatewayBackendHealthPool resources.
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthPool]
        """
        super(ApplicationGatewayBackendHealth, self).__init__(**kwargs)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)


class ApplicationGatewayBackendHealthHttpSettings(msrest.serialization.Model):
    """Application gateway BackendHealthHttp settings.

    :ivar backend_http_settings: Reference to an ApplicationGatewayBackendHttpSettings resource.
    :vartype backend_http_settings:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHttpSettings
    :ivar servers: List of ApplicationGatewayBackendHealthServer resources.
    :vartype servers:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthServer]
    """

    _attribute_map = {
        'backend_http_settings': {'key': 'backendHttpSettings', 'type': 'ApplicationGatewayBackendHttpSettings'},
        'servers': {'key': 'servers', 'type': '[ApplicationGatewayBackendHealthServer]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_http_settings: Reference to an ApplicationGatewayBackendHttpSettings resource.
        :paramtype backend_http_settings:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHttpSettings
        :keyword servers: List of ApplicationGatewayBackendHealthServer resources.
        :paramtype servers:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthServer]
        """
        super(ApplicationGatewayBackendHealthHttpSettings, self).__init__(**kwargs)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.servers = kwargs.get('servers', None)


class ApplicationGatewayBackendHealthOnDemand(msrest.serialization.Model):
    """Result of on demand test probe.

    :ivar backend_address_pool: Reference to an ApplicationGatewayBackendAddressPool resource.
    :vartype backend_address_pool:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool
    :ivar backend_health_http_settings: Application gateway BackendHealthHttp settings.
    :vartype backend_health_http_settings:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthHttpSettings
    """

    _attribute_map = {
        'backend_address_pool': {'key': 'backendAddressPool', 'type': 'ApplicationGatewayBackendAddressPool'},
        'backend_health_http_settings': {'key': 'backendHealthHttpSettings', 'type': 'ApplicationGatewayBackendHealthHttpSettings'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_address_pool: Reference to an ApplicationGatewayBackendAddressPool resource.
        :paramtype backend_address_pool:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool
        :keyword backend_health_http_settings: Application gateway BackendHealthHttp settings.
        :paramtype backend_health_http_settings:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthHttpSettings
        """
        super(ApplicationGatewayBackendHealthOnDemand, self).__init__(**kwargs)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_health_http_settings = kwargs.get('backend_health_http_settings', None)


class ApplicationGatewayBackendHealthPool(msrest.serialization.Model):
    """Application gateway BackendHealth pool.

    :ivar backend_address_pool: Reference to an ApplicationGatewayBackendAddressPool resource.
    :vartype backend_address_pool:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool
    :ivar backend_http_settings_collection: List of ApplicationGatewayBackendHealthHttpSettings
     resources.
    :vartype backend_http_settings_collection:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthHttpSettings]
    """

    _attribute_map = {
        'backend_address_pool': {'key': 'backendAddressPool', 'type': 'ApplicationGatewayBackendAddressPool'},
        'backend_http_settings_collection': {'key': 'backendHttpSettingsCollection', 'type': '[ApplicationGatewayBackendHealthHttpSettings]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_address_pool: Reference to an ApplicationGatewayBackendAddressPool resource.
        :paramtype backend_address_pool:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool
        :keyword backend_http_settings_collection: List of ApplicationGatewayBackendHealthHttpSettings
         resources.
        :paramtype backend_http_settings_collection:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthHttpSettings]
        """
        super(ApplicationGatewayBackendHealthPool, self).__init__(**kwargs)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings_collection = kwargs.get('backend_http_settings_collection', None)


class ApplicationGatewayBackendHealthServer(msrest.serialization.Model):
    """Application gateway backendhealth http settings.

    :ivar address: IP address or FQDN of backend server.
    :vartype address: str
    :ivar ip_configuration: Reference to IP configuration of backend server.
    :vartype ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration
    :ivar health: Health of backend server. Possible values include: "Unknown", "Up", "Down",
     "Partial", "Draining".
    :vartype health: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthServerHealth
    :ivar health_probe_log: Health Probe Log.
    :vartype health_probe_log: str
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'ip_configuration': {'key': 'ipConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'health': {'key': 'health', 'type': 'str'},
        'health_probe_log': {'key': 'healthProbeLog', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address: IP address or FQDN of backend server.
        :paramtype address: str
        :keyword ip_configuration: Reference to IP configuration of backend server.
        :paramtype ip_configuration:
         ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration
        :keyword health: Health of backend server. Possible values include: "Unknown", "Up", "Down",
         "Partial", "Draining".
        :paramtype health: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendHealthServerHealth
        :keyword health_probe_log: Health Probe Log.
        :paramtype health_probe_log: str
        """
        super(ApplicationGatewayBackendHealthServer, self).__init__(**kwargs)
        self.address = kwargs.get('address', None)
        self.ip_configuration = kwargs.get('ip_configuration', None)
        self.health = kwargs.get('health', None)
        self.health_probe_log = kwargs.get('health_probe_log', None)


class ApplicationGatewayBackendHttpSettings(SubResource):
    """Backend address pool settings of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the backend http settings that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar port: The destination port on the backend.
    :vartype port: int
    :ivar protocol: The protocol used to communicate with the backend. Possible values include:
     "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
    :ivar cookie_based_affinity: Cookie based affinity. Possible values include: "Enabled",
     "Disabled".
    :vartype cookie_based_affinity: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCookieBasedAffinity
    :ivar request_timeout: Request timeout in seconds. Application Gateway will fail the request if
     response is not received within RequestTimeout. Acceptable values are from 1 second to 86400
     seconds.
    :vartype request_timeout: int
    :ivar probe: Probe resource of an application gateway.
    :vartype probe: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar authentication_certificates: Array of references to application gateway authentication
     certificates.
    :vartype authentication_certificates: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar trusted_root_certificates: Array of references to application gateway trusted root
     certificates.
    :vartype trusted_root_certificates: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar connection_draining: Connection draining of the backend http settings resource.
    :vartype connection_draining:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayConnectionDraining
    :ivar host_name: Host header to be sent to the backend servers.
    :vartype host_name: str
    :ivar pick_host_name_from_backend_address: Whether to pick host header should be picked from
     the host name of the backend server. Default value is false.
    :vartype pick_host_name_from_backend_address: bool
    :ivar affinity_cookie_name: Cookie name to use for the affinity cookie.
    :vartype affinity_cookie_name: str
    :ivar probe_enabled: Whether the probe is enabled. Default value is false.
    :vartype probe_enabled: bool
    :ivar path: Path which should be used as a prefix for all HTTP requests. Null means no path
     will be prefixed. Default value is null.
    :vartype path: str
    :ivar provisioning_state: The provisioning state of the backend HTTP settings resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'cookie_based_affinity': {'key': 'properties.cookieBasedAffinity', 'type': 'str'},
        'request_timeout': {'key': 'properties.requestTimeout', 'type': 'int'},
        'probe': {'key': 'properties.probe', 'type': 'SubResource'},
        'authentication_certificates': {'key': 'properties.authenticationCertificates', 'type': '[SubResource]'},
        'trusted_root_certificates': {'key': 'properties.trustedRootCertificates', 'type': '[SubResource]'},
        'connection_draining': {'key': 'properties.connectionDraining', 'type': 'ApplicationGatewayConnectionDraining'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'pick_host_name_from_backend_address': {'key': 'properties.pickHostNameFromBackendAddress', 'type': 'bool'},
        'affinity_cookie_name': {'key': 'properties.affinityCookieName', 'type': 'str'},
        'probe_enabled': {'key': 'properties.probeEnabled', 'type': 'bool'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the backend http settings that is unique within an Application Gateway.
        :paramtype name: str
        :keyword port: The destination port on the backend.
        :paramtype port: int
        :keyword protocol: The protocol used to communicate with the backend. Possible values include:
         "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
        :keyword cookie_based_affinity: Cookie based affinity. Possible values include: "Enabled",
         "Disabled".
        :paramtype cookie_based_affinity: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCookieBasedAffinity
        :keyword request_timeout: Request timeout in seconds. Application Gateway will fail the request
         if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400
         seconds.
        :paramtype request_timeout: int
        :keyword probe: Probe resource of an application gateway.
        :paramtype probe: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword authentication_certificates: Array of references to application gateway authentication
         certificates.
        :paramtype authentication_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword trusted_root_certificates: Array of references to application gateway trusted root
         certificates.
        :paramtype trusted_root_certificates: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword connection_draining: Connection draining of the backend http settings resource.
        :paramtype connection_draining:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayConnectionDraining
        :keyword host_name: Host header to be sent to the backend servers.
        :paramtype host_name: str
        :keyword pick_host_name_from_backend_address: Whether to pick host header should be picked from
         the host name of the backend server. Default value is false.
        :paramtype pick_host_name_from_backend_address: bool
        :keyword affinity_cookie_name: Cookie name to use for the affinity cookie.
        :paramtype affinity_cookie_name: str
        :keyword probe_enabled: Whether the probe is enabled. Default value is false.
        :paramtype probe_enabled: bool
        :keyword path: Path which should be used as a prefix for all HTTP requests. Null means no path
         will be prefixed. Default value is null.
        :paramtype path: str
        """
        super(ApplicationGatewayBackendHttpSettings, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.port = kwargs.get('port', None)
        self.protocol = kwargs.get('protocol', None)
        self.cookie_based_affinity = kwargs.get('cookie_based_affinity', None)
        self.request_timeout = kwargs.get('request_timeout', None)
        self.probe = kwargs.get('probe', None)
        self.authentication_certificates = kwargs.get('authentication_certificates', None)
        self.trusted_root_certificates = kwargs.get('trusted_root_certificates', None)
        self.connection_draining = kwargs.get('connection_draining', None)
        self.host_name = kwargs.get('host_name', None)
        self.pick_host_name_from_backend_address = kwargs.get('pick_host_name_from_backend_address', None)
        self.affinity_cookie_name = kwargs.get('affinity_cookie_name', None)
        self.probe_enabled = kwargs.get('probe_enabled', None)
        self.path = kwargs.get('path', None)
        self.provisioning_state = None


class ApplicationGatewayClientAuthConfiguration(msrest.serialization.Model):
    """Application gateway client authentication configuration.

    :ivar verify_client_cert_issuer_dn: Verify client certificate issuer name on the application
     gateway.
    :vartype verify_client_cert_issuer_dn: bool
    """

    _attribute_map = {
        'verify_client_cert_issuer_dn': {'key': 'verifyClientCertIssuerDN', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword verify_client_cert_issuer_dn: Verify client certificate issuer name on the application
         gateway.
        :paramtype verify_client_cert_issuer_dn: bool
        """
        super(ApplicationGatewayClientAuthConfiguration, self).__init__(**kwargs)
        self.verify_client_cert_issuer_dn = kwargs.get('verify_client_cert_issuer_dn', None)


class ApplicationGatewayConnectionDraining(msrest.serialization.Model):
    """Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Whether connection draining is enabled or not.
    :vartype enabled: bool
    :ivar drain_timeout_in_sec: Required. The number of seconds connection draining is active.
     Acceptable values are from 1 second to 3600 seconds.
    :vartype drain_timeout_in_sec: int
    """

    _validation = {
        'enabled': {'required': True},
        'drain_timeout_in_sec': {'required': True, 'maximum': 3600, 'minimum': 1},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'drain_timeout_in_sec': {'key': 'drainTimeoutInSec', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Required. Whether connection draining is enabled or not.
        :paramtype enabled: bool
        :keyword drain_timeout_in_sec: Required. The number of seconds connection draining is active.
         Acceptable values are from 1 second to 3600 seconds.
        :paramtype drain_timeout_in_sec: int
        """
        super(ApplicationGatewayConnectionDraining, self).__init__(**kwargs)
        self.enabled = kwargs['enabled']
        self.drain_timeout_in_sec = kwargs['drain_timeout_in_sec']


class ApplicationGatewayCustomError(msrest.serialization.Model):
    """Customer error of an application gateway.

    :ivar status_code: Status code of the application gateway customer error. Possible values
     include: "HttpStatus403", "HttpStatus502".
    :vartype status_code: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomErrorStatusCode
    :ivar custom_error_page_url: Error page URL of the application gateway customer error.
    :vartype custom_error_page_url: str
    """

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'custom_error_page_url': {'key': 'customErrorPageUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status_code: Status code of the application gateway customer error. Possible values
         include: "HttpStatus403", "HttpStatus502".
        :paramtype status_code: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomErrorStatusCode
        :keyword custom_error_page_url: Error page URL of the application gateway customer error.
        :paramtype custom_error_page_url: str
        """
        super(ApplicationGatewayCustomError, self).__init__(**kwargs)
        self.status_code = kwargs.get('status_code', None)
        self.custom_error_page_url = kwargs.get('custom_error_page_url', None)


class ApplicationGatewayFirewallDisabledRuleGroup(msrest.serialization.Model):
    """Allows to disable rules within a rule group or an entire rule group.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. The name of the rule group that will be disabled.
    :vartype rule_group_name: str
    :ivar rules: The list of rules that will be disabled. If null, all rules of the rule group will
     be disabled.
    :vartype rules: list[int]
    """

    _validation = {
        'rule_group_name': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. The name of the rule group that will be disabled.
        :paramtype rule_group_name: str
        :keyword rules: The list of rules that will be disabled. If null, all rules of the rule group
         will be disabled.
        :paramtype rules: list[int]
        """
        super(ApplicationGatewayFirewallDisabledRuleGroup, self).__init__(**kwargs)
        self.rule_group_name = kwargs['rule_group_name']
        self.rules = kwargs.get('rules', None)


class ApplicationGatewayFirewallExclusion(msrest.serialization.Model):
    """Allow to exclude some variable satisfy the condition for the WAF check.

    All required parameters must be populated in order to send to Azure.

    :ivar match_variable: Required. The variable to be excluded.
    :vartype match_variable: str
    :ivar selector_match_operator: Required. When matchVariable is a collection, operate on the
     selector to specify which elements in the collection this exclusion applies to.
    :vartype selector_match_operator: str
    :ivar selector: Required. When matchVariable is a collection, operator used to specify which
     elements in the collection this exclusion applies to.
    :vartype selector: str
    """

    _validation = {
        'match_variable': {'required': True},
        'selector_match_operator': {'required': True},
        'selector': {'required': True},
    }

    _attribute_map = {
        'match_variable': {'key': 'matchVariable', 'type': 'str'},
        'selector_match_operator': {'key': 'selectorMatchOperator', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword match_variable: Required. The variable to be excluded.
        :paramtype match_variable: str
        :keyword selector_match_operator: Required. When matchVariable is a collection, operate on the
         selector to specify which elements in the collection this exclusion applies to.
        :paramtype selector_match_operator: str
        :keyword selector: Required. When matchVariable is a collection, operator used to specify which
         elements in the collection this exclusion applies to.
        :paramtype selector: str
        """
        super(ApplicationGatewayFirewallExclusion, self).__init__(**kwargs)
        self.match_variable = kwargs['match_variable']
        self.selector_match_operator = kwargs['selector_match_operator']
        self.selector = kwargs['selector']


class ApplicationGatewayFirewallRule(msrest.serialization.Model):
    """A web application firewall rule.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_id: Required. The identifier of the web application firewall rule.
    :vartype rule_id: int
    :ivar description: The description of the web application firewall rule.
    :vartype description: str
    """

    _validation = {
        'rule_id': {'required': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'int'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_id: Required. The identifier of the web application firewall rule.
        :paramtype rule_id: int
        :keyword description: The description of the web application firewall rule.
        :paramtype description: str
        """
        super(ApplicationGatewayFirewallRule, self).__init__(**kwargs)
        self.rule_id = kwargs['rule_id']
        self.description = kwargs.get('description', None)


class ApplicationGatewayFirewallRuleGroup(msrest.serialization.Model):
    """A web application firewall rule group.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. The name of the web application firewall rule group.
    :vartype rule_group_name: str
    :ivar description: The description of the web application firewall rule group.
    :vartype description: str
    :ivar rules: Required. The rules of the web application firewall rule group.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRule]
    """

    _validation = {
        'rule_group_name': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[ApplicationGatewayFirewallRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. The name of the web application firewall rule group.
        :paramtype rule_group_name: str
        :keyword description: The description of the web application firewall rule group.
        :paramtype description: str
        :keyword rules: Required. The rules of the web application firewall rule group.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRule]
        """
        super(ApplicationGatewayFirewallRuleGroup, self).__init__(**kwargs)
        self.rule_group_name = kwargs['rule_group_name']
        self.description = kwargs.get('description', None)
        self.rules = kwargs['rules']


class ApplicationGatewayFirewallRuleSet(Resource):
    """A web application firewall rule set.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: The provisioning state of the web application firewall rule set.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar rule_set_type: The type of the web application firewall rule set.
    :vartype rule_set_type: str
    :ivar rule_set_version: The version of the web application firewall rule set type.
    :vartype rule_set_version: str
    :ivar rule_groups: The rule groups of the web application firewall rule set.
    :vartype rule_groups:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRuleGroup]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'rule_set_type': {'key': 'properties.ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'properties.ruleSetVersion', 'type': 'str'},
        'rule_groups': {'key': 'properties.ruleGroups', 'type': '[ApplicationGatewayFirewallRuleGroup]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword rule_set_type: The type of the web application firewall rule set.
        :paramtype rule_set_type: str
        :keyword rule_set_version: The version of the web application firewall rule set type.
        :paramtype rule_set_version: str
        :keyword rule_groups: The rule groups of the web application firewall rule set.
        :paramtype rule_groups:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallRuleGroup]
        """
        super(ApplicationGatewayFirewallRuleSet, self).__init__(**kwargs)
        self.provisioning_state = None
        self.rule_set_type = kwargs.get('rule_set_type', None)
        self.rule_set_version = kwargs.get('rule_set_version', None)
        self.rule_groups = kwargs.get('rule_groups', None)


class ApplicationGatewayFrontendIPConfiguration(SubResource):
    """Frontend IP configuration of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the frontend IP configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar private_ip_address: PrivateIPAddress of the network interface IP Configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: Reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar public_ip_address: Reference to the PublicIP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar private_link_configuration: Reference to the application gateway private link
     configuration.
    :vartype private_link_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the frontend IP configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'private_link_configuration': {'key': 'properties.privateLinkConfiguration', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the frontend IP configuration that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword private_ip_address: PrivateIPAddress of the network interface IP Configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: Reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword public_ip_address: Reference to the PublicIP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword private_link_configuration: Reference to the application gateway private link
         configuration.
        :paramtype private_link_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(ApplicationGatewayFrontendIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.private_link_configuration = kwargs.get('private_link_configuration', None)
        self.provisioning_state = None


class ApplicationGatewayFrontendPort(SubResource):
    """Frontend port of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the frontend port that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar port: Frontend port.
    :vartype port: int
    :ivar provisioning_state: The provisioning state of the frontend port resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the frontend port that is unique within an Application Gateway.
        :paramtype name: str
        :keyword port: Frontend port.
        :paramtype port: int
        """
        super(ApplicationGatewayFrontendPort, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.port = kwargs.get('port', None)
        self.provisioning_state = None


class ApplicationGatewayHeaderConfiguration(msrest.serialization.Model):
    """Header configuration of the Actions set in Application Gateway.

    :ivar header_name: Header name of the header configuration.
    :vartype header_name: str
    :ivar header_value: Header value of the header configuration.
    :vartype header_value: str
    """

    _attribute_map = {
        'header_name': {'key': 'headerName', 'type': 'str'},
        'header_value': {'key': 'headerValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword header_name: Header name of the header configuration.
        :paramtype header_name: str
        :keyword header_value: Header value of the header configuration.
        :paramtype header_value: str
        """
        super(ApplicationGatewayHeaderConfiguration, self).__init__(**kwargs)
        self.header_name = kwargs.get('header_name', None)
        self.header_value = kwargs.get('header_value', None)


class ApplicationGatewayHttpListener(SubResource):
    """Http listener of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the HTTP listener that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar frontend_ip_configuration: Frontend IP configuration resource of an application gateway.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar frontend_port: Frontend port resource of an application gateway.
    :vartype frontend_port: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar protocol: Protocol of the HTTP listener. Possible values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
    :ivar host_name: Host name of HTTP listener.
    :vartype host_name: str
    :ivar ssl_certificate: SSL certificate resource of an application gateway.
    :vartype ssl_certificate: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar ssl_profile: SSL profile resource of the application gateway.
    :vartype ssl_profile: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar require_server_name_indication: Applicable only if protocol is https. Enables SNI for
     multi-hosting.
    :vartype require_server_name_indication: bool
    :ivar provisioning_state: The provisioning state of the HTTP listener resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar custom_error_configurations: Custom error configurations of the HTTP listener.
    :vartype custom_error_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomError]
    :ivar firewall_policy: Reference to the FirewallPolicy resource.
    :vartype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar host_names: List of Host names for HTTP Listener that allows special wildcard characters
     as well.
    :vartype host_names: list[str]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'ssl_certificate': {'key': 'properties.sslCertificate', 'type': 'SubResource'},
        'ssl_profile': {'key': 'properties.sslProfile', 'type': 'SubResource'},
        'require_server_name_indication': {'key': 'properties.requireServerNameIndication', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'custom_error_configurations': {'key': 'properties.customErrorConfigurations', 'type': '[ApplicationGatewayCustomError]'},
        'firewall_policy': {'key': 'properties.firewallPolicy', 'type': 'SubResource'},
        'host_names': {'key': 'properties.hostNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the HTTP listener that is unique within an Application Gateway.
        :paramtype name: str
        :keyword frontend_ip_configuration: Frontend IP configuration resource of an application
         gateway.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword frontend_port: Frontend port resource of an application gateway.
        :paramtype frontend_port: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protocol: Protocol of the HTTP listener. Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
        :keyword host_name: Host name of HTTP listener.
        :paramtype host_name: str
        :keyword ssl_certificate: SSL certificate resource of an application gateway.
        :paramtype ssl_certificate: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword ssl_profile: SSL profile resource of the application gateway.
        :paramtype ssl_profile: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword require_server_name_indication: Applicable only if protocol is https. Enables SNI for
         multi-hosting.
        :paramtype require_server_name_indication: bool
        :keyword custom_error_configurations: Custom error configurations of the HTTP listener.
        :paramtype custom_error_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayCustomError]
        :keyword firewall_policy: Reference to the FirewallPolicy resource.
        :paramtype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword host_names: List of Host names for HTTP Listener that allows special wildcard
         characters as well.
        :paramtype host_names: list[str]
        """
        super(ApplicationGatewayHttpListener, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.protocol = kwargs.get('protocol', None)
        self.host_name = kwargs.get('host_name', None)
        self.ssl_certificate = kwargs.get('ssl_certificate', None)
        self.ssl_profile = kwargs.get('ssl_profile', None)
        self.require_server_name_indication = kwargs.get('require_server_name_indication', None)
        self.provisioning_state = None
        self.custom_error_configurations = kwargs.get('custom_error_configurations', None)
        self.firewall_policy = kwargs.get('firewall_policy', None)
        self.host_names = kwargs.get('host_names', None)


class ApplicationGatewayIPConfiguration(SubResource):
    """IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the IP configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar subnet: Reference to the subnet resource. A subnet from where application gateway gets
     its private address.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the application gateway IP configuration
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the IP configuration that is unique within an Application Gateway.
        :paramtype name: str
        :keyword subnet: Reference to the subnet resource. A subnet from where application gateway gets
         its private address.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(ApplicationGatewayIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.subnet = kwargs.get('subnet', None)
        self.provisioning_state = None


class ApplicationGatewayListResult(msrest.serialization.Model):
    """Response for ListApplicationGateways API service call.

    :ivar value: List of an application gateways in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGateway]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of an application gateways in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGateway]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayOnDemandProbe(msrest.serialization.Model):
    """Details of on demand test probe request.

    :ivar protocol: The protocol used for the probe. Possible values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
    :ivar host: Host name to send the probe to.
    :vartype host: str
    :ivar path: Relative path of probe. Valid path starts from '/'. Probe is sent to
     :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
    :vartype path: str
    :ivar timeout: The probe timeout in seconds. Probe marked as failed if valid response is not
     received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
    :vartype timeout: int
    :ivar pick_host_name_from_backend_http_settings: Whether the host header should be picked from
     the backend http settings. Default value is false.
    :vartype pick_host_name_from_backend_http_settings: bool
    :ivar match: Criterion for classifying a healthy probe response.
    :vartype match:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbeHealthResponseMatch
    :ivar backend_address_pool: Reference to backend pool of application gateway to which probe
     request will be sent.
    :vartype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_http_settings: Reference to backend http setting of application gateway to be
     used for test probe.
    :vartype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'protocol': {'key': 'protocol', 'type': 'str'},
        'host': {'key': 'host', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'timeout': {'key': 'timeout', 'type': 'int'},
        'pick_host_name_from_backend_http_settings': {'key': 'pickHostNameFromBackendHttpSettings', 'type': 'bool'},
        'match': {'key': 'match', 'type': 'ApplicationGatewayProbeHealthResponseMatch'},
        'backend_address_pool': {'key': 'backendAddressPool', 'type': 'SubResource'},
        'backend_http_settings': {'key': 'backendHttpSettings', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol: The protocol used for the probe. Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
        :keyword host: Host name to send the probe to.
        :paramtype host: str
        :keyword path: Relative path of probe. Valid path starts from '/'. Probe is sent to
         :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
        :paramtype path: str
        :keyword timeout: The probe timeout in seconds. Probe marked as failed if valid response is not
         received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
        :paramtype timeout: int
        :keyword pick_host_name_from_backend_http_settings: Whether the host header should be picked
         from the backend http settings. Default value is false.
        :paramtype pick_host_name_from_backend_http_settings: bool
        :keyword match: Criterion for classifying a healthy probe response.
        :paramtype match:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbeHealthResponseMatch
        :keyword backend_address_pool: Reference to backend pool of application gateway to which probe
         request will be sent.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword backend_http_settings: Reference to backend http setting of application gateway to be
         used for test probe.
        :paramtype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(ApplicationGatewayOnDemandProbe, self).__init__(**kwargs)
        self.protocol = kwargs.get('protocol', None)
        self.host = kwargs.get('host', None)
        self.path = kwargs.get('path', None)
        self.timeout = kwargs.get('timeout', None)
        self.pick_host_name_from_backend_http_settings = kwargs.get('pick_host_name_from_backend_http_settings', None)
        self.match = kwargs.get('match', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)


class ApplicationGatewayPathRule(SubResource):
    """Path rule of URL path map of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the path rule that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar paths: Path rules of URL path map.
    :vartype paths: list[str]
    :ivar backend_address_pool: Backend address pool resource of URL path map path rule.
    :vartype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_http_settings: Backend http settings resource of URL path map path rule.
    :vartype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar redirect_configuration: Redirect configuration resource of URL path map path rule.
    :vartype redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar rewrite_rule_set: Rewrite rule set resource of URL path map path rule.
    :vartype rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the path rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar firewall_policy: Reference to the FirewallPolicy resource.
    :vartype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'paths': {'key': 'properties.paths', 'type': '[str]'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'backend_http_settings': {'key': 'properties.backendHttpSettings', 'type': 'SubResource'},
        'redirect_configuration': {'key': 'properties.redirectConfiguration', 'type': 'SubResource'},
        'rewrite_rule_set': {'key': 'properties.rewriteRuleSet', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'firewall_policy': {'key': 'properties.firewallPolicy', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the path rule that is unique within an Application Gateway.
        :paramtype name: str
        :keyword paths: Path rules of URL path map.
        :paramtype paths: list[str]
        :keyword backend_address_pool: Backend address pool resource of URL path map path rule.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword backend_http_settings: Backend http settings resource of URL path map path rule.
        :paramtype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword redirect_configuration: Redirect configuration resource of URL path map path rule.
        :paramtype redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword rewrite_rule_set: Rewrite rule set resource of URL path map path rule.
        :paramtype rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword firewall_policy: Reference to the FirewallPolicy resource.
        :paramtype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(ApplicationGatewayPathRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.paths = kwargs.get('paths', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.redirect_configuration = kwargs.get('redirect_configuration', None)
        self.rewrite_rule_set = kwargs.get('rewrite_rule_set', None)
        self.provisioning_state = None
        self.firewall_policy = kwargs.get('firewall_policy', None)


class ApplicationGatewayPrivateEndpointConnection(SubResource):
    """Private Endpoint connection on an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the private endpoint connection on an application gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar private_endpoint: The resource of private end point.
    :vartype private_endpoint: ~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the application gateway private endpoint
     connection resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar link_identifier: The consumer link id.
    :vartype link_identifier: str
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'private_endpoint': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'link_identifier': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'link_identifier': {'key': 'properties.linkIdentifier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the private endpoint connection on an application gateway.
        :paramtype name: str
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
        """
        super(ApplicationGatewayPrivateEndpointConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_endpoint = None
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = None
        self.link_identifier = None


class ApplicationGatewayPrivateEndpointConnectionListResult(msrest.serialization.Model):
    """Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.

    :ivar value: List of private endpoint connections on an application gateway.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateEndpointConnection]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewayPrivateEndpointConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of private endpoint connections on an application gateway.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateEndpointConnection]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayPrivateEndpointConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayPrivateLinkConfiguration(SubResource):
    """Private Link Configuration on an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the private link configuration that is unique within an Application
     Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar ip_configurations: An array of application gateway private link ip configurations.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkIpConfiguration]
    :ivar provisioning_state: The provisioning state of the application gateway private link
     configuration. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[ApplicationGatewayPrivateLinkIpConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the private link configuration that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword ip_configurations: An array of application gateway private link ip configurations.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkIpConfiguration]
        """
        super(ApplicationGatewayPrivateLinkConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.provisioning_state = None


class ApplicationGatewayPrivateLinkIpConfiguration(SubResource):
    """The application gateway private link ip configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of application gateway private link ip configuration.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: Reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar primary: Whether the ip configuration is primary or not.
    :vartype primary: bool
    :ivar provisioning_state: The provisioning state of the application gateway private link IP
     configuration. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of application gateway private link ip configuration.
        :paramtype name: str
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: Reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword primary: Whether the ip configuration is primary or not.
        :paramtype primary: bool
        """
        super(ApplicationGatewayPrivateLinkIpConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.primary = kwargs.get('primary', None)
        self.provisioning_state = None


class ApplicationGatewayPrivateLinkResource(SubResource):
    """PrivateLink Resource of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the private link resource that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar group_id: Group identifier of private link resource.
    :vartype group_id: str
    :ivar required_members: Required member names of private link resource.
    :vartype required_members: list[str]
    :ivar required_zone_names: Required DNS zone names of the the private link resource.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'properties.requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the private link resource that is unique within an Application Gateway.
        :paramtype name: str
        :keyword required_zone_names: Required DNS zone names of the the private link resource.
        :paramtype required_zone_names: list[str]
        """
        super(ApplicationGatewayPrivateLinkResource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.group_id = None
        self.required_members = None
        self.required_zone_names = kwargs.get('required_zone_names', None)


class ApplicationGatewayPrivateLinkResourceListResult(msrest.serialization.Model):
    """Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.

    :ivar value: List of private link resources of an application gateway.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkResource]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewayPrivateLinkResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of private link resources of an application gateway.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPrivateLinkResource]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayPrivateLinkResourceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayProbe(SubResource):
    """Probe of the application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the probe that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar protocol: The protocol used for the probe. Possible values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
    :ivar host: Host name to send the probe to.
    :vartype host: str
    :ivar path: Relative path of probe. Valid path starts from '/'. Probe is sent to
     :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
    :vartype path: str
    :ivar interval: The probing interval in seconds. This is the time interval between two
     consecutive probes. Acceptable values are from 1 second to 86400 seconds.
    :vartype interval: int
    :ivar timeout: The probe timeout in seconds. Probe marked as failed if valid response is not
     received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
    :vartype timeout: int
    :ivar unhealthy_threshold: The probe retry count. Backend server is marked down after
     consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second
     to 20.
    :vartype unhealthy_threshold: int
    :ivar pick_host_name_from_backend_http_settings: Whether the host header should be picked from
     the backend http settings. Default value is false.
    :vartype pick_host_name_from_backend_http_settings: bool
    :ivar min_servers: Minimum number of servers that are always marked healthy. Default value is
     0.
    :vartype min_servers: int
    :ivar match: Criterion for classifying a healthy probe response.
    :vartype match:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbeHealthResponseMatch
    :ivar provisioning_state: The provisioning state of the probe resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar port: Custom port which will be used for probing the backend servers. The valid value
     ranges from 1 to 65535. In case not set, port from http settings will be used. This property is
     valid for Standard_v2 and WAF_v2 only.
    :vartype port: int
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'port': {'maximum': 65535, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'host': {'key': 'properties.host', 'type': 'str'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'interval': {'key': 'properties.interval', 'type': 'int'},
        'timeout': {'key': 'properties.timeout', 'type': 'int'},
        'unhealthy_threshold': {'key': 'properties.unhealthyThreshold', 'type': 'int'},
        'pick_host_name_from_backend_http_settings': {'key': 'properties.pickHostNameFromBackendHttpSettings', 'type': 'bool'},
        'min_servers': {'key': 'properties.minServers', 'type': 'int'},
        'match': {'key': 'properties.match', 'type': 'ApplicationGatewayProbeHealthResponseMatch'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the probe that is unique within an Application Gateway.
        :paramtype name: str
        :keyword protocol: The protocol used for the probe. Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProtocol
        :keyword host: Host name to send the probe to.
        :paramtype host: str
        :keyword path: Relative path of probe. Valid path starts from '/'. Probe is sent to
         :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
        :paramtype path: str
        :keyword interval: The probing interval in seconds. This is the time interval between two
         consecutive probes. Acceptable values are from 1 second to 86400 seconds.
        :paramtype interval: int
        :keyword timeout: The probe timeout in seconds. Probe marked as failed if valid response is not
         received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
        :paramtype timeout: int
        :keyword unhealthy_threshold: The probe retry count. Backend server is marked down after
         consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second
         to 20.
        :paramtype unhealthy_threshold: int
        :keyword pick_host_name_from_backend_http_settings: Whether the host header should be picked
         from the backend http settings. Default value is false.
        :paramtype pick_host_name_from_backend_http_settings: bool
        :keyword min_servers: Minimum number of servers that are always marked healthy. Default value
         is 0.
        :paramtype min_servers: int
        :keyword match: Criterion for classifying a healthy probe response.
        :paramtype match:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayProbeHealthResponseMatch
        :keyword port: Custom port which will be used for probing the backend servers. The valid value
         ranges from 1 to 65535. In case not set, port from http settings will be used. This property is
         valid for Standard_v2 and WAF_v2 only.
        :paramtype port: int
        """
        super(ApplicationGatewayProbe, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.protocol = kwargs.get('protocol', None)
        self.host = kwargs.get('host', None)
        self.path = kwargs.get('path', None)
        self.interval = kwargs.get('interval', None)
        self.timeout = kwargs.get('timeout', None)
        self.unhealthy_threshold = kwargs.get('unhealthy_threshold', None)
        self.pick_host_name_from_backend_http_settings = kwargs.get('pick_host_name_from_backend_http_settings', None)
        self.min_servers = kwargs.get('min_servers', None)
        self.match = kwargs.get('match', None)
        self.provisioning_state = None
        self.port = kwargs.get('port', None)


class ApplicationGatewayProbeHealthResponseMatch(msrest.serialization.Model):
    """Application gateway probe health response match.

    :ivar body: Body that must be contained in the health response. Default value is empty.
    :vartype body: str
    :ivar status_codes: Allowed ranges of healthy status codes. Default range of healthy status
     codes is 200-399.
    :vartype status_codes: list[str]
    """

    _attribute_map = {
        'body': {'key': 'body', 'type': 'str'},
        'status_codes': {'key': 'statusCodes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword body: Body that must be contained in the health response. Default value is empty.
        :paramtype body: str
        :keyword status_codes: Allowed ranges of healthy status codes. Default range of healthy status
         codes is 200-399.
        :paramtype status_codes: list[str]
        """
        super(ApplicationGatewayProbeHealthResponseMatch, self).__init__(**kwargs)
        self.body = kwargs.get('body', None)
        self.status_codes = kwargs.get('status_codes', None)


class ApplicationGatewayRedirectConfiguration(SubResource):
    """Redirect configuration of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the redirect configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar redirect_type: HTTP redirection type. Possible values include: "Permanent", "Found",
     "SeeOther", "Temporary".
    :vartype redirect_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRedirectType
    :ivar target_listener: Reference to a listener to redirect the request to.
    :vartype target_listener: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar target_url: Url to redirect the request to.
    :vartype target_url: str
    :ivar include_path: Include path in the redirected url.
    :vartype include_path: bool
    :ivar include_query_string: Include query string in the redirected url.
    :vartype include_query_string: bool
    :ivar request_routing_rules: Request routing specifying redirect configuration.
    :vartype request_routing_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar url_path_maps: Url path maps specifying default redirect configuration.
    :vartype url_path_maps: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar path_rules: Path rules specifying redirect configuration.
    :vartype path_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'redirect_type': {'key': 'properties.redirectType', 'type': 'str'},
        'target_listener': {'key': 'properties.targetListener', 'type': 'SubResource'},
        'target_url': {'key': 'properties.targetUrl', 'type': 'str'},
        'include_path': {'key': 'properties.includePath', 'type': 'bool'},
        'include_query_string': {'key': 'properties.includeQueryString', 'type': 'bool'},
        'request_routing_rules': {'key': 'properties.requestRoutingRules', 'type': '[SubResource]'},
        'url_path_maps': {'key': 'properties.urlPathMaps', 'type': '[SubResource]'},
        'path_rules': {'key': 'properties.pathRules', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the redirect configuration that is unique within an Application Gateway.
        :paramtype name: str
        :keyword redirect_type: HTTP redirection type. Possible values include: "Permanent", "Found",
         "SeeOther", "Temporary".
        :paramtype redirect_type: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRedirectType
        :keyword target_listener: Reference to a listener to redirect the request to.
        :paramtype target_listener: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword target_url: Url to redirect the request to.
        :paramtype target_url: str
        :keyword include_path: Include path in the redirected url.
        :paramtype include_path: bool
        :keyword include_query_string: Include query string in the redirected url.
        :paramtype include_query_string: bool
        :keyword request_routing_rules: Request routing specifying redirect configuration.
        :paramtype request_routing_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword url_path_maps: Url path maps specifying default redirect configuration.
        :paramtype url_path_maps: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword path_rules: Path rules specifying redirect configuration.
        :paramtype path_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(ApplicationGatewayRedirectConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.redirect_type = kwargs.get('redirect_type', None)
        self.target_listener = kwargs.get('target_listener', None)
        self.target_url = kwargs.get('target_url', None)
        self.include_path = kwargs.get('include_path', None)
        self.include_query_string = kwargs.get('include_query_string', None)
        self.request_routing_rules = kwargs.get('request_routing_rules', None)
        self.url_path_maps = kwargs.get('url_path_maps', None)
        self.path_rules = kwargs.get('path_rules', None)


class ApplicationGatewayRequestRoutingRule(SubResource):
    """Request routing rule of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the request routing rule that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar rule_type: Rule type. Possible values include: "Basic", "PathBasedRouting".
    :vartype rule_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRequestRoutingRuleType
    :ivar priority: Priority of the request routing rule.
    :vartype priority: int
    :ivar backend_address_pool: Backend address pool resource of the application gateway.
    :vartype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_http_settings: Backend http settings resource of the application gateway.
    :vartype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar http_listener: Http listener resource of the application gateway.
    :vartype http_listener: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar url_path_map: URL path map resource of the application gateway.
    :vartype url_path_map: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar rewrite_rule_set: Rewrite Rule Set resource in Basic rule of the application gateway.
    :vartype rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar redirect_configuration: Redirect configuration resource of the application gateway.
    :vartype redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the request routing rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'priority': {'maximum': 20000, 'minimum': 1},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rule_type': {'key': 'properties.ruleType', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'backend_http_settings': {'key': 'properties.backendHttpSettings', 'type': 'SubResource'},
        'http_listener': {'key': 'properties.httpListener', 'type': 'SubResource'},
        'url_path_map': {'key': 'properties.urlPathMap', 'type': 'SubResource'},
        'rewrite_rule_set': {'key': 'properties.rewriteRuleSet', 'type': 'SubResource'},
        'redirect_configuration': {'key': 'properties.redirectConfiguration', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the request routing rule that is unique within an Application Gateway.
        :paramtype name: str
        :keyword rule_type: Rule type. Possible values include: "Basic", "PathBasedRouting".
        :paramtype rule_type: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRequestRoutingRuleType
        :keyword priority: Priority of the request routing rule.
        :paramtype priority: int
        :keyword backend_address_pool: Backend address pool resource of the application gateway.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword backend_http_settings: Backend http settings resource of the application gateway.
        :paramtype backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword http_listener: Http listener resource of the application gateway.
        :paramtype http_listener: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword url_path_map: URL path map resource of the application gateway.
        :paramtype url_path_map: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword rewrite_rule_set: Rewrite Rule Set resource in Basic rule of the application gateway.
        :paramtype rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword redirect_configuration: Redirect configuration resource of the application gateway.
        :paramtype redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(ApplicationGatewayRequestRoutingRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.rule_type = kwargs.get('rule_type', None)
        self.priority = kwargs.get('priority', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.http_listener = kwargs.get('http_listener', None)
        self.url_path_map = kwargs.get('url_path_map', None)
        self.rewrite_rule_set = kwargs.get('rewrite_rule_set', None)
        self.redirect_configuration = kwargs.get('redirect_configuration', None)
        self.provisioning_state = None


class ApplicationGatewayRewriteRule(msrest.serialization.Model):
    """Rewrite rule of an application gateway.

    :ivar name: Name of the rewrite rule that is unique within an Application Gateway.
    :vartype name: str
    :ivar rule_sequence: Rule Sequence of the rewrite rule that determines the order of execution
     of a particular rule in a RewriteRuleSet.
    :vartype rule_sequence: int
    :ivar conditions: Conditions based on which the action set execution will be evaluated.
    :vartype conditions:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleCondition]
    :ivar action_set: Set of actions to be done as part of the rewrite Rule.
    :vartype action_set:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleActionSet
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'rule_sequence': {'key': 'ruleSequence', 'type': 'int'},
        'conditions': {'key': 'conditions', 'type': '[ApplicationGatewayRewriteRuleCondition]'},
        'action_set': {'key': 'actionSet', 'type': 'ApplicationGatewayRewriteRuleActionSet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the rewrite rule that is unique within an Application Gateway.
        :paramtype name: str
        :keyword rule_sequence: Rule Sequence of the rewrite rule that determines the order of
         execution of a particular rule in a RewriteRuleSet.
        :paramtype rule_sequence: int
        :keyword conditions: Conditions based on which the action set execution will be evaluated.
        :paramtype conditions:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleCondition]
        :keyword action_set: Set of actions to be done as part of the rewrite Rule.
        :paramtype action_set:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRuleActionSet
        """
        super(ApplicationGatewayRewriteRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.rule_sequence = kwargs.get('rule_sequence', None)
        self.conditions = kwargs.get('conditions', None)
        self.action_set = kwargs.get('action_set', None)


class ApplicationGatewayRewriteRuleActionSet(msrest.serialization.Model):
    """Set of actions in the Rewrite Rule in Application Gateway.

    :ivar request_header_configurations: Request Header Actions in the Action Set.
    :vartype request_header_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHeaderConfiguration]
    :ivar response_header_configurations: Response Header Actions in the Action Set.
    :vartype response_header_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHeaderConfiguration]
    :ivar url_configuration: Url Configuration Action in the Action Set.
    :vartype url_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayUrlConfiguration
    """

    _attribute_map = {
        'request_header_configurations': {'key': 'requestHeaderConfigurations', 'type': '[ApplicationGatewayHeaderConfiguration]'},
        'response_header_configurations': {'key': 'responseHeaderConfigurations', 'type': '[ApplicationGatewayHeaderConfiguration]'},
        'url_configuration': {'key': 'urlConfiguration', 'type': 'ApplicationGatewayUrlConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword request_header_configurations: Request Header Actions in the Action Set.
        :paramtype request_header_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHeaderConfiguration]
        :keyword response_header_configurations: Response Header Actions in the Action Set.
        :paramtype response_header_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayHeaderConfiguration]
        :keyword url_configuration: Url Configuration Action in the Action Set.
        :paramtype url_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayUrlConfiguration
        """
        super(ApplicationGatewayRewriteRuleActionSet, self).__init__(**kwargs)
        self.request_header_configurations = kwargs.get('request_header_configurations', None)
        self.response_header_configurations = kwargs.get('response_header_configurations', None)
        self.url_configuration = kwargs.get('url_configuration', None)


class ApplicationGatewayRewriteRuleCondition(msrest.serialization.Model):
    """Set of conditions in the Rewrite Rule in Application Gateway.

    :ivar variable: The condition parameter of the RewriteRuleCondition.
    :vartype variable: str
    :ivar pattern: The pattern, either fixed string or regular expression, that evaluates the
     truthfulness of the condition.
    :vartype pattern: str
    :ivar ignore_case: Setting this parameter to truth value with force the pattern to do a case
     in-sensitive comparison.
    :vartype ignore_case: bool
    :ivar negate: Setting this value as truth will force to check the negation of the condition
     given by the user.
    :vartype negate: bool
    """

    _attribute_map = {
        'variable': {'key': 'variable', 'type': 'str'},
        'pattern': {'key': 'pattern', 'type': 'str'},
        'ignore_case': {'key': 'ignoreCase', 'type': 'bool'},
        'negate': {'key': 'negate', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword variable: The condition parameter of the RewriteRuleCondition.
        :paramtype variable: str
        :keyword pattern: The pattern, either fixed string or regular expression, that evaluates the
         truthfulness of the condition.
        :paramtype pattern: str
        :keyword ignore_case: Setting this parameter to truth value with force the pattern to do a case
         in-sensitive comparison.
        :paramtype ignore_case: bool
        :keyword negate: Setting this value as truth will force to check the negation of the condition
         given by the user.
        :paramtype negate: bool
        """
        super(ApplicationGatewayRewriteRuleCondition, self).__init__(**kwargs)
        self.variable = kwargs.get('variable', None)
        self.pattern = kwargs.get('pattern', None)
        self.ignore_case = kwargs.get('ignore_case', None)
        self.negate = kwargs.get('negate', None)


class ApplicationGatewayRewriteRuleSet(SubResource):
    """Rewrite rule set of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the rewrite rule set that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar rewrite_rules: Rewrite rules in the rewrite rule set.
    :vartype rewrite_rules:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRule]
    :ivar provisioning_state: The provisioning state of the rewrite rule set resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'rewrite_rules': {'key': 'properties.rewriteRules', 'type': '[ApplicationGatewayRewriteRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the rewrite rule set that is unique within an Application Gateway.
        :paramtype name: str
        :keyword rewrite_rules: Rewrite rules in the rewrite rule set.
        :paramtype rewrite_rules:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayRewriteRule]
        """
        super(ApplicationGatewayRewriteRuleSet, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.rewrite_rules = kwargs.get('rewrite_rules', None)
        self.provisioning_state = None


class ApplicationGatewaySku(msrest.serialization.Model):
    """SKU of an application gateway.

    :ivar name: Name of an application gateway SKU. Possible values include: "Standard_Small",
     "Standard_Medium", "Standard_Large", "WAF_Medium", "WAF_Large", "Standard_v2", "WAF_v2".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySkuName
    :ivar tier: Tier of an application gateway. Possible values include: "Standard", "WAF",
     "Standard_v2", "WAF_v2".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTier
    :ivar capacity: Capacity (instance count) of an application gateway.
    :vartype capacity: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of an application gateway SKU. Possible values include: "Standard_Small",
         "Standard_Medium", "Standard_Large", "WAF_Medium", "WAF_Large", "Standard_v2", "WAF_v2".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySkuName
        :keyword tier: Tier of an application gateway. Possible values include: "Standard", "WAF",
         "Standard_v2", "WAF_v2".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayTier
        :keyword capacity: Capacity (instance count) of an application gateway.
        :paramtype capacity: int
        """
        super(ApplicationGatewaySku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.capacity = kwargs.get('capacity', None)


class ApplicationGatewaySslCertificate(SubResource):
    """SSL certificates of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the SSL certificate that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Base-64 encoded pfx certificate. Only applicable in PUT Request.
    :vartype data: str
    :ivar password: Password for the pfx file specified in data. Only applicable in PUT request.
    :vartype password: str
    :ivar public_cert_data: Base-64 encoded Public cert data corresponding to pfx specified in
     data. Only applicable in GET request.
    :vartype public_cert_data: str
    :ivar key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
     'Certificate' object stored in KeyVault.
    :vartype key_vault_secret_id: str
    :ivar provisioning_state: The provisioning state of the SSL certificate resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'public_cert_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'public_cert_data': {'key': 'properties.publicCertData', 'type': 'str'},
        'key_vault_secret_id': {'key': 'properties.keyVaultSecretId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the SSL certificate that is unique within an Application Gateway.
        :paramtype name: str
        :keyword data: Base-64 encoded pfx certificate. Only applicable in PUT Request.
        :paramtype data: str
        :keyword password: Password for the pfx file specified in data. Only applicable in PUT request.
        :paramtype password: str
        :keyword key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
         'Certificate' object stored in KeyVault.
        :paramtype key_vault_secret_id: str
        """
        super(ApplicationGatewaySslCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.data = kwargs.get('data', None)
        self.password = kwargs.get('password', None)
        self.public_cert_data = None
        self.key_vault_secret_id = kwargs.get('key_vault_secret_id', None)
        self.provisioning_state = None


class ApplicationGatewaySslPolicy(msrest.serialization.Model):
    """Application Gateway Ssl policy.

    :ivar disabled_ssl_protocols: Ssl protocols to be disabled on application gateway.
    :vartype disabled_ssl_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol]
    :ivar policy_type: Type of Ssl Policy. Possible values include: "Predefined", "Custom".
    :vartype policy_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyType
    :ivar policy_name: Name of Ssl predefined policy. Possible values include:
     "AppGwSslPolicy20150501", "AppGwSslPolicy20170401", "AppGwSslPolicy20170401S".
    :vartype policy_name: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyName
    :ivar cipher_suites: Ssl cipher suites to be enabled in the specified order to application
     gateway.
    :vartype cipher_suites: list[str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
    :ivar min_protocol_version: Minimum version of Ssl protocol to be supported on application
     gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
    :vartype min_protocol_version: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol
    """

    _attribute_map = {
        'disabled_ssl_protocols': {'key': 'disabledSslProtocols', 'type': '[str]'},
        'policy_type': {'key': 'policyType', 'type': 'str'},
        'policy_name': {'key': 'policyName', 'type': 'str'},
        'cipher_suites': {'key': 'cipherSuites', 'type': '[str]'},
        'min_protocol_version': {'key': 'minProtocolVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword disabled_ssl_protocols: Ssl protocols to be disabled on application gateway.
        :paramtype disabled_ssl_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol]
        :keyword policy_type: Type of Ssl Policy. Possible values include: "Predefined", "Custom".
        :paramtype policy_type: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyType
        :keyword policy_name: Name of Ssl predefined policy. Possible values include:
         "AppGwSslPolicy20150501", "AppGwSslPolicy20170401", "AppGwSslPolicy20170401S".
        :paramtype policy_name: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicyName
        :keyword cipher_suites: Ssl cipher suites to be enabled in the specified order to application
         gateway.
        :paramtype cipher_suites: list[str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
        :keyword min_protocol_version: Minimum version of Ssl protocol to be supported on application
         gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
        :paramtype min_protocol_version: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol
        """
        super(ApplicationGatewaySslPolicy, self).__init__(**kwargs)
        self.disabled_ssl_protocols = kwargs.get('disabled_ssl_protocols', None)
        self.policy_type = kwargs.get('policy_type', None)
        self.policy_name = kwargs.get('policy_name', None)
        self.cipher_suites = kwargs.get('cipher_suites', None)
        self.min_protocol_version = kwargs.get('min_protocol_version', None)


class ApplicationGatewaySslPredefinedPolicy(SubResource):
    """An Ssl predefined policy.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the Ssl predefined policy.
    :vartype name: str
    :ivar cipher_suites: Ssl cipher suites to be enabled in the specified order for application
     gateway.
    :vartype cipher_suites: list[str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
    :ivar min_protocol_version: Minimum version of Ssl protocol to be supported on application
     gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
    :vartype min_protocol_version: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'cipher_suites': {'key': 'properties.cipherSuites', 'type': '[str]'},
        'min_protocol_version': {'key': 'properties.minProtocolVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the Ssl predefined policy.
        :paramtype name: str
        :keyword cipher_suites: Ssl cipher suites to be enabled in the specified order for application
         gateway.
        :paramtype cipher_suites: list[str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslCipherSuite]
        :keyword min_protocol_version: Minimum version of Ssl protocol to be supported on application
         gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
        :paramtype min_protocol_version: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslProtocol
        """
        super(ApplicationGatewaySslPredefinedPolicy, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.cipher_suites = kwargs.get('cipher_suites', None)
        self.min_protocol_version = kwargs.get('min_protocol_version', None)


class ApplicationGatewaySslProfile(SubResource):
    """SSL profile of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the SSL profile that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar trusted_client_certificates: Array of references to application gateway trusted client
     certificates.
    :vartype trusted_client_certificates: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar ssl_policy: SSL policy of the application gateway resource.
    :vartype ssl_policy: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicy
    :ivar client_auth_configuration: Client authentication configuration of the application gateway
     resource.
    :vartype client_auth_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayClientAuthConfiguration
    :ivar provisioning_state: The provisioning state of the HTTP listener resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'trusted_client_certificates': {'key': 'properties.trustedClientCertificates', 'type': '[SubResource]'},
        'ssl_policy': {'key': 'properties.sslPolicy', 'type': 'ApplicationGatewaySslPolicy'},
        'client_auth_configuration': {'key': 'properties.clientAuthConfiguration', 'type': 'ApplicationGatewayClientAuthConfiguration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the SSL profile that is unique within an Application Gateway.
        :paramtype name: str
        :keyword trusted_client_certificates: Array of references to application gateway trusted client
         certificates.
        :paramtype trusted_client_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword ssl_policy: SSL policy of the application gateway resource.
        :paramtype ssl_policy: ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewaySslPolicy
        :keyword client_auth_configuration: Client authentication configuration of the application
         gateway resource.
        :paramtype client_auth_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayClientAuthConfiguration
        """
        super(ApplicationGatewaySslProfile, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.trusted_client_certificates = kwargs.get('trusted_client_certificates', None)
        self.ssl_policy = kwargs.get('ssl_policy', None)
        self.client_auth_configuration = kwargs.get('client_auth_configuration', None)
        self.provisioning_state = None


class ApplicationGatewayTrustedClientCertificate(SubResource):
    """Trusted client certificates of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the trusted client certificate that is unique within an Application
     Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Certificate public data.
    :vartype data: str
    :ivar validated_cert_data: Validated certificate data.
    :vartype validated_cert_data: str
    :ivar client_cert_issuer_dn: Distinguished name of client certificate issuer.
    :vartype client_cert_issuer_dn: str
    :ivar provisioning_state: The provisioning state of the trusted client certificate resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'validated_cert_data': {'readonly': True},
        'client_cert_issuer_dn': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'validated_cert_data': {'key': 'properties.validatedCertData', 'type': 'str'},
        'client_cert_issuer_dn': {'key': 'properties.clientCertIssuerDN', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the trusted client certificate that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword data: Certificate public data.
        :paramtype data: str
        """
        super(ApplicationGatewayTrustedClientCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.data = kwargs.get('data', None)
        self.validated_cert_data = None
        self.client_cert_issuer_dn = None
        self.provisioning_state = None


class ApplicationGatewayTrustedRootCertificate(SubResource):
    """Trusted Root certificates of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the trusted root certificate that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Certificate public data.
    :vartype data: str
    :ivar key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
     'Certificate' object stored in KeyVault.
    :vartype key_vault_secret_id: str
    :ivar provisioning_state: The provisioning state of the trusted root certificate resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'key_vault_secret_id': {'key': 'properties.keyVaultSecretId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the trusted root certificate that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword data: Certificate public data.
        :paramtype data: str
        :keyword key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
         'Certificate' object stored in KeyVault.
        :paramtype key_vault_secret_id: str
        """
        super(ApplicationGatewayTrustedRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.data = kwargs.get('data', None)
        self.key_vault_secret_id = kwargs.get('key_vault_secret_id', None)
        self.provisioning_state = None


class ApplicationGatewayUrlConfiguration(msrest.serialization.Model):
    """Url configuration of the Actions set in Application Gateway.

    :ivar modified_path: Url path which user has provided for url rewrite. Null means no path will
     be updated. Default value is null.
    :vartype modified_path: str
    :ivar modified_query_string: Query string which user has provided for url rewrite. Null means
     no query string will be updated. Default value is null.
    :vartype modified_query_string: str
    :ivar reroute: If set as true, it will re-evaluate the url path map provided in path based
     request routing rules using modified path. Default value is false.
    :vartype reroute: bool
    """

    _attribute_map = {
        'modified_path': {'key': 'modifiedPath', 'type': 'str'},
        'modified_query_string': {'key': 'modifiedQueryString', 'type': 'str'},
        'reroute': {'key': 'reroute', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword modified_path: Url path which user has provided for url rewrite. Null means no path
         will be updated. Default value is null.
        :paramtype modified_path: str
        :keyword modified_query_string: Query string which user has provided for url rewrite. Null
         means no query string will be updated. Default value is null.
        :paramtype modified_query_string: str
        :keyword reroute: If set as true, it will re-evaluate the url path map provided in path based
         request routing rules using modified path. Default value is false.
        :paramtype reroute: bool
        """
        super(ApplicationGatewayUrlConfiguration, self).__init__(**kwargs)
        self.modified_path = kwargs.get('modified_path', None)
        self.modified_query_string = kwargs.get('modified_query_string', None)
        self.reroute = kwargs.get('reroute', None)


class ApplicationGatewayUrlPathMap(SubResource):
    """UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the URL path map that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar default_backend_address_pool: Default backend address pool resource of URL path map.
    :vartype default_backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar default_backend_http_settings: Default backend http settings resource of URL path map.
    :vartype default_backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar default_rewrite_rule_set: Default Rewrite rule set resource of URL path map.
    :vartype default_rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar default_redirect_configuration: Default redirect configuration resource of URL path map.
    :vartype default_redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar path_rules: Path rule of URL path map resource.
    :vartype path_rules: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPathRule]
    :ivar provisioning_state: The provisioning state of the URL path map resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'default_backend_address_pool': {'key': 'properties.defaultBackendAddressPool', 'type': 'SubResource'},
        'default_backend_http_settings': {'key': 'properties.defaultBackendHttpSettings', 'type': 'SubResource'},
        'default_rewrite_rule_set': {'key': 'properties.defaultRewriteRuleSet', 'type': 'SubResource'},
        'default_redirect_configuration': {'key': 'properties.defaultRedirectConfiguration', 'type': 'SubResource'},
        'path_rules': {'key': 'properties.pathRules', 'type': '[ApplicationGatewayPathRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the URL path map that is unique within an Application Gateway.
        :paramtype name: str
        :keyword default_backend_address_pool: Default backend address pool resource of URL path map.
        :paramtype default_backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword default_backend_http_settings: Default backend http settings resource of URL path map.
        :paramtype default_backend_http_settings: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword default_rewrite_rule_set: Default Rewrite rule set resource of URL path map.
        :paramtype default_rewrite_rule_set: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword default_redirect_configuration: Default redirect configuration resource of URL path
         map.
        :paramtype default_redirect_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword path_rules: Path rule of URL path map resource.
        :paramtype path_rules: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayPathRule]
        """
        super(ApplicationGatewayUrlPathMap, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.default_backend_address_pool = kwargs.get('default_backend_address_pool', None)
        self.default_backend_http_settings = kwargs.get('default_backend_http_settings', None)
        self.default_rewrite_rule_set = kwargs.get('default_rewrite_rule_set', None)
        self.default_redirect_configuration = kwargs.get('default_redirect_configuration', None)
        self.path_rules = kwargs.get('path_rules', None)
        self.provisioning_state = None


class ApplicationGatewayWebApplicationFirewallConfiguration(msrest.serialization.Model):
    """Application gateway web application firewall configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Whether the web application firewall is enabled or not.
    :vartype enabled: bool
    :ivar firewall_mode: Required. Web application firewall mode. Possible values include:
     "Detection", "Prevention".
    :vartype firewall_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallMode
    :ivar rule_set_type: Required. The type of the web application firewall rule set. Possible
     values are: 'OWASP'.
    :vartype rule_set_type: str
    :ivar rule_set_version: Required. The version of the rule set type.
    :vartype rule_set_version: str
    :ivar disabled_rule_groups: The disabled rule groups.
    :vartype disabled_rule_groups:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallDisabledRuleGroup]
    :ivar request_body_check: Whether allow WAF to check request Body.
    :vartype request_body_check: bool
    :ivar max_request_body_size: Maximum request body size for WAF.
    :vartype max_request_body_size: int
    :ivar max_request_body_size_in_kb: Maximum request body size in Kb for WAF.
    :vartype max_request_body_size_in_kb: int
    :ivar file_upload_limit_in_mb: Maximum file upload size in Mb for WAF.
    :vartype file_upload_limit_in_mb: int
    :ivar exclusions: The exclusion list.
    :vartype exclusions:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallExclusion]
    """

    _validation = {
        'enabled': {'required': True},
        'firewall_mode': {'required': True},
        'rule_set_type': {'required': True},
        'rule_set_version': {'required': True},
        'max_request_body_size': {'maximum': 128, 'minimum': 8},
        'max_request_body_size_in_kb': {'maximum': 128, 'minimum': 8},
        'file_upload_limit_in_mb': {'minimum': 0},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'firewall_mode': {'key': 'firewallMode', 'type': 'str'},
        'rule_set_type': {'key': 'ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'ruleSetVersion', 'type': 'str'},
        'disabled_rule_groups': {'key': 'disabledRuleGroups', 'type': '[ApplicationGatewayFirewallDisabledRuleGroup]'},
        'request_body_check': {'key': 'requestBodyCheck', 'type': 'bool'},
        'max_request_body_size': {'key': 'maxRequestBodySize', 'type': 'int'},
        'max_request_body_size_in_kb': {'key': 'maxRequestBodySizeInKb', 'type': 'int'},
        'file_upload_limit_in_mb': {'key': 'fileUploadLimitInMb', 'type': 'int'},
        'exclusions': {'key': 'exclusions', 'type': '[ApplicationGatewayFirewallExclusion]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Required. Whether the web application firewall is enabled or not.
        :paramtype enabled: bool
        :keyword firewall_mode: Required. Web application firewall mode. Possible values include:
         "Detection", "Prevention".
        :paramtype firewall_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallMode
        :keyword rule_set_type: Required. The type of the web application firewall rule set. Possible
         values are: 'OWASP'.
        :paramtype rule_set_type: str
        :keyword rule_set_version: Required. The version of the rule set type.
        :paramtype rule_set_version: str
        :keyword disabled_rule_groups: The disabled rule groups.
        :paramtype disabled_rule_groups:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallDisabledRuleGroup]
        :keyword request_body_check: Whether allow WAF to check request Body.
        :paramtype request_body_check: bool
        :keyword max_request_body_size: Maximum request body size for WAF.
        :paramtype max_request_body_size: int
        :keyword max_request_body_size_in_kb: Maximum request body size in Kb for WAF.
        :paramtype max_request_body_size_in_kb: int
        :keyword file_upload_limit_in_mb: Maximum file upload size in Mb for WAF.
        :paramtype file_upload_limit_in_mb: int
        :keyword exclusions: The exclusion list.
        :paramtype exclusions:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayFirewallExclusion]
        """
        super(ApplicationGatewayWebApplicationFirewallConfiguration, self).__init__(**kwargs)
        self.enabled = kwargs['enabled']
        self.firewall_mode = kwargs['firewall_mode']
        self.rule_set_type = kwargs['rule_set_type']
        self.rule_set_version = kwargs['rule_set_version']
        self.disabled_rule_groups = kwargs.get('disabled_rule_groups', None)
        self.request_body_check = kwargs.get('request_body_check', None)
        self.max_request_body_size = kwargs.get('max_request_body_size', None)
        self.max_request_body_size_in_kb = kwargs.get('max_request_body_size_in_kb', None)
        self.file_upload_limit_in_mb = kwargs.get('file_upload_limit_in_mb', None)
        self.exclusions = kwargs.get('exclusions', None)


class FirewallPolicyRule(msrest.serialization.Model):
    """Properties of a rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ApplicationRule, NatRule, NetworkRule.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleType
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
    }

    _subtype_map = {
        'rule_type': {'ApplicationRule': 'ApplicationRule', 'NatRule': 'NatRule', 'NetworkRule': 'NetworkRule'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        """
        super(FirewallPolicyRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.rule_type = None  # type: Optional[str]


class ApplicationRule(FirewallPolicyRule):
    """Rule of type application.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleType
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar protocols: Array of Application Protocols.
    :vartype protocols:
     list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleApplicationProtocol]
    :ivar target_fqdns: List of FQDNs for this rule.
    :vartype target_fqdns: list[str]
    :ivar target_urls: List of Urls for this rule condition.
    :vartype target_urls: list[str]
    :ivar fqdn_tags: List of FQDN Tags for this rule.
    :vartype fqdn_tags: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar terminate_tls: Terminate TLS connections for this rule.
    :vartype terminate_tls: bool
    :ivar web_categories: List of destination azure web categories.
    :vartype web_categories: list[str]
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'protocols': {'key': 'protocols', 'type': '[FirewallPolicyRuleApplicationProtocol]'},
        'target_fqdns': {'key': 'targetFqdns', 'type': '[str]'},
        'target_urls': {'key': 'targetUrls', 'type': '[str]'},
        'fqdn_tags': {'key': 'fqdnTags', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'terminate_tls': {'key': 'terminateTLS', 'type': 'bool'},
        'web_categories': {'key': 'webCategories', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword protocols: Array of Application Protocols.
        :paramtype protocols:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleApplicationProtocol]
        :keyword target_fqdns: List of FQDNs for this rule.
        :paramtype target_fqdns: list[str]
        :keyword target_urls: List of Urls for this rule condition.
        :paramtype target_urls: list[str]
        :keyword fqdn_tags: List of FQDN Tags for this rule.
        :paramtype fqdn_tags: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword terminate_tls: Terminate TLS connections for this rule.
        :paramtype terminate_tls: bool
        :keyword web_categories: List of destination azure web categories.
        :paramtype web_categories: list[str]
        """
        super(ApplicationRule, self).__init__(**kwargs)
        self.rule_type = 'ApplicationRule'  # type: str
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.protocols = kwargs.get('protocols', None)
        self.target_fqdns = kwargs.get('target_fqdns', None)
        self.target_urls = kwargs.get('target_urls', None)
        self.fqdn_tags = kwargs.get('fqdn_tags', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)
        self.terminate_tls = kwargs.get('terminate_tls', None)
        self.web_categories = kwargs.get('web_categories', None)


class ApplicationSecurityGroup(Resource):
    """An application security group in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the application security group resource. It
     uniquely identifies a resource, even if the user changes its name or migrate the resource
     across subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the application security group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ApplicationSecurityGroup, self).__init__(**kwargs)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None


class ApplicationSecurityGroupListResult(msrest.serialization.Model):
    """A list of application security groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of application security groups.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of application security groups.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
        """
        super(ApplicationSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AuthorizationListResult(msrest.serialization.Model):
    """Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.

    :ivar value: The authorizations in an ExpressRoute Circuit.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitAuthorization]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitAuthorization]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The authorizations in an ExpressRoute Circuit.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitAuthorization]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AuthorizationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class AutoApprovedPrivateLinkService(msrest.serialization.Model):
    """The information of an AutoApprovedPrivateLinkService.

    :ivar private_link_service: The id of the private link service resource.
    :vartype private_link_service: str
    """

    _attribute_map = {
        'private_link_service': {'key': 'privateLinkService', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword private_link_service: The id of the private link service resource.
        :paramtype private_link_service: str
        """
        super(AutoApprovedPrivateLinkService, self).__init__(**kwargs)
        self.private_link_service = kwargs.get('private_link_service', None)


class AutoApprovedPrivateLinkServicesResult(msrest.serialization.Model):
    """An array of private link service id that can be linked to a private end point with auto approved.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: An array of auto approved private link service.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AutoApprovedPrivateLinkService]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AutoApprovedPrivateLinkService]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: An array of auto approved private link service.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AutoApprovedPrivateLinkService]
        """
        super(AutoApprovedPrivateLinkServicesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class Availability(msrest.serialization.Model):
    """Availability of the metric.

    :ivar time_grain: The time grain of the availability.
    :vartype time_grain: str
    :ivar retention: The retention of the availability.
    :vartype retention: str
    :ivar blob_duration: Duration of the availability blob.
    :vartype blob_duration: str
    """

    _attribute_map = {
        'time_grain': {'key': 'timeGrain', 'type': 'str'},
        'retention': {'key': 'retention', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_grain: The time grain of the availability.
        :paramtype time_grain: str
        :keyword retention: The retention of the availability.
        :paramtype retention: str
        :keyword blob_duration: Duration of the availability blob.
        :paramtype blob_duration: str
        """
        super(Availability, self).__init__(**kwargs)
        self.time_grain = kwargs.get('time_grain', None)
        self.retention = kwargs.get('retention', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class AvailableDelegation(msrest.serialization.Model):
    """The serviceName of an AvailableDelegation indicates a possible delegation for a subnet.

    :ivar name: The name of the AvailableDelegation resource.
    :vartype name: str
    :ivar id: A unique identifier of the AvailableDelegation resource.
    :vartype id: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar service_name: The name of the service and resource.
    :vartype service_name: str
    :ivar actions: The actions permitted to the service upon delegation.
    :vartype actions: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'actions': {'key': 'actions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the AvailableDelegation resource.
        :paramtype name: str
        :keyword id: A unique identifier of the AvailableDelegation resource.
        :paramtype id: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword service_name: The name of the service and resource.
        :paramtype service_name: str
        :keyword actions: The actions permitted to the service upon delegation.
        :paramtype actions: list[str]
        """
        super(AvailableDelegation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.service_name = kwargs.get('service_name', None)
        self.actions = kwargs.get('actions', None)


class AvailableDelegationsResult(msrest.serialization.Model):
    """An array of available delegations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: An array of available delegations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AvailableDelegation]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailableDelegation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: An array of available delegations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AvailableDelegation]
        """
        super(AvailableDelegationsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AvailablePrivateEndpointType(msrest.serialization.Model):
    """The information of an AvailablePrivateEndpointType.

    :ivar name: The name of the service and resource.
    :vartype name: str
    :ivar id: A unique identifier of the AvailablePrivateEndpoint Type resource.
    :vartype id: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar resource_name: The name of the service and resource.
    :vartype resource_name: str
    :ivar display_name: Display name of the resource.
    :vartype display_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the service and resource.
        :paramtype name: str
        :keyword id: A unique identifier of the AvailablePrivateEndpoint Type resource.
        :paramtype id: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword resource_name: The name of the service and resource.
        :paramtype resource_name: str
        :keyword display_name: Display name of the resource.
        :paramtype display_name: str
        """
        super(AvailablePrivateEndpointType, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.resource_name = kwargs.get('resource_name', None)
        self.display_name = kwargs.get('display_name', None)


class AvailablePrivateEndpointTypesResult(msrest.serialization.Model):
    """An array of available PrivateEndpoint types.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: An array of available privateEndpoint type.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AvailablePrivateEndpointType]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailablePrivateEndpointType]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: An array of available privateEndpoint type.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AvailablePrivateEndpointType]
        """
        super(AvailablePrivateEndpointTypesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AvailableProvidersList(msrest.serialization.Model):
    """List of available countries with details.

    All required parameters must be populated in order to send to Azure.

    :ivar countries: Required. List of available countries.
    :vartype countries: list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListCountry]
    """

    _validation = {
        'countries': {'required': True},
    }

    _attribute_map = {
        'countries': {'key': 'countries', 'type': '[AvailableProvidersListCountry]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword countries: Required. List of available countries.
        :paramtype countries:
         list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListCountry]
        """
        super(AvailableProvidersList, self).__init__(**kwargs)
        self.countries = kwargs['countries']


class AvailableProvidersListCity(msrest.serialization.Model):
    """City or town details.

    :ivar city_name: The city or town name.
    :vartype city_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    """

    _attribute_map = {
        'city_name': {'key': 'cityName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword city_name: The city or town name.
        :paramtype city_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        """
        super(AvailableProvidersListCity, self).__init__(**kwargs)
        self.city_name = kwargs.get('city_name', None)
        self.providers = kwargs.get('providers', None)


class AvailableProvidersListCountry(msrest.serialization.Model):
    """Country details.

    :ivar country_name: The country name.
    :vartype country_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    :ivar states: List of available states in the country.
    :vartype states: list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListState]
    """

    _attribute_map = {
        'country_name': {'key': 'countryName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'states': {'key': 'states', 'type': '[AvailableProvidersListState]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword country_name: The country name.
        :paramtype country_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        :keyword states: List of available states in the country.
        :paramtype states: list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListState]
        """
        super(AvailableProvidersListCountry, self).__init__(**kwargs)
        self.country_name = kwargs.get('country_name', None)
        self.providers = kwargs.get('providers', None)
        self.states = kwargs.get('states', None)


class AvailableProvidersListParameters(msrest.serialization.Model):
    """Constraints that determine the list of available Internet service providers.

    :ivar azure_locations: A list of Azure regions.
    :vartype azure_locations: list[str]
    :ivar country: The country for available providers list.
    :vartype country: str
    :ivar state: The state for available providers list.
    :vartype state: str
    :ivar city: The city or town for available providers list.
    :vartype city: str
    """

    _attribute_map = {
        'azure_locations': {'key': 'azureLocations', 'type': '[str]'},
        'country': {'key': 'country', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword azure_locations: A list of Azure regions.
        :paramtype azure_locations: list[str]
        :keyword country: The country for available providers list.
        :paramtype country: str
        :keyword state: The state for available providers list.
        :paramtype state: str
        :keyword city: The city or town for available providers list.
        :paramtype city: str
        """
        super(AvailableProvidersListParameters, self).__init__(**kwargs)
        self.azure_locations = kwargs.get('azure_locations', None)
        self.country = kwargs.get('country', None)
        self.state = kwargs.get('state', None)
        self.city = kwargs.get('city', None)


class AvailableProvidersListState(msrest.serialization.Model):
    """State details.

    :ivar state_name: The state name.
    :vartype state_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    :ivar cities: List of available cities or towns in the state.
    :vartype cities: list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListCity]
    """

    _attribute_map = {
        'state_name': {'key': 'stateName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'cities': {'key': 'cities', 'type': '[AvailableProvidersListCity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword state_name: The state name.
        :paramtype state_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        :keyword cities: List of available cities or towns in the state.
        :paramtype cities: list[~azure.mgmt.network.v2021_02_01.models.AvailableProvidersListCity]
        """
        super(AvailableProvidersListState, self).__init__(**kwargs)
        self.state_name = kwargs.get('state_name', None)
        self.providers = kwargs.get('providers', None)
        self.cities = kwargs.get('cities', None)


class AvailableServiceAlias(msrest.serialization.Model):
    """The available service alias.

    :ivar name: The name of the service alias.
    :vartype name: str
    :ivar id: The ID of the service alias.
    :vartype id: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar resource_name: The resource name of the service alias.
    :vartype resource_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the service alias.
        :paramtype name: str
        :keyword id: The ID of the service alias.
        :paramtype id: str
        :keyword type: The type of the resource.
        :paramtype type: str
        :keyword resource_name: The resource name of the service alias.
        :paramtype resource_name: str
        """
        super(AvailableServiceAlias, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.resource_name = kwargs.get('resource_name', None)


class AvailableServiceAliasesResult(msrest.serialization.Model):
    """An array of available service aliases.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: An array of available service aliases.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AvailableServiceAlias]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailableServiceAlias]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: An array of available service aliases.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AvailableServiceAlias]
        """
        super(AvailableServiceAliasesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AzureAsyncOperationResult(msrest.serialization.Model):
    """The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.

    :ivar status: Status of the Azure async operation. Possible values include: "InProgress",
     "Succeeded", "Failed".
    :vartype status: str or ~azure.mgmt.network.v2021_02_01.models.NetworkOperationStatus
    :ivar error: Details of the error occurred during specified asynchronous operation.
    :vartype error: ~azure.mgmt.network.v2021_02_01.models.Error
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Status of the Azure async operation. Possible values include: "InProgress",
         "Succeeded", "Failed".
        :paramtype status: str or ~azure.mgmt.network.v2021_02_01.models.NetworkOperationStatus
        :keyword error: Details of the error occurred during specified asynchronous operation.
        :paramtype error: ~azure.mgmt.network.v2021_02_01.models.Error
        """
        super(AzureAsyncOperationResult, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.error = kwargs.get('error', None)


class AzureFirewall(Resource):
    """Azure Firewall resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar zones: A list of availability zones denoting where the resource needs to come from.
    :vartype zones: list[str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar application_rule_collections: Collection of application rule collections used by Azure
     Firewall.
    :vartype application_rule_collections:
     list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleCollection]
    :ivar nat_rule_collections: Collection of NAT rule collections used by Azure Firewall.
    :vartype nat_rule_collections:
     list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRuleCollection]
    :ivar network_rule_collections: Collection of network rule collections used by Azure Firewall.
    :vartype network_rule_collections:
     list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleCollection]
    :ivar ip_configurations: IP configuration of the Azure Firewall resource.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallIPConfiguration]
    :ivar management_ip_configuration: IP configuration of the Azure Firewall used for management
     traffic.
    :vartype management_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallIPConfiguration
    :ivar provisioning_state: The provisioning state of the Azure firewall resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar threat_intel_mode: The operation mode for Threat Intelligence. Possible values include:
     "Alert", "Deny", "Off".
    :vartype threat_intel_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallThreatIntelMode
    :ivar virtual_hub: The virtualHub to which the firewall belongs.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar firewall_policy: The firewallPolicy associated with this azure firewall.
    :vartype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar hub_ip_addresses: IP addresses associated with AzureFirewall.
    :vartype hub_ip_addresses: ~azure.mgmt.network.v2021_02_01.models.HubIPAddresses
    :ivar ip_groups: IpGroups associated with AzureFirewall.
    :vartype ip_groups: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallIpGroups]
    :ivar sku: The Azure Firewall Resource SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSku
    :ivar additional_properties: The additional properties used to further config this azure
     firewall.
    :vartype additional_properties: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'ip_groups': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'etag': {'key': 'etag', 'type': 'str'},
        'application_rule_collections': {'key': 'properties.applicationRuleCollections', 'type': '[AzureFirewallApplicationRuleCollection]'},
        'nat_rule_collections': {'key': 'properties.natRuleCollections', 'type': '[AzureFirewallNatRuleCollection]'},
        'network_rule_collections': {'key': 'properties.networkRuleCollections', 'type': '[AzureFirewallNetworkRuleCollection]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[AzureFirewallIPConfiguration]'},
        'management_ip_configuration': {'key': 'properties.managementIpConfiguration', 'type': 'AzureFirewallIPConfiguration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'threat_intel_mode': {'key': 'properties.threatIntelMode', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'firewall_policy': {'key': 'properties.firewallPolicy', 'type': 'SubResource'},
        'hub_ip_addresses': {'key': 'properties.hubIPAddresses', 'type': 'HubIPAddresses'},
        'ip_groups': {'key': 'properties.ipGroups', 'type': '[AzureFirewallIpGroups]'},
        'sku': {'key': 'properties.sku', 'type': 'AzureFirewallSku'},
        'additional_properties': {'key': 'properties.additionalProperties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword zones: A list of availability zones denoting where the resource needs to come from.
        :paramtype zones: list[str]
        :keyword application_rule_collections: Collection of application rule collections used by Azure
         Firewall.
        :paramtype application_rule_collections:
         list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleCollection]
        :keyword nat_rule_collections: Collection of NAT rule collections used by Azure Firewall.
        :paramtype nat_rule_collections:
         list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRuleCollection]
        :keyword network_rule_collections: Collection of network rule collections used by Azure
         Firewall.
        :paramtype network_rule_collections:
         list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleCollection]
        :keyword ip_configurations: IP configuration of the Azure Firewall resource.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallIPConfiguration]
        :keyword management_ip_configuration: IP configuration of the Azure Firewall used for
         management traffic.
        :paramtype management_ip_configuration:
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallIPConfiguration
        :keyword threat_intel_mode: The operation mode for Threat Intelligence. Possible values
         include: "Alert", "Deny", "Off".
        :paramtype threat_intel_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallThreatIntelMode
        :keyword virtual_hub: The virtualHub to which the firewall belongs.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword firewall_policy: The firewallPolicy associated with this azure firewall.
        :paramtype firewall_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword hub_ip_addresses: IP addresses associated with AzureFirewall.
        :paramtype hub_ip_addresses: ~azure.mgmt.network.v2021_02_01.models.HubIPAddresses
        :keyword sku: The Azure Firewall Resource SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSku
        :keyword additional_properties: The additional properties used to further config this azure
         firewall.
        :paramtype additional_properties: dict[str, str]
        """
        super(AzureFirewall, self).__init__(**kwargs)
        self.zones = kwargs.get('zones', None)
        self.etag = None
        self.application_rule_collections = kwargs.get('application_rule_collections', None)
        self.nat_rule_collections = kwargs.get('nat_rule_collections', None)
        self.network_rule_collections = kwargs.get('network_rule_collections', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.management_ip_configuration = kwargs.get('management_ip_configuration', None)
        self.provisioning_state = None
        self.threat_intel_mode = kwargs.get('threat_intel_mode', None)
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.firewall_policy = kwargs.get('firewall_policy', None)
        self.hub_ip_addresses = kwargs.get('hub_ip_addresses', None)
        self.ip_groups = None
        self.sku = kwargs.get('sku', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class AzureFirewallApplicationRule(msrest.serialization.Model):
    """Properties of an application rule.

    :ivar name: Name of the application rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar protocols: Array of ApplicationRuleProtocols.
    :vartype protocols:
     list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleProtocol]
    :ivar target_fqdns: List of FQDNs for this rule.
    :vartype target_fqdns: list[str]
    :ivar fqdn_tags: List of FQDN Tags for this rule.
    :vartype fqdn_tags: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'protocols': {'key': 'protocols', 'type': '[AzureFirewallApplicationRuleProtocol]'},
        'target_fqdns': {'key': 'targetFqdns', 'type': '[str]'},
        'fqdn_tags': {'key': 'fqdnTags', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the application rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword protocols: Array of ApplicationRuleProtocols.
        :paramtype protocols:
         list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleProtocol]
        :keyword target_fqdns: List of FQDNs for this rule.
        :paramtype target_fqdns: list[str]
        :keyword fqdn_tags: List of FQDN Tags for this rule.
        :paramtype fqdn_tags: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        """
        super(AzureFirewallApplicationRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.protocols = kwargs.get('protocols', None)
        self.target_fqdns = kwargs.get('target_fqdns', None)
        self.fqdn_tags = kwargs.get('fqdn_tags', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)


class AzureFirewallApplicationRuleCollection(SubResource):
    """Application rule collection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the Azure firewall. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Priority of the application rule collection resource.
    :vartype priority: int
    :ivar action: The action type of a rule collection.
    :vartype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCAction
    :ivar rules: Collection of rules used by a application rule collection.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRule]
    :ivar provisioning_state: The provisioning state of the application rule collection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'action': {'key': 'properties.action', 'type': 'AzureFirewallRCAction'},
        'rules': {'key': 'properties.rules', 'type': '[AzureFirewallApplicationRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the Azure firewall. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the application rule collection resource.
        :paramtype priority: int
        :keyword action: The action type of a rule collection.
        :paramtype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCAction
        :keyword rules: Collection of rules used by a application rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRule]
        """
        super(AzureFirewallApplicationRuleCollection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs.get('priority', None)
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = None


class AzureFirewallApplicationRuleProtocol(msrest.serialization.Model):
    """Properties of the application rule protocol.

    :ivar protocol_type: Protocol type. Possible values include: "Http", "Https", "Mssql".
    :vartype protocol_type: str or
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleProtocolType
    :ivar port: Port number for the protocol, cannot be greater than 64000. This field is optional.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 64000, 'minimum': 0},
    }

    _attribute_map = {
        'protocol_type': {'key': 'protocolType', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol_type: Protocol type. Possible values include: "Http", "Https", "Mssql".
        :paramtype protocol_type: str or
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallApplicationRuleProtocolType
        :keyword port: Port number for the protocol, cannot be greater than 64000. This field is
         optional.
        :paramtype port: int
        """
        super(AzureFirewallApplicationRuleProtocol, self).__init__(**kwargs)
        self.protocol_type = kwargs.get('protocol_type', None)
        self.port = kwargs.get('port', None)


class AzureFirewallFqdnTag(Resource):
    """Azure Firewall FQDN Tag Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the Azure firewall FQDN tag resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar fqdn_tag_name: The name of this FQDN Tag.
    :vartype fqdn_tag_name: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'fqdn_tag_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'fqdn_tag_name': {'key': 'properties.fqdnTagName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(AzureFirewallFqdnTag, self).__init__(**kwargs)
        self.etag = None
        self.provisioning_state = None
        self.fqdn_tag_name = None


class AzureFirewallFqdnTagListResult(msrest.serialization.Model):
    """Response for ListAzureFirewallFqdnTags API service call.

    :ivar value: List of Azure Firewall FQDN Tags in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallFqdnTag]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AzureFirewallFqdnTag]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Azure Firewall FQDN Tags in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallFqdnTag]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AzureFirewallFqdnTagListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class AzureFirewallIPConfiguration(SubResource):
    """IP configuration of an Azure Firewall.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar private_ip_address: The Firewall Internal Load Balancer IP to be used as the next hop in
     User Defined Routes.
    :vartype private_ip_address: str
    :ivar subnet: Reference to the subnet resource. This resource must be named
     'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar public_ip_address: Reference to the PublicIP resource. This field is a mandatory input if
     subnet is not null.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the Azure firewall IP configuration
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'private_ip_address': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword subnet: Reference to the subnet resource. This resource must be named
         'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword public_ip_address: Reference to the PublicIP resource. This field is a mandatory input
         if subnet is not null.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(AzureFirewallIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = None
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class AzureFirewallIpGroups(msrest.serialization.Model):
    """IpGroups associated with azure firewall.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar change_number: The iteration number.
    :vartype change_number: str
    """

    _validation = {
        'id': {'readonly': True},
        'change_number': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'change_number': {'key': 'changeNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AzureFirewallIpGroups, self).__init__(**kwargs)
        self.id = None
        self.change_number = None


class AzureFirewallListResult(msrest.serialization.Model):
    """Response for ListAzureFirewalls API service call.

    :ivar value: List of Azure Firewalls in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewall]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AzureFirewall]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Azure Firewalls in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewall]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AzureFirewallListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class AzureFirewallNatRCAction(msrest.serialization.Model):
    """AzureFirewall NAT Rule Collection Action.

    :ivar type: The type of action. Possible values include: "Snat", "Dnat".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRCActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "Snat", "Dnat".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRCActionType
        """
        super(AzureFirewallNatRCAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class AzureFirewallNatRule(msrest.serialization.Model):
    """Properties of a NAT rule.

    :ivar name: Name of the NAT rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses for this rule. Supports IP
     ranges, prefixes, and service tags.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar protocols: Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
    :vartype protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleProtocol]
    :ivar translated_address: The translated address for this NAT rule.
    :vartype translated_address: str
    :ivar translated_port: The translated port for this NAT rule.
    :vartype translated_port: str
    :ivar translated_fqdn: The translated FQDN for this NAT rule.
    :vartype translated_fqdn: str
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
        'translated_address': {'key': 'translatedAddress', 'type': 'str'},
        'translated_port': {'key': 'translatedPort', 'type': 'str'},
        'translated_fqdn': {'key': 'translatedFqdn', 'type': 'str'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the NAT rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses for this rule. Supports IP
         ranges, prefixes, and service tags.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword protocols: Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
        :paramtype protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleProtocol]
        :keyword translated_address: The translated address for this NAT rule.
        :paramtype translated_address: str
        :keyword translated_port: The translated port for this NAT rule.
        :paramtype translated_port: str
        :keyword translated_fqdn: The translated FQDN for this NAT rule.
        :paramtype translated_fqdn: str
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        """
        super(AzureFirewallNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)
        self.protocols = kwargs.get('protocols', None)
        self.translated_address = kwargs.get('translated_address', None)
        self.translated_port = kwargs.get('translated_port', None)
        self.translated_fqdn = kwargs.get('translated_fqdn', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)


class AzureFirewallNatRuleCollection(SubResource):
    """NAT rule collection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the Azure firewall. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Priority of the NAT rule collection resource.
    :vartype priority: int
    :ivar action: The action type of a NAT rule collection.
    :vartype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRCAction
    :ivar rules: Collection of rules used by a NAT rule collection.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRule]
    :ivar provisioning_state: The provisioning state of the NAT rule collection resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'action': {'key': 'properties.action', 'type': 'AzureFirewallNatRCAction'},
        'rules': {'key': 'properties.rules', 'type': '[AzureFirewallNatRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the Azure firewall. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the NAT rule collection resource.
        :paramtype priority: int
        :keyword action: The action type of a NAT rule collection.
        :paramtype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRCAction
        :keyword rules: Collection of rules used by a NAT rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNatRule]
        """
        super(AzureFirewallNatRuleCollection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs.get('priority', None)
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = None


class AzureFirewallNetworkRule(msrest.serialization.Model):
    """Properties of the network rule.

    :ivar name: Name of the network rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar protocols: Array of AzureFirewallNetworkRuleProtocols.
    :vartype protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar destination_fqdns: List of destination FQDNs.
    :vartype destination_fqdns: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar destination_ip_groups: List of destination IpGroups for this rule.
    :vartype destination_ip_groups: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'destination_fqdns': {'key': 'destinationFqdns', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'destination_ip_groups': {'key': 'destinationIpGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the network rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword protocols: Array of AzureFirewallNetworkRuleProtocols.
        :paramtype protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRuleProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword destination_fqdns: List of destination FQDNs.
        :paramtype destination_fqdns: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword destination_ip_groups: List of destination IpGroups for this rule.
        :paramtype destination_ip_groups: list[str]
        """
        super(AzureFirewallNetworkRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.protocols = kwargs.get('protocols', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)
        self.destination_fqdns = kwargs.get('destination_fqdns', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)
        self.destination_ip_groups = kwargs.get('destination_ip_groups', None)


class AzureFirewallNetworkRuleCollection(SubResource):
    """Network rule collection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the Azure firewall. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Priority of the network rule collection resource.
    :vartype priority: int
    :ivar action: The action type of a rule collection.
    :vartype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCAction
    :ivar rules: Collection of rules used by a network rule collection.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRule]
    :ivar provisioning_state: The provisioning state of the network rule collection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'action': {'key': 'properties.action', 'type': 'AzureFirewallRCAction'},
        'rules': {'key': 'properties.rules', 'type': '[AzureFirewallNetworkRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the Azure firewall. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the network rule collection resource.
        :paramtype priority: int
        :keyword action: The action type of a rule collection.
        :paramtype action: ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCAction
        :keyword rules: Collection of rules used by a network rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallNetworkRule]
        """
        super(AzureFirewallNetworkRuleCollection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs.get('priority', None)
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = None


class AzureFirewallPublicIPAddress(msrest.serialization.Model):
    """Public IP Address associated with azure firewall.

    :ivar address: Public IP Address value.
    :vartype address: str
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address: Public IP Address value.
        :paramtype address: str
        """
        super(AzureFirewallPublicIPAddress, self).__init__(**kwargs)
        self.address = kwargs.get('address', None)


class AzureFirewallRCAction(msrest.serialization.Model):
    """Properties of the AzureFirewallRCAction.

    :ivar type: The type of action. Possible values include: "Allow", "Deny".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "Allow", "Deny".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallRCActionType
        """
        super(AzureFirewallRCAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class AzureFirewallSku(msrest.serialization.Model):
    """SKU of an Azure Firewall.

    :ivar name: Name of an Azure Firewall SKU. Possible values include: "AZFW_VNet", "AZFW_Hub".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSkuName
    :ivar tier: Tier of an Azure Firewall. Possible values include: "Standard", "Premium".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSkuTier
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of an Azure Firewall SKU. Possible values include: "AZFW_VNet", "AZFW_Hub".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSkuName
        :keyword tier: Tier of an Azure Firewall. Possible values include: "Standard", "Premium".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.AzureFirewallSkuTier
        """
        super(AzureFirewallSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)


class AzureReachabilityReport(msrest.serialization.Model):
    """Azure reachability report details.

    All required parameters must be populated in order to send to Azure.

    :ivar aggregation_level: Required. The aggregation level of Azure reachability report. Can be
     Country, State or City.
    :vartype aggregation_level: str
    :ivar provider_location: Required. Parameters that define a geographic location.
    :vartype provider_location:
     ~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLocation
    :ivar reachability_report: Required. List of Azure reachability report items.
    :vartype reachability_report:
     list[~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportItem]
    """

    _validation = {
        'aggregation_level': {'required': True},
        'provider_location': {'required': True},
        'reachability_report': {'required': True},
    }

    _attribute_map = {
        'aggregation_level': {'key': 'aggregationLevel', 'type': 'str'},
        'provider_location': {'key': 'providerLocation', 'type': 'AzureReachabilityReportLocation'},
        'reachability_report': {'key': 'reachabilityReport', 'type': '[AzureReachabilityReportItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword aggregation_level: Required. The aggregation level of Azure reachability report. Can
         be Country, State or City.
        :paramtype aggregation_level: str
        :keyword provider_location: Required. Parameters that define a geographic location.
        :paramtype provider_location:
         ~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLocation
        :keyword reachability_report: Required. List of Azure reachability report items.
        :paramtype reachability_report:
         list[~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportItem]
        """
        super(AzureReachabilityReport, self).__init__(**kwargs)
        self.aggregation_level = kwargs['aggregation_level']
        self.provider_location = kwargs['provider_location']
        self.reachability_report = kwargs['reachability_report']


class AzureReachabilityReportItem(msrest.serialization.Model):
    """Azure reachability report details for a given provider location.

    :ivar provider: The Internet service provider.
    :vartype provider: str
    :ivar azure_location: The Azure region.
    :vartype azure_location: str
    :ivar latencies: List of latency details for each of the time series.
    :vartype latencies:
     list[~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLatencyInfo]
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'azure_location': {'key': 'azureLocation', 'type': 'str'},
        'latencies': {'key': 'latencies', 'type': '[AzureReachabilityReportLatencyInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider: The Internet service provider.
        :paramtype provider: str
        :keyword azure_location: The Azure region.
        :paramtype azure_location: str
        :keyword latencies: List of latency details for each of the time series.
        :paramtype latencies:
         list[~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLatencyInfo]
        """
        super(AzureReachabilityReportItem, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.azure_location = kwargs.get('azure_location', None)
        self.latencies = kwargs.get('latencies', None)


class AzureReachabilityReportLatencyInfo(msrest.serialization.Model):
    """Details on latency for a time series.

    :ivar time_stamp: The time stamp.
    :vartype time_stamp: ~datetime.datetime
    :ivar score: The relative latency score between 1 and 100, higher values indicating a faster
     connection.
    :vartype score: int
    """

    _validation = {
        'score': {'maximum': 100, 'minimum': 1},
    }

    _attribute_map = {
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'score': {'key': 'score', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_stamp: The time stamp.
        :paramtype time_stamp: ~datetime.datetime
        :keyword score: The relative latency score between 1 and 100, higher values indicating a faster
         connection.
        :paramtype score: int
        """
        super(AzureReachabilityReportLatencyInfo, self).__init__(**kwargs)
        self.time_stamp = kwargs.get('time_stamp', None)
        self.score = kwargs.get('score', None)


class AzureReachabilityReportLocation(msrest.serialization.Model):
    """Parameters that define a geographic location.

    All required parameters must be populated in order to send to Azure.

    :ivar country: Required. The name of the country.
    :vartype country: str
    :ivar state: The name of the state.
    :vartype state: str
    :ivar city: The name of the city or town.
    :vartype city: str
    """

    _validation = {
        'country': {'required': True},
    }

    _attribute_map = {
        'country': {'key': 'country', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword country: Required. The name of the country.
        :paramtype country: str
        :keyword state: The name of the state.
        :paramtype state: str
        :keyword city: The name of the city or town.
        :paramtype city: str
        """
        super(AzureReachabilityReportLocation, self).__init__(**kwargs)
        self.country = kwargs['country']
        self.state = kwargs.get('state', None)
        self.city = kwargs.get('city', None)


class AzureReachabilityReportParameters(msrest.serialization.Model):
    """Geographic and time constraints for Azure reachability report.

    All required parameters must be populated in order to send to Azure.

    :ivar provider_location: Required. Parameters that define a geographic location.
    :vartype provider_location:
     ~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLocation
    :ivar providers: List of Internet service providers.
    :vartype providers: list[str]
    :ivar azure_locations: Optional Azure regions to scope the query to.
    :vartype azure_locations: list[str]
    :ivar start_time: Required. The start time for the Azure reachability report.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. The end time for the Azure reachability report.
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'provider_location': {'required': True},
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'provider_location': {'key': 'providerLocation', 'type': 'AzureReachabilityReportLocation'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'azure_locations': {'key': 'azureLocations', 'type': '[str]'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider_location: Required. Parameters that define a geographic location.
        :paramtype provider_location:
         ~azure.mgmt.network.v2021_02_01.models.AzureReachabilityReportLocation
        :keyword providers: List of Internet service providers.
        :paramtype providers: list[str]
        :keyword azure_locations: Optional Azure regions to scope the query to.
        :paramtype azure_locations: list[str]
        :keyword start_time: Required. The start time for the Azure reachability report.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. The end time for the Azure reachability report.
        :paramtype end_time: ~datetime.datetime
        """
        super(AzureReachabilityReportParameters, self).__init__(**kwargs)
        self.provider_location = kwargs['provider_location']
        self.providers = kwargs.get('providers', None)
        self.azure_locations = kwargs.get('azure_locations', None)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']


class AzureWebCategory(msrest.serialization.Model):
    """Azure Web Category Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar group: The name of the group that the category belongs to.
    :vartype group: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'group': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'group': {'key': 'properties.group', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(AzureWebCategory, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = None
        self.type = None
        self.etag = None
        self.group = None


class AzureWebCategoryListResult(msrest.serialization.Model):
    """Response for ListAzureWebCategories API service call.

    :ivar value: List of Azure Web Categories for a given Subscription.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.AzureWebCategory]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AzureWebCategory]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Azure Web Categories for a given Subscription.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.AzureWebCategory]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AzureWebCategoryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BackendAddressPool(SubResource):
    """Pool of backend IP addresses.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of backend address pools
     used by the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar location: The location of the backend address pool.
    :vartype location: str
    :ivar tunnel_interfaces: An array of gateway load balancer tunnel interfaces.
    :vartype tunnel_interfaces:
     list[~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelInterface]
    :ivar load_balancer_backend_addresses: An array of backend addresses.
    :vartype load_balancer_backend_addresses:
     list[~azure.mgmt.network.v2021_02_01.models.LoadBalancerBackendAddress]
    :ivar backend_ip_configurations: An array of references to IP addresses defined in network
     interfaces.
    :vartype backend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
    :ivar load_balancing_rules: An array of references to load balancing rules that use this
     backend address pool.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar outbound_rule: A reference to an outbound rule that uses this backend address pool.
    :vartype outbound_rule: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar outbound_rules: An array of references to outbound rules that use this backend address
     pool.
    :vartype outbound_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the backend address pool resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configurations': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'outbound_rule': {'readonly': True},
        'outbound_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'str'},
        'tunnel_interfaces': {'key': 'properties.tunnelInterfaces', 'type': '[GatewayLoadBalancerTunnelInterface]'},
        'load_balancer_backend_addresses': {'key': 'properties.loadBalancerBackendAddresses', 'type': '[LoadBalancerBackendAddress]'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'outbound_rule': {'key': 'properties.outboundRule', 'type': 'SubResource'},
        'outbound_rules': {'key': 'properties.outboundRules', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of backend address pools
         used by the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword location: The location of the backend address pool.
        :paramtype location: str
        :keyword tunnel_interfaces: An array of gateway load balancer tunnel interfaces.
        :paramtype tunnel_interfaces:
         list[~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelInterface]
        :keyword load_balancer_backend_addresses: An array of backend addresses.
        :paramtype load_balancer_backend_addresses:
         list[~azure.mgmt.network.v2021_02_01.models.LoadBalancerBackendAddress]
        """
        super(BackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tunnel_interfaces = kwargs.get('tunnel_interfaces', None)
        self.load_balancer_backend_addresses = kwargs.get('load_balancer_backend_addresses', None)
        self.backend_ip_configurations = None
        self.load_balancing_rules = None
        self.outbound_rule = None
        self.outbound_rules = None
        self.provisioning_state = None


class BastionActiveSession(msrest.serialization.Model):
    """The session detail for a target.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar session_id: A unique id for the session.
    :vartype session_id: str
    :ivar start_time: The time when the session started.
    :vartype start_time: any
    :ivar target_subscription_id: The subscription id for the target virtual machine.
    :vartype target_subscription_id: str
    :ivar resource_type: The type of the resource.
    :vartype resource_type: str
    :ivar target_host_name: The host name of the target.
    :vartype target_host_name: str
    :ivar target_resource_group: The resource group of the target.
    :vartype target_resource_group: str
    :ivar user_name: The user name who is active on this session.
    :vartype user_name: str
    :ivar target_ip_address: The IP Address of the target.
    :vartype target_ip_address: str
    :ivar protocol: The protocol used to connect to the target. Possible values include: "SSH",
     "RDP".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.BastionConnectProtocol
    :ivar target_resource_id: The resource id of the target.
    :vartype target_resource_id: str
    :ivar session_duration_in_mins: Duration in mins the session has been active.
    :vartype session_duration_in_mins: float
    """

    _validation = {
        'session_id': {'readonly': True},
        'start_time': {'readonly': True},
        'target_subscription_id': {'readonly': True},
        'resource_type': {'readonly': True},
        'target_host_name': {'readonly': True},
        'target_resource_group': {'readonly': True},
        'user_name': {'readonly': True},
        'target_ip_address': {'readonly': True},
        'protocol': {'readonly': True},
        'target_resource_id': {'readonly': True},
        'session_duration_in_mins': {'readonly': True},
    }

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'object'},
        'target_subscription_id': {'key': 'targetSubscriptionId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'target_host_name': {'key': 'targetHostName', 'type': 'str'},
        'target_resource_group': {'key': 'targetResourceGroup', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'target_ip_address': {'key': 'targetIpAddress', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'session_duration_in_mins': {'key': 'sessionDurationInMins', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BastionActiveSession, self).__init__(**kwargs)
        self.session_id = None
        self.start_time = None
        self.target_subscription_id = None
        self.resource_type = None
        self.target_host_name = None
        self.target_resource_group = None
        self.user_name = None
        self.target_ip_address = None
        self.protocol = None
        self.target_resource_id = None
        self.session_duration_in_mins = None


class BastionActiveSessionListResult(msrest.serialization.Model):
    """Response for GetActiveSessions.

    :ivar value: List of active sessions on the bastion.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BastionActiveSession]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BastionActiveSession]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of active sessions on the bastion.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BastionActiveSession]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BastionActiveSessionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BastionHost(Resource):
    """Bastion Host resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar sku: The sku of this Bastion Host.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.Sku
    :ivar ip_configurations: IP configuration of the Bastion Host resource.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.BastionHostIPConfiguration]
    :ivar dns_name: FQDN for the endpoint on which bastion host is accessible.
    :vartype dns_name: str
    :ivar provisioning_state: The provisioning state of the bastion host resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[BastionHostIPConfiguration]'},
        'dns_name': {'key': 'properties.dnsName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The sku of this Bastion Host.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.Sku
        :keyword ip_configurations: IP configuration of the Bastion Host resource.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.BastionHostIPConfiguration]
        :keyword dns_name: FQDN for the endpoint on which bastion host is accessible.
        :paramtype dns_name: str
        """
        super(BastionHost, self).__init__(**kwargs)
        self.etag = None
        self.sku = kwargs.get('sku', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.dns_name = kwargs.get('dns_name', None)
        self.provisioning_state = None


class BastionHostIPConfiguration(SubResource):
    """IP configuration of an Bastion Host.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Ip configuration type.
    :vartype type: str
    :ivar subnet: Reference of the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar public_ip_address: Reference of the PublicIP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the bastion host IP configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_ip_allocation_method: Private IP allocation method. Possible values include:
     "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword subnet: Reference of the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword public_ip_address: Reference of the PublicIP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword private_ip_allocation_method: Private IP allocation method. Possible values include:
         "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        """
        super(BastionHostIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)


class BastionHostListResult(msrest.serialization.Model):
    """Response for ListBastionHosts API service call.

    :ivar value: List of Bastion Hosts in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BastionHost]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BastionHost]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Bastion Hosts in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BastionHost]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BastionHostListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BastionSessionDeleteResult(msrest.serialization.Model):
    """Response for DisconnectActiveSessions.

    :ivar value: List of sessions with their corresponding state.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BastionSessionState]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BastionSessionState]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of sessions with their corresponding state.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BastionSessionState]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BastionSessionDeleteResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BastionSessionState(msrest.serialization.Model):
    """The session state detail for a target.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar session_id: A unique id for the session.
    :vartype session_id: str
    :ivar message: Used for extra information.
    :vartype message: str
    :ivar state: The state of the session. Disconnected/Failed/NotFound.
    :vartype state: str
    """

    _validation = {
        'session_id': {'readonly': True},
        'message': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BastionSessionState, self).__init__(**kwargs)
        self.session_id = None
        self.message = None
        self.state = None


class BastionShareableLink(msrest.serialization.Model):
    """Bastion Shareable Link.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar vm: Required. Reference of the virtual machine resource.
    :vartype vm: ~azure.mgmt.network.v2021_02_01.models.VM
    :ivar bsl: The unique Bastion Shareable Link to the virtual machine.
    :vartype bsl: str
    :ivar created_at: The time when the link was created.
    :vartype created_at: str
    :ivar message: Optional field indicating the warning or error message related to the vm in case
     of partial failure.
    :vartype message: str
    """

    _validation = {
        'vm': {'required': True},
        'bsl': {'readonly': True},
        'created_at': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'vm': {'key': 'vm', 'type': 'VM'},
        'bsl': {'key': 'bsl', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vm: Required. Reference of the virtual machine resource.
        :paramtype vm: ~azure.mgmt.network.v2021_02_01.models.VM
        """
        super(BastionShareableLink, self).__init__(**kwargs)
        self.vm = kwargs['vm']
        self.bsl = None
        self.created_at = None
        self.message = None


class BastionShareableLinkListRequest(msrest.serialization.Model):
    """Post request for all the Bastion Shareable Link endpoints.

    :ivar vms: List of VM references.
    :vartype vms: list[~azure.mgmt.network.v2021_02_01.models.BastionShareableLink]
    """

    _attribute_map = {
        'vms': {'key': 'vms', 'type': '[BastionShareableLink]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vms: List of VM references.
        :paramtype vms: list[~azure.mgmt.network.v2021_02_01.models.BastionShareableLink]
        """
        super(BastionShareableLinkListRequest, self).__init__(**kwargs)
        self.vms = kwargs.get('vms', None)


class BastionShareableLinkListResult(msrest.serialization.Model):
    """Response for all the Bastion Shareable Link endpoints.

    :ivar value: List of Bastion Shareable Links for the request.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BastionShareableLink]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BastionShareableLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Bastion Shareable Links for the request.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BastionShareableLink]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BastionShareableLinkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BGPCommunity(msrest.serialization.Model):
    """Contains bgp community information offered in Service Community resources.

    :ivar service_supported_region: The region which the service support. e.g. For O365, region is
     Global.
    :vartype service_supported_region: str
    :ivar community_name: The name of the bgp community. e.g. Skype.
    :vartype community_name: str
    :ivar community_value: The value of the bgp community. For more information:
     https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
    :vartype community_value: str
    :ivar community_prefixes: The prefixes that the bgp community contains.
    :vartype community_prefixes: list[str]
    :ivar is_authorized_to_use: Customer is authorized to use bgp community or not.
    :vartype is_authorized_to_use: bool
    :ivar service_group: The service group of the bgp community contains.
    :vartype service_group: str
    """

    _attribute_map = {
        'service_supported_region': {'key': 'serviceSupportedRegion', 'type': 'str'},
        'community_name': {'key': 'communityName', 'type': 'str'},
        'community_value': {'key': 'communityValue', 'type': 'str'},
        'community_prefixes': {'key': 'communityPrefixes', 'type': '[str]'},
        'is_authorized_to_use': {'key': 'isAuthorizedToUse', 'type': 'bool'},
        'service_group': {'key': 'serviceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_supported_region: The region which the service support. e.g. For O365, region
         is Global.
        :paramtype service_supported_region: str
        :keyword community_name: The name of the bgp community. e.g. Skype.
        :paramtype community_name: str
        :keyword community_value: The value of the bgp community. For more information:
         https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
        :paramtype community_value: str
        :keyword community_prefixes: The prefixes that the bgp community contains.
        :paramtype community_prefixes: list[str]
        :keyword is_authorized_to_use: Customer is authorized to use bgp community or not.
        :paramtype is_authorized_to_use: bool
        :keyword service_group: The service group of the bgp community contains.
        :paramtype service_group: str
        """
        super(BGPCommunity, self).__init__(**kwargs)
        self.service_supported_region = kwargs.get('service_supported_region', None)
        self.community_name = kwargs.get('community_name', None)
        self.community_value = kwargs.get('community_value', None)
        self.community_prefixes = kwargs.get('community_prefixes', None)
        self.is_authorized_to_use = kwargs.get('is_authorized_to_use', None)
        self.service_group = kwargs.get('service_group', None)


class BgpConnection(SubResource):
    """Virtual Appliance Site resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the connection.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Connection type.
    :vartype type: str
    :ivar peer_asn: Peer ASN.
    :vartype peer_asn: long
    :ivar peer_ip: Peer IP.
    :vartype peer_ip: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar connection_state: The current state of the VirtualHub to Peer. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_state: str or ~azure.mgmt.network.v2021_02_01.models.HubBgpConnectionStatus
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 0},
        'provisioning_state': {'readonly': True},
        'connection_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'peer_asn': {'key': 'properties.peerAsn', 'type': 'long'},
        'peer_ip': {'key': 'properties.peerIp', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'connection_state': {'key': 'properties.connectionState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the connection.
        :paramtype name: str
        :keyword peer_asn: Peer ASN.
        :paramtype peer_asn: long
        :keyword peer_ip: Peer IP.
        :paramtype peer_ip: str
        """
        super(BgpConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.peer_asn = kwargs.get('peer_asn', None)
        self.peer_ip = kwargs.get('peer_ip', None)
        self.provisioning_state = None
        self.connection_state = None


class BgpPeerStatus(msrest.serialization.Model):
    """BGP peer status details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The virtual network gateway's local address.
    :vartype local_address: str
    :ivar neighbor: The remote BGP peer.
    :vartype neighbor: str
    :ivar asn: The autonomous system number of the remote BGP peer.
    :vartype asn: long
    :ivar state: The BGP peer state. Possible values include: "Unknown", "Stopped", "Idle",
     "Connecting", "Connected".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.BgpPeerState
    :ivar connected_duration: For how long the peering has been up.
    :vartype connected_duration: str
    :ivar routes_received: The number of routes learned from this peer.
    :vartype routes_received: long
    :ivar messages_sent: The number of BGP messages sent.
    :vartype messages_sent: long
    :ivar messages_received: The number of BGP messages received.
    :vartype messages_received: long
    """

    _validation = {
        'local_address': {'readonly': True},
        'neighbor': {'readonly': True},
        'asn': {'readonly': True, 'maximum': 4294967295, 'minimum': 0},
        'state': {'readonly': True},
        'connected_duration': {'readonly': True},
        'routes_received': {'readonly': True},
        'messages_sent': {'readonly': True},
        'messages_received': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'asn': {'key': 'asn', 'type': 'long'},
        'state': {'key': 'state', 'type': 'str'},
        'connected_duration': {'key': 'connectedDuration', 'type': 'str'},
        'routes_received': {'key': 'routesReceived', 'type': 'long'},
        'messages_sent': {'key': 'messagesSent', 'type': 'long'},
        'messages_received': {'key': 'messagesReceived', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BgpPeerStatus, self).__init__(**kwargs)
        self.local_address = None
        self.neighbor = None
        self.asn = None
        self.state = None
        self.connected_duration = None
        self.routes_received = None
        self.messages_sent = None
        self.messages_received = None


class BgpPeerStatusListResult(msrest.serialization.Model):
    """Response for list BGP peer status API service call.

    :ivar value: List of BGP peers.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BgpPeerStatus]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpPeerStatus]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of BGP peers.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BgpPeerStatus]
        """
        super(BgpPeerStatusListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class BgpServiceCommunity(Resource):
    """Service Community Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar service_name: The name of the bgp community. e.g. Skype.
    :vartype service_name: str
    :ivar bgp_communities: A list of bgp communities.
    :vartype bgp_communities: list[~azure.mgmt.network.v2021_02_01.models.BGPCommunity]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'service_name': {'key': 'properties.serviceName', 'type': 'str'},
        'bgp_communities': {'key': 'properties.bgpCommunities', 'type': '[BGPCommunity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword service_name: The name of the bgp community. e.g. Skype.
        :paramtype service_name: str
        :keyword bgp_communities: A list of bgp communities.
        :paramtype bgp_communities: list[~azure.mgmt.network.v2021_02_01.models.BGPCommunity]
        """
        super(BgpServiceCommunity, self).__init__(**kwargs)
        self.service_name = kwargs.get('service_name', None)
        self.bgp_communities = kwargs.get('bgp_communities', None)


class BgpServiceCommunityListResult(msrest.serialization.Model):
    """Response for the ListServiceCommunity API service call.

    :ivar value: A list of service community resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BgpServiceCommunity]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpServiceCommunity]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of service community resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BgpServiceCommunity]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BgpServiceCommunityListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BgpSettings(msrest.serialization.Model):
    """BGP settings details.

    :ivar asn: The BGP speaker's ASN.
    :vartype asn: long
    :ivar bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
    :vartype bgp_peering_address: str
    :ivar peer_weight: The weight added to routes learned from this BGP speaker.
    :vartype peer_weight: int
    :ivar bgp_peering_addresses: BGP peering address with IP configuration ID for virtual network
     gateway.
    :vartype bgp_peering_addresses:
     list[~azure.mgmt.network.v2021_02_01.models.IPConfigurationBgpPeeringAddress]
    """

    _validation = {
        'asn': {'maximum': 4294967295, 'minimum': 0},
    }

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'long'},
        'bgp_peering_address': {'key': 'bgpPeeringAddress', 'type': 'str'},
        'peer_weight': {'key': 'peerWeight', 'type': 'int'},
        'bgp_peering_addresses': {'key': 'bgpPeeringAddresses', 'type': '[IPConfigurationBgpPeeringAddress]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asn: The BGP speaker's ASN.
        :paramtype asn: long
        :keyword bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
        :paramtype bgp_peering_address: str
        :keyword peer_weight: The weight added to routes learned from this BGP speaker.
        :paramtype peer_weight: int
        :keyword bgp_peering_addresses: BGP peering address with IP configuration ID for virtual
         network gateway.
        :paramtype bgp_peering_addresses:
         list[~azure.mgmt.network.v2021_02_01.models.IPConfigurationBgpPeeringAddress]
        """
        super(BgpSettings, self).__init__(**kwargs)
        self.asn = kwargs.get('asn', None)
        self.bgp_peering_address = kwargs.get('bgp_peering_address', None)
        self.peer_weight = kwargs.get('peer_weight', None)
        self.bgp_peering_addresses = kwargs.get('bgp_peering_addresses', None)


class BreakOutCategoryPolicies(msrest.serialization.Model):
    """Network Virtual Appliance Sku Properties.

    :ivar allow: Flag to control breakout of o365 allow category.
    :vartype allow: bool
    :ivar optimize: Flag to control breakout of o365 optimize category.
    :vartype optimize: bool
    :ivar default: Flag to control breakout of o365 default category.
    :vartype default: bool
    """

    _attribute_map = {
        'allow': {'key': 'allow', 'type': 'bool'},
        'optimize': {'key': 'optimize', 'type': 'bool'},
        'default': {'key': 'default', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword allow: Flag to control breakout of o365 allow category.
        :paramtype allow: bool
        :keyword optimize: Flag to control breakout of o365 optimize category.
        :paramtype optimize: bool
        :keyword default: Flag to control breakout of o365 default category.
        :paramtype default: bool
        """
        super(BreakOutCategoryPolicies, self).__init__(**kwargs)
        self.allow = kwargs.get('allow', None)
        self.optimize = kwargs.get('optimize', None)
        self.default = kwargs.get('default', None)


class CheckPrivateLinkServiceVisibilityRequest(msrest.serialization.Model):
    """Request body of the CheckPrivateLinkServiceVisibility API service call.

    :ivar private_link_service_alias: The alias of the private link service.
    :vartype private_link_service_alias: str
    """

    _attribute_map = {
        'private_link_service_alias': {'key': 'privateLinkServiceAlias', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword private_link_service_alias: The alias of the private link service.
        :paramtype private_link_service_alias: str
        """
        super(CheckPrivateLinkServiceVisibilityRequest, self).__init__(**kwargs)
        self.private_link_service_alias = kwargs.get('private_link_service_alias', None)


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the service.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of the property in
     error.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~azure.mgmt.network.v2021_02_01.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        :keyword target: The target of the particular error. For example, the name of the property in
         error.
        :paramtype target: str
        :keyword details: A list of additional details about the error.
        :paramtype details: list[~azure.mgmt.network.v2021_02_01.models.CloudErrorBody]
        """
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties(msrest.serialization.Model):
    """Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class ConnectionMonitor(msrest.serialization.Model):
    """Parameters that define the operation to create a connection monitor.

    :ivar location: Connection monitor location.
    :vartype location: str
    :ivar tags: A set of tags. Connection monitor tags.
    :vartype tags: dict[str, str]
    :ivar source: Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
    :ivar destination: Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar endpoints: List of connection monitor endpoints.
    :vartype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
    :ivar test_configurations: List of connection monitor test configurations.
    :vartype test_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
    :ivar test_groups: List of connection monitor test groups.
    :vartype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
    :ivar outputs: List of connection monitor outputs.
    :vartype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
    :ivar notes: Optional notes to be associated with the connection monitor.
    :vartype notes: str
    """

    _validation = {
        'monitoring_interval_in_seconds': {'maximum': 1800, 'minimum': 30},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'source': {'key': 'properties.source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'properties.destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'properties.autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'properties.monitoringIntervalInSeconds', 'type': 'int'},
        'endpoints': {'key': 'properties.endpoints', 'type': '[ConnectionMonitorEndpoint]'},
        'test_configurations': {'key': 'properties.testConfigurations', 'type': '[ConnectionMonitorTestConfiguration]'},
        'test_groups': {'key': 'properties.testGroups', 'type': '[ConnectionMonitorTestGroup]'},
        'outputs': {'key': 'properties.outputs', 'type': '[ConnectionMonitorOutput]'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Connection monitor location.
        :paramtype location: str
        :keyword tags: A set of tags. Connection monitor tags.
        :paramtype tags: dict[str, str]
        :keyword source: Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
        :keyword destination: Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword endpoints: List of connection monitor endpoints.
        :paramtype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
        :keyword test_configurations: List of connection monitor test configurations.
        :paramtype test_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
        :keyword test_groups: List of connection monitor test groups.
        :paramtype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
        :keyword outputs: List of connection monitor outputs.
        :paramtype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
        :keyword notes: Optional notes to be associated with the connection monitor.
        :paramtype notes: str
        """
        super(ConnectionMonitor, self).__init__(**kwargs)
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.source = kwargs.get('source', None)
        self.destination = kwargs.get('destination', None)
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)
        self.endpoints = kwargs.get('endpoints', None)
        self.test_configurations = kwargs.get('test_configurations', None)
        self.test_groups = kwargs.get('test_groups', None)
        self.outputs = kwargs.get('outputs', None)
        self.notes = kwargs.get('notes', None)


class ConnectionMonitorDestination(msrest.serialization.Model):
    """Describes the destination of connection monitor.

    :ivar resource_id: The ID of the resource used as the destination by connection monitor.
    :vartype resource_id: str
    :ivar address: Address of the connection monitor destination (IP or domain name).
    :vartype address: str
    :ivar port: The destination port used by connection monitor.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: The ID of the resource used as the destination by connection monitor.
        :paramtype resource_id: str
        :keyword address: Address of the connection monitor destination (IP or domain name).
        :paramtype address: str
        :keyword port: The destination port used by connection monitor.
        :paramtype port: int
        """
        super(ConnectionMonitorDestination, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.address = kwargs.get('address', None)
        self.port = kwargs.get('port', None)


class ConnectionMonitorEndpoint(msrest.serialization.Model):
    """Describes the connection monitor endpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name of the connection monitor endpoint.
    :vartype name: str
    :ivar type: The endpoint type. Possible values include: "AzureVM", "AzureVNet", "AzureSubnet",
     "ExternalAddress", "MMAWorkspaceMachine", "MMAWorkspaceNetwork".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.EndpointType
    :ivar resource_id: Resource ID of the connection monitor endpoint.
    :vartype resource_id: str
    :ivar address: Address of the connection monitor endpoint (IP or domain name).
    :vartype address: str
    :ivar filter: Filter for sub-items within the endpoint.
    :vartype filter: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilter
    :ivar scope: Endpoint scope.
    :vartype scope: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScope
    :ivar coverage_level: Test coverage for the endpoint. Possible values include: "Default",
     "Low", "BelowAverage", "Average", "AboveAverage", "Full".
    :vartype coverage_level: str or ~azure.mgmt.network.v2021_02_01.models.CoverageLevel
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'filter': {'key': 'filter', 'type': 'ConnectionMonitorEndpointFilter'},
        'scope': {'key': 'scope', 'type': 'ConnectionMonitorEndpointScope'},
        'coverage_level': {'key': 'coverageLevel', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The name of the connection monitor endpoint.
        :paramtype name: str
        :keyword type: The endpoint type. Possible values include: "AzureVM", "AzureVNet",
         "AzureSubnet", "ExternalAddress", "MMAWorkspaceMachine", "MMAWorkspaceNetwork".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.EndpointType
        :keyword resource_id: Resource ID of the connection monitor endpoint.
        :paramtype resource_id: str
        :keyword address: Address of the connection monitor endpoint (IP or domain name).
        :paramtype address: str
        :keyword filter: Filter for sub-items within the endpoint.
        :paramtype filter: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilter
        :keyword scope: Endpoint scope.
        :paramtype scope: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScope
        :keyword coverage_level: Test coverage for the endpoint. Possible values include: "Default",
         "Low", "BelowAverage", "Average", "AboveAverage", "Full".
        :paramtype coverage_level: str or ~azure.mgmt.network.v2021_02_01.models.CoverageLevel
        """
        super(ConnectionMonitorEndpoint, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.type = kwargs.get('type', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.address = kwargs.get('address', None)
        self.filter = kwargs.get('filter', None)
        self.scope = kwargs.get('scope', None)
        self.coverage_level = kwargs.get('coverage_level', None)


class ConnectionMonitorEndpointFilter(msrest.serialization.Model):
    """Describes the connection monitor endpoint filter.

    :ivar type: The behavior of the endpoint filter. Currently only 'Include' is supported.
     Possible values include: "Include".
    :vartype type: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterType
    :ivar items: List of items in the filter.
    :vartype items:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterItem]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'items': {'key': 'items', 'type': '[ConnectionMonitorEndpointFilterItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The behavior of the endpoint filter. Currently only 'Include' is supported.
         Possible values include: "Include".
        :paramtype type: str or
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterType
        :keyword items: List of items in the filter.
        :paramtype items:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterItem]
        """
        super(ConnectionMonitorEndpointFilter, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.items = kwargs.get('items', None)


class ConnectionMonitorEndpointFilterItem(msrest.serialization.Model):
    """Describes the connection monitor endpoint filter item.

    :ivar type: The type of item included in the filter. Currently only 'AgentAddress' is
     supported. Possible values include: "AgentAddress".
    :vartype type: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterItemType
    :ivar address: The address of the filter item.
    :vartype address: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of item included in the filter. Currently only 'AgentAddress' is
         supported. Possible values include: "AgentAddress".
        :paramtype type: str or
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointFilterItemType
        :keyword address: The address of the filter item.
        :paramtype address: str
        """
        super(ConnectionMonitorEndpointFilterItem, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.address = kwargs.get('address', None)


class ConnectionMonitorEndpointScope(msrest.serialization.Model):
    """Describes the connection monitor endpoint scope.

    :ivar include: List of items which needs to be included to the endpoint scope.
    :vartype include:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScopeItem]
    :ivar exclude: List of items which needs to be excluded from the endpoint scope.
    :vartype exclude:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScopeItem]
    """

    _attribute_map = {
        'include': {'key': 'include', 'type': '[ConnectionMonitorEndpointScopeItem]'},
        'exclude': {'key': 'exclude', 'type': '[ConnectionMonitorEndpointScopeItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword include: List of items which needs to be included to the endpoint scope.
        :paramtype include:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScopeItem]
        :keyword exclude: List of items which needs to be excluded from the endpoint scope.
        :paramtype exclude:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpointScopeItem]
        """
        super(ConnectionMonitorEndpointScope, self).__init__(**kwargs)
        self.include = kwargs.get('include', None)
        self.exclude = kwargs.get('exclude', None)


class ConnectionMonitorEndpointScopeItem(msrest.serialization.Model):
    """Describes the connection monitor endpoint scope item.

    :ivar address: The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or
     IPv4/IPv6 IP address.
    :vartype address: str
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address: The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask
         or IPv4/IPv6 IP address.
        :paramtype address: str
        """
        super(ConnectionMonitorEndpointScopeItem, self).__init__(**kwargs)
        self.address = kwargs.get('address', None)


class ConnectionMonitorHttpConfiguration(msrest.serialization.Model):
    """Describes the HTTP configuration.

    :ivar port: The port to connect to.
    :vartype port: int
    :ivar method: The HTTP method to use. Possible values include: "Get", "Post".
    :vartype method: str or ~azure.mgmt.network.v2021_02_01.models.HTTPConfigurationMethod
    :ivar path: The path component of the URI. For instance, "/dir1/dir2".
    :vartype path: str
    :ivar request_headers: The HTTP headers to transmit with the request.
    :vartype request_headers: list[~azure.mgmt.network.v2021_02_01.models.HTTPHeader]
    :ivar valid_status_code_ranges: HTTP status codes to consider successful. For instance,
     "2xx,301-304,418".
    :vartype valid_status_code_ranges: list[str]
    :ivar prefer_https: Value indicating whether HTTPS is preferred over HTTP in cases where the
     choice is not explicit.
    :vartype prefer_https: bool
    """

    _validation = {
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'port': {'key': 'port', 'type': 'int'},
        'method': {'key': 'method', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'request_headers': {'key': 'requestHeaders', 'type': '[HTTPHeader]'},
        'valid_status_code_ranges': {'key': 'validStatusCodeRanges', 'type': '[str]'},
        'prefer_https': {'key': 'preferHTTPS', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword port: The port to connect to.
        :paramtype port: int
        :keyword method: The HTTP method to use. Possible values include: "Get", "Post".
        :paramtype method: str or ~azure.mgmt.network.v2021_02_01.models.HTTPConfigurationMethod
        :keyword path: The path component of the URI. For instance, "/dir1/dir2".
        :paramtype path: str
        :keyword request_headers: The HTTP headers to transmit with the request.
        :paramtype request_headers: list[~azure.mgmt.network.v2021_02_01.models.HTTPHeader]
        :keyword valid_status_code_ranges: HTTP status codes to consider successful. For instance,
         "2xx,301-304,418".
        :paramtype valid_status_code_ranges: list[str]
        :keyword prefer_https: Value indicating whether HTTPS is preferred over HTTP in cases where the
         choice is not explicit.
        :paramtype prefer_https: bool
        """
        super(ConnectionMonitorHttpConfiguration, self).__init__(**kwargs)
        self.port = kwargs.get('port', None)
        self.method = kwargs.get('method', None)
        self.path = kwargs.get('path', None)
        self.request_headers = kwargs.get('request_headers', None)
        self.valid_status_code_ranges = kwargs.get('valid_status_code_ranges', None)
        self.prefer_https = kwargs.get('prefer_https', None)


class ConnectionMonitorIcmpConfiguration(msrest.serialization.Model):
    """Describes the ICMP configuration.

    :ivar disable_trace_route: Value indicating whether path evaluation with trace route should be
     disabled.
    :vartype disable_trace_route: bool
    """

    _attribute_map = {
        'disable_trace_route': {'key': 'disableTraceRoute', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword disable_trace_route: Value indicating whether path evaluation with trace route should
         be disabled.
        :paramtype disable_trace_route: bool
        """
        super(ConnectionMonitorIcmpConfiguration, self).__init__(**kwargs)
        self.disable_trace_route = kwargs.get('disable_trace_route', None)


class ConnectionMonitorListResult(msrest.serialization.Model):
    """List of connection monitors.

    :ivar value: Information about connection monitors.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorResult]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConnectionMonitorResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Information about connection monitors.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorResult]
        """
        super(ConnectionMonitorListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ConnectionMonitorOutput(msrest.serialization.Model):
    """Describes a connection monitor output destination.

    :ivar type: Connection monitor output destination type. Currently, only "Workspace" is
     supported. Possible values include: "Workspace".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.OutputType
    :ivar workspace_settings: Describes the settings for producing output into a log analytics
     workspace.
    :vartype workspace_settings:
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorWorkspaceSettings
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'workspace_settings': {'key': 'workspaceSettings', 'type': 'ConnectionMonitorWorkspaceSettings'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Connection monitor output destination type. Currently, only "Workspace" is
         supported. Possible values include: "Workspace".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.OutputType
        :keyword workspace_settings: Describes the settings for producing output into a log analytics
         workspace.
        :paramtype workspace_settings:
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorWorkspaceSettings
        """
        super(ConnectionMonitorOutput, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.workspace_settings = kwargs.get('workspace_settings', None)


class ConnectionMonitorParameters(msrest.serialization.Model):
    """Parameters that define the operation to create a connection monitor.

    :ivar source: Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
    :ivar destination: Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar endpoints: List of connection monitor endpoints.
    :vartype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
    :ivar test_configurations: List of connection monitor test configurations.
    :vartype test_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
    :ivar test_groups: List of connection monitor test groups.
    :vartype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
    :ivar outputs: List of connection monitor outputs.
    :vartype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
    :ivar notes: Optional notes to be associated with the connection monitor.
    :vartype notes: str
    """

    _validation = {
        'monitoring_interval_in_seconds': {'maximum': 1800, 'minimum': 30},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'monitoringIntervalInSeconds', 'type': 'int'},
        'endpoints': {'key': 'endpoints', 'type': '[ConnectionMonitorEndpoint]'},
        'test_configurations': {'key': 'testConfigurations', 'type': '[ConnectionMonitorTestConfiguration]'},
        'test_groups': {'key': 'testGroups', 'type': '[ConnectionMonitorTestGroup]'},
        'outputs': {'key': 'outputs', 'type': '[ConnectionMonitorOutput]'},
        'notes': {'key': 'notes', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
        :keyword destination: Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword endpoints: List of connection monitor endpoints.
        :paramtype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
        :keyword test_configurations: List of connection monitor test configurations.
        :paramtype test_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
        :keyword test_groups: List of connection monitor test groups.
        :paramtype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
        :keyword outputs: List of connection monitor outputs.
        :paramtype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
        :keyword notes: Optional notes to be associated with the connection monitor.
        :paramtype notes: str
        """
        super(ConnectionMonitorParameters, self).__init__(**kwargs)
        self.source = kwargs.get('source', None)
        self.destination = kwargs.get('destination', None)
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)
        self.endpoints = kwargs.get('endpoints', None)
        self.test_configurations = kwargs.get('test_configurations', None)
        self.test_groups = kwargs.get('test_groups', None)
        self.outputs = kwargs.get('outputs', None)
        self.notes = kwargs.get('notes', None)


class ConnectionMonitorQueryResult(msrest.serialization.Model):
    """List of connection states snapshots.

    :ivar source_status: Status of connection monitor source. Possible values include: "Unknown",
     "Active", "Inactive".
    :vartype source_status: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSourceStatus
    :ivar states: Information about connection states.
    :vartype states: list[~azure.mgmt.network.v2021_02_01.models.ConnectionStateSnapshot]
    """

    _attribute_map = {
        'source_status': {'key': 'sourceStatus', 'type': 'str'},
        'states': {'key': 'states', 'type': '[ConnectionStateSnapshot]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source_status: Status of connection monitor source. Possible values include:
         "Unknown", "Active", "Inactive".
        :paramtype source_status: str or
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSourceStatus
        :keyword states: Information about connection states.
        :paramtype states: list[~azure.mgmt.network.v2021_02_01.models.ConnectionStateSnapshot]
        """
        super(ConnectionMonitorQueryResult, self).__init__(**kwargs)
        self.source_status = kwargs.get('source_status', None)
        self.states = kwargs.get('states', None)


class ConnectionMonitorResult(msrest.serialization.Model):
    """Information about the connection monitor.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the connection monitor.
    :vartype name: str
    :ivar id: ID of the connection monitor.
    :vartype id: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Connection monitor type.
    :vartype type: str
    :ivar location: Connection monitor location.
    :vartype location: str
    :ivar tags: A set of tags. Connection monitor tags.
    :vartype tags: dict[str, str]
    :ivar source: Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
    :ivar destination: Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar endpoints: List of connection monitor endpoints.
    :vartype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
    :ivar test_configurations: List of connection monitor test configurations.
    :vartype test_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
    :ivar test_groups: List of connection monitor test groups.
    :vartype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
    :ivar outputs: List of connection monitor outputs.
    :vartype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
    :ivar notes: Optional notes to be associated with the connection monitor.
    :vartype notes: str
    :ivar provisioning_state: The provisioning state of the connection monitor. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar start_time: The date and time when the connection monitor was started.
    :vartype start_time: ~datetime.datetime
    :ivar monitoring_status: The monitoring status of the connection monitor.
    :vartype monitoring_status: str
    :ivar connection_monitor_type: Type of connection monitor. Possible values include:
     "MultiEndpoint", "SingleSourceDestination".
    :vartype connection_monitor_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorType
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'monitoring_interval_in_seconds': {'maximum': 1800, 'minimum': 30},
        'provisioning_state': {'readonly': True},
        'start_time': {'readonly': True},
        'monitoring_status': {'readonly': True},
        'connection_monitor_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'source': {'key': 'properties.source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'properties.destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'properties.autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'properties.monitoringIntervalInSeconds', 'type': 'int'},
        'endpoints': {'key': 'properties.endpoints', 'type': '[ConnectionMonitorEndpoint]'},
        'test_configurations': {'key': 'properties.testConfigurations', 'type': '[ConnectionMonitorTestConfiguration]'},
        'test_groups': {'key': 'properties.testGroups', 'type': '[ConnectionMonitorTestGroup]'},
        'outputs': {'key': 'properties.outputs', 'type': '[ConnectionMonitorOutput]'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
        'monitoring_status': {'key': 'properties.monitoringStatus', 'type': 'str'},
        'connection_monitor_type': {'key': 'properties.connectionMonitorType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Connection monitor location.
        :paramtype location: str
        :keyword tags: A set of tags. Connection monitor tags.
        :paramtype tags: dict[str, str]
        :keyword source: Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
        :keyword destination: Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword endpoints: List of connection monitor endpoints.
        :paramtype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
        :keyword test_configurations: List of connection monitor test configurations.
        :paramtype test_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
        :keyword test_groups: List of connection monitor test groups.
        :paramtype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
        :keyword outputs: List of connection monitor outputs.
        :paramtype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
        :keyword notes: Optional notes to be associated with the connection monitor.
        :paramtype notes: str
        """
        super(ConnectionMonitorResult, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.etag = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.source = kwargs.get('source', None)
        self.destination = kwargs.get('destination', None)
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)
        self.endpoints = kwargs.get('endpoints', None)
        self.test_configurations = kwargs.get('test_configurations', None)
        self.test_groups = kwargs.get('test_groups', None)
        self.outputs = kwargs.get('outputs', None)
        self.notes = kwargs.get('notes', None)
        self.provisioning_state = None
        self.start_time = None
        self.monitoring_status = None
        self.connection_monitor_type = None


class ConnectionMonitorResultProperties(ConnectionMonitorParameters):
    """Describes the properties of a connection monitor.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar source: Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
    :ivar destination: Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar endpoints: List of connection monitor endpoints.
    :vartype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
    :ivar test_configurations: List of connection monitor test configurations.
    :vartype test_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
    :ivar test_groups: List of connection monitor test groups.
    :vartype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
    :ivar outputs: List of connection monitor outputs.
    :vartype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
    :ivar notes: Optional notes to be associated with the connection monitor.
    :vartype notes: str
    :ivar provisioning_state: The provisioning state of the connection monitor. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar start_time: The date and time when the connection monitor was started.
    :vartype start_time: ~datetime.datetime
    :ivar monitoring_status: The monitoring status of the connection monitor.
    :vartype monitoring_status: str
    :ivar connection_monitor_type: Type of connection monitor. Possible values include:
     "MultiEndpoint", "SingleSourceDestination".
    :vartype connection_monitor_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorType
    """

    _validation = {
        'monitoring_interval_in_seconds': {'maximum': 1800, 'minimum': 30},
        'provisioning_state': {'readonly': True},
        'start_time': {'readonly': True},
        'monitoring_status': {'readonly': True},
        'connection_monitor_type': {'readonly': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'monitoringIntervalInSeconds', 'type': 'int'},
        'endpoints': {'key': 'endpoints', 'type': '[ConnectionMonitorEndpoint]'},
        'test_configurations': {'key': 'testConfigurations', 'type': '[ConnectionMonitorTestConfiguration]'},
        'test_groups': {'key': 'testGroups', 'type': '[ConnectionMonitorTestGroup]'},
        'outputs': {'key': 'outputs', 'type': '[ConnectionMonitorOutput]'},
        'notes': {'key': 'notes', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'monitoring_status': {'key': 'monitoringStatus', 'type': 'str'},
        'connection_monitor_type': {'key': 'connectionMonitorType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSource
        :keyword destination: Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword endpoints: List of connection monitor endpoints.
        :paramtype endpoints: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorEndpoint]
        :keyword test_configurations: List of connection monitor test configurations.
        :paramtype test_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfiguration]
        :keyword test_groups: List of connection monitor test groups.
        :paramtype test_groups: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestGroup]
        :keyword outputs: List of connection monitor outputs.
        :paramtype outputs: list[~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorOutput]
        :keyword notes: Optional notes to be associated with the connection monitor.
        :paramtype notes: str
        """
        super(ConnectionMonitorResultProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.start_time = None
        self.monitoring_status = None
        self.connection_monitor_type = None


class ConnectionMonitorSource(msrest.serialization.Model):
    """Describes the source of connection monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Required. The ID of the resource used as the source by connection monitor.
    :vartype resource_id: str
    :ivar port: The source port used by connection monitor.
    :vartype port: int
    """

    _validation = {
        'resource_id': {'required': True},
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: Required. The ID of the resource used as the source by connection
         monitor.
        :paramtype resource_id: str
        :keyword port: The source port used by connection monitor.
        :paramtype port: int
        """
        super(ConnectionMonitorSource, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.port = kwargs.get('port', None)


class ConnectionMonitorSuccessThreshold(msrest.serialization.Model):
    """Describes the threshold for declaring a test successful.

    :ivar checks_failed_percent: The maximum percentage of failed checks permitted for a test to
     evaluate as successful.
    :vartype checks_failed_percent: int
    :ivar round_trip_time_ms: The maximum round-trip time in milliseconds permitted for a test to
     evaluate as successful.
    :vartype round_trip_time_ms: float
    """

    _attribute_map = {
        'checks_failed_percent': {'key': 'checksFailedPercent', 'type': 'int'},
        'round_trip_time_ms': {'key': 'roundTripTimeMs', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword checks_failed_percent: The maximum percentage of failed checks permitted for a test to
         evaluate as successful.
        :paramtype checks_failed_percent: int
        :keyword round_trip_time_ms: The maximum round-trip time in milliseconds permitted for a test
         to evaluate as successful.
        :paramtype round_trip_time_ms: float
        """
        super(ConnectionMonitorSuccessThreshold, self).__init__(**kwargs)
        self.checks_failed_percent = kwargs.get('checks_failed_percent', None)
        self.round_trip_time_ms = kwargs.get('round_trip_time_ms', None)


class ConnectionMonitorTcpConfiguration(msrest.serialization.Model):
    """Describes the TCP configuration.

    :ivar port: The port to connect to.
    :vartype port: int
    :ivar disable_trace_route: Value indicating whether path evaluation with trace route should be
     disabled.
    :vartype disable_trace_route: bool
    :ivar destination_port_behavior: Destination port behavior. Possible values include: "None",
     "ListenIfAvailable".
    :vartype destination_port_behavior: str or
     ~azure.mgmt.network.v2021_02_01.models.DestinationPortBehavior
    """

    _validation = {
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'port': {'key': 'port', 'type': 'int'},
        'disable_trace_route': {'key': 'disableTraceRoute', 'type': 'bool'},
        'destination_port_behavior': {'key': 'destinationPortBehavior', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword port: The port to connect to.
        :paramtype port: int
        :keyword disable_trace_route: Value indicating whether path evaluation with trace route should
         be disabled.
        :paramtype disable_trace_route: bool
        :keyword destination_port_behavior: Destination port behavior. Possible values include: "None",
         "ListenIfAvailable".
        :paramtype destination_port_behavior: str or
         ~azure.mgmt.network.v2021_02_01.models.DestinationPortBehavior
        """
        super(ConnectionMonitorTcpConfiguration, self).__init__(**kwargs)
        self.port = kwargs.get('port', None)
        self.disable_trace_route = kwargs.get('disable_trace_route', None)
        self.destination_port_behavior = kwargs.get('destination_port_behavior', None)


class ConnectionMonitorTestConfiguration(msrest.serialization.Model):
    """Describes a connection monitor test configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name of the connection monitor test configuration.
    :vartype name: str
    :ivar test_frequency_sec: The frequency of test evaluation, in seconds.
    :vartype test_frequency_sec: int
    :ivar protocol: Required. The protocol to use in test evaluation. Possible values include:
     "Tcp", "Http", "Icmp".
    :vartype protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfigurationProtocol
    :ivar preferred_ip_version: The preferred IP version to use in test evaluation. The connection
     monitor may choose to use a different version depending on other parameters. Possible values
     include: "IPv4", "IPv6".
    :vartype preferred_ip_version: str or ~azure.mgmt.network.v2021_02_01.models.PreferredIPVersion
    :ivar http_configuration: The parameters used to perform test evaluation over HTTP.
    :vartype http_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorHttpConfiguration
    :ivar tcp_configuration: The parameters used to perform test evaluation over TCP.
    :vartype tcp_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTcpConfiguration
    :ivar icmp_configuration: The parameters used to perform test evaluation over ICMP.
    :vartype icmp_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorIcmpConfiguration
    :ivar success_threshold: The threshold for declaring a test successful.
    :vartype success_threshold:
     ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSuccessThreshold
    """

    _validation = {
        'name': {'required': True},
        'protocol': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'test_frequency_sec': {'key': 'testFrequencySec', 'type': 'int'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'preferred_ip_version': {'key': 'preferredIPVersion', 'type': 'str'},
        'http_configuration': {'key': 'httpConfiguration', 'type': 'ConnectionMonitorHttpConfiguration'},
        'tcp_configuration': {'key': 'tcpConfiguration', 'type': 'ConnectionMonitorTcpConfiguration'},
        'icmp_configuration': {'key': 'icmpConfiguration', 'type': 'ConnectionMonitorIcmpConfiguration'},
        'success_threshold': {'key': 'successThreshold', 'type': 'ConnectionMonitorSuccessThreshold'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The name of the connection monitor test configuration.
        :paramtype name: str
        :keyword test_frequency_sec: The frequency of test evaluation, in seconds.
        :paramtype test_frequency_sec: int
        :keyword protocol: Required. The protocol to use in test evaluation. Possible values include:
         "Tcp", "Http", "Icmp".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTestConfigurationProtocol
        :keyword preferred_ip_version: The preferred IP version to use in test evaluation. The
         connection monitor may choose to use a different version depending on other parameters.
         Possible values include: "IPv4", "IPv6".
        :paramtype preferred_ip_version: str or
         ~azure.mgmt.network.v2021_02_01.models.PreferredIPVersion
        :keyword http_configuration: The parameters used to perform test evaluation over HTTP.
        :paramtype http_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorHttpConfiguration
        :keyword tcp_configuration: The parameters used to perform test evaluation over TCP.
        :paramtype tcp_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorTcpConfiguration
        :keyword icmp_configuration: The parameters used to perform test evaluation over ICMP.
        :paramtype icmp_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorIcmpConfiguration
        :keyword success_threshold: The threshold for declaring a test successful.
        :paramtype success_threshold:
         ~azure.mgmt.network.v2021_02_01.models.ConnectionMonitorSuccessThreshold
        """
        super(ConnectionMonitorTestConfiguration, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.test_frequency_sec = kwargs.get('test_frequency_sec', None)
        self.protocol = kwargs['protocol']
        self.preferred_ip_version = kwargs.get('preferred_ip_version', None)
        self.http_configuration = kwargs.get('http_configuration', None)
        self.tcp_configuration = kwargs.get('tcp_configuration', None)
        self.icmp_configuration = kwargs.get('icmp_configuration', None)
        self.success_threshold = kwargs.get('success_threshold', None)


class ConnectionMonitorTestGroup(msrest.serialization.Model):
    """Describes the connection monitor test group.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name of the connection monitor test group.
    :vartype name: str
    :ivar disable: Value indicating whether test group is disabled.
    :vartype disable: bool
    :ivar test_configurations: Required. List of test configuration names.
    :vartype test_configurations: list[str]
    :ivar sources: Required. List of source endpoint names.
    :vartype sources: list[str]
    :ivar destinations: Required. List of destination endpoint names.
    :vartype destinations: list[str]
    """

    _validation = {
        'name': {'required': True},
        'test_configurations': {'required': True},
        'sources': {'required': True},
        'destinations': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'disable': {'key': 'disable', 'type': 'bool'},
        'test_configurations': {'key': 'testConfigurations', 'type': '[str]'},
        'sources': {'key': 'sources', 'type': '[str]'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The name of the connection monitor test group.
        :paramtype name: str
        :keyword disable: Value indicating whether test group is disabled.
        :paramtype disable: bool
        :keyword test_configurations: Required. List of test configuration names.
        :paramtype test_configurations: list[str]
        :keyword sources: Required. List of source endpoint names.
        :paramtype sources: list[str]
        :keyword destinations: Required. List of destination endpoint names.
        :paramtype destinations: list[str]
        """
        super(ConnectionMonitorTestGroup, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.disable = kwargs.get('disable', None)
        self.test_configurations = kwargs['test_configurations']
        self.sources = kwargs['sources']
        self.destinations = kwargs['destinations']


class ConnectionMonitorWorkspaceSettings(msrest.serialization.Model):
    """Describes the settings for producing output into a log analytics workspace.

    :ivar workspace_resource_id: Log analytics workspace resource ID.
    :vartype workspace_resource_id: str
    """

    _attribute_map = {
        'workspace_resource_id': {'key': 'workspaceResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword workspace_resource_id: Log analytics workspace resource ID.
        :paramtype workspace_resource_id: str
        """
        super(ConnectionMonitorWorkspaceSettings, self).__init__(**kwargs)
        self.workspace_resource_id = kwargs.get('workspace_resource_id', None)


class ConnectionResetSharedKey(msrest.serialization.Model):
    """The virtual network connection reset shared key.

    All required parameters must be populated in order to send to Azure.

    :ivar key_length: Required. The virtual network connection reset shared key length, should
     between 1 and 128.
    :vartype key_length: int
    """

    _validation = {
        'key_length': {'required': True, 'maximum': 128, 'minimum': 1},
    }

    _attribute_map = {
        'key_length': {'key': 'keyLength', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key_length: Required. The virtual network connection reset shared key length, should
         between 1 and 128.
        :paramtype key_length: int
        """
        super(ConnectionResetSharedKey, self).__init__(**kwargs)
        self.key_length = kwargs['key_length']


class ConnectionSharedKey(SubResource):
    """Response for GetConnectionSharedKey API service call.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar value: Required. The virtual network connection shared key value.
    :vartype value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword value: Required. The virtual network connection shared key value.
        :paramtype value: str
        """
        super(ConnectionSharedKey, self).__init__(**kwargs)
        self.value = kwargs['value']


class ConnectionStateSnapshot(msrest.serialization.Model):
    """Connection state snapshot.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar connection_state: The connection state. Possible values include: "Reachable",
     "Unreachable", "Unknown".
    :vartype connection_state: str or ~azure.mgmt.network.v2021_02_01.models.ConnectionState
    :ivar start_time: The start time of the connection snapshot.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the connection snapshot.
    :vartype end_time: ~datetime.datetime
    :ivar evaluation_state: Connectivity analysis evaluation state. Possible values include:
     "NotStarted", "InProgress", "Completed".
    :vartype evaluation_state: str or ~azure.mgmt.network.v2021_02_01.models.EvaluationState
    :ivar avg_latency_in_ms: Average latency in ms.
    :vartype avg_latency_in_ms: long
    :ivar min_latency_in_ms: Minimum latency in ms.
    :vartype min_latency_in_ms: long
    :ivar max_latency_in_ms: Maximum latency in ms.
    :vartype max_latency_in_ms: long
    :ivar probes_sent: The number of sent probes.
    :vartype probes_sent: long
    :ivar probes_failed: The number of failed probes.
    :vartype probes_failed: long
    :ivar hops: List of hops between the source and the destination.
    :vartype hops: list[~azure.mgmt.network.v2021_02_01.models.ConnectivityHop]
    """

    _validation = {
        'avg_latency_in_ms': {'maximum': 4294967295, 'minimum': 0},
        'min_latency_in_ms': {'maximum': 4294967295, 'minimum': 0},
        'max_latency_in_ms': {'maximum': 4294967295, 'minimum': 0},
        'probes_sent': {'maximum': 4294967295, 'minimum': 0},
        'probes_failed': {'maximum': 4294967295, 'minimum': 0},
        'hops': {'readonly': True},
    }

    _attribute_map = {
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'evaluation_state': {'key': 'evaluationState', 'type': 'str'},
        'avg_latency_in_ms': {'key': 'avgLatencyInMs', 'type': 'long'},
        'min_latency_in_ms': {'key': 'minLatencyInMs', 'type': 'long'},
        'max_latency_in_ms': {'key': 'maxLatencyInMs', 'type': 'long'},
        'probes_sent': {'key': 'probesSent', 'type': 'long'},
        'probes_failed': {'key': 'probesFailed', 'type': 'long'},
        'hops': {'key': 'hops', 'type': '[ConnectivityHop]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_state: The connection state. Possible values include: "Reachable",
         "Unreachable", "Unknown".
        :paramtype connection_state: str or ~azure.mgmt.network.v2021_02_01.models.ConnectionState
        :keyword start_time: The start time of the connection snapshot.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the connection snapshot.
        :paramtype end_time: ~datetime.datetime
        :keyword evaluation_state: Connectivity analysis evaluation state. Possible values include:
         "NotStarted", "InProgress", "Completed".
        :paramtype evaluation_state: str or ~azure.mgmt.network.v2021_02_01.models.EvaluationState
        :keyword avg_latency_in_ms: Average latency in ms.
        :paramtype avg_latency_in_ms: long
        :keyword min_latency_in_ms: Minimum latency in ms.
        :paramtype min_latency_in_ms: long
        :keyword max_latency_in_ms: Maximum latency in ms.
        :paramtype max_latency_in_ms: long
        :keyword probes_sent: The number of sent probes.
        :paramtype probes_sent: long
        :keyword probes_failed: The number of failed probes.
        :paramtype probes_failed: long
        """
        super(ConnectionStateSnapshot, self).__init__(**kwargs)
        self.connection_state = kwargs.get('connection_state', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.evaluation_state = kwargs.get('evaluation_state', None)
        self.avg_latency_in_ms = kwargs.get('avg_latency_in_ms', None)
        self.min_latency_in_ms = kwargs.get('min_latency_in_ms', None)
        self.max_latency_in_ms = kwargs.get('max_latency_in_ms', None)
        self.probes_sent = kwargs.get('probes_sent', None)
        self.probes_failed = kwargs.get('probes_failed', None)
        self.hops = None


class ConnectivityDestination(msrest.serialization.Model):
    """Parameters that define destination of connection.

    :ivar resource_id: The ID of the resource to which a connection attempt will be made.
    :vartype resource_id: str
    :ivar address: The IP address or URI the resource to which a connection attempt will be made.
    :vartype address: str
    :ivar port: Port on which check connectivity will be performed.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: The ID of the resource to which a connection attempt will be made.
        :paramtype resource_id: str
        :keyword address: The IP address or URI the resource to which a connection attempt will be
         made.
        :paramtype address: str
        :keyword port: Port on which check connectivity will be performed.
        :paramtype port: int
        """
        super(ConnectivityDestination, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.address = kwargs.get('address', None)
        self.port = kwargs.get('port', None)


class ConnectivityHop(msrest.serialization.Model):
    """Information about a hop between the source and the destination.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The type of the hop.
    :vartype type: str
    :ivar id: The ID of the hop.
    :vartype id: str
    :ivar address: The IP address of the hop.
    :vartype address: str
    :ivar resource_id: The ID of the resource corresponding to this hop.
    :vartype resource_id: str
    :ivar next_hop_ids: List of next hop identifiers.
    :vartype next_hop_ids: list[str]
    :ivar previous_hop_ids: List of previous hop identifiers.
    :vartype previous_hop_ids: list[str]
    :ivar links: List of hop links.
    :vartype links: list[~azure.mgmt.network.v2021_02_01.models.HopLink]
    :ivar previous_links: List of previous hop links.
    :vartype previous_links: list[~azure.mgmt.network.v2021_02_01.models.HopLink]
    :ivar issues: List of issues.
    :vartype issues: list[~azure.mgmt.network.v2021_02_01.models.ConnectivityIssue]
    """

    _validation = {
        'type': {'readonly': True},
        'id': {'readonly': True},
        'address': {'readonly': True},
        'resource_id': {'readonly': True},
        'next_hop_ids': {'readonly': True},
        'previous_hop_ids': {'readonly': True},
        'links': {'readonly': True},
        'previous_links': {'readonly': True},
        'issues': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'next_hop_ids': {'key': 'nextHopIds', 'type': '[str]'},
        'previous_hop_ids': {'key': 'previousHopIds', 'type': '[str]'},
        'links': {'key': 'links', 'type': '[HopLink]'},
        'previous_links': {'key': 'previousLinks', 'type': '[HopLink]'},
        'issues': {'key': 'issues', 'type': '[ConnectivityIssue]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityHop, self).__init__(**kwargs)
        self.type = None
        self.id = None
        self.address = None
        self.resource_id = None
        self.next_hop_ids = None
        self.previous_hop_ids = None
        self.links = None
        self.previous_links = None
        self.issues = None


class ConnectivityInformation(msrest.serialization.Model):
    """Information on the connectivity status.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar hops: List of hops between the source and the destination.
    :vartype hops: list[~azure.mgmt.network.v2021_02_01.models.ConnectivityHop]
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connected", "Disconnected", "Degraded".
    :vartype connection_status: str or ~azure.mgmt.network.v2021_02_01.models.ConnectionStatus
    :ivar avg_latency_in_ms: Average latency in milliseconds.
    :vartype avg_latency_in_ms: int
    :ivar min_latency_in_ms: Minimum latency in milliseconds.
    :vartype min_latency_in_ms: int
    :ivar max_latency_in_ms: Maximum latency in milliseconds.
    :vartype max_latency_in_ms: int
    :ivar probes_sent: Total number of probes sent.
    :vartype probes_sent: int
    :ivar probes_failed: Number of failed probes.
    :vartype probes_failed: int
    """

    _validation = {
        'hops': {'readonly': True},
        'connection_status': {'readonly': True},
        'avg_latency_in_ms': {'readonly': True},
        'min_latency_in_ms': {'readonly': True},
        'max_latency_in_ms': {'readonly': True},
        'probes_sent': {'readonly': True},
        'probes_failed': {'readonly': True},
    }

    _attribute_map = {
        'hops': {'key': 'hops', 'type': '[ConnectivityHop]'},
        'connection_status': {'key': 'connectionStatus', 'type': 'str'},
        'avg_latency_in_ms': {'key': 'avgLatencyInMs', 'type': 'int'},
        'min_latency_in_ms': {'key': 'minLatencyInMs', 'type': 'int'},
        'max_latency_in_ms': {'key': 'maxLatencyInMs', 'type': 'int'},
        'probes_sent': {'key': 'probesSent', 'type': 'int'},
        'probes_failed': {'key': 'probesFailed', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityInformation, self).__init__(**kwargs)
        self.hops = None
        self.connection_status = None
        self.avg_latency_in_ms = None
        self.min_latency_in_ms = None
        self.max_latency_in_ms = None
        self.probes_sent = None
        self.probes_failed = None


class ConnectivityIssue(msrest.serialization.Model):
    """Information about an issue encountered in the process of checking for connectivity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar origin: The origin of the issue. Possible values include: "Local", "Inbound", "Outbound".
    :vartype origin: str or ~azure.mgmt.network.v2021_02_01.models.Origin
    :ivar severity: The severity of the issue. Possible values include: "Error", "Warning".
    :vartype severity: str or ~azure.mgmt.network.v2021_02_01.models.Severity
    :ivar type: The type of issue. Possible values include: "Unknown", "AgentStopped",
     "GuestFirewall", "DnsResolution", "SocketBind", "NetworkSecurityRule", "UserDefinedRoute",
     "PortThrottled", "Platform".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.IssueType
    :ivar context: Provides additional context on the issue.
    :vartype context: list[dict[str, str]]
    """

    _validation = {
        'origin': {'readonly': True},
        'severity': {'readonly': True},
        'type': {'readonly': True},
        'context': {'readonly': True},
    }

    _attribute_map = {
        'origin': {'key': 'origin', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'context': {'key': 'context', 'type': '[{str}]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityIssue, self).__init__(**kwargs)
        self.origin = None
        self.severity = None
        self.type = None
        self.context = None


class ConnectivityParameters(msrest.serialization.Model):
    """Parameters that determine how the connectivity check will be performed.

    All required parameters must be populated in order to send to Azure.

    :ivar source: Required. The source of the connection.
    :vartype source: ~azure.mgmt.network.v2021_02_01.models.ConnectivitySource
    :ivar destination: Required. The destination of connection.
    :vartype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectivityDestination
    :ivar protocol: Network protocol. Possible values include: "Tcp", "Http", "Https", "Icmp".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.Protocol
    :ivar protocol_configuration: Configuration of the protocol.
    :vartype protocol_configuration: ~azure.mgmt.network.v2021_02_01.models.ProtocolConfiguration
    :ivar preferred_ip_version: Preferred IP version of the connection. Possible values include:
     "IPv4", "IPv6".
    :vartype preferred_ip_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    """

    _validation = {
        'source': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectivitySource'},
        'destination': {'key': 'destination', 'type': 'ConnectivityDestination'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'protocol_configuration': {'key': 'protocolConfiguration', 'type': 'ProtocolConfiguration'},
        'preferred_ip_version': {'key': 'preferredIPVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Required. The source of the connection.
        :paramtype source: ~azure.mgmt.network.v2021_02_01.models.ConnectivitySource
        :keyword destination: Required. The destination of connection.
        :paramtype destination: ~azure.mgmt.network.v2021_02_01.models.ConnectivityDestination
        :keyword protocol: Network protocol. Possible values include: "Tcp", "Http", "Https", "Icmp".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.Protocol
        :keyword protocol_configuration: Configuration of the protocol.
        :paramtype protocol_configuration: ~azure.mgmt.network.v2021_02_01.models.ProtocolConfiguration
        :keyword preferred_ip_version: Preferred IP version of the connection. Possible values include:
         "IPv4", "IPv6".
        :paramtype preferred_ip_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        """
        super(ConnectivityParameters, self).__init__(**kwargs)
        self.source = kwargs['source']
        self.destination = kwargs['destination']
        self.protocol = kwargs.get('protocol', None)
        self.protocol_configuration = kwargs.get('protocol_configuration', None)
        self.preferred_ip_version = kwargs.get('preferred_ip_version', None)


class ConnectivitySource(msrest.serialization.Model):
    """Parameters that define the source of the connection.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Required. The ID of the resource from which a connectivity check will be
     initiated.
    :vartype resource_id: str
    :ivar port: The source port from which a connectivity check will be performed.
    :vartype port: int
    """

    _validation = {
        'resource_id': {'required': True},
        'port': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: Required. The ID of the resource from which a connectivity check will be
         initiated.
        :paramtype resource_id: str
        :keyword port: The source port from which a connectivity check will be performed.
        :paramtype port: int
        """
        super(ConnectivitySource, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.port = kwargs.get('port', None)


class Container(SubResource):
    """Reference to container resource in remote resource provider.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(Container, self).__init__(**kwargs)


class ContainerNetworkInterface(SubResource):
    """Container network interface child resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource. This name can be used to access the resource.
    :vartype name: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar container_network_interface_configuration: Container network interface configuration from
     which this container network interface is created.
    :vartype container_network_interface_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ContainerNetworkInterfaceConfiguration
    :ivar container: Reference to the container to which this container network interface is
     attached.
    :vartype container: ~azure.mgmt.network.v2021_02_01.models.Container
    :ivar ip_configurations: Reference to the ip configuration on this container nic.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ContainerNetworkInterfaceIpConfiguration]
    :ivar provisioning_state: The provisioning state of the container network interface resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'container_network_interface_configuration': {'readonly': True},
        'ip_configurations': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'container_network_interface_configuration': {'key': 'properties.containerNetworkInterfaceConfiguration', 'type': 'ContainerNetworkInterfaceConfiguration'},
        'container': {'key': 'properties.container', 'type': 'Container'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[ContainerNetworkInterfaceIpConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource. This name can be used to access the resource.
        :paramtype name: str
        :keyword container: Reference to the container to which this container network interface is
         attached.
        :paramtype container: ~azure.mgmt.network.v2021_02_01.models.Container
        """
        super(ContainerNetworkInterface, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.container_network_interface_configuration = None
        self.container = kwargs.get('container', None)
        self.ip_configurations = None
        self.provisioning_state = None


class ContainerNetworkInterfaceConfiguration(SubResource):
    """Container network interface configuration child resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource. This name can be used to access the resource.
    :vartype name: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar ip_configurations: A list of ip configurations of the container network interface
     configuration.
    :vartype ip_configurations: list[~azure.mgmt.network.v2021_02_01.models.IPConfigurationProfile]
    :ivar container_network_interfaces: A list of container network interfaces created from this
     container network interface configuration.
    :vartype container_network_interfaces: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the container network interface
     configuration resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[IPConfigurationProfile]'},
        'container_network_interfaces': {'key': 'properties.containerNetworkInterfaces', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource. This name can be used to access the resource.
        :paramtype name: str
        :keyword ip_configurations: A list of ip configurations of the container network interface
         configuration.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.IPConfigurationProfile]
        :keyword container_network_interfaces: A list of container network interfaces created from this
         container network interface configuration.
        :paramtype container_network_interfaces:
         list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(ContainerNetworkInterfaceConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.container_network_interfaces = kwargs.get('container_network_interfaces', None)
        self.provisioning_state = None


class ContainerNetworkInterfaceIpConfiguration(msrest.serialization.Model):
    """The ip configuration for a container network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the resource. This name can be used to access the resource.
    :vartype name: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the container network interface IP
     configuration resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the resource. This name can be used to access the resource.
        :paramtype name: str
        """
        super(ContainerNetworkInterfaceIpConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.provisioning_state = None


class CustomDnsConfigPropertiesFormat(msrest.serialization.Model):
    """Contains custom Dns resolution configuration from customer.

    :ivar fqdn: Fqdn that resolves to private endpoint ip address.
    :vartype fqdn: str
    :ivar ip_addresses: A list of private ip addresses of the private endpoint.
    :vartype ip_addresses: list[str]
    """

    _attribute_map = {
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword fqdn: Fqdn that resolves to private endpoint ip address.
        :paramtype fqdn: str
        :keyword ip_addresses: A list of private ip addresses of the private endpoint.
        :paramtype ip_addresses: list[str]
        """
        super(CustomDnsConfigPropertiesFormat, self).__init__(**kwargs)
        self.fqdn = kwargs.get('fqdn', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)


class CustomIpPrefix(Resource):
    """Custom IP prefix resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the custom IP prefix.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar cidr: The prefix range in CIDR notation. Should include the start address and the prefix
     length.
    :vartype cidr: str
    :ivar signed_message: Signed message for WAN validation.
    :vartype signed_message: str
    :ivar authorization_message: Authorization message for WAN validation.
    :vartype authorization_message: str
    :ivar custom_ip_prefix_parent: The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
    :vartype custom_ip_prefix_parent: ~azure.mgmt.network.v2021_02_01.models.CustomIpPrefix
    :ivar child_custom_ip_prefixes: The list of all Children for IPv6 /48 CustomIpPrefix.
    :vartype child_custom_ip_prefixes: list[~azure.mgmt.network.v2021_02_01.models.CustomIpPrefix]
    :ivar commissioned_state: The commissioned state of the Custom IP Prefix. Possible values
     include: "Provisioning", "Provisioned", "Commissioning", "Commissioned", "Decommissioning",
     "Deprovisioning".
    :vartype commissioned_state: str or ~azure.mgmt.network.v2021_02_01.models.CommissionedState
    :ivar public_ip_prefixes: The list of all referenced PublicIpPrefixes.
    :vartype public_ip_prefixes: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar resource_guid: The resource GUID property of the custom IP prefix resource.
    :vartype resource_guid: str
    :ivar failed_reason: The reason why resource is in failed state.
    :vartype failed_reason: str
    :ivar provisioning_state: The provisioning state of the custom IP prefix resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'child_custom_ip_prefixes': {'readonly': True},
        'public_ip_prefixes': {'readonly': True},
        'resource_guid': {'readonly': True},
        'failed_reason': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'cidr': {'key': 'properties.cidr', 'type': 'str'},
        'signed_message': {'key': 'properties.signedMessage', 'type': 'str'},
        'authorization_message': {'key': 'properties.authorizationMessage', 'type': 'str'},
        'custom_ip_prefix_parent': {'key': 'properties.customIpPrefixParent', 'type': 'CustomIpPrefix'},
        'child_custom_ip_prefixes': {'key': 'properties.childCustomIpPrefixes', 'type': '[CustomIpPrefix]'},
        'commissioned_state': {'key': 'properties.commissionedState', 'type': 'str'},
        'public_ip_prefixes': {'key': 'properties.publicIpPrefixes', 'type': '[SubResource]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'failed_reason': {'key': 'properties.failedReason', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the custom IP prefix.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword cidr: The prefix range in CIDR notation. Should include the start address and the
         prefix length.
        :paramtype cidr: str
        :keyword signed_message: Signed message for WAN validation.
        :paramtype signed_message: str
        :keyword authorization_message: Authorization message for WAN validation.
        :paramtype authorization_message: str
        :keyword custom_ip_prefix_parent: The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
        :paramtype custom_ip_prefix_parent: ~azure.mgmt.network.v2021_02_01.models.CustomIpPrefix
        :keyword commissioned_state: The commissioned state of the Custom IP Prefix. Possible values
         include: "Provisioning", "Provisioned", "Commissioning", "Commissioned", "Decommissioning",
         "Deprovisioning".
        :paramtype commissioned_state: str or ~azure.mgmt.network.v2021_02_01.models.CommissionedState
        """
        super(CustomIpPrefix, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.zones = kwargs.get('zones', None)
        self.cidr = kwargs.get('cidr', None)
        self.signed_message = kwargs.get('signed_message', None)
        self.authorization_message = kwargs.get('authorization_message', None)
        self.custom_ip_prefix_parent = kwargs.get('custom_ip_prefix_parent', None)
        self.child_custom_ip_prefixes = None
        self.commissioned_state = kwargs.get('commissioned_state', None)
        self.public_ip_prefixes = None
        self.resource_guid = None
        self.failed_reason = None
        self.provisioning_state = None


class CustomIpPrefixListResult(msrest.serialization.Model):
    """Response for ListCustomIpPrefixes API service call.

    :ivar value: A list of Custom IP prefixes that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.CustomIpPrefix]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CustomIpPrefix]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of Custom IP prefixes that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.CustomIpPrefix]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(CustomIpPrefixListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DdosCustomPolicy(Resource):
    """A DDoS custom policy in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the DDoS custom policy resource. It uniquely
     identifies the resource, even if the user changes its name or migrate the resource across
     subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the DDoS custom policy resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar public_ip_addresses: The list of public IPs associated with the DDoS custom policy
     resource. This list is read-only.
    :vartype public_ip_addresses: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar protocol_custom_settings: The protocol-specific DDoS policy customization parameters.
    :vartype protocol_custom_settings:
     list[~azure.mgmt.network.v2021_02_01.models.ProtocolCustomSettingsFormat]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'public_ip_addresses': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'public_ip_addresses': {'key': 'properties.publicIPAddresses', 'type': '[SubResource]'},
        'protocol_custom_settings': {'key': 'properties.protocolCustomSettings', 'type': '[ProtocolCustomSettingsFormat]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword protocol_custom_settings: The protocol-specific DDoS policy customization parameters.
        :paramtype protocol_custom_settings:
         list[~azure.mgmt.network.v2021_02_01.models.ProtocolCustomSettingsFormat]
        """
        super(DdosCustomPolicy, self).__init__(**kwargs)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None
        self.public_ip_addresses = None
        self.protocol_custom_settings = kwargs.get('protocol_custom_settings', None)


class DdosProtectionPlan(msrest.serialization.Model):
    """A DDoS protection plan in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the DDoS protection plan resource. It
     uniquely identifies the resource, even if the user changes its name or migrate the resource
     across subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the DDoS protection plan resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar virtual_networks: The list of virtual networks associated with the DDoS protection plan
     resource. This list is read-only.
    :vartype virtual_networks: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'virtual_networks': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'virtual_networks': {'key': 'properties.virtualNetworks', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(DdosProtectionPlan, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None
        self.virtual_networks = None


class DdosProtectionPlanListResult(msrest.serialization.Model):
    """A list of DDoS protection plans.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of DDoS protection plans.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.DdosProtectionPlan]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DdosProtectionPlan]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of DDoS protection plans.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.DdosProtectionPlan]
        """
        super(DdosProtectionPlanListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class DdosSettings(msrest.serialization.Model):
    """Contains the DDoS protection settings of the public IP.

    :ivar ddos_custom_policy: The DDoS custom policy associated with the public IP.
    :vartype ddos_custom_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar protection_coverage: The DDoS protection policy customizability of the public IP. Only
     standard coverage will have the ability to be customized. Possible values include: "Basic",
     "Standard".
    :vartype protection_coverage: str or
     ~azure.mgmt.network.v2021_02_01.models.DdosSettingsProtectionCoverage
    :ivar protected_ip: Enables DDoS protection on the public IP.
    :vartype protected_ip: bool
    """

    _attribute_map = {
        'ddos_custom_policy': {'key': 'ddosCustomPolicy', 'type': 'SubResource'},
        'protection_coverage': {'key': 'protectionCoverage', 'type': 'str'},
        'protected_ip': {'key': 'protectedIP', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ddos_custom_policy: The DDoS custom policy associated with the public IP.
        :paramtype ddos_custom_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protection_coverage: The DDoS protection policy customizability of the public IP. Only
         standard coverage will have the ability to be customized. Possible values include: "Basic",
         "Standard".
        :paramtype protection_coverage: str or
         ~azure.mgmt.network.v2021_02_01.models.DdosSettingsProtectionCoverage
        :keyword protected_ip: Enables DDoS protection on the public IP.
        :paramtype protected_ip: bool
        """
        super(DdosSettings, self).__init__(**kwargs)
        self.ddos_custom_policy = kwargs.get('ddos_custom_policy', None)
        self.protection_coverage = kwargs.get('protection_coverage', None)
        self.protected_ip = kwargs.get('protected_ip', None)


class Delegation(SubResource):
    """Details the service to which the subnet is delegated.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a subnet. This name can be used to
     access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar service_name: The name of the service to whom the subnet should be delegated (e.g.
     Microsoft.Sql/servers).
    :vartype service_name: str
    :ivar actions: The actions permitted to the service upon delegation.
    :vartype actions: list[str]
    :ivar provisioning_state: The provisioning state of the service delegation resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'actions': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'service_name': {'key': 'properties.serviceName', 'type': 'str'},
        'actions': {'key': 'properties.actions', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a subnet. This name can be used
         to access the resource.
        :paramtype name: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword service_name: The name of the service to whom the subnet should be delegated (e.g.
         Microsoft.Sql/servers).
        :paramtype service_name: str
        """
        super(Delegation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.service_name = kwargs.get('service_name', None)
        self.actions = None
        self.provisioning_state = None


class DeviceProperties(msrest.serialization.Model):
    """List of properties of the device.

    :ivar device_vendor: Name of the device Vendor.
    :vartype device_vendor: str
    :ivar device_model: Model of the device.
    :vartype device_model: str
    :ivar link_speed_in_mbps: Link speed.
    :vartype link_speed_in_mbps: int
    """

    _attribute_map = {
        'device_vendor': {'key': 'deviceVendor', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'link_speed_in_mbps': {'key': 'linkSpeedInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword device_vendor: Name of the device Vendor.
        :paramtype device_vendor: str
        :keyword device_model: Model of the device.
        :paramtype device_model: str
        :keyword link_speed_in_mbps: Link speed.
        :paramtype link_speed_in_mbps: int
        """
        super(DeviceProperties, self).__init__(**kwargs)
        self.device_vendor = kwargs.get('device_vendor', None)
        self.device_model = kwargs.get('device_model', None)
        self.link_speed_in_mbps = kwargs.get('link_speed_in_mbps', None)


class DhcpOptions(msrest.serialization.Model):
    """DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.

    :ivar dns_servers: The list of DNS servers IP addresses.
    :vartype dns_servers: list[str]
    """

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dns_servers: The list of DNS servers IP addresses.
        :paramtype dns_servers: list[str]
        """
        super(DhcpOptions, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)


class Dimension(msrest.serialization.Model):
    """Dimension of the metric.

    :ivar name: The name of the dimension.
    :vartype name: str
    :ivar display_name: The display name of the dimension.
    :vartype display_name: str
    :ivar internal_name: The internal name of the dimension.
    :vartype internal_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'internal_name': {'key': 'internalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the dimension.
        :paramtype name: str
        :keyword display_name: The display name of the dimension.
        :paramtype display_name: str
        :keyword internal_name: The internal name of the dimension.
        :paramtype internal_name: str
        """
        super(Dimension, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.internal_name = kwargs.get('internal_name', None)


class DnsNameAvailabilityResult(msrest.serialization.Model):
    """Response for the CheckDnsNameAvailability API service call.

    :ivar available: Domain availability (True/False).
    :vartype available: bool
    """

    _attribute_map = {
        'available': {'key': 'available', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword available: Domain availability (True/False).
        :paramtype available: bool
        """
        super(DnsNameAvailabilityResult, self).__init__(**kwargs)
        self.available = kwargs.get('available', None)


class DnsSettings(msrest.serialization.Model):
    """DNS Proxy Settings in Firewall Policy.

    :ivar servers: List of Custom DNS Servers.
    :vartype servers: list[str]
    :ivar enable_proxy: Enable DNS Proxy on Firewalls attached to the Firewall Policy.
    :vartype enable_proxy: bool
    :ivar require_proxy_for_network_rules: FQDNs in Network Rules are supported when set to true.
    :vartype require_proxy_for_network_rules: bool
    """

    _attribute_map = {
        'servers': {'key': 'servers', 'type': '[str]'},
        'enable_proxy': {'key': 'enableProxy', 'type': 'bool'},
        'require_proxy_for_network_rules': {'key': 'requireProxyForNetworkRules', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword servers: List of Custom DNS Servers.
        :paramtype servers: list[str]
        :keyword enable_proxy: Enable DNS Proxy on Firewalls attached to the Firewall Policy.
        :paramtype enable_proxy: bool
        :keyword require_proxy_for_network_rules: FQDNs in Network Rules are supported when set to
         true.
        :paramtype require_proxy_for_network_rules: bool
        """
        super(DnsSettings, self).__init__(**kwargs)
        self.servers = kwargs.get('servers', None)
        self.enable_proxy = kwargs.get('enable_proxy', None)
        self.require_proxy_for_network_rules = kwargs.get('require_proxy_for_network_rules', None)


class DscpConfiguration(Resource):
    """DSCP Configuration in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar markings: List of markings to be used in the configuration.
    :vartype markings: list[int]
    :ivar source_ip_ranges: Source IP ranges.
    :vartype source_ip_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosIpRange]
    :ivar destination_ip_ranges: Destination IP ranges.
    :vartype destination_ip_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosIpRange]
    :ivar source_port_ranges: Sources port ranges.
    :vartype source_port_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosPortRange]
    :ivar destination_port_ranges: Destination port ranges.
    :vartype destination_port_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosPortRange]
    :ivar protocol: RNM supported protocol types. Possible values include: "DoNotUse", "Icmp",
     "Tcp", "Udp", "Gre", "Esp", "Ah", "Vxlan", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ProtocolType
    :ivar qos_collection_id: Qos Collection ID generated by RNM.
    :vartype qos_collection_id: str
    :ivar associated_network_interfaces: Associated Network Interfaces to the DSCP Configuration.
    :vartype associated_network_interfaces:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
    :ivar resource_guid: The resource GUID property of the DSCP Configuration resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the DSCP Configuration resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'qos_collection_id': {'readonly': True},
        'associated_network_interfaces': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'markings': {'key': 'properties.markings', 'type': '[int]'},
        'source_ip_ranges': {'key': 'properties.sourceIpRanges', 'type': '[QosIpRange]'},
        'destination_ip_ranges': {'key': 'properties.destinationIpRanges', 'type': '[QosIpRange]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[QosPortRange]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[QosPortRange]'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'qos_collection_id': {'key': 'properties.qosCollectionId', 'type': 'str'},
        'associated_network_interfaces': {'key': 'properties.associatedNetworkInterfaces', 'type': '[NetworkInterface]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword markings: List of markings to be used in the configuration.
        :paramtype markings: list[int]
        :keyword source_ip_ranges: Source IP ranges.
        :paramtype source_ip_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosIpRange]
        :keyword destination_ip_ranges: Destination IP ranges.
        :paramtype destination_ip_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosIpRange]
        :keyword source_port_ranges: Sources port ranges.
        :paramtype source_port_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosPortRange]
        :keyword destination_port_ranges: Destination port ranges.
        :paramtype destination_port_ranges: list[~azure.mgmt.network.v2021_02_01.models.QosPortRange]
        :keyword protocol: RNM supported protocol types. Possible values include: "DoNotUse", "Icmp",
         "Tcp", "Udp", "Gre", "Esp", "Ah", "Vxlan", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ProtocolType
        """
        super(DscpConfiguration, self).__init__(**kwargs)
        self.etag = None
        self.markings = kwargs.get('markings', None)
        self.source_ip_ranges = kwargs.get('source_ip_ranges', None)
        self.destination_ip_ranges = kwargs.get('destination_ip_ranges', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.protocol = kwargs.get('protocol', None)
        self.qos_collection_id = None
        self.associated_network_interfaces = None
        self.resource_guid = None
        self.provisioning_state = None


class DscpConfigurationListResult(msrest.serialization.Model):
    """Response for the DscpConfigurationList API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of dscp configurations in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.DscpConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DscpConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of dscp configurations in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.DscpConfiguration]
        """
        super(DscpConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EffectiveNetworkSecurityGroup(msrest.serialization.Model):
    """Effective network security group.

    :ivar network_security_group: The ID of network security group that is applied.
    :vartype network_security_group: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar association: Associated resources.
    :vartype association:
     ~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityGroupAssociation
    :ivar effective_security_rules: A collection of effective security rules.
    :vartype effective_security_rules:
     list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityRule]
    :ivar tag_map: Mapping of tags to list of IP Addresses included within the tag.
    :vartype tag_map: str
    """

    _attribute_map = {
        'network_security_group': {'key': 'networkSecurityGroup', 'type': 'SubResource'},
        'association': {'key': 'association', 'type': 'EffectiveNetworkSecurityGroupAssociation'},
        'effective_security_rules': {'key': 'effectiveSecurityRules', 'type': '[EffectiveNetworkSecurityRule]'},
        'tag_map': {'key': 'tagMap', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_security_group: The ID of network security group that is applied.
        :paramtype network_security_group: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword association: Associated resources.
        :paramtype association:
         ~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityGroupAssociation
        :keyword effective_security_rules: A collection of effective security rules.
        :paramtype effective_security_rules:
         list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityRule]
        :keyword tag_map: Mapping of tags to list of IP Addresses included within the tag.
        :paramtype tag_map: str
        """
        super(EffectiveNetworkSecurityGroup, self).__init__(**kwargs)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.association = kwargs.get('association', None)
        self.effective_security_rules = kwargs.get('effective_security_rules', None)
        self.tag_map = kwargs.get('tag_map', None)


class EffectiveNetworkSecurityGroupAssociation(msrest.serialization.Model):
    """The effective network security group association.

    :ivar network_manager: The ID of the Azure network manager if assigned.
    :vartype network_manager: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar subnet: The ID of the subnet if assigned.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar network_interface: The ID of the network interface if assigned.
    :vartype network_interface: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'network_manager': {'key': 'networkManager', 'type': 'SubResource'},
        'subnet': {'key': 'subnet', 'type': 'SubResource'},
        'network_interface': {'key': 'networkInterface', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_manager: The ID of the Azure network manager if assigned.
        :paramtype network_manager: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword subnet: The ID of the subnet if assigned.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword network_interface: The ID of the network interface if assigned.
        :paramtype network_interface: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(EffectiveNetworkSecurityGroupAssociation, self).__init__(**kwargs)
        self.network_manager = kwargs.get('network_manager', None)
        self.subnet = kwargs.get('subnet', None)
        self.network_interface = kwargs.get('network_interface', None)


class EffectiveNetworkSecurityGroupListResult(msrest.serialization.Model):
    """Response for list effective network security groups API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of effective network security groups.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveNetworkSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of effective network security groups.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityGroup]
        """
        super(EffectiveNetworkSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EffectiveNetworkSecurityRule(msrest.serialization.Model):
    """Effective network security rules.

    :ivar name: The name of the security rule specified by the user (if created by the user).
    :vartype name: str
    :ivar protocol: The network protocol this rule applies to. Possible values include: "Tcp",
     "Udp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.EffectiveSecurityRuleProtocol
    :ivar source_port_range: The source port or range.
    :vartype source_port_range: str
    :ivar destination_port_range: The destination port or range.
    :vartype destination_port_range: str
    :ivar source_port_ranges: The source port ranges. Expected values include a single integer
     between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
    :vartype source_port_ranges: list[str]
    :ivar destination_port_ranges: The destination port ranges. Expected values include a single
     integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
    :vartype destination_port_ranges: list[str]
    :ivar source_address_prefix: The source address prefix.
    :vartype source_address_prefix: str
    :ivar destination_address_prefix: The destination address prefix.
    :vartype destination_address_prefix: str
    :ivar source_address_prefixes: The source address prefixes. Expected values include CIDR IP
     ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the
     asterisk (*).
    :vartype source_address_prefixes: list[str]
    :ivar destination_address_prefixes: The destination address prefixes. Expected values include
     CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and
     the asterisk (*).
    :vartype destination_address_prefixes: list[str]
    :ivar expanded_source_address_prefix: The expanded source address prefix.
    :vartype expanded_source_address_prefix: list[str]
    :ivar expanded_destination_address_prefix: Expanded destination address prefix.
    :vartype expanded_destination_address_prefix: list[str]
    :ivar access: Whether network traffic is allowed or denied. Possible values include: "Allow",
     "Deny".
    :vartype access: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
    :ivar priority: The priority of the rule.
    :vartype priority: int
    :ivar direction: The direction of the rule. Possible values include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleDirection
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_port_range': {'key': 'sourcePortRange', 'type': 'str'},
        'destination_port_range': {'key': 'destinationPortRange', 'type': 'str'},
        'source_port_ranges': {'key': 'sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'destinationPortRanges', 'type': '[str]'},
        'source_address_prefix': {'key': 'sourceAddressPrefix', 'type': 'str'},
        'destination_address_prefix': {'key': 'destinationAddressPrefix', 'type': 'str'},
        'source_address_prefixes': {'key': 'sourceAddressPrefixes', 'type': '[str]'},
        'destination_address_prefixes': {'key': 'destinationAddressPrefixes', 'type': '[str]'},
        'expanded_source_address_prefix': {'key': 'expandedSourceAddressPrefix', 'type': '[str]'},
        'expanded_destination_address_prefix': {'key': 'expandedDestinationAddressPrefix', 'type': '[str]'},
        'access': {'key': 'access', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'direction': {'key': 'direction', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the security rule specified by the user (if created by the user).
        :paramtype name: str
        :keyword protocol: The network protocol this rule applies to. Possible values include: "Tcp",
         "Udp", "All".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.EffectiveSecurityRuleProtocol
        :keyword source_port_range: The source port or range.
        :paramtype source_port_range: str
        :keyword destination_port_range: The destination port or range.
        :paramtype destination_port_range: str
        :keyword source_port_ranges: The source port ranges. Expected values include a single integer
         between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        :paramtype source_port_ranges: list[str]
        :keyword destination_port_ranges: The destination port ranges. Expected values include a single
         integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        :paramtype destination_port_ranges: list[str]
        :keyword source_address_prefix: The source address prefix.
        :paramtype source_address_prefix: str
        :keyword destination_address_prefix: The destination address prefix.
        :paramtype destination_address_prefix: str
        :keyword source_address_prefixes: The source address prefixes. Expected values include CIDR IP
         ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the
         asterisk (*).
        :paramtype source_address_prefixes: list[str]
        :keyword destination_address_prefixes: The destination address prefixes. Expected values
         include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System
         Tags, and the asterisk (*).
        :paramtype destination_address_prefixes: list[str]
        :keyword expanded_source_address_prefix: The expanded source address prefix.
        :paramtype expanded_source_address_prefix: list[str]
        :keyword expanded_destination_address_prefix: Expanded destination address prefix.
        :paramtype expanded_destination_address_prefix: list[str]
        :keyword access: Whether network traffic is allowed or denied. Possible values include:
         "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
        :keyword priority: The priority of the rule.
        :paramtype priority: int
        :keyword direction: The direction of the rule. Possible values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleDirection
        """
        super(EffectiveNetworkSecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_port_range = kwargs.get('source_port_range', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.destination_address_prefix = kwargs.get('destination_address_prefix', None)
        self.source_address_prefixes = kwargs.get('source_address_prefixes', None)
        self.destination_address_prefixes = kwargs.get('destination_address_prefixes', None)
        self.expanded_source_address_prefix = kwargs.get('expanded_source_address_prefix', None)
        self.expanded_destination_address_prefix = kwargs.get('expanded_destination_address_prefix', None)
        self.access = kwargs.get('access', None)
        self.priority = kwargs.get('priority', None)
        self.direction = kwargs.get('direction', None)


class EffectiveRoute(msrest.serialization.Model):
    """Effective Route.

    :ivar name: The name of the user defined route. This is optional.
    :vartype name: str
    :ivar disable_bgp_route_propagation: If true, on-premises routes are not propagated to the
     network interfaces in the subnet.
    :vartype disable_bgp_route_propagation: bool
    :ivar source: Who created the route. Possible values include: "Unknown", "User",
     "VirtualNetworkGateway", "Default".
    :vartype source: str or ~azure.mgmt.network.v2021_02_01.models.EffectiveRouteSource
    :ivar state: The value of effective route. Possible values include: "Active", "Invalid".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.EffectiveRouteState
    :ivar address_prefix: The address prefixes of the effective routes in CIDR notation.
    :vartype address_prefix: list[str]
    :ivar next_hop_ip_address: The IP address of the next hop of the effective route.
    :vartype next_hop_ip_address: list[str]
    :ivar next_hop_type: The type of Azure hop the packet should be sent to. Possible values
     include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.RouteNextHopType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'disable_bgp_route_propagation': {'key': 'disableBgpRoutePropagation', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'address_prefix': {'key': 'addressPrefix', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the user defined route. This is optional.
        :paramtype name: str
        :keyword disable_bgp_route_propagation: If true, on-premises routes are not propagated to the
         network interfaces in the subnet.
        :paramtype disable_bgp_route_propagation: bool
        :keyword source: Who created the route. Possible values include: "Unknown", "User",
         "VirtualNetworkGateway", "Default".
        :paramtype source: str or ~azure.mgmt.network.v2021_02_01.models.EffectiveRouteSource
        :keyword state: The value of effective route. Possible values include: "Active", "Invalid".
        :paramtype state: str or ~azure.mgmt.network.v2021_02_01.models.EffectiveRouteState
        :keyword address_prefix: The address prefixes of the effective routes in CIDR notation.
        :paramtype address_prefix: list[str]
        :keyword next_hop_ip_address: The IP address of the next hop of the effective route.
        :paramtype next_hop_ip_address: list[str]
        :keyword next_hop_type: The type of Azure hop the packet should be sent to. Possible values
         include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.RouteNextHopType
        """
        super(EffectiveRoute, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.disable_bgp_route_propagation = kwargs.get('disable_bgp_route_propagation', None)
        self.source = kwargs.get('source', None)
        self.state = kwargs.get('state', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)


class EffectiveRouteListResult(msrest.serialization.Model):
    """Response for list effective route API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of effective routes.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.EffectiveRoute]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveRoute]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of effective routes.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.EffectiveRoute]
        """
        super(EffectiveRouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EffectiveRoutesParameters(msrest.serialization.Model):
    """The parameters specifying the resource whose effective routes are being requested.

    :ivar resource_id: The resource whose effective routes are being requested.
    :vartype resource_id: str
    :ivar virtual_wan_resource_type: The type of the specified resource like RouteTable,
     ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and P2SConnection.
    :vartype virtual_wan_resource_type: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'virtual_wan_resource_type': {'key': 'virtualWanResourceType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: The resource whose effective routes are being requested.
        :paramtype resource_id: str
        :keyword virtual_wan_resource_type: The type of the specified resource like RouteTable,
         ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and P2SConnection.
        :paramtype virtual_wan_resource_type: str
        """
        super(EffectiveRoutesParameters, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.virtual_wan_resource_type = kwargs.get('virtual_wan_resource_type', None)


class EndpointServiceResult(SubResource):
    """Endpoint service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the endpoint service.
    :vartype name: str
    :ivar type: Type of the endpoint service.
    :vartype type: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(EndpointServiceResult, self).__init__(**kwargs)
        self.name = None
        self.type = None


class EndpointServicesListResult(msrest.serialization.Model):
    """Response for the ListAvailableEndpointServices API service call.

    :ivar value: List of available endpoint services in a region.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.EndpointServiceResult]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EndpointServiceResult]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of available endpoint services in a region.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.EndpointServiceResult]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(EndpointServicesListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class Error(msrest.serialization.Model):
    """Common error representation.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar target: Error target.
    :vartype target: str
    :ivar details: Error details.
    :vartype details: list[~azure.mgmt.network.v2021_02_01.models.ErrorDetails]
    :ivar inner_error: Inner error message.
    :vartype inner_error: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Error code.
        :paramtype code: str
        :keyword message: Error message.
        :paramtype message: str
        :keyword target: Error target.
        :paramtype target: str
        :keyword details: Error details.
        :paramtype details: list[~azure.mgmt.network.v2021_02_01.models.ErrorDetails]
        :keyword inner_error: Inner error message.
        :paramtype inner_error: str
        """
        super(Error, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.inner_error = kwargs.get('inner_error', None)


class ErrorDetails(msrest.serialization.Model):
    """Common error details representation.

    :ivar code: Error code.
    :vartype code: str
    :ivar target: Error target.
    :vartype target: str
    :ivar message: Error message.
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Error code.
        :paramtype code: str
        :keyword target: Error target.
        :paramtype target: str
        :keyword message: Error message.
        :paramtype message: str
        """
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.target = kwargs.get('target', None)
        self.message = kwargs.get('message', None)


class ErrorResponse(msrest.serialization.Model):
    """The error object.

    :ivar error: The error details object.
    :vartype error: ~azure.mgmt.network.v2021_02_01.models.ErrorDetails
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: The error details object.
        :paramtype error: ~azure.mgmt.network.v2021_02_01.models.ErrorDetails
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class EvaluatedNetworkSecurityGroup(msrest.serialization.Model):
    """Results of network security group evaluation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar network_security_group_id: Network security group ID.
    :vartype network_security_group_id: str
    :ivar applied_to: Resource ID of nic or subnet to which network security group is applied.
    :vartype applied_to: str
    :ivar matched_rule: Matched network security rule.
    :vartype matched_rule: ~azure.mgmt.network.v2021_02_01.models.MatchedRule
    :ivar rules_evaluation_result: List of network security rules evaluation results.
    :vartype rules_evaluation_result:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkSecurityRulesEvaluationResult]
    """

    _validation = {
        'rules_evaluation_result': {'readonly': True},
    }

    _attribute_map = {
        'network_security_group_id': {'key': 'networkSecurityGroupId', 'type': 'str'},
        'applied_to': {'key': 'appliedTo', 'type': 'str'},
        'matched_rule': {'key': 'matchedRule', 'type': 'MatchedRule'},
        'rules_evaluation_result': {'key': 'rulesEvaluationResult', 'type': '[NetworkSecurityRulesEvaluationResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_security_group_id: Network security group ID.
        :paramtype network_security_group_id: str
        :keyword applied_to: Resource ID of nic or subnet to which network security group is applied.
        :paramtype applied_to: str
        :keyword matched_rule: Matched network security rule.
        :paramtype matched_rule: ~azure.mgmt.network.v2021_02_01.models.MatchedRule
        """
        super(EvaluatedNetworkSecurityGroup, self).__init__(**kwargs)
        self.network_security_group_id = kwargs.get('network_security_group_id', None)
        self.applied_to = kwargs.get('applied_to', None)
        self.matched_rule = kwargs.get('matched_rule', None)
        self.rules_evaluation_result = None


class ExpressRouteCircuit(Resource):
    """ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar allow_classic_operations: Allow classic operations.
    :vartype allow_classic_operations: bool
    :ivar circuit_provisioning_state: The CircuitProvisioningState state of the resource.
    :vartype circuit_provisioning_state: str
    :ivar service_provider_provisioning_state: The ServiceProviderProvisioningState state of the
     resource. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
     "Deprovisioning".
    :vartype service_provider_provisioning_state: str or
     ~azure.mgmt.network.v2021_02_01.models.ServiceProviderProvisioningState
    :ivar authorizations: The list of authorizations.
    :vartype authorizations:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitAuthorization]
    :ivar peerings: The list of peerings.
    :vartype peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar service_key: The ServiceKey.
    :vartype service_key: str
    :ivar service_provider_notes: The ServiceProviderNotes.
    :vartype service_provider_notes: str
    :ivar service_provider_properties: The ServiceProviderProperties.
    :vartype service_provider_properties:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitServiceProviderProperties
    :ivar express_route_port: The reference to the ExpressRoutePort resource when the circuit is
     provisioned on an ExpressRoutePort resource.
    :vartype express_route_port: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar bandwidth_in_gbps: The bandwidth of the circuit when the circuit is provisioned on an
     ExpressRoutePort resource.
    :vartype bandwidth_in_gbps: float
    :ivar stag: The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
    :vartype stag: int
    :ivar provisioning_state: The provisioning state of the express route circuit resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    :ivar global_reach_enabled: Flag denoting global reach status.
    :vartype global_reach_enabled: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'stag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'ExpressRouteCircuitSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'allow_classic_operations': {'key': 'properties.allowClassicOperations', 'type': 'bool'},
        'circuit_provisioning_state': {'key': 'properties.circuitProvisioningState', 'type': 'str'},
        'service_provider_provisioning_state': {'key': 'properties.serviceProviderProvisioningState', 'type': 'str'},
        'authorizations': {'key': 'properties.authorizations', 'type': '[ExpressRouteCircuitAuthorization]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'service_key': {'key': 'properties.serviceKey', 'type': 'str'},
        'service_provider_notes': {'key': 'properties.serviceProviderNotes', 'type': 'str'},
        'service_provider_properties': {'key': 'properties.serviceProviderProperties', 'type': 'ExpressRouteCircuitServiceProviderProperties'},
        'express_route_port': {'key': 'properties.expressRoutePort', 'type': 'SubResource'},
        'bandwidth_in_gbps': {'key': 'properties.bandwidthInGbps', 'type': 'float'},
        'stag': {'key': 'properties.stag', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
        'global_reach_enabled': {'key': 'properties.globalReachEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSku
        :keyword allow_classic_operations: Allow classic operations.
        :paramtype allow_classic_operations: bool
        :keyword circuit_provisioning_state: The CircuitProvisioningState state of the resource.
        :paramtype circuit_provisioning_state: str
        :keyword service_provider_provisioning_state: The ServiceProviderProvisioningState state of the
         resource. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
         "Deprovisioning".
        :paramtype service_provider_provisioning_state: str or
         ~azure.mgmt.network.v2021_02_01.models.ServiceProviderProvisioningState
        :keyword authorizations: The list of authorizations.
        :paramtype authorizations:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitAuthorization]
        :keyword peerings: The list of peerings.
        :paramtype peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
        :keyword service_key: The ServiceKey.
        :paramtype service_key: str
        :keyword service_provider_notes: The ServiceProviderNotes.
        :paramtype service_provider_notes: str
        :keyword service_provider_properties: The ServiceProviderProperties.
        :paramtype service_provider_properties:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitServiceProviderProperties
        :keyword express_route_port: The reference to the ExpressRoutePort resource when the circuit is
         provisioned on an ExpressRoutePort resource.
        :paramtype express_route_port: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword bandwidth_in_gbps: The bandwidth of the circuit when the circuit is provisioned on an
         ExpressRoutePort resource.
        :paramtype bandwidth_in_gbps: float
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        :keyword global_reach_enabled: Flag denoting global reach status.
        :paramtype global_reach_enabled: bool
        """
        super(ExpressRouteCircuit, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.allow_classic_operations = kwargs.get('allow_classic_operations', None)
        self.circuit_provisioning_state = kwargs.get('circuit_provisioning_state', None)
        self.service_provider_provisioning_state = kwargs.get('service_provider_provisioning_state', None)
        self.authorizations = kwargs.get('authorizations', None)
        self.peerings = kwargs.get('peerings', None)
        self.service_key = kwargs.get('service_key', None)
        self.service_provider_notes = kwargs.get('service_provider_notes', None)
        self.service_provider_properties = kwargs.get('service_provider_properties', None)
        self.express_route_port = kwargs.get('express_route_port', None)
        self.bandwidth_in_gbps = kwargs.get('bandwidth_in_gbps', None)
        self.stag = None
        self.provisioning_state = None
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)
        self.global_reach_enabled = kwargs.get('global_reach_enabled', None)


class ExpressRouteCircuitArpTable(msrest.serialization.Model):
    """The ARP table associated with the ExpressRouteCircuit.

    :ivar age: Entry age in minutes.
    :vartype age: int
    :ivar interface: Interface address.
    :vartype interface: str
    :ivar ip_address: The IP address.
    :vartype ip_address: str
    :ivar mac_address: The MAC address.
    :vartype mac_address: str
    """

    _attribute_map = {
        'age': {'key': 'age', 'type': 'int'},
        'interface': {'key': 'interface', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword age: Entry age in minutes.
        :paramtype age: int
        :keyword interface: Interface address.
        :paramtype interface: str
        :keyword ip_address: The IP address.
        :paramtype ip_address: str
        :keyword mac_address: The MAC address.
        :paramtype mac_address: str
        """
        super(ExpressRouteCircuitArpTable, self).__init__(**kwargs)
        self.age = kwargs.get('age', None)
        self.interface = kwargs.get('interface', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.mac_address = kwargs.get('mac_address', None)


class ExpressRouteCircuitAuthorization(SubResource):
    """Authorization in an ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar authorization_key: The authorization key.
    :vartype authorization_key: str
    :ivar authorization_use_status: The authorization use status. Possible values include:
     "Available", "InUse".
    :vartype authorization_use_status: str or
     ~azure.mgmt.network.v2021_02_01.models.AuthorizationUseStatus
    :ivar provisioning_state: The provisioning state of the authorization resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'authorization_use_status': {'key': 'properties.authorizationUseStatus', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword authorization_key: The authorization key.
        :paramtype authorization_key: str
        :keyword authorization_use_status: The authorization use status. Possible values include:
         "Available", "InUse".
        :paramtype authorization_use_status: str or
         ~azure.mgmt.network.v2021_02_01.models.AuthorizationUseStatus
        """
        super(ExpressRouteCircuitAuthorization, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.authorization_key = kwargs.get('authorization_key', None)
        self.authorization_use_status = kwargs.get('authorization_use_status', None)
        self.provisioning_state = None


class ExpressRouteCircuitConnection(SubResource):
    """Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the circuit initiating connection.
    :vartype express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the peered circuit.
    :vartype peer_express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
    :vartype address_prefix: str
    :ivar authorization_key: The authorization key.
    :vartype authorization_key: str
    :ivar ipv6_circuit_connection_config: IPv6 Address PrefixProperties of the express route
     circuit connection.
    :vartype ipv6_circuit_connection_config:
     ~azure.mgmt.network.v2021_02_01.models.Ipv6CircuitConnectionConfig
    :ivar circuit_connection_status: Express Route Circuit connection state. Possible values
     include: "Connected", "Connecting", "Disconnected".
    :vartype circuit_connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.CircuitConnectionStatus
    :ivar provisioning_state: The provisioning state of the express route circuit connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'circuit_connection_status': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'express_route_circuit_peering': {'key': 'properties.expressRouteCircuitPeering', 'type': 'SubResource'},
        'peer_express_route_circuit_peering': {'key': 'properties.peerExpressRouteCircuitPeering', 'type': 'SubResource'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'ipv6_circuit_connection_config': {'key': 'properties.ipv6CircuitConnectionConfig', 'type': 'Ipv6CircuitConnectionConfig'},
        'circuit_connection_status': {'key': 'properties.circuitConnectionStatus', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the circuit initiating connection.
        :paramtype express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the peered circuit.
        :paramtype peer_express_route_circuit_peering:
         ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
        :paramtype address_prefix: str
        :keyword authorization_key: The authorization key.
        :paramtype authorization_key: str
        :keyword ipv6_circuit_connection_config: IPv6 Address PrefixProperties of the express route
         circuit connection.
        :paramtype ipv6_circuit_connection_config:
         ~azure.mgmt.network.v2021_02_01.models.Ipv6CircuitConnectionConfig
        """
        super(ExpressRouteCircuitConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.express_route_circuit_peering = kwargs.get('express_route_circuit_peering', None)
        self.peer_express_route_circuit_peering = kwargs.get('peer_express_route_circuit_peering', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.ipv6_circuit_connection_config = kwargs.get('ipv6_circuit_connection_config', None)
        self.circuit_connection_status = None
        self.provisioning_state = None


class ExpressRouteCircuitConnectionListResult(msrest.serialization.Model):
    """Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.

    :ivar value: The global reach connection associated with Private Peering in an ExpressRoute
     Circuit.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The global reach connection associated with Private Peering in an ExpressRoute
         Circuit.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitConnection]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitListResult(msrest.serialization.Model):
    """Response for ListExpressRouteCircuit API service call.

    :ivar value: A list of ExpressRouteCircuits in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuit]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuit]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteCircuits in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuit]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitPeering(SubResource):
    """Peering in an ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar peering_type: The peering type. Possible values include: "AzurePublicPeering",
     "AzurePrivatePeering", "MicrosoftPeering".
    :vartype peering_type: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringType
    :ivar state: The peering state. Possible values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringState
    :ivar azure_asn: The Azure ASN.
    :vartype azure_asn: int
    :ivar peer_asn: The peer ASN.
    :vartype peer_asn: long
    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar primary_azure_port: The primary port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The secondary port.
    :vartype secondary_azure_port: str
    :ivar shared_key: The shared key.
    :vartype shared_key: str
    :ivar vlan_id: The VLAN ID.
    :vartype vlan_id: int
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
    :ivar stats: The peering stats of express route circuit.
    :vartype stats: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitStats
    :ivar provisioning_state: The provisioning state of the express route circuit peering resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    :ivar last_modified_by: Who was the last to modify the peering.
    :vartype last_modified_by: str
    :ivar route_filter: The reference to the RouteFilter resource.
    :vartype route_filter: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar ipv6_peering_config: The IPv6 peering configuration.
    :vartype ipv6_peering_config:
     ~azure.mgmt.network.v2021_02_01.models.Ipv6ExpressRouteCircuitPeeringConfig
    :ivar express_route_connection: The ExpressRoute connection.
    :vartype express_route_connection:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteConnectionId
    :ivar connections: The list of circuit connections associated with Azure Private Peering for
     this circuit.
    :vartype connections:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitConnection]
    :ivar peered_connections: The list of peered circuit connections associated with Azure Private
     Peering for this circuit.
    :vartype peered_connections:
     list[~azure.mgmt.network.v2021_02_01.models.PeerExpressRouteCircuitConnection]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 1},
        'provisioning_state': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'peered_connections': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'peering_type': {'key': 'properties.peeringType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'azure_asn': {'key': 'properties.azureASN', 'type': 'int'},
        'peer_asn': {'key': 'properties.peerASN', 'type': 'long'},
        'primary_peer_address_prefix': {'key': 'properties.primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'properties.secondaryPeerAddressPrefix', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'vlan_id': {'key': 'properties.vlanId', 'type': 'int'},
        'microsoft_peering_config': {'key': 'properties.microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'stats': {'key': 'properties.stats', 'type': 'ExpressRouteCircuitStats'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'route_filter': {'key': 'properties.routeFilter', 'type': 'SubResource'},
        'ipv6_peering_config': {'key': 'properties.ipv6PeeringConfig', 'type': 'Ipv6ExpressRouteCircuitPeeringConfig'},
        'express_route_connection': {'key': 'properties.expressRouteConnection', 'type': 'ExpressRouteConnectionId'},
        'connections': {'key': 'properties.connections', 'type': '[ExpressRouteCircuitConnection]'},
        'peered_connections': {'key': 'properties.peeredConnections', 'type': '[PeerExpressRouteCircuitConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword peering_type: The peering type. Possible values include: "AzurePublicPeering",
         "AzurePrivatePeering", "MicrosoftPeering".
        :paramtype peering_type: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringType
        :keyword state: The peering state. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringState
        :keyword azure_asn: The Azure ASN.
        :paramtype azure_asn: int
        :keyword peer_asn: The peer ASN.
        :paramtype peer_asn: long
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword primary_azure_port: The primary port.
        :paramtype primary_azure_port: str
        :keyword secondary_azure_port: The secondary port.
        :paramtype secondary_azure_port: str
        :keyword shared_key: The shared key.
        :paramtype shared_key: str
        :keyword vlan_id: The VLAN ID.
        :paramtype vlan_id: int
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
        :keyword stats: The peering stats of express route circuit.
        :paramtype stats: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitStats
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        :keyword route_filter: The reference to the RouteFilter resource.
        :paramtype route_filter: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword ipv6_peering_config: The IPv6 peering configuration.
        :paramtype ipv6_peering_config:
         ~azure.mgmt.network.v2021_02_01.models.Ipv6ExpressRouteCircuitPeeringConfig
        :keyword express_route_connection: The ExpressRoute connection.
        :paramtype express_route_connection:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteConnectionId
        :keyword connections: The list of circuit connections associated with Azure Private Peering for
         this circuit.
        :paramtype connections:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitConnection]
        """
        super(ExpressRouteCircuitPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.peering_type = kwargs.get('peering_type', None)
        self.state = kwargs.get('state', None)
        self.azure_asn = kwargs.get('azure_asn', None)
        self.peer_asn = kwargs.get('peer_asn', None)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.primary_azure_port = kwargs.get('primary_azure_port', None)
        self.secondary_azure_port = kwargs.get('secondary_azure_port', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.vlan_id = kwargs.get('vlan_id', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.stats = kwargs.get('stats', None)
        self.provisioning_state = None
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)
        self.last_modified_by = None
        self.route_filter = kwargs.get('route_filter', None)
        self.ipv6_peering_config = kwargs.get('ipv6_peering_config', None)
        self.express_route_connection = kwargs.get('express_route_connection', None)
        self.connections = kwargs.get('connections', None)
        self.peered_connections = None


class ExpressRouteCircuitPeeringConfig(msrest.serialization.Model):
    """Specifies the peering configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar advertised_public_prefixes: The reference to AdvertisedPublicPrefixes.
    :vartype advertised_public_prefixes: list[str]
    :ivar advertised_communities: The communities of bgp peering. Specified for microsoft peering.
    :vartype advertised_communities: list[str]
    :ivar advertised_public_prefixes_state: The advertised public prefix state of the Peering
     resource. Possible values include: "NotConfigured", "Configuring", "Configured",
     "ValidationNeeded".
    :vartype advertised_public_prefixes_state: str or
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState
    :ivar legacy_mode: The legacy mode of the peering.
    :vartype legacy_mode: int
    :ivar customer_asn: The CustomerASN of the peering.
    :vartype customer_asn: int
    :ivar routing_registry_name: The RoutingRegistryName of the configuration.
    :vartype routing_registry_name: str
    """

    _validation = {
        'advertised_public_prefixes_state': {'readonly': True},
    }

    _attribute_map = {
        'advertised_public_prefixes': {'key': 'advertisedPublicPrefixes', 'type': '[str]'},
        'advertised_communities': {'key': 'advertisedCommunities', 'type': '[str]'},
        'advertised_public_prefixes_state': {'key': 'advertisedPublicPrefixesState', 'type': 'str'},
        'legacy_mode': {'key': 'legacyMode', 'type': 'int'},
        'customer_asn': {'key': 'customerASN', 'type': 'int'},
        'routing_registry_name': {'key': 'routingRegistryName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword advertised_public_prefixes: The reference to AdvertisedPublicPrefixes.
        :paramtype advertised_public_prefixes: list[str]
        :keyword advertised_communities: The communities of bgp peering. Specified for microsoft
         peering.
        :paramtype advertised_communities: list[str]
        :keyword legacy_mode: The legacy mode of the peering.
        :paramtype legacy_mode: int
        :keyword customer_asn: The CustomerASN of the peering.
        :paramtype customer_asn: int
        :keyword routing_registry_name: The RoutingRegistryName of the configuration.
        :paramtype routing_registry_name: str
        """
        super(ExpressRouteCircuitPeeringConfig, self).__init__(**kwargs)
        self.advertised_public_prefixes = kwargs.get('advertised_public_prefixes', None)
        self.advertised_communities = kwargs.get('advertised_communities', None)
        self.advertised_public_prefixes_state = None
        self.legacy_mode = kwargs.get('legacy_mode', None)
        self.customer_asn = kwargs.get('customer_asn', None)
        self.routing_registry_name = kwargs.get('routing_registry_name', None)


class ExpressRouteCircuitPeeringId(msrest.serialization.Model):
    """ExpressRoute circuit peering identifier.

    :ivar id: The ID of the ExpressRoute circuit peering.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The ID of the ExpressRoute circuit peering.
        :paramtype id: str
        """
        super(ExpressRouteCircuitPeeringId, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ExpressRouteCircuitPeeringListResult(msrest.serialization.Model):
    """Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.

    :ivar value: The peerings in an express route circuit.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in an express route circuit.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitPeeringListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitReference(msrest.serialization.Model):
    """Reference to an express route circuit.

    :ivar id: Corresponding Express Route Circuit Id.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Corresponding Express Route Circuit Id.
        :paramtype id: str
        """
        super(ExpressRouteCircuitReference, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ExpressRouteCircuitRoutesTable(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar network: IP address of a network entity.
    :vartype network: str
    :ivar next_hop: NextHop address.
    :vartype next_hop: str
    :ivar loc_prf: Local preference value as set with the set local-preference route-map
     configuration command.
    :vartype loc_prf: str
    :ivar weight: Route Weight.
    :vartype weight: int
    :ivar path: Autonomous system paths to the destination network.
    :vartype path: str
    """

    _attribute_map = {
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'loc_prf': {'key': 'locPrf', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network: IP address of a network entity.
        :paramtype network: str
        :keyword next_hop: NextHop address.
        :paramtype next_hop: str
        :keyword loc_prf: Local preference value as set with the set local-preference route-map
         configuration command.
        :paramtype loc_prf: str
        :keyword weight: Route Weight.
        :paramtype weight: int
        :keyword path: Autonomous system paths to the destination network.
        :paramtype path: str
        """
        super(ExpressRouteCircuitRoutesTable, self).__init__(**kwargs)
        self.network = kwargs.get('network', None)
        self.next_hop = kwargs.get('next_hop', None)
        self.loc_prf = kwargs.get('loc_prf', None)
        self.weight = kwargs.get('weight', None)
        self.path = kwargs.get('path', None)


class ExpressRouteCircuitRoutesTableSummary(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar neighbor: IP address of the neighbor.
    :vartype neighbor: str
    :ivar v: BGP version number spoken to the neighbor.
    :vartype v: int
    :ivar as_property: Autonomous system number.
    :vartype as_property: int
    :ivar up_down: The length of time that the BGP session has been in the Established state, or
     the current status if not in the Established state.
    :vartype up_down: str
    :ivar state_pfx_rcd: Current state of the BGP session, and the number of prefixes that have
     been received from a neighbor or peer group.
    :vartype state_pfx_rcd: str
    """

    _attribute_map = {
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'v': {'key': 'v', 'type': 'int'},
        'as_property': {'key': 'as', 'type': 'int'},
        'up_down': {'key': 'upDown', 'type': 'str'},
        'state_pfx_rcd': {'key': 'statePfxRcd', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword neighbor: IP address of the neighbor.
        :paramtype neighbor: str
        :keyword v: BGP version number spoken to the neighbor.
        :paramtype v: int
        :keyword as_property: Autonomous system number.
        :paramtype as_property: int
        :keyword up_down: The length of time that the BGP session has been in the Established state, or
         the current status if not in the Established state.
        :paramtype up_down: str
        :keyword state_pfx_rcd: Current state of the BGP session, and the number of prefixes that have
         been received from a neighbor or peer group.
        :paramtype state_pfx_rcd: str
        """
        super(ExpressRouteCircuitRoutesTableSummary, self).__init__(**kwargs)
        self.neighbor = kwargs.get('neighbor', None)
        self.v = kwargs.get('v', None)
        self.as_property = kwargs.get('as_property', None)
        self.up_down = kwargs.get('up_down', None)
        self.state_pfx_rcd = kwargs.get('state_pfx_rcd', None)


class ExpressRouteCircuitsArpTableListResult(msrest.serialization.Model):
    """Response for ListArpTable associated with the Express Route Circuits API.

    :ivar value: A list of the ARP tables.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitArpTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitArpTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of the ARP tables.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitArpTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsArpTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitServiceProviderProperties(msrest.serialization.Model):
    """Contains ServiceProviderProperties in an ExpressRouteCircuit.

    :ivar service_provider_name: The serviceProviderName.
    :vartype service_provider_name: str
    :ivar peering_location: The peering location.
    :vartype peering_location: str
    :ivar bandwidth_in_mbps: The BandwidthInMbps.
    :vartype bandwidth_in_mbps: int
    """

    _attribute_map = {
        'service_provider_name': {'key': 'serviceProviderName', 'type': 'str'},
        'peering_location': {'key': 'peeringLocation', 'type': 'str'},
        'bandwidth_in_mbps': {'key': 'bandwidthInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_provider_name: The serviceProviderName.
        :paramtype service_provider_name: str
        :keyword peering_location: The peering location.
        :paramtype peering_location: str
        :keyword bandwidth_in_mbps: The BandwidthInMbps.
        :paramtype bandwidth_in_mbps: int
        """
        super(ExpressRouteCircuitServiceProviderProperties, self).__init__(**kwargs)
        self.service_provider_name = kwargs.get('service_provider_name', None)
        self.peering_location = kwargs.get('peering_location', None)
        self.bandwidth_in_mbps = kwargs.get('bandwidth_in_mbps', None)


class ExpressRouteCircuitSku(msrest.serialization.Model):
    """Contains SKU in an ExpressRouteCircuit.

    :ivar name: The name of the SKU.
    :vartype name: str
    :ivar tier: The tier of the SKU. Possible values include: "Standard", "Premium", "Basic",
     "Local".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSkuTier
    :ivar family: The family of the SKU. Possible values include: "UnlimitedData", "MeteredData".
    :vartype family: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSkuFamily
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the SKU.
        :paramtype name: str
        :keyword tier: The tier of the SKU. Possible values include: "Standard", "Premium", "Basic",
         "Local".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSkuTier
        :keyword family: The family of the SKU. Possible values include: "UnlimitedData",
         "MeteredData".
        :paramtype family: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitSkuFamily
        """
        super(ExpressRouteCircuitSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.family = kwargs.get('family', None)


class ExpressRouteCircuitsRoutesTableListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Circuits API.

    :ivar value: The list of routes table.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitRoutesTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitRoutesTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of routes table.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitRoutesTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsRoutesTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitsRoutesTableSummaryListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Circuits API.

    :ivar value: A list of the routes table.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitRoutesTableSummary]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitRoutesTableSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of the routes table.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitRoutesTableSummary]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsRoutesTableSummaryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitStats(msrest.serialization.Model):
    """Contains stats associated with the peering.

    :ivar primarybytes_in: The Primary BytesIn of the peering.
    :vartype primarybytes_in: long
    :ivar primarybytes_out: The primary BytesOut of the peering.
    :vartype primarybytes_out: long
    :ivar secondarybytes_in: The secondary BytesIn of the peering.
    :vartype secondarybytes_in: long
    :ivar secondarybytes_out: The secondary BytesOut of the peering.
    :vartype secondarybytes_out: long
    """

    _attribute_map = {
        'primarybytes_in': {'key': 'primarybytesIn', 'type': 'long'},
        'primarybytes_out': {'key': 'primarybytesOut', 'type': 'long'},
        'secondarybytes_in': {'key': 'secondarybytesIn', 'type': 'long'},
        'secondarybytes_out': {'key': 'secondarybytesOut', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword primarybytes_in: The Primary BytesIn of the peering.
        :paramtype primarybytes_in: long
        :keyword primarybytes_out: The primary BytesOut of the peering.
        :paramtype primarybytes_out: long
        :keyword secondarybytes_in: The secondary BytesIn of the peering.
        :paramtype secondarybytes_in: long
        :keyword secondarybytes_out: The secondary BytesOut of the peering.
        :paramtype secondarybytes_out: long
        """
        super(ExpressRouteCircuitStats, self).__init__(**kwargs)
        self.primarybytes_in = kwargs.get('primarybytes_in', None)
        self.primarybytes_out = kwargs.get('primarybytes_out', None)
        self.secondarybytes_in = kwargs.get('secondarybytes_in', None)
        self.secondarybytes_out = kwargs.get('secondarybytes_out', None)


class ExpressRouteConnection(SubResource):
    """ExpressRouteConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Required. The name of the resource.
    :vartype name: str
    :ivar provisioning_state: The provisioning state of the express route connection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar express_route_circuit_peering: The ExpressRoute circuit peering.
    :vartype express_route_circuit_peering:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringId
    :ivar authorization_key: Authorization key to establish the connection.
    :vartype authorization_key: str
    :ivar routing_weight: The routing weight associated to the connection.
    :vartype routing_weight: int
    :ivar enable_internet_security: Enable internet security.
    :vartype enable_internet_security: bool
    :ivar express_route_gateway_bypass: Enable FastPath to vWan Firewall hub.
    :vartype express_route_gateway_bypass: bool
    :ivar routing_configuration: The Routing Configuration indicating the associated and propagated
     route tables on this connection.
    :vartype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
    """

    _validation = {
        'name': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'express_route_circuit_peering': {'key': 'properties.expressRouteCircuitPeering', 'type': 'ExpressRouteCircuitPeeringId'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'express_route_gateway_bypass': {'key': 'properties.expressRouteGatewayBypass', 'type': 'bool'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Required. The name of the resource.
        :paramtype name: str
        :keyword express_route_circuit_peering: The ExpressRoute circuit peering.
        :paramtype express_route_circuit_peering:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringId
        :keyword authorization_key: Authorization key to establish the connection.
        :paramtype authorization_key: str
        :keyword routing_weight: The routing weight associated to the connection.
        :paramtype routing_weight: int
        :keyword enable_internet_security: Enable internet security.
        :paramtype enable_internet_security: bool
        :keyword express_route_gateway_bypass: Enable FastPath to vWan Firewall hub.
        :paramtype express_route_gateway_bypass: bool
        :keyword routing_configuration: The Routing Configuration indicating the associated and
         propagated route tables on this connection.
        :paramtype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
        """
        super(ExpressRouteConnection, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.provisioning_state = None
        self.express_route_circuit_peering = kwargs.get('express_route_circuit_peering', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.express_route_gateway_bypass = kwargs.get('express_route_gateway_bypass', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)


class ExpressRouteConnectionId(msrest.serialization.Model):
    """The ID of the ExpressRouteConnection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ID of the ExpressRouteConnection.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ExpressRouteConnectionId, self).__init__(**kwargs)
        self.id = None


class ExpressRouteConnectionList(msrest.serialization.Model):
    """ExpressRouteConnection list.

    :ivar value: The list of ExpressRoute connections.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteConnection]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of ExpressRoute connections.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteConnection]
        """
        super(ExpressRouteConnectionList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ExpressRouteCrossConnection(Resource):
    """ExpressRouteCrossConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar primary_azure_port: The name of the primary port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The name of the secondary port.
    :vartype secondary_azure_port: str
    :ivar s_tag: The identifier of the circuit traffic.
    :vartype s_tag: int
    :ivar peering_location: The peering location of the ExpressRoute circuit.
    :vartype peering_location: str
    :ivar bandwidth_in_mbps: The circuit bandwidth In Mbps.
    :vartype bandwidth_in_mbps: int
    :ivar express_route_circuit: The ExpressRouteCircuit.
    :vartype express_route_circuit:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitReference
    :ivar service_provider_provisioning_state: The provisioning state of the circuit in the
     connectivity provider system. Possible values include: "NotProvisioned", "Provisioning",
     "Provisioned", "Deprovisioning".
    :vartype service_provider_provisioning_state: str or
     ~azure.mgmt.network.v2021_02_01.models.ServiceProviderProvisioningState
    :ivar service_provider_notes: Additional read only notes set by the connectivity provider.
    :vartype service_provider_notes: str
    :ivar provisioning_state: The provisioning state of the express route cross connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar peerings: The list of peerings.
    :vartype peerings:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionPeering]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'primary_azure_port': {'readonly': True},
        'secondary_azure_port': {'readonly': True},
        's_tag': {'readonly': True},
        'peering_location': {'readonly': True},
        'bandwidth_in_mbps': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        's_tag': {'key': 'properties.sTag', 'type': 'int'},
        'peering_location': {'key': 'properties.peeringLocation', 'type': 'str'},
        'bandwidth_in_mbps': {'key': 'properties.bandwidthInMbps', 'type': 'int'},
        'express_route_circuit': {'key': 'properties.expressRouteCircuit', 'type': 'ExpressRouteCircuitReference'},
        'service_provider_provisioning_state': {'key': 'properties.serviceProviderProvisioningState', 'type': 'str'},
        'service_provider_notes': {'key': 'properties.serviceProviderNotes', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCrossConnectionPeering]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword express_route_circuit: The ExpressRouteCircuit.
        :paramtype express_route_circuit:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitReference
        :keyword service_provider_provisioning_state: The provisioning state of the circuit in the
         connectivity provider system. Possible values include: "NotProvisioned", "Provisioning",
         "Provisioned", "Deprovisioning".
        :paramtype service_provider_provisioning_state: str or
         ~azure.mgmt.network.v2021_02_01.models.ServiceProviderProvisioningState
        :keyword service_provider_notes: Additional read only notes set by the connectivity provider.
        :paramtype service_provider_notes: str
        :keyword peerings: The list of peerings.
        :paramtype peerings:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionPeering]
        """
        super(ExpressRouteCrossConnection, self).__init__(**kwargs)
        self.etag = None
        self.primary_azure_port = None
        self.secondary_azure_port = None
        self.s_tag = None
        self.peering_location = None
        self.bandwidth_in_mbps = None
        self.express_route_circuit = kwargs.get('express_route_circuit', None)
        self.service_provider_provisioning_state = kwargs.get('service_provider_provisioning_state', None)
        self.service_provider_notes = kwargs.get('service_provider_notes', None)
        self.provisioning_state = None
        self.peerings = kwargs.get('peerings', None)


class ExpressRouteCrossConnectionListResult(msrest.serialization.Model):
    """Response for ListExpressRouteCrossConnection API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of ExpressRouteCrossConnection resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteCrossConnection resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnection]
        """
        super(ExpressRouteCrossConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteCrossConnectionPeering(SubResource):
    """Peering in an ExpressRoute Cross Connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar peering_type: The peering type. Possible values include: "AzurePublicPeering",
     "AzurePrivatePeering", "MicrosoftPeering".
    :vartype peering_type: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringType
    :ivar state: The peering state. Possible values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringState
    :ivar azure_asn: The Azure ASN.
    :vartype azure_asn: int
    :ivar peer_asn: The peer ASN.
    :vartype peer_asn: long
    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar primary_azure_port: The primary port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The secondary port.
    :vartype secondary_azure_port: str
    :ivar shared_key: The shared key.
    :vartype shared_key: str
    :ivar vlan_id: The VLAN ID.
    :vartype vlan_id: int
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
    :ivar provisioning_state: The provisioning state of the express route cross connection peering
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    :ivar last_modified_by: Who was the last to modify the peering.
    :vartype last_modified_by: str
    :ivar ipv6_peering_config: The IPv6 peering configuration.
    :vartype ipv6_peering_config:
     ~azure.mgmt.network.v2021_02_01.models.Ipv6ExpressRouteCircuitPeeringConfig
    """

    _validation = {
        'etag': {'readonly': True},
        'azure_asn': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 1},
        'primary_azure_port': {'readonly': True},
        'secondary_azure_port': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'last_modified_by': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'peering_type': {'key': 'properties.peeringType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'azure_asn': {'key': 'properties.azureASN', 'type': 'int'},
        'peer_asn': {'key': 'properties.peerASN', 'type': 'long'},
        'primary_peer_address_prefix': {'key': 'properties.primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'properties.secondaryPeerAddressPrefix', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'vlan_id': {'key': 'properties.vlanId', 'type': 'int'},
        'microsoft_peering_config': {'key': 'properties.microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'ipv6_peering_config': {'key': 'properties.ipv6PeeringConfig', 'type': 'Ipv6ExpressRouteCircuitPeeringConfig'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword peering_type: The peering type. Possible values include: "AzurePublicPeering",
         "AzurePrivatePeering", "MicrosoftPeering".
        :paramtype peering_type: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringType
        :keyword state: The peering state. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePeeringState
        :keyword peer_asn: The peer ASN.
        :paramtype peer_asn: long
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword shared_key: The shared key.
        :paramtype shared_key: str
        :keyword vlan_id: The VLAN ID.
        :paramtype vlan_id: int
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        :keyword ipv6_peering_config: The IPv6 peering configuration.
        :paramtype ipv6_peering_config:
         ~azure.mgmt.network.v2021_02_01.models.Ipv6ExpressRouteCircuitPeeringConfig
        """
        super(ExpressRouteCrossConnectionPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.peering_type = kwargs.get('peering_type', None)
        self.state = kwargs.get('state', None)
        self.azure_asn = None
        self.peer_asn = kwargs.get('peer_asn', None)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.primary_azure_port = None
        self.secondary_azure_port = None
        self.shared_key = kwargs.get('shared_key', None)
        self.vlan_id = kwargs.get('vlan_id', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.provisioning_state = None
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)
        self.last_modified_by = None
        self.ipv6_peering_config = kwargs.get('ipv6_peering_config', None)


class ExpressRouteCrossConnectionPeeringList(msrest.serialization.Model):
    """Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The peerings in an express route cross connection.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnectionPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in an express route cross connection.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionPeering]
        """
        super(ExpressRouteCrossConnectionPeeringList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteCrossConnectionRoutesTableSummary(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar neighbor: IP address of Neighbor router.
    :vartype neighbor: str
    :ivar asn: Autonomous system number.
    :vartype asn: int
    :ivar up_down: The length of time that the BGP session has been in the Established state, or
     the current status if not in the Established state.
    :vartype up_down: str
    :ivar state_or_prefixes_received: Current state of the BGP session, and the number of prefixes
     that have been received from a neighbor or peer group.
    :vartype state_or_prefixes_received: str
    """

    _attribute_map = {
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'asn': {'key': 'asn', 'type': 'int'},
        'up_down': {'key': 'upDown', 'type': 'str'},
        'state_or_prefixes_received': {'key': 'stateOrPrefixesReceived', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword neighbor: IP address of Neighbor router.
        :paramtype neighbor: str
        :keyword asn: Autonomous system number.
        :paramtype asn: int
        :keyword up_down: The length of time that the BGP session has been in the Established state, or
         the current status if not in the Established state.
        :paramtype up_down: str
        :keyword state_or_prefixes_received: Current state of the BGP session, and the number of
         prefixes that have been received from a neighbor or peer group.
        :paramtype state_or_prefixes_received: str
        """
        super(ExpressRouteCrossConnectionRoutesTableSummary, self).__init__(**kwargs)
        self.neighbor = kwargs.get('neighbor', None)
        self.asn = kwargs.get('asn', None)
        self.up_down = kwargs.get('up_down', None)
        self.state_or_prefixes_received = kwargs.get('state_or_prefixes_received', None)


class ExpressRouteCrossConnectionsRoutesTableSummaryListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Cross Connections.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of the routes table.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionRoutesTableSummary]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnectionRoutesTableSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of the routes table.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCrossConnectionRoutesTableSummary]
        """
        super(ExpressRouteCrossConnectionsRoutesTableSummaryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteGateway(Resource):
    """ExpressRoute gateway resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar auto_scale_configuration: Configuration for auto scaling.
    :vartype auto_scale_configuration:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteGatewayPropertiesAutoScaleConfiguration
    :ivar express_route_connections: List of ExpressRoute connections to the ExpressRoute gateway.
    :vartype express_route_connections:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteConnection]
    :ivar provisioning_state: The provisioning state of the express route gateway resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar virtual_hub: The Virtual Hub where the ExpressRoute gateway is or will be deployed.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.VirtualHubId
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'express_route_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'auto_scale_configuration': {'key': 'properties.autoScaleConfiguration', 'type': 'ExpressRouteGatewayPropertiesAutoScaleConfiguration'},
        'express_route_connections': {'key': 'properties.expressRouteConnections', 'type': '[ExpressRouteConnection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'VirtualHubId'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword auto_scale_configuration: Configuration for auto scaling.
        :paramtype auto_scale_configuration:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteGatewayPropertiesAutoScaleConfiguration
        :keyword virtual_hub: The Virtual Hub where the ExpressRoute gateway is or will be deployed.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.VirtualHubId
        """
        super(ExpressRouteGateway, self).__init__(**kwargs)
        self.etag = None
        self.auto_scale_configuration = kwargs.get('auto_scale_configuration', None)
        self.express_route_connections = None
        self.provisioning_state = None
        self.virtual_hub = kwargs.get('virtual_hub', None)


class ExpressRouteGatewayList(msrest.serialization.Model):
    """List of ExpressRoute gateways.

    :ivar value: List of ExpressRoute gateways.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteGateway]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteGateway]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of ExpressRoute gateways.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteGateway]
        """
        super(ExpressRouteGatewayList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ExpressRouteGatewayPropertiesAutoScaleConfiguration(msrest.serialization.Model):
    """Configuration for auto scaling.

    :ivar bounds: Minimum and maximum number of scale units to deploy.
    :vartype bounds:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
    """

    _attribute_map = {
        'bounds': {'key': 'bounds', 'type': 'ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword bounds: Minimum and maximum number of scale units to deploy.
        :paramtype bounds:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
        """
        super(ExpressRouteGatewayPropertiesAutoScaleConfiguration, self).__init__(**kwargs)
        self.bounds = kwargs.get('bounds', None)


class ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds(msrest.serialization.Model):
    """Minimum and maximum number of scale units to deploy.

    :ivar min: Minimum number of scale units deployed for ExpressRoute gateway.
    :vartype min: int
    :ivar max: Maximum number of scale units deployed for ExpressRoute gateway.
    :vartype max: int
    """

    _attribute_map = {
        'min': {'key': 'min', 'type': 'int'},
        'max': {'key': 'max', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min: Minimum number of scale units deployed for ExpressRoute gateway.
        :paramtype min: int
        :keyword max: Maximum number of scale units deployed for ExpressRoute gateway.
        :paramtype max: int
        """
        super(ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds, self).__init__(**kwargs)
        self.min = kwargs.get('min', None)
        self.max = kwargs.get('max', None)


class ExpressRouteLink(SubResource):
    """ExpressRouteLink child resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of child port resource that is unique among child port resources of the
     parent.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar router_name: Name of Azure router associated with physical port.
    :vartype router_name: str
    :ivar interface_name: Name of Azure router interface.
    :vartype interface_name: str
    :ivar patch_panel_id: Mapping between physical port to patch panel port.
    :vartype patch_panel_id: str
    :ivar rack_id: Mapping of physical patch panel to rack.
    :vartype rack_id: str
    :ivar connector_type: Physical fiber port type. Possible values include: "LC", "SC".
    :vartype connector_type: str or
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkConnectorType
    :ivar admin_state: Administrative state of the physical port. Possible values include:
     "Enabled", "Disabled".
    :vartype admin_state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkAdminState
    :ivar provisioning_state: The provisioning state of the express route link resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar mac_sec_config: MacSec configuration.
    :vartype mac_sec_config: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecConfig
    """

    _validation = {
        'etag': {'readonly': True},
        'router_name': {'readonly': True},
        'interface_name': {'readonly': True},
        'patch_panel_id': {'readonly': True},
        'rack_id': {'readonly': True},
        'connector_type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'router_name': {'key': 'properties.routerName', 'type': 'str'},
        'interface_name': {'key': 'properties.interfaceName', 'type': 'str'},
        'patch_panel_id': {'key': 'properties.patchPanelId', 'type': 'str'},
        'rack_id': {'key': 'properties.rackId', 'type': 'str'},
        'connector_type': {'key': 'properties.connectorType', 'type': 'str'},
        'admin_state': {'key': 'properties.adminState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'mac_sec_config': {'key': 'properties.macSecConfig', 'type': 'ExpressRouteLinkMacSecConfig'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of child port resource that is unique among child port resources of the
         parent.
        :paramtype name: str
        :keyword admin_state: Administrative state of the physical port. Possible values include:
         "Enabled", "Disabled".
        :paramtype admin_state: str or
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkAdminState
        :keyword mac_sec_config: MacSec configuration.
        :paramtype mac_sec_config: ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecConfig
        """
        super(ExpressRouteLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.router_name = None
        self.interface_name = None
        self.patch_panel_id = None
        self.rack_id = None
        self.connector_type = None
        self.admin_state = kwargs.get('admin_state', None)
        self.provisioning_state = None
        self.mac_sec_config = kwargs.get('mac_sec_config', None)


class ExpressRouteLinkListResult(msrest.serialization.Model):
    """Response for ListExpressRouteLinks API service call.

    :ivar value: The list of ExpressRouteLink sub-resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteLink]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of ExpressRouteLink sub-resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteLink]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteLinkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteLinkMacSecConfig(msrest.serialization.Model):
    """ExpressRouteLink Mac Security Configuration.

    :ivar ckn_secret_identifier: Keyvault Secret Identifier URL containing Mac security CKN key.
    :vartype ckn_secret_identifier: str
    :ivar cak_secret_identifier: Keyvault Secret Identifier URL containing Mac security CAK key.
    :vartype cak_secret_identifier: str
    :ivar cipher: Mac security cipher. Possible values include: "GcmAes256", "GcmAes128",
     "GcmAesXpn128", "GcmAesXpn256".
    :vartype cipher: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecCipher
    :ivar sci_state: Sci mode enabled/disabled. Possible values include: "Disabled", "Enabled".
    :vartype sci_state: str or
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecSciState
    """

    _attribute_map = {
        'ckn_secret_identifier': {'key': 'cknSecretIdentifier', 'type': 'str'},
        'cak_secret_identifier': {'key': 'cakSecretIdentifier', 'type': 'str'},
        'cipher': {'key': 'cipher', 'type': 'str'},
        'sci_state': {'key': 'sciState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ckn_secret_identifier: Keyvault Secret Identifier URL containing Mac security CKN key.
        :paramtype ckn_secret_identifier: str
        :keyword cak_secret_identifier: Keyvault Secret Identifier URL containing Mac security CAK key.
        :paramtype cak_secret_identifier: str
        :keyword cipher: Mac security cipher. Possible values include: "GcmAes256", "GcmAes128",
         "GcmAesXpn128", "GcmAesXpn256".
        :paramtype cipher: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecCipher
        :keyword sci_state: Sci mode enabled/disabled. Possible values include: "Disabled", "Enabled".
        :paramtype sci_state: str or
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteLinkMacSecSciState
        """
        super(ExpressRouteLinkMacSecConfig, self).__init__(**kwargs)
        self.ckn_secret_identifier = kwargs.get('ckn_secret_identifier', None)
        self.cak_secret_identifier = kwargs.get('cak_secret_identifier', None)
        self.cipher = kwargs.get('cipher', None)
        self.sci_state = kwargs.get('sci_state', None)


class ExpressRoutePort(Resource):
    """ExpressRoutePort resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar identity: The identity of ExpressRoutePort, if configured.
    :vartype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
    :ivar peering_location: The name of the peering location that the ExpressRoutePort is mapped to
     physically.
    :vartype peering_location: str
    :ivar bandwidth_in_gbps: Bandwidth of procured ports in Gbps.
    :vartype bandwidth_in_gbps: int
    :ivar provisioned_bandwidth_in_gbps: Aggregate Gbps of associated circuit bandwidths.
    :vartype provisioned_bandwidth_in_gbps: float
    :ivar mtu: Maximum transmission unit of the physical port pair(s).
    :vartype mtu: str
    :ivar encapsulation: Encapsulation method on physical ports. Possible values include: "Dot1Q",
     "QinQ".
    :vartype encapsulation: str or
     ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsEncapsulation
    :ivar ether_type: Ether type of the physical port.
    :vartype ether_type: str
    :ivar allocation_date: Date of the physical port allocation to be used in Letter of
     Authorization.
    :vartype allocation_date: str
    :ivar links: The set of physical links of the ExpressRoutePort resource.
    :vartype links: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteLink]
    :ivar circuits: Reference the ExpressRoute circuit(s) that are provisioned on this
     ExpressRoutePort resource.
    :vartype circuits: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the express route port resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar resource_guid: The resource GUID property of the express route port resource.
    :vartype resource_guid: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioned_bandwidth_in_gbps': {'readonly': True},
        'mtu': {'readonly': True},
        'ether_type': {'readonly': True},
        'allocation_date': {'readonly': True},
        'circuits': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'peering_location': {'key': 'properties.peeringLocation', 'type': 'str'},
        'bandwidth_in_gbps': {'key': 'properties.bandwidthInGbps', 'type': 'int'},
        'provisioned_bandwidth_in_gbps': {'key': 'properties.provisionedBandwidthInGbps', 'type': 'float'},
        'mtu': {'key': 'properties.mtu', 'type': 'str'},
        'encapsulation': {'key': 'properties.encapsulation', 'type': 'str'},
        'ether_type': {'key': 'properties.etherType', 'type': 'str'},
        'allocation_date': {'key': 'properties.allocationDate', 'type': 'str'},
        'links': {'key': 'properties.links', 'type': '[ExpressRouteLink]'},
        'circuits': {'key': 'properties.circuits', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: The identity of ExpressRoutePort, if configured.
        :paramtype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
        :keyword peering_location: The name of the peering location that the ExpressRoutePort is mapped
         to physically.
        :paramtype peering_location: str
        :keyword bandwidth_in_gbps: Bandwidth of procured ports in Gbps.
        :paramtype bandwidth_in_gbps: int
        :keyword encapsulation: Encapsulation method on physical ports. Possible values include:
         "Dot1Q", "QinQ".
        :paramtype encapsulation: str or
         ~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsEncapsulation
        :keyword links: The set of physical links of the ExpressRoutePort resource.
        :paramtype links: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteLink]
        """
        super(ExpressRoutePort, self).__init__(**kwargs)
        self.etag = None
        self.identity = kwargs.get('identity', None)
        self.peering_location = kwargs.get('peering_location', None)
        self.bandwidth_in_gbps = kwargs.get('bandwidth_in_gbps', None)
        self.provisioned_bandwidth_in_gbps = None
        self.mtu = None
        self.encapsulation = kwargs.get('encapsulation', None)
        self.ether_type = None
        self.allocation_date = None
        self.links = kwargs.get('links', None)
        self.circuits = None
        self.provisioning_state = None
        self.resource_guid = None


class ExpressRoutePortListResult(msrest.serialization.Model):
    """Response for ListExpressRoutePorts API service call.

    :ivar value: A list of ExpressRoutePort resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePort]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRoutePort]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRoutePort resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePort]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRoutePortListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRoutePortsLocation(Resource):
    """Definition of the ExpressRoutePorts peering location resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar address: Address of peering location.
    :vartype address: str
    :ivar contact: Contact details of peering locations.
    :vartype contact: str
    :ivar available_bandwidths: The inventory of available ExpressRoutePort bandwidths.
    :vartype available_bandwidths:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsLocationBandwidths]
    :ivar provisioning_state: The provisioning state of the express route port location resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'address': {'readonly': True},
        'contact': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'address': {'key': 'properties.address', 'type': 'str'},
        'contact': {'key': 'properties.contact', 'type': 'str'},
        'available_bandwidths': {'key': 'properties.availableBandwidths', 'type': '[ExpressRoutePortsLocationBandwidths]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword available_bandwidths: The inventory of available ExpressRoutePort bandwidths.
        :paramtype available_bandwidths:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsLocationBandwidths]
        """
        super(ExpressRoutePortsLocation, self).__init__(**kwargs)
        self.address = None
        self.contact = None
        self.available_bandwidths = kwargs.get('available_bandwidths', None)
        self.provisioning_state = None


class ExpressRoutePortsLocationBandwidths(msrest.serialization.Model):
    """Real-time inventory of available ExpressRoute port bandwidths.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar offer_name: Bandwidth descriptive name.
    :vartype offer_name: str
    :ivar value_in_gbps: Bandwidth value in Gbps.
    :vartype value_in_gbps: int
    """

    _validation = {
        'offer_name': {'readonly': True},
        'value_in_gbps': {'readonly': True},
    }

    _attribute_map = {
        'offer_name': {'key': 'offerName', 'type': 'str'},
        'value_in_gbps': {'key': 'valueInGbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ExpressRoutePortsLocationBandwidths, self).__init__(**kwargs)
        self.offer_name = None
        self.value_in_gbps = None


class ExpressRoutePortsLocationListResult(msrest.serialization.Model):
    """Response for ListExpressRoutePortsLocations API service call.

    :ivar value: The list of all ExpressRoutePort peering locations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsLocation]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRoutePortsLocation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of all ExpressRoutePort peering locations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRoutePortsLocation]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRoutePortsLocationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteServiceProvider(Resource):
    """A ExpressRouteResourceProvider object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar peering_locations: A list of peering locations.
    :vartype peering_locations: list[str]
    :ivar bandwidths_offered: A list of bandwidths offered.
    :vartype bandwidths_offered:
     list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteServiceProviderBandwidthsOffered]
    :ivar provisioning_state: The provisioning state of the express route service provider
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'peering_locations': {'key': 'properties.peeringLocations', 'type': '[str]'},
        'bandwidths_offered': {'key': 'properties.bandwidthsOffered', 'type': '[ExpressRouteServiceProviderBandwidthsOffered]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword peering_locations: A list of peering locations.
        :paramtype peering_locations: list[str]
        :keyword bandwidths_offered: A list of bandwidths offered.
        :paramtype bandwidths_offered:
         list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteServiceProviderBandwidthsOffered]
        """
        super(ExpressRouteServiceProvider, self).__init__(**kwargs)
        self.peering_locations = kwargs.get('peering_locations', None)
        self.bandwidths_offered = kwargs.get('bandwidths_offered', None)
        self.provisioning_state = None


class ExpressRouteServiceProviderBandwidthsOffered(msrest.serialization.Model):
    """Contains bandwidths offered in ExpressRouteServiceProvider resources.

    :ivar offer_name: The OfferName.
    :vartype offer_name: str
    :ivar value_in_mbps: The ValueInMbps.
    :vartype value_in_mbps: int
    """

    _attribute_map = {
        'offer_name': {'key': 'offerName', 'type': 'str'},
        'value_in_mbps': {'key': 'valueInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword offer_name: The OfferName.
        :paramtype offer_name: str
        :keyword value_in_mbps: The ValueInMbps.
        :paramtype value_in_mbps: int
        """
        super(ExpressRouteServiceProviderBandwidthsOffered, self).__init__(**kwargs)
        self.offer_name = kwargs.get('offer_name', None)
        self.value_in_mbps = kwargs.get('value_in_mbps', None)


class ExpressRouteServiceProviderListResult(msrest.serialization.Model):
    """Response for the ListExpressRouteServiceProvider API service call.

    :ivar value: A list of ExpressRouteResourceProvider resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteServiceProvider]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteServiceProvider]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteResourceProvider resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteServiceProvider]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteServiceProviderListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExtendedLocation(msrest.serialization.Model):
    """ExtendedLocation complex type.

    :ivar name: The name of the extended location.
    :vartype name: str
    :ivar type: The type of the extended location. Possible values include: "EdgeZone".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.ExtendedLocationTypes
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the extended location.
        :paramtype name: str
        :keyword type: The type of the extended location. Possible values include: "EdgeZone".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.ExtendedLocationTypes
        """
        super(ExtendedLocation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)


class FirewallPolicy(Resource):
    """FirewallPolicy Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar identity: The identity of the firewall policy.
    :vartype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
    :ivar rule_collection_groups: List of references to FirewallPolicyRuleCollectionGroups.
    :vartype rule_collection_groups: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the firewall policy resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar base_policy: The parent firewall policy from which rules are inherited.
    :vartype base_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar firewalls: List of references to Azure Firewalls that this Firewall Policy is associated
     with.
    :vartype firewalls: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar child_policies: List of references to Child Firewall Policies.
    :vartype child_policies: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar threat_intel_mode: The operation mode for Threat Intelligence. Possible values include:
     "Alert", "Deny", "Off".
    :vartype threat_intel_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.AzureFirewallThreatIntelMode
    :ivar threat_intel_whitelist: ThreatIntel Whitelist for Firewall Policy.
    :vartype threat_intel_whitelist:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyThreatIntelWhitelist
    :ivar insights: Insights on Firewall Policy.
    :vartype insights: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyInsights
    :ivar snat: The private IP addresses/IP ranges to which traffic will not be SNAT.
    :vartype snat: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySNAT
    :ivar dns_settings: DNS Proxy Settings definition.
    :vartype dns_settings: ~azure.mgmt.network.v2021_02_01.models.DnsSettings
    :ivar intrusion_detection: The configuration for Intrusion detection.
    :vartype intrusion_detection:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetection
    :ivar transport_security: TLS Configuration definition.
    :vartype transport_security:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyTransportSecurity
    :ivar sku: The Firewall Policy SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySku
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'rule_collection_groups': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'firewalls': {'readonly': True},
        'child_policies': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'rule_collection_groups': {'key': 'properties.ruleCollectionGroups', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'base_policy': {'key': 'properties.basePolicy', 'type': 'SubResource'},
        'firewalls': {'key': 'properties.firewalls', 'type': '[SubResource]'},
        'child_policies': {'key': 'properties.childPolicies', 'type': '[SubResource]'},
        'threat_intel_mode': {'key': 'properties.threatIntelMode', 'type': 'str'},
        'threat_intel_whitelist': {'key': 'properties.threatIntelWhitelist', 'type': 'FirewallPolicyThreatIntelWhitelist'},
        'insights': {'key': 'properties.insights', 'type': 'FirewallPolicyInsights'},
        'snat': {'key': 'properties.snat', 'type': 'FirewallPolicySNAT'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'DnsSettings'},
        'intrusion_detection': {'key': 'properties.intrusionDetection', 'type': 'FirewallPolicyIntrusionDetection'},
        'transport_security': {'key': 'properties.transportSecurity', 'type': 'FirewallPolicyTransportSecurity'},
        'sku': {'key': 'properties.sku', 'type': 'FirewallPolicySku'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: The identity of the firewall policy.
        :paramtype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
        :keyword base_policy: The parent firewall policy from which rules are inherited.
        :paramtype base_policy: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword threat_intel_mode: The operation mode for Threat Intelligence. Possible values
         include: "Alert", "Deny", "Off".
        :paramtype threat_intel_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.AzureFirewallThreatIntelMode
        :keyword threat_intel_whitelist: ThreatIntel Whitelist for Firewall Policy.
        :paramtype threat_intel_whitelist:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyThreatIntelWhitelist
        :keyword insights: Insights on Firewall Policy.
        :paramtype insights: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyInsights
        :keyword snat: The private IP addresses/IP ranges to which traffic will not be SNAT.
        :paramtype snat: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySNAT
        :keyword dns_settings: DNS Proxy Settings definition.
        :paramtype dns_settings: ~azure.mgmt.network.v2021_02_01.models.DnsSettings
        :keyword intrusion_detection: The configuration for Intrusion detection.
        :paramtype intrusion_detection:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetection
        :keyword transport_security: TLS Configuration definition.
        :paramtype transport_security:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyTransportSecurity
        :keyword sku: The Firewall Policy SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySku
        """
        super(FirewallPolicy, self).__init__(**kwargs)
        self.etag = None
        self.identity = kwargs.get('identity', None)
        self.rule_collection_groups = None
        self.provisioning_state = None
        self.base_policy = kwargs.get('base_policy', None)
        self.firewalls = None
        self.child_policies = None
        self.threat_intel_mode = kwargs.get('threat_intel_mode', None)
        self.threat_intel_whitelist = kwargs.get('threat_intel_whitelist', None)
        self.insights = kwargs.get('insights', None)
        self.snat = kwargs.get('snat', None)
        self.dns_settings = kwargs.get('dns_settings', None)
        self.intrusion_detection = kwargs.get('intrusion_detection', None)
        self.transport_security = kwargs.get('transport_security', None)
        self.sku = kwargs.get('sku', None)


class FirewallPolicyCertificateAuthority(msrest.serialization.Model):
    """Trusted Root certificates properties for tls.

    :ivar key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
     'Certificate' object stored in KeyVault.
    :vartype key_vault_secret_id: str
    :ivar name: Name of the CA certificate.
    :vartype name: str
    """

    _attribute_map = {
        'key_vault_secret_id': {'key': 'keyVaultSecretId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
         'Certificate' object stored in KeyVault.
        :paramtype key_vault_secret_id: str
        :keyword name: Name of the CA certificate.
        :paramtype name: str
        """
        super(FirewallPolicyCertificateAuthority, self).__init__(**kwargs)
        self.key_vault_secret_id = kwargs.get('key_vault_secret_id', None)
        self.name = kwargs.get('name', None)


class FirewallPolicyRuleCollection(msrest.serialization.Model):
    """Properties of the rule collection.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FirewallPolicyFilterRuleCollection, FirewallPolicyNatRuleCollection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
    }

    _subtype_map = {
        'rule_collection_type': {'FirewallPolicyFilterRuleCollection': 'FirewallPolicyFilterRuleCollection', 'FirewallPolicyNatRuleCollection': 'FirewallPolicyNatRuleCollection'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        """
        super(FirewallPolicyRuleCollection, self).__init__(**kwargs)
        self.rule_collection_type = None  # type: Optional[str]
        self.name = kwargs.get('name', None)
        self.priority = kwargs.get('priority', None)


class FirewallPolicyFilterRuleCollection(FirewallPolicyRuleCollection):
    """Firewall Policy Filter Rule Collection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    :ivar action: The action type of a Filter rule collection.
    :vartype action:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyFilterRuleCollectionAction
    :ivar rules: List of rules included in a rule collection.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRule]
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'action': {'key': 'action', 'type': 'FirewallPolicyFilterRuleCollectionAction'},
        'rules': {'key': 'rules', 'type': '[FirewallPolicyRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        :keyword action: The action type of a Filter rule collection.
        :paramtype action:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyFilterRuleCollectionAction
        :keyword rules: List of rules included in a rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRule]
        """
        super(FirewallPolicyFilterRuleCollection, self).__init__(**kwargs)
        self.rule_collection_type = 'FirewallPolicyFilterRuleCollection'  # type: str
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)


class FirewallPolicyFilterRuleCollectionAction(msrest.serialization.Model):
    """Properties of the FirewallPolicyFilterRuleCollectionAction.

    :ivar type: The type of action. Possible values include: "Allow", "Deny".
    :vartype type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyFilterRuleCollectionActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "Allow", "Deny".
        :paramtype type: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyFilterRuleCollectionActionType
        """
        super(FirewallPolicyFilterRuleCollectionAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class FirewallPolicyInsights(msrest.serialization.Model):
    """Firewall Policy Insights.

    :ivar is_enabled: A flag to indicate if the insights are enabled on the policy.
    :vartype is_enabled: bool
    :ivar retention_days: Number of days the insights should be enabled on the policy.
    :vartype retention_days: int
    :ivar log_analytics_resources: Workspaces needed to configure the Firewall Policy Insights.
    :vartype log_analytics_resources:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyLogAnalyticsResources
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'retention_days': {'key': 'retentionDays', 'type': 'int'},
        'log_analytics_resources': {'key': 'logAnalyticsResources', 'type': 'FirewallPolicyLogAnalyticsResources'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_enabled: A flag to indicate if the insights are enabled on the policy.
        :paramtype is_enabled: bool
        :keyword retention_days: Number of days the insights should be enabled on the policy.
        :paramtype retention_days: int
        :keyword log_analytics_resources: Workspaces needed to configure the Firewall Policy Insights.
        :paramtype log_analytics_resources:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyLogAnalyticsResources
        """
        super(FirewallPolicyInsights, self).__init__(**kwargs)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.retention_days = kwargs.get('retention_days', None)
        self.log_analytics_resources = kwargs.get('log_analytics_resources', None)


class FirewallPolicyIntrusionDetection(msrest.serialization.Model):
    """Configuration for intrusion detection mode and rules.

    :ivar mode: Intrusion detection general state. Possible values include: "Off", "Alert", "Deny".
    :vartype mode: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionStateType
    :ivar configuration: Intrusion detection configuration properties.
    :vartype configuration:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionConfiguration
    """

    _attribute_map = {
        'mode': {'key': 'mode', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'FirewallPolicyIntrusionDetectionConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword mode: Intrusion detection general state. Possible values include: "Off", "Alert",
         "Deny".
        :paramtype mode: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionStateType
        :keyword configuration: Intrusion detection configuration properties.
        :paramtype configuration:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionConfiguration
        """
        super(FirewallPolicyIntrusionDetection, self).__init__(**kwargs)
        self.mode = kwargs.get('mode', None)
        self.configuration = kwargs.get('configuration', None)


class FirewallPolicyIntrusionDetectionBypassTrafficSpecifications(msrest.serialization.Model):
    """Intrusion detection bypass traffic specification.

    :ivar name: Name of the bypass traffic rule.
    :vartype name: str
    :ivar description: Description of the bypass traffic rule.
    :vartype description: str
    :ivar protocol: The rule bypass protocol. Possible values include: "TCP", "UDP", "ICMP", "ANY".
    :vartype protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionProtocol
    :ivar source_addresses: List of source IP addresses or ranges for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or ranges for this rule.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports or ranges.
    :vartype destination_ports: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar destination_ip_groups: List of destination IpGroups for this rule.
    :vartype destination_ip_groups: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'destination_ip_groups': {'key': 'destinationIpGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the bypass traffic rule.
        :paramtype name: str
        :keyword description: Description of the bypass traffic rule.
        :paramtype description: str
        :keyword protocol: The rule bypass protocol. Possible values include: "TCP", "UDP", "ICMP",
         "ANY".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionProtocol
        :keyword source_addresses: List of source IP addresses or ranges for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or ranges for this rule.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports or ranges.
        :paramtype destination_ports: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword destination_ip_groups: List of destination IpGroups for this rule.
        :paramtype destination_ip_groups: list[str]
        """
        super(FirewallPolicyIntrusionDetectionBypassTrafficSpecifications, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)
        self.destination_ip_groups = kwargs.get('destination_ip_groups', None)


class FirewallPolicyIntrusionDetectionConfiguration(msrest.serialization.Model):
    """The operation for configuring intrusion detection.

    :ivar signature_overrides: List of specific signatures states.
    :vartype signature_overrides:
     list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionSignatureSpecification]
    :ivar bypass_traffic_settings: List of rules for traffic to bypass.
    :vartype bypass_traffic_settings:
     list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]
    """

    _attribute_map = {
        'signature_overrides': {'key': 'signatureOverrides', 'type': '[FirewallPolicyIntrusionDetectionSignatureSpecification]'},
        'bypass_traffic_settings': {'key': 'bypassTrafficSettings', 'type': '[FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword signature_overrides: List of specific signatures states.
        :paramtype signature_overrides:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionSignatureSpecification]
        :keyword bypass_traffic_settings: List of rules for traffic to bypass.
        :paramtype bypass_traffic_settings:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]
        """
        super(FirewallPolicyIntrusionDetectionConfiguration, self).__init__(**kwargs)
        self.signature_overrides = kwargs.get('signature_overrides', None)
        self.bypass_traffic_settings = kwargs.get('bypass_traffic_settings', None)


class FirewallPolicyIntrusionDetectionSignatureSpecification(msrest.serialization.Model):
    """Intrusion detection signatures specification states.

    :ivar id: Signature id.
    :vartype id: str
    :ivar mode: The signature state. Possible values include: "Off", "Alert", "Deny".
    :vartype mode: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionStateType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mode': {'key': 'mode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Signature id.
        :paramtype id: str
        :keyword mode: The signature state. Possible values include: "Off", "Alert", "Deny".
        :paramtype mode: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyIntrusionDetectionStateType
        """
        super(FirewallPolicyIntrusionDetectionSignatureSpecification, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.mode = kwargs.get('mode', None)


class FirewallPolicyListResult(msrest.serialization.Model):
    """Response for ListFirewallPolicies API service call.

    :ivar value: List of Firewall Policies in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicy]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FirewallPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Firewall Policies in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicy]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(FirewallPolicyListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class FirewallPolicyLogAnalyticsResources(msrest.serialization.Model):
    """Log Analytics Resources for Firewall Policy Insights.

    :ivar workspaces: List of workspaces for Firewall Policy Insights.
    :vartype workspaces:
     list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyLogAnalyticsWorkspace]
    :ivar default_workspace_id: The default workspace Id for Firewall Policy Insights.
    :vartype default_workspace_id: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'workspaces': {'key': 'workspaces', 'type': '[FirewallPolicyLogAnalyticsWorkspace]'},
        'default_workspace_id': {'key': 'defaultWorkspaceId', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword workspaces: List of workspaces for Firewall Policy Insights.
        :paramtype workspaces:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyLogAnalyticsWorkspace]
        :keyword default_workspace_id: The default workspace Id for Firewall Policy Insights.
        :paramtype default_workspace_id: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(FirewallPolicyLogAnalyticsResources, self).__init__(**kwargs)
        self.workspaces = kwargs.get('workspaces', None)
        self.default_workspace_id = kwargs.get('default_workspace_id', None)


class FirewallPolicyLogAnalyticsWorkspace(msrest.serialization.Model):
    """Log Analytics Workspace for Firewall Policy Insights.

    :ivar region: Region to configure the Workspace.
    :vartype region: str
    :ivar workspace_id: The workspace Id for Firewall Policy Insights.
    :vartype workspace_id: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword region: Region to configure the Workspace.
        :paramtype region: str
        :keyword workspace_id: The workspace Id for Firewall Policy Insights.
        :paramtype workspace_id: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(FirewallPolicyLogAnalyticsWorkspace, self).__init__(**kwargs)
        self.region = kwargs.get('region', None)
        self.workspace_id = kwargs.get('workspace_id', None)


class FirewallPolicyNatRuleCollection(FirewallPolicyRuleCollection):
    """Firewall Policy NAT Rule Collection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    :ivar action: The action type of a Nat rule collection.
    :vartype action: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyNatRuleCollectionAction
    :ivar rules: List of rules included in a rule collection.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRule]
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'action': {'key': 'action', 'type': 'FirewallPolicyNatRuleCollectionAction'},
        'rules': {'key': 'rules', 'type': '[FirewallPolicyRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        :keyword action: The action type of a Nat rule collection.
        :paramtype action: ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyNatRuleCollectionAction
        :keyword rules: List of rules included in a rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRule]
        """
        super(FirewallPolicyNatRuleCollection, self).__init__(**kwargs)
        self.rule_collection_type = 'FirewallPolicyNatRuleCollection'  # type: str
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)


class FirewallPolicyNatRuleCollectionAction(msrest.serialization.Model):
    """Properties of the FirewallPolicyNatRuleCollectionAction.

    :ivar type: The type of action. Possible values include: "DNAT".
    :vartype type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyNatRuleCollectionActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "DNAT".
        :paramtype type: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyNatRuleCollectionActionType
        """
        super(FirewallPolicyNatRuleCollectionAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class FirewallPolicyRuleApplicationProtocol(msrest.serialization.Model):
    """Properties of the application rule protocol.

    :ivar protocol_type: Protocol type. Possible values include: "Http", "Https".
    :vartype protocol_type: str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleApplicationProtocolType
    :ivar port: Port number for the protocol, cannot be greater than 64000.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 64000, 'minimum': 0},
    }

    _attribute_map = {
        'protocol_type': {'key': 'protocolType', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol_type: Protocol type. Possible values include: "Http", "Https".
        :paramtype protocol_type: str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleApplicationProtocolType
        :keyword port: Port number for the protocol, cannot be greater than 64000.
        :paramtype port: int
        """
        super(FirewallPolicyRuleApplicationProtocol, self).__init__(**kwargs)
        self.protocol_type = kwargs.get('protocol_type', None)
        self.port = kwargs.get('port', None)


class FirewallPolicyRuleCollectionGroup(SubResource):
    """Rule Collection Group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Rule Group type.
    :vartype type: str
    :ivar priority: Priority of the Firewall Policy Rule Collection Group resource.
    :vartype priority: int
    :ivar rule_collections: Group of Firewall Policy rule collections.
    :vartype rule_collections:
     list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollection]
    :ivar provisioning_state: The provisioning state of the firewall policy rule collection group
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'rule_collections': {'key': 'properties.ruleCollections', 'type': '[FirewallPolicyRuleCollection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection Group resource.
        :paramtype priority: int
        :keyword rule_collections: Group of Firewall Policy rule collections.
        :paramtype rule_collections:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollection]
        """
        super(FirewallPolicyRuleCollectionGroup, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.priority = kwargs.get('priority', None)
        self.rule_collections = kwargs.get('rule_collections', None)
        self.provisioning_state = None


class FirewallPolicyRuleCollectionGroupListResult(msrest.serialization.Model):
    """Response for ListFirewallPolicyRuleCollectionGroups API service call.

    :ivar value: List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollectionGroup]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FirewallPolicyRuleCollectionGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleCollectionGroup]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(FirewallPolicyRuleCollectionGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class FirewallPolicySku(msrest.serialization.Model):
    """SKU of Firewall policy.

    :ivar tier: Tier of Firewall Policy. Possible values include: "Standard", "Premium".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySkuTier
    """

    _attribute_map = {
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tier: Tier of Firewall Policy. Possible values include: "Standard", "Premium".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicySkuTier
        """
        super(FirewallPolicySku, self).__init__(**kwargs)
        self.tier = kwargs.get('tier', None)


class FirewallPolicySNAT(msrest.serialization.Model):
    """The private IP addresses/IP ranges to which traffic will not be SNAT.

    :ivar private_ranges: List of private IP addresses/IP address ranges to not be SNAT.
    :vartype private_ranges: list[str]
    """

    _attribute_map = {
        'private_ranges': {'key': 'privateRanges', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword private_ranges: List of private IP addresses/IP address ranges to not be SNAT.
        :paramtype private_ranges: list[str]
        """
        super(FirewallPolicySNAT, self).__init__(**kwargs)
        self.private_ranges = kwargs.get('private_ranges', None)


class FirewallPolicyThreatIntelWhitelist(msrest.serialization.Model):
    """ThreatIntel Whitelist for Firewall Policy.

    :ivar ip_addresses: List of IP addresses for the ThreatIntel Whitelist.
    :vartype ip_addresses: list[str]
    :ivar fqdns: List of FQDNs for the ThreatIntel Whitelist.
    :vartype fqdns: list[str]
    """

    _attribute_map = {
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'fqdns': {'key': 'fqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ip_addresses: List of IP addresses for the ThreatIntel Whitelist.
        :paramtype ip_addresses: list[str]
        :keyword fqdns: List of FQDNs for the ThreatIntel Whitelist.
        :paramtype fqdns: list[str]
        """
        super(FirewallPolicyThreatIntelWhitelist, self).__init__(**kwargs)
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.fqdns = kwargs.get('fqdns', None)


class FirewallPolicyTransportSecurity(msrest.serialization.Model):
    """Configuration needed to perform TLS termination & initiation.

    :ivar certificate_authority: The CA used for intermediate CA generation.
    :vartype certificate_authority:
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyCertificateAuthority
    """

    _attribute_map = {
        'certificate_authority': {'key': 'certificateAuthority', 'type': 'FirewallPolicyCertificateAuthority'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword certificate_authority: The CA used for intermediate CA generation.
        :paramtype certificate_authority:
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyCertificateAuthority
        """
        super(FirewallPolicyTransportSecurity, self).__init__(**kwargs)
        self.certificate_authority = kwargs.get('certificate_authority', None)


class FlowLog(Resource):
    """A flow log resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar target_resource_id: ID of network security group to which flow log will be applied.
    :vartype target_resource_id: str
    :ivar target_resource_guid: Guid of network security group to which flow log will be applied.
    :vartype target_resource_guid: str
    :ivar storage_id: ID of the storage account which is used to store the flow log.
    :vartype storage_id: str
    :ivar enabled: Flag to enable/disable flow logging.
    :vartype enabled: bool
    :ivar retention_policy: Parameters that define the retention policy for flow log.
    :vartype retention_policy: ~azure.mgmt.network.v2021_02_01.models.RetentionPolicyParameters
    :ivar format: Parameters that define the flow log format.
    :vartype format: ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatParameters
    :ivar flow_analytics_configuration: Parameters that define the configuration of traffic
     analytics.
    :vartype flow_analytics_configuration:
     ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsProperties
    :ivar provisioning_state: The provisioning state of the flow log. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'target_resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'target_resource_id': {'key': 'properties.targetResourceId', 'type': 'str'},
        'target_resource_guid': {'key': 'properties.targetResourceGuid', 'type': 'str'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'retention_policy': {'key': 'properties.retentionPolicy', 'type': 'RetentionPolicyParameters'},
        'format': {'key': 'properties.format', 'type': 'FlowLogFormatParameters'},
        'flow_analytics_configuration': {'key': 'properties.flowAnalyticsConfiguration', 'type': 'TrafficAnalyticsProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword target_resource_id: ID of network security group to which flow log will be applied.
        :paramtype target_resource_id: str
        :keyword storage_id: ID of the storage account which is used to store the flow log.
        :paramtype storage_id: str
        :keyword enabled: Flag to enable/disable flow logging.
        :paramtype enabled: bool
        :keyword retention_policy: Parameters that define the retention policy for flow log.
        :paramtype retention_policy: ~azure.mgmt.network.v2021_02_01.models.RetentionPolicyParameters
        :keyword format: Parameters that define the flow log format.
        :paramtype format: ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatParameters
        :keyword flow_analytics_configuration: Parameters that define the configuration of traffic
         analytics.
        :paramtype flow_analytics_configuration:
         ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsProperties
        """
        super(FlowLog, self).__init__(**kwargs)
        self.etag = None
        self.target_resource_id = kwargs.get('target_resource_id', None)
        self.target_resource_guid = None
        self.storage_id = kwargs.get('storage_id', None)
        self.enabled = kwargs.get('enabled', None)
        self.retention_policy = kwargs.get('retention_policy', None)
        self.format = kwargs.get('format', None)
        self.flow_analytics_configuration = kwargs.get('flow_analytics_configuration', None)
        self.provisioning_state = None


class FlowLogFormatParameters(msrest.serialization.Model):
    """Parameters that define the flow log format.

    :ivar type: The file type of flow log. Possible values include: "JSON".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatType
    :ivar version: The version (revision) of the flow log.
    :vartype version: int
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The file type of flow log. Possible values include: "JSON".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatType
        :keyword version: The version (revision) of the flow log.
        :paramtype version: int
        """
        super(FlowLogFormatParameters, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.version = kwargs.get('version', 0)


class FlowLogInformation(msrest.serialization.Model):
    """Information on the configuration of flow log and traffic analytics (optional) .

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The ID of the resource to configure for flow log and
     traffic analytics (optional) .
    :vartype target_resource_id: str
    :ivar flow_analytics_configuration: Parameters that define the configuration of traffic
     analytics.
    :vartype flow_analytics_configuration:
     ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsProperties
    :ivar storage_id: Required. ID of the storage account which is used to store the flow log.
    :vartype storage_id: str
    :ivar enabled: Required. Flag to enable/disable flow logging.
    :vartype enabled: bool
    :ivar retention_policy: Parameters that define the retention policy for flow log.
    :vartype retention_policy: ~azure.mgmt.network.v2021_02_01.models.RetentionPolicyParameters
    :ivar format: Parameters that define the flow log format.
    :vartype format: ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatParameters
    """

    _validation = {
        'target_resource_id': {'required': True},
        'storage_id': {'required': True},
        'enabled': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'flow_analytics_configuration': {'key': 'flowAnalyticsConfiguration', 'type': 'TrafficAnalyticsProperties'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'retention_policy': {'key': 'properties.retentionPolicy', 'type': 'RetentionPolicyParameters'},
        'format': {'key': 'properties.format', 'type': 'FlowLogFormatParameters'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The ID of the resource to configure for flow log and
         traffic analytics (optional) .
        :paramtype target_resource_id: str
        :keyword flow_analytics_configuration: Parameters that define the configuration of traffic
         analytics.
        :paramtype flow_analytics_configuration:
         ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsProperties
        :keyword storage_id: Required. ID of the storage account which is used to store the flow log.
        :paramtype storage_id: str
        :keyword enabled: Required. Flag to enable/disable flow logging.
        :paramtype enabled: bool
        :keyword retention_policy: Parameters that define the retention policy for flow log.
        :paramtype retention_policy: ~azure.mgmt.network.v2021_02_01.models.RetentionPolicyParameters
        :keyword format: Parameters that define the flow log format.
        :paramtype format: ~azure.mgmt.network.v2021_02_01.models.FlowLogFormatParameters
        """
        super(FlowLogInformation, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.flow_analytics_configuration = kwargs.get('flow_analytics_configuration', None)
        self.storage_id = kwargs['storage_id']
        self.enabled = kwargs['enabled']
        self.retention_policy = kwargs.get('retention_policy', None)
        self.format = kwargs.get('format', None)


class FlowLogListResult(msrest.serialization.Model):
    """List of flow logs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Information about flow log resource.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.FlowLog]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FlowLog]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Information about flow log resource.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.FlowLog]
        """
        super(FlowLogListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class FlowLogStatusParameters(msrest.serialization.Model):
    """Parameters that define a resource to query flow log and traffic analytics (optional) status.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource where getting the flow log and traffic
     analytics (optional) status.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource where getting the flow log and
         traffic analytics (optional) status.
        :paramtype target_resource_id: str
        """
        super(FlowLogStatusParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class FrontendIPConfiguration(SubResource):
    """Frontend IP address of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of frontend IP
     configurations used by the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar inbound_nat_rules: An array of references to inbound rules that use this frontend IP.
    :vartype inbound_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar inbound_nat_pools: An array of references to inbound pools that use this frontend IP.
    :vartype inbound_nat_pools: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar outbound_rules: An array of references to outbound rules that use this frontend IP.
    :vartype outbound_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar load_balancing_rules: An array of references to load balancing rules that use this
     frontend IP.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The Private IP allocation method. Possible values include:
     "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar private_ip_address_version: Whether the specific ipconfiguration is IPv4 or IPv6. Default
     is taken as IPv4. Possible values include: "IPv4", "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    :ivar subnet: The reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar public_ip_address: The reference to the Public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar public_ip_prefix: The reference to the Public IP Prefix resource.
    :vartype public_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar gateway_load_balancer: The reference to gateway load balancer frontend IP.
    :vartype gateway_load_balancer: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the frontend IP configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'inbound_nat_rules': {'readonly': True},
        'inbound_nat_pools': {'readonly': True},
        'outbound_rules': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'inbound_nat_rules': {'key': 'properties.inboundNatRules', 'type': '[SubResource]'},
        'inbound_nat_pools': {'key': 'properties.inboundNatPools', 'type': '[SubResource]'},
        'outbound_rules': {'key': 'properties.outboundRules', 'type': '[SubResource]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'public_ip_prefix': {'key': 'properties.publicIPPrefix', 'type': 'SubResource'},
        'gateway_load_balancer': {'key': 'properties.gatewayLoadBalancer', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of frontend IP
         configurations used by the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The Private IP allocation method. Possible values
         include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword private_ip_address_version: Whether the specific ipconfiguration is IPv4 or IPv6.
         Default is taken as IPv4. Possible values include: "IPv4", "IPv6".
        :paramtype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        :keyword subnet: The reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword public_ip_address: The reference to the Public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        :keyword public_ip_prefix: The reference to the Public IP Prefix resource.
        :paramtype public_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword gateway_load_balancer: The reference to gateway load balancer frontend IP.
        :paramtype gateway_load_balancer: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(FrontendIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.zones = kwargs.get('zones', None)
        self.inbound_nat_rules = None
        self.inbound_nat_pools = None
        self.outbound_rules = None
        self.load_balancing_rules = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.public_ip_prefix = kwargs.get('public_ip_prefix', None)
        self.gateway_load_balancer = kwargs.get('gateway_load_balancer', None)
        self.provisioning_state = None


class GatewayLoadBalancerTunnelInterface(msrest.serialization.Model):
    """Gateway load balancer tunnel interface of a load balancer backend address pool.

    :ivar port: Port of gateway load balancer tunnel interface.
    :vartype port: int
    :ivar identifier: Identifier of gateway load balancer tunnel interface.
    :vartype identifier: int
    :ivar protocol: Protocol of gateway load balancer tunnel interface. Possible values include:
     "None", "Native", "VXLAN".
    :vartype protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelProtocol
    :ivar type: Traffic type of gateway load balancer tunnel interface. Possible values include:
     "None", "Internal", "External".
    :vartype type: str or
     ~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelInterfaceType
    """

    _attribute_map = {
        'port': {'key': 'port', 'type': 'int'},
        'identifier': {'key': 'identifier', 'type': 'int'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword port: Port of gateway load balancer tunnel interface.
        :paramtype port: int
        :keyword identifier: Identifier of gateway load balancer tunnel interface.
        :paramtype identifier: int
        :keyword protocol: Protocol of gateway load balancer tunnel interface. Possible values include:
         "None", "Native", "VXLAN".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelProtocol
        :keyword type: Traffic type of gateway load balancer tunnel interface. Possible values include:
         "None", "Internal", "External".
        :paramtype type: str or
         ~azure.mgmt.network.v2021_02_01.models.GatewayLoadBalancerTunnelInterfaceType
        """
        super(GatewayLoadBalancerTunnelInterface, self).__init__(**kwargs)
        self.port = kwargs.get('port', None)
        self.identifier = kwargs.get('identifier', None)
        self.protocol = kwargs.get('protocol', None)
        self.type = kwargs.get('type', None)


class GatewayRoute(msrest.serialization.Model):
    """Gateway routing details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The gateway's local address.
    :vartype local_address: str
    :ivar network: The route's network prefix.
    :vartype network: str
    :ivar next_hop: The route's next hop.
    :vartype next_hop: str
    :ivar source_peer: The peer this route was learned from.
    :vartype source_peer: str
    :ivar origin: The source this route was learned from.
    :vartype origin: str
    :ivar as_path: The route's AS path sequence.
    :vartype as_path: str
    :ivar weight: The route's weight.
    :vartype weight: int
    """

    _validation = {
        'local_address': {'readonly': True},
        'network': {'readonly': True},
        'next_hop': {'readonly': True},
        'source_peer': {'readonly': True},
        'origin': {'readonly': True},
        'as_path': {'readonly': True},
        'weight': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'source_peer': {'key': 'sourcePeer', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(GatewayRoute, self).__init__(**kwargs)
        self.local_address = None
        self.network = None
        self.next_hop = None
        self.source_peer = None
        self.origin = None
        self.as_path = None
        self.weight = None


class GatewayRouteListResult(msrest.serialization.Model):
    """List of virtual network gateway routes.

    :ivar value: List of gateway routes.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.GatewayRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GatewayRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of gateway routes.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.GatewayRoute]
        """
        super(GatewayRouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class GenerateExpressRoutePortsLOARequest(msrest.serialization.Model):
    """The customer name to be printed on a letter of authorization.

    All required parameters must be populated in order to send to Azure.

    :ivar customer_name: Required. The customer name.
    :vartype customer_name: str
    """

    _validation = {
        'customer_name': {'required': True},
    }

    _attribute_map = {
        'customer_name': {'key': 'customerName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword customer_name: Required. The customer name.
        :paramtype customer_name: str
        """
        super(GenerateExpressRoutePortsLOARequest, self).__init__(**kwargs)
        self.customer_name = kwargs['customer_name']


class GenerateExpressRoutePortsLOAResult(msrest.serialization.Model):
    """Response for GenerateExpressRoutePortsLOA API service call.

    :ivar encoded_content: The content as a base64 encoded string.
    :vartype encoded_content: str
    """

    _attribute_map = {
        'encoded_content': {'key': 'encodedContent', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword encoded_content: The content as a base64 encoded string.
        :paramtype encoded_content: str
        """
        super(GenerateExpressRoutePortsLOAResult, self).__init__(**kwargs)
        self.encoded_content = kwargs.get('encoded_content', None)


class GetVpnSitesConfigurationRequest(msrest.serialization.Model):
    """List of Vpn-Sites.

    All required parameters must be populated in order to send to Azure.

    :ivar vpn_sites: List of resource-ids of the vpn-sites for which config is to be downloaded.
    :vartype vpn_sites: list[str]
    :ivar output_blob_sas_url: Required. The sas-url to download the configurations for vpn-sites.
    :vartype output_blob_sas_url: str
    """

    _validation = {
        'output_blob_sas_url': {'required': True},
    }

    _attribute_map = {
        'vpn_sites': {'key': 'vpnSites', 'type': '[str]'},
        'output_blob_sas_url': {'key': 'outputBlobSasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_sites: List of resource-ids of the vpn-sites for which config is to be downloaded.
        :paramtype vpn_sites: list[str]
        :keyword output_blob_sas_url: Required. The sas-url to download the configurations for
         vpn-sites.
        :paramtype output_blob_sas_url: str
        """
        super(GetVpnSitesConfigurationRequest, self).__init__(**kwargs)
        self.vpn_sites = kwargs.get('vpn_sites', None)
        self.output_blob_sas_url = kwargs['output_blob_sas_url']


class HopLink(msrest.serialization.Model):
    """Hop link.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_hop_id: The ID of the next hop.
    :vartype next_hop_id: str
    :ivar link_type: Link type.
    :vartype link_type: str
    :ivar issues: List of issues.
    :vartype issues: list[~azure.mgmt.network.v2021_02_01.models.ConnectivityIssue]
    :ivar context: Provides additional context on links.
    :vartype context: dict[str, str]
    :ivar resource_id: Resource ID.
    :vartype resource_id: str
    :ivar round_trip_time_min: Minimum roundtrip time in milliseconds.
    :vartype round_trip_time_min: long
    :ivar round_trip_time_avg: Average roundtrip time in milliseconds.
    :vartype round_trip_time_avg: long
    :ivar round_trip_time_max: Maximum roundtrip time in milliseconds.
    :vartype round_trip_time_max: long
    """

    _validation = {
        'next_hop_id': {'readonly': True},
        'link_type': {'readonly': True},
        'issues': {'readonly': True},
        'context': {'readonly': True},
        'resource_id': {'readonly': True},
        'round_trip_time_min': {'readonly': True, 'maximum': 4294967295, 'minimum': 0},
        'round_trip_time_avg': {'readonly': True, 'maximum': 4294967295, 'minimum': 0},
        'round_trip_time_max': {'readonly': True, 'maximum': 4294967295, 'minimum': 0},
    }

    _attribute_map = {
        'next_hop_id': {'key': 'nextHopId', 'type': 'str'},
        'link_type': {'key': 'linkType', 'type': 'str'},
        'issues': {'key': 'issues', 'type': '[ConnectivityIssue]'},
        'context': {'key': 'context', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'round_trip_time_min': {'key': 'properties.roundTripTimeMin', 'type': 'long'},
        'round_trip_time_avg': {'key': 'properties.roundTripTimeAvg', 'type': 'long'},
        'round_trip_time_max': {'key': 'properties.roundTripTimeMax', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(HopLink, self).__init__(**kwargs)
        self.next_hop_id = None
        self.link_type = None
        self.issues = None
        self.context = None
        self.resource_id = None
        self.round_trip_time_min = None
        self.round_trip_time_avg = None
        self.round_trip_time_max = None


class HTTPConfiguration(msrest.serialization.Model):
    """HTTP configuration of the connectivity check.

    :ivar method: HTTP method. Possible values include: "Get".
    :vartype method: str or ~azure.mgmt.network.v2021_02_01.models.HTTPMethod
    :ivar headers: List of HTTP headers.
    :vartype headers: list[~azure.mgmt.network.v2021_02_01.models.HTTPHeader]
    :ivar valid_status_codes: Valid status codes.
    :vartype valid_status_codes: list[int]
    """

    _attribute_map = {
        'method': {'key': 'method', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '[HTTPHeader]'},
        'valid_status_codes': {'key': 'validStatusCodes', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword method: HTTP method. Possible values include: "Get".
        :paramtype method: str or ~azure.mgmt.network.v2021_02_01.models.HTTPMethod
        :keyword headers: List of HTTP headers.
        :paramtype headers: list[~azure.mgmt.network.v2021_02_01.models.HTTPHeader]
        :keyword valid_status_codes: Valid status codes.
        :paramtype valid_status_codes: list[int]
        """
        super(HTTPConfiguration, self).__init__(**kwargs)
        self.method = kwargs.get('method', None)
        self.headers = kwargs.get('headers', None)
        self.valid_status_codes = kwargs.get('valid_status_codes', None)


class HTTPHeader(msrest.serialization.Model):
    """The HTTP header.

    :ivar name: The name in HTTP header.
    :vartype name: str
    :ivar value: The value in HTTP header.
    :vartype value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name in HTTP header.
        :paramtype name: str
        :keyword value: The value in HTTP header.
        :paramtype value: str
        """
        super(HTTPHeader, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class HubIPAddresses(msrest.serialization.Model):
    """IP addresses associated with azure firewall.

    :ivar public_i_ps: Public IP addresses associated with azure firewall.
    :vartype public_i_ps: ~azure.mgmt.network.v2021_02_01.models.HubPublicIPAddresses
    :ivar private_ip_address: Private IP Address associated with azure firewall.
    :vartype private_ip_address: str
    """

    _attribute_map = {
        'public_i_ps': {'key': 'publicIPs', 'type': 'HubPublicIPAddresses'},
        'private_ip_address': {'key': 'privateIPAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword public_i_ps: Public IP addresses associated with azure firewall.
        :paramtype public_i_ps: ~azure.mgmt.network.v2021_02_01.models.HubPublicIPAddresses
        :keyword private_ip_address: Private IP Address associated with azure firewall.
        :paramtype private_ip_address: str
        """
        super(HubIPAddresses, self).__init__(**kwargs)
        self.public_i_ps = kwargs.get('public_i_ps', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)


class HubIpConfiguration(SubResource):
    """IpConfigurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the Ip Configuration.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Ipconfiguration type.
    :vartype type: str
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: The reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar public_ip_address: The reference to the public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar provisioning_state: The provisioning state of the IP configuration resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the Ip Configuration.
        :paramtype name: str
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: The reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword public_ip_address: The reference to the public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        """
        super(HubIpConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class HubPublicIPAddresses(msrest.serialization.Model):
    """Public IP addresses associated with azure firewall.

    :ivar addresses: The list of Public IP addresses associated with azure firewall or IP addresses
     to be retained.
    :vartype addresses: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallPublicIPAddress]
    :ivar count: The number of Public IP addresses associated with azure firewall.
    :vartype count: int
    """

    _attribute_map = {
        'addresses': {'key': 'addresses', 'type': '[AzureFirewallPublicIPAddress]'},
        'count': {'key': 'count', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword addresses: The list of Public IP addresses associated with azure firewall or IP
         addresses to be retained.
        :paramtype addresses: list[~azure.mgmt.network.v2021_02_01.models.AzureFirewallPublicIPAddress]
        :keyword count: The number of Public IP addresses associated with azure firewall.
        :paramtype count: int
        """
        super(HubPublicIPAddresses, self).__init__(**kwargs)
        self.addresses = kwargs.get('addresses', None)
        self.count = kwargs.get('count', None)


class HubRoute(msrest.serialization.Model):
    """RouteTable route.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name of the Route that is unique within a RouteTable. This name can
     be used to access this route.
    :vartype name: str
    :ivar destination_type: Required. The type of destinations (eg: CIDR, ResourceId, Service).
    :vartype destination_type: str
    :ivar destinations: Required. List of all destinations.
    :vartype destinations: list[str]
    :ivar next_hop_type: Required. The type of next hop (eg: ResourceId).
    :vartype next_hop_type: str
    :ivar next_hop: Required. NextHop resource ID.
    :vartype next_hop: str
    """

    _validation = {
        'name': {'required': True},
        'destination_type': {'required': True},
        'destinations': {'required': True},
        'next_hop_type': {'required': True},
        'next_hop': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'destination_type': {'key': 'destinationType', 'type': 'str'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The name of the Route that is unique within a RouteTable. This name
         can be used to access this route.
        :paramtype name: str
        :keyword destination_type: Required. The type of destinations (eg: CIDR, ResourceId, Service).
        :paramtype destination_type: str
        :keyword destinations: Required. List of all destinations.
        :paramtype destinations: list[str]
        :keyword next_hop_type: Required. The type of next hop (eg: ResourceId).
        :paramtype next_hop_type: str
        :keyword next_hop: Required. NextHop resource ID.
        :paramtype next_hop: str
        """
        super(HubRoute, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.destination_type = kwargs['destination_type']
        self.destinations = kwargs['destinations']
        self.next_hop_type = kwargs['next_hop_type']
        self.next_hop = kwargs['next_hop']


class HubRouteTable(SubResource):
    """RouteTable resource in a virtual hub.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar routes: List of all routes.
    :vartype routes: list[~azure.mgmt.network.v2021_02_01.models.HubRoute]
    :ivar labels: List of labels associated with this route table.
    :vartype labels: list[str]
    :ivar associated_connections: List of all connections associated with this route table.
    :vartype associated_connections: list[str]
    :ivar propagating_connections: List of all connections that advertise to this route table.
    :vartype propagating_connections: list[str]
    :ivar provisioning_state: The provisioning state of the RouteTable resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'associated_connections': {'readonly': True},
        'propagating_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[HubRoute]'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'associated_connections': {'key': 'properties.associatedConnections', 'type': '[str]'},
        'propagating_connections': {'key': 'properties.propagatingConnections', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword routes: List of all routes.
        :paramtype routes: list[~azure.mgmt.network.v2021_02_01.models.HubRoute]
        :keyword labels: List of labels associated with this route table.
        :paramtype labels: list[str]
        """
        super(HubRouteTable, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.routes = kwargs.get('routes', None)
        self.labels = kwargs.get('labels', None)
        self.associated_connections = None
        self.propagating_connections = None
        self.provisioning_state = None


class HubVirtualNetworkConnection(SubResource):
    """HubVirtualNetworkConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar remote_virtual_network: Reference to the remote virtual network.
    :vartype remote_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar allow_hub_to_remote_vnet_transit: Deprecated: VirtualHub to RemoteVnet transit to enabled
     or not.
    :vartype allow_hub_to_remote_vnet_transit: bool
    :ivar allow_remote_vnet_to_use_hub_vnet_gateways: Deprecated: Allow RemoteVnet to use Virtual
     Hub's gateways.
    :vartype allow_remote_vnet_to_use_hub_vnet_gateways: bool
    :ivar enable_internet_security: Enable internet security.
    :vartype enable_internet_security: bool
    :ivar routing_configuration: The Routing Configuration indicating the associated and propagated
     route tables on this connection.
    :vartype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
    :ivar provisioning_state: The provisioning state of the hub virtual network connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_virtual_network': {'key': 'properties.remoteVirtualNetwork', 'type': 'SubResource'},
        'allow_hub_to_remote_vnet_transit': {'key': 'properties.allowHubToRemoteVnetTransit', 'type': 'bool'},
        'allow_remote_vnet_to_use_hub_vnet_gateways': {'key': 'properties.allowRemoteVnetToUseHubVnetGateways', 'type': 'bool'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword remote_virtual_network: Reference to the remote virtual network.
        :paramtype remote_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword allow_hub_to_remote_vnet_transit: Deprecated: VirtualHub to RemoteVnet transit to
         enabled or not.
        :paramtype allow_hub_to_remote_vnet_transit: bool
        :keyword allow_remote_vnet_to_use_hub_vnet_gateways: Deprecated: Allow RemoteVnet to use
         Virtual Hub's gateways.
        :paramtype allow_remote_vnet_to_use_hub_vnet_gateways: bool
        :keyword enable_internet_security: Enable internet security.
        :paramtype enable_internet_security: bool
        :keyword routing_configuration: The Routing Configuration indicating the associated and
         propagated route tables on this connection.
        :paramtype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
        """
        super(HubVirtualNetworkConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.remote_virtual_network = kwargs.get('remote_virtual_network', None)
        self.allow_hub_to_remote_vnet_transit = kwargs.get('allow_hub_to_remote_vnet_transit', None)
        self.allow_remote_vnet_to_use_hub_vnet_gateways = kwargs.get('allow_remote_vnet_to_use_hub_vnet_gateways', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)
        self.provisioning_state = None


class InboundNatPool(SubResource):
    """Inbound NAT pool of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of inbound NAT pools used by
     the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar protocol: The reference to the transport protocol used by the inbound NAT pool. Possible
     values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
    :ivar frontend_port_range_start: The first port number in the range of external ports that will
     be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
     between 1 and 65534.
    :vartype frontend_port_range_start: int
    :ivar frontend_port_range_end: The last port number in the range of external ports that will be
     used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
     between 1 and 65535.
    :vartype frontend_port_range_end: int
    :ivar backend_port: The port used for internal connections on the endpoint. Acceptable values
     are between 1 and 65535.
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
     connection termination. This element is only used when the protocol is set to TCP.
    :vartype enable_tcp_reset: bool
    :ivar provisioning_state: The provisioning state of the inbound NAT pool resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'frontend_port_range_start': {'key': 'properties.frontendPortRangeStart', 'type': 'int'},
        'frontend_port_range_end': {'key': 'properties.frontendPortRangeEnd', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'enable_tcp_reset': {'key': 'properties.enableTcpReset', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of inbound NAT pools used
         by the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protocol: The reference to the transport protocol used by the inbound NAT pool.
         Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
        :keyword frontend_port_range_start: The first port number in the range of external ports that
         will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values
         range between 1 and 65534.
        :paramtype frontend_port_range_start: int
        :keyword frontend_port_range_end: The last port number in the range of external ports that will
         be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
         between 1 and 65535.
        :paramtype frontend_port_range_end: int
        :keyword backend_port: The port used for internal connections on the endpoint. Acceptable
         values are between 1 and 65535.
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or
         unexpected connection termination. This element is only used when the protocol is set to TCP.
        :paramtype enable_tcp_reset: bool
        """
        super(InboundNatPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.protocol = kwargs.get('protocol', None)
        self.frontend_port_range_start = kwargs.get('frontend_port_range_start', None)
        self.frontend_port_range_end = kwargs.get('frontend_port_range_end', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.enable_tcp_reset = kwargs.get('enable_tcp_reset', None)
        self.provisioning_state = None


class InboundNatRule(SubResource):
    """Inbound NAT rule of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of inbound NAT rules used by
     the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_ip_configuration: A reference to a private IP address defined on a network
     interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations
     is forwarded to the backend IP.
    :vartype backend_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration
    :ivar protocol: The reference to the transport protocol used by the load balancing rule.
     Possible values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
    :ivar frontend_port: The port for the external endpoint. Port numbers for each rule must be
     unique within the Load Balancer. Acceptable values range from 1 to 65534.
    :vartype frontend_port: int
    :ivar backend_port: The port used for the internal endpoint. Acceptable values range from 1 to
     65535.
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
     connection termination. This element is only used when the protocol is set to TCP.
    :vartype enable_tcp_reset: bool
    :ivar provisioning_state: The provisioning state of the inbound NAT rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configuration': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'backend_ip_configuration': {'key': 'properties.backendIPConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'enable_tcp_reset': {'key': 'properties.enableTcpReset', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of inbound NAT rules used
         by the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protocol: The reference to the transport protocol used by the load balancing rule.
         Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
        :keyword frontend_port: The port for the external endpoint. Port numbers for each rule must be
         unique within the Load Balancer. Acceptable values range from 1 to 65534.
        :paramtype frontend_port: int
        :keyword backend_port: The port used for the internal endpoint. Acceptable values range from 1
         to 65535.
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or
         unexpected connection termination. This element is only used when the protocol is set to TCP.
        :paramtype enable_tcp_reset: bool
        """
        super(InboundNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.backend_ip_configuration = None
        self.protocol = kwargs.get('protocol', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.enable_tcp_reset = kwargs.get('enable_tcp_reset', None)
        self.provisioning_state = None


class InboundNatRuleListResult(msrest.serialization.Model):
    """Response for ListInboundNatRule API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of inbound nat rules in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[InboundNatRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of inbound nat rules in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
        """
        super(InboundNatRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class InboundSecurityRule(SubResource):
    """NVA Inbound Security Rule resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of security rule collection.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: NVA inbound security rule type.
    :vartype type: str
    :ivar rules: List of allowed rules.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.InboundSecurityRules]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rules': {'key': 'properties.rules', 'type': '[InboundSecurityRules]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of security rule collection.
        :paramtype name: str
        :keyword rules: List of allowed rules.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.InboundSecurityRules]
        """
        super(InboundSecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = None


class InboundSecurityRules(msrest.serialization.Model):
    """Properties of the Inbound Security Rules resource.

    :ivar protocol: Protocol. This should be either TCP or UDP. Possible values include: "TCP",
     "UDP".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.InboundSecurityRulesProtocol
    :ivar source_address_prefix: The CIDR or source IP range. Only /30, /31 and /32 Ip ranges are
     allowed.
    :vartype source_address_prefix: str
    :ivar destination_port_range: NVA port ranges to be opened up. One needs to provide specific
     ports.
    :vartype destination_port_range: int
    """

    _validation = {
        'destination_port_range': {'maximum': 65535, 'minimum': 0},
    }

    _attribute_map = {
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_address_prefix': {'key': 'sourceAddressPrefix', 'type': 'str'},
        'destination_port_range': {'key': 'destinationPortRange', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol: Protocol. This should be either TCP or UDP. Possible values include: "TCP",
         "UDP".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.InboundSecurityRulesProtocol
        :keyword source_address_prefix: The CIDR or source IP range. Only /30, /31 and /32 Ip ranges
         are allowed.
        :paramtype source_address_prefix: str
        :keyword destination_port_range: NVA port ranges to be opened up. One needs to provide specific
         ports.
        :paramtype destination_port_range: int
        """
        super(InboundSecurityRules, self).__init__(**kwargs)
        self.protocol = kwargs.get('protocol', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)


class IPAddressAvailabilityResult(msrest.serialization.Model):
    """Response for CheckIPAddressAvailability API service call.

    :ivar available: Private IP address availability.
    :vartype available: bool
    :ivar available_ip_addresses: Contains other available private IP addresses if the asked for
     address is taken.
    :vartype available_ip_addresses: list[str]
    :ivar is_platform_reserved: Private IP address platform reserved.
    :vartype is_platform_reserved: bool
    """

    _attribute_map = {
        'available': {'key': 'available', 'type': 'bool'},
        'available_ip_addresses': {'key': 'availableIPAddresses', 'type': '[str]'},
        'is_platform_reserved': {'key': 'isPlatformReserved', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword available: Private IP address availability.
        :paramtype available: bool
        :keyword available_ip_addresses: Contains other available private IP addresses if the asked for
         address is taken.
        :paramtype available_ip_addresses: list[str]
        :keyword is_platform_reserved: Private IP address platform reserved.
        :paramtype is_platform_reserved: bool
        """
        super(IPAddressAvailabilityResult, self).__init__(**kwargs)
        self.available = kwargs.get('available', None)
        self.available_ip_addresses = kwargs.get('available_ip_addresses', None)
        self.is_platform_reserved = kwargs.get('is_platform_reserved', None)


class IpAllocation(Resource):
    """IpAllocation resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar subnet: The Subnet that using the prefix of this IpAllocation resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar virtual_network: The VirtualNetwork that using the prefix of this IpAllocation resource.
    :vartype virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar type_properties_type: The type for the IpAllocation. Possible values include:
     "Undefined", "Hypernet".
    :vartype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.IpAllocationType
    :ivar prefix: The address prefix for the IpAllocation.
    :vartype prefix: str
    :ivar prefix_length: The address prefix length for the IpAllocation.
    :vartype prefix_length: int
    :ivar prefix_type: The address prefix Type for the IpAllocation. Possible values include:
     "IPv4", "IPv6".
    :vartype prefix_type: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    :ivar ipam_allocation_id: The IPAM allocation ID.
    :vartype ipam_allocation_id: str
    :ivar allocation_tags: IpAllocation tags.
    :vartype allocation_tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'subnet': {'readonly': True},
        'virtual_network': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'virtual_network': {'key': 'properties.virtualNetwork', 'type': 'SubResource'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'prefix': {'key': 'properties.prefix', 'type': 'str'},
        'prefix_length': {'key': 'properties.prefixLength', 'type': 'int'},
        'prefix_type': {'key': 'properties.prefixType', 'type': 'str'},
        'ipam_allocation_id': {'key': 'properties.ipamAllocationId', 'type': 'str'},
        'allocation_tags': {'key': 'properties.allocationTags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword type_properties_type: The type for the IpAllocation. Possible values include:
         "Undefined", "Hypernet".
        :paramtype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.IpAllocationType
        :keyword prefix: The address prefix for the IpAllocation.
        :paramtype prefix: str
        :keyword prefix_length: The address prefix length for the IpAllocation.
        :paramtype prefix_length: int
        :keyword prefix_type: The address prefix Type for the IpAllocation. Possible values include:
         "IPv4", "IPv6".
        :paramtype prefix_type: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        :keyword ipam_allocation_id: The IPAM allocation ID.
        :paramtype ipam_allocation_id: str
        :keyword allocation_tags: IpAllocation tags.
        :paramtype allocation_tags: dict[str, str]
        """
        super(IpAllocation, self).__init__(**kwargs)
        self.etag = None
        self.subnet = None
        self.virtual_network = None
        self.type_properties_type = kwargs.get('type_properties_type', None)
        self.prefix = kwargs.get('prefix', None)
        self.prefix_length = kwargs.get('prefix_length', 0)
        self.prefix_type = kwargs.get('prefix_type', None)
        self.ipam_allocation_id = kwargs.get('ipam_allocation_id', None)
        self.allocation_tags = kwargs.get('allocation_tags', None)


class IpAllocationListResult(msrest.serialization.Model):
    """Response for the ListIpAllocations API service call.

    :ivar value: A list of IpAllocation resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.IpAllocation]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IpAllocation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of IpAllocation resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.IpAllocation]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(IpAllocationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class IPConfiguration(SubResource):
    """IP configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: The reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar public_ip_address: The reference to the public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar provisioning_state: The provisioning state of the IP configuration resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: The reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword public_ip_address: The reference to the public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        """
        super(IPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class IPConfigurationBgpPeeringAddress(msrest.serialization.Model):
    """Properties of IPConfigurationBgpPeeringAddress.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar ipconfiguration_id: The ID of IP configuration which belongs to gateway.
    :vartype ipconfiguration_id: str
    :ivar default_bgp_ip_addresses: The list of default BGP peering addresses which belong to IP
     configuration.
    :vartype default_bgp_ip_addresses: list[str]
    :ivar custom_bgp_ip_addresses: The list of custom BGP peering addresses which belong to IP
     configuration.
    :vartype custom_bgp_ip_addresses: list[str]
    :ivar tunnel_ip_addresses: The list of tunnel public IP addresses which belong to IP
     configuration.
    :vartype tunnel_ip_addresses: list[str]
    """

    _validation = {
        'default_bgp_ip_addresses': {'readonly': True},
        'tunnel_ip_addresses': {'readonly': True},
    }

    _attribute_map = {
        'ipconfiguration_id': {'key': 'ipconfigurationId', 'type': 'str'},
        'default_bgp_ip_addresses': {'key': 'defaultBgpIpAddresses', 'type': '[str]'},
        'custom_bgp_ip_addresses': {'key': 'customBgpIpAddresses', 'type': '[str]'},
        'tunnel_ip_addresses': {'key': 'tunnelIpAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ipconfiguration_id: The ID of IP configuration which belongs to gateway.
        :paramtype ipconfiguration_id: str
        :keyword custom_bgp_ip_addresses: The list of custom BGP peering addresses which belong to IP
         configuration.
        :paramtype custom_bgp_ip_addresses: list[str]
        """
        super(IPConfigurationBgpPeeringAddress, self).__init__(**kwargs)
        self.ipconfiguration_id = kwargs.get('ipconfiguration_id', None)
        self.default_bgp_ip_addresses = None
        self.custom_bgp_ip_addresses = kwargs.get('custom_bgp_ip_addresses', None)
        self.tunnel_ip_addresses = None


class IPConfigurationProfile(SubResource):
    """IP configuration profile child resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource. This name can be used to access the resource.
    :vartype name: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar subnet: The reference to the subnet resource to create a container network interface ip
     configuration.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar provisioning_state: The provisioning state of the IP configuration profile resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource. This name can be used to access the resource.
        :paramtype name: str
        :keyword subnet: The reference to the subnet resource to create a container network interface
         ip configuration.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        """
        super(IPConfigurationProfile, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.subnet = kwargs.get('subnet', None)
        self.provisioning_state = None


class IpGroup(Resource):
    """The IpGroups resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the IpGroups resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar ip_addresses: IpAddresses/IpAddressPrefixes in the IpGroups resource.
    :vartype ip_addresses: list[str]
    :ivar firewalls: List of references to Firewall resources that this IpGroups is associated
     with.
    :vartype firewalls: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar firewall_policies: List of references to Firewall Policies resources that this IpGroups
     is associated with.
    :vartype firewall_policies: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'firewalls': {'readonly': True},
        'firewall_policies': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'ip_addresses': {'key': 'properties.ipAddresses', 'type': '[str]'},
        'firewalls': {'key': 'properties.firewalls', 'type': '[SubResource]'},
        'firewall_policies': {'key': 'properties.firewallPolicies', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword ip_addresses: IpAddresses/IpAddressPrefixes in the IpGroups resource.
        :paramtype ip_addresses: list[str]
        """
        super(IpGroup, self).__init__(**kwargs)
        self.etag = None
        self.provisioning_state = None
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.firewalls = None
        self.firewall_policies = None


class IpGroupListResult(msrest.serialization.Model):
    """Response for the ListIpGroups API service call.

    :ivar value: The list of IpGroups information resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.IpGroup]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IpGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of IpGroups information resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.IpGroup]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(IpGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class IpsecPolicy(msrest.serialization.Model):
    """An IPSec Policy configuration for a virtual network gateway connection.

    All required parameters must be populated in order to send to Azure.

    :ivar sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode or
     Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
    :vartype sa_life_time_seconds: int
    :ivar sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
    :vartype sa_data_size_kilobytes: int
    :ivar ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible values
     include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
     "GCMAES256".
    :vartype ipsec_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IpsecEncryption
    :ivar ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible values
     include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
    :vartype ipsec_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IpsecIntegrity
    :ivar ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
     include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
    :vartype ike_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IkeEncryption
    :ivar ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
     include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
    :vartype ike_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IkeIntegrity
    :ivar dh_group: Required. The DH Group used in IKE Phase 1 for initial SA. Possible values
     include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
     "DHGroup24".
    :vartype dh_group: str or ~azure.mgmt.network.v2021_02_01.models.DhGroup
    :ivar pfs_group: Required. The Pfs Group used in IKE Phase 2 for new child SA. Possible values
     include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM".
    :vartype pfs_group: str or ~azure.mgmt.network.v2021_02_01.models.PfsGroup
    """

    _validation = {
        'sa_life_time_seconds': {'required': True},
        'sa_data_size_kilobytes': {'required': True},
        'ipsec_encryption': {'required': True},
        'ipsec_integrity': {'required': True},
        'ike_encryption': {'required': True},
        'ike_integrity': {'required': True},
        'dh_group': {'required': True},
        'pfs_group': {'required': True},
    }

    _attribute_map = {
        'sa_life_time_seconds': {'key': 'saLifeTimeSeconds', 'type': 'int'},
        'sa_data_size_kilobytes': {'key': 'saDataSizeKilobytes', 'type': 'int'},
        'ipsec_encryption': {'key': 'ipsecEncryption', 'type': 'str'},
        'ipsec_integrity': {'key': 'ipsecIntegrity', 'type': 'str'},
        'ike_encryption': {'key': 'ikeEncryption', 'type': 'str'},
        'ike_integrity': {'key': 'ikeIntegrity', 'type': 'str'},
        'dh_group': {'key': 'dhGroup', 'type': 'str'},
        'pfs_group': {'key': 'pfsGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode
         or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
        :paramtype sa_life_time_seconds: int
        :keyword sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick
         Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
        :paramtype sa_data_size_kilobytes: int
        :keyword ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible
         values include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
         "GCMAES256".
        :paramtype ipsec_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IpsecEncryption
        :keyword ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible
         values include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
        :paramtype ipsec_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IpsecIntegrity
        :keyword ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
         include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
        :paramtype ike_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IkeEncryption
        :keyword ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
         include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
        :paramtype ike_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IkeIntegrity
        :keyword dh_group: Required. The DH Group used in IKE Phase 1 for initial SA. Possible values
         include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
         "DHGroup24".
        :paramtype dh_group: str or ~azure.mgmt.network.v2021_02_01.models.DhGroup
        :keyword pfs_group: Required. The Pfs Group used in IKE Phase 2 for new child SA. Possible
         values include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14",
         "PFSMM".
        :paramtype pfs_group: str or ~azure.mgmt.network.v2021_02_01.models.PfsGroup
        """
        super(IpsecPolicy, self).__init__(**kwargs)
        self.sa_life_time_seconds = kwargs['sa_life_time_seconds']
        self.sa_data_size_kilobytes = kwargs['sa_data_size_kilobytes']
        self.ipsec_encryption = kwargs['ipsec_encryption']
        self.ipsec_integrity = kwargs['ipsec_integrity']
        self.ike_encryption = kwargs['ike_encryption']
        self.ike_integrity = kwargs['ike_integrity']
        self.dh_group = kwargs['dh_group']
        self.pfs_group = kwargs['pfs_group']


class IpTag(msrest.serialization.Model):
    """Contains the IpTag associated with the object.

    :ivar ip_tag_type: The IP tag type. Example: FirstPartyUsage.
    :vartype ip_tag_type: str
    :ivar tag: The value of the IP tag associated with the public IP. Example: SQL.
    :vartype tag: str
    """

    _attribute_map = {
        'ip_tag_type': {'key': 'ipTagType', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ip_tag_type: The IP tag type. Example: FirstPartyUsage.
        :paramtype ip_tag_type: str
        :keyword tag: The value of the IP tag associated with the public IP. Example: SQL.
        :paramtype tag: str
        """
        super(IpTag, self).__init__(**kwargs)
        self.ip_tag_type = kwargs.get('ip_tag_type', None)
        self.tag = kwargs.get('tag', None)


class Ipv6CircuitConnectionConfig(msrest.serialization.Model):
    """IPv6 Circuit Connection properties for global reach.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar address_prefix: /125 IP address space to carve out customer addresses for global reach.
    :vartype address_prefix: str
    :ivar circuit_connection_status: Express Route Circuit connection state. Possible values
     include: "Connected", "Connecting", "Disconnected".
    :vartype circuit_connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.CircuitConnectionStatus
    """

    _validation = {
        'circuit_connection_status': {'readonly': True},
    }

    _attribute_map = {
        'address_prefix': {'key': 'addressPrefix', 'type': 'str'},
        'circuit_connection_status': {'key': 'circuitConnectionStatus', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_prefix: /125 IP address space to carve out customer addresses for global
         reach.
        :paramtype address_prefix: str
        """
        super(Ipv6CircuitConnectionConfig, self).__init__(**kwargs)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.circuit_connection_status = None


class Ipv6ExpressRouteCircuitPeeringConfig(msrest.serialization.Model):
    """Contains IPv6 peering config.

    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
    :ivar route_filter: The reference to the RouteFilter resource.
    :vartype route_filter: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar state: The state of peering. Possible values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringState
    """

    _attribute_map = {
        'primary_peer_address_prefix': {'key': 'primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'secondaryPeerAddressPrefix', 'type': 'str'},
        'microsoft_peering_config': {'key': 'microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'route_filter': {'key': 'routeFilter', 'type': 'SubResource'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringConfig
        :keyword route_filter: The reference to the RouteFilter resource.
        :paramtype route_filter: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword state: The state of peering. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeeringState
        """
        super(Ipv6ExpressRouteCircuitPeeringConfig, self).__init__(**kwargs)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.route_filter = kwargs.get('route_filter', None)
        self.state = kwargs.get('state', None)


class ListHubRouteTablesResult(msrest.serialization.Model):
    """List of RouteTables and a URL nextLink to get the next set of results.

    :ivar value: List of RouteTables.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.HubRouteTable]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubRouteTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of RouteTables.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.HubRouteTable]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListHubRouteTablesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListHubVirtualNetworkConnectionsResult(msrest.serialization.Model):
    """List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.

    :ivar value: List of HubVirtualNetworkConnections.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.HubVirtualNetworkConnection]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubVirtualNetworkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of HubVirtualNetworkConnections.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.HubVirtualNetworkConnection]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListHubVirtualNetworkConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListP2SVpnGatewaysResult(msrest.serialization.Model):
    """Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.

    :ivar value: List of P2SVpnGateways.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.P2SVpnGateway]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[P2SVpnGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of P2SVpnGateways.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.P2SVpnGateway]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListP2SVpnGatewaysResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubBgpConnectionResults(msrest.serialization.Model):
    """VirtualHubBgpConnections list.

    :ivar value: The list of VirtualHubBgpConnections.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BgpConnection]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of VirtualHubBgpConnections.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BgpConnection]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ListVirtualHubBgpConnectionResults, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubIpConfigurationResults(msrest.serialization.Model):
    """VirtualHubIpConfigurations list.

    :ivar value: The list of VirtualHubIpConfigurations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.HubIpConfiguration]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubIpConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of VirtualHubIpConfigurations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.HubIpConfiguration]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ListVirtualHubIpConfigurationResults, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubRouteTableV2SResult(msrest.serialization.Model):
    """List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.

    :ivar value: List of VirtualHubRouteTableV2s.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTableV2]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHubRouteTableV2]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualHubRouteTableV2s.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTableV2]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualHubRouteTableV2SResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubsResult(msrest.serialization.Model):
    """Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.

    :ivar value: List of VirtualHubs.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHub]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHub]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualHubs.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHub]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualHubsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualNetworkGatewayNatRulesResult(msrest.serialization.Model):
    """Result of the request to list all nat rules to a virtual network gateway. It contains a list of Nat rules and a URL nextLink to get the next set of results.

    :ivar value: List of Nat Rules.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayNatRule]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGatewayNatRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Nat Rules.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayNatRule]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualNetworkGatewayNatRulesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualWANsResult(msrest.serialization.Model):
    """Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.

    :ivar value: List of VirtualWANs.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualWAN]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualWAN]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualWANs.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualWAN]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualWANsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnConnectionsResult(msrest.serialization.Model):
    """Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.

    :ivar value: List of Vpn Connections.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnConnection]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Vpn Connections.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnConnection]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnGatewayNatRulesResult(msrest.serialization.Model):
    """Result of the request to list all nat rules to a virtual wan vpn gateway. It contains a list of Nat rules and a URL nextLink to get the next set of results.

    :ivar value: List of Nat Rules.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnGatewayNatRule]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnGatewayNatRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Nat Rules.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnGatewayNatRule]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnGatewayNatRulesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnGatewaysResult(msrest.serialization.Model):
    """Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.

    :ivar value: List of VpnGateways.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnGateway]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnGateways.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnGateway]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnGatewaysResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnServerConfigurationsResult(msrest.serialization.Model):
    """Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.

    :ivar value: List of VpnServerConfigurations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfiguration]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnServerConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnServerConfigurations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfiguration]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnServerConfigurationsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSiteLinkConnectionsResult(msrest.serialization.Model):
    """Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.

    :ivar value: List of VpnSiteLinkConnections.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLinkConnection]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSiteLinkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnSiteLinkConnections.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLinkConnection]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnSiteLinkConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSiteLinksResult(msrest.serialization.Model):
    """Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.

    :ivar value: List of VpnSitesLinks.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLink]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSiteLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnSitesLinks.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLink]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnSiteLinksResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSitesResult(msrest.serialization.Model):
    """Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.

    :ivar value: List of VpnSites.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSite]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSite]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnSites.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnSite]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnSitesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class LoadBalancer(Resource):
    """LoadBalancer resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the load balancer.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar sku: The load balancer SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar frontend_ip_configurations: Object representing the frontend IPs to be used for the load
     balancer.
    :vartype frontend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
    :ivar backend_address_pools: Collection of backend address pools used by a load balancer.
    :vartype backend_address_pools: list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
    :ivar load_balancing_rules: Object collection representing the load balancing rules Gets the
     provisioning.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancingRule]
    :ivar probes: Collection of probe objects used in the load balancer.
    :vartype probes: list[~azure.mgmt.network.v2021_02_01.models.Probe]
    :ivar inbound_nat_rules: Collection of inbound NAT Rules used by a load balancer. Defining
     inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT
     pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are
     associated with individual virtual machines cannot reference an Inbound NAT pool. They have to
     reference individual inbound NAT rules.
    :vartype inbound_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
    :ivar inbound_nat_pools: Defines an external port range for inbound NAT to a single backend
     port on NICs associated with a load balancer. Inbound NAT rules are created automatically for
     each NIC associated with the Load Balancer using an external port from this range. Defining an
     Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules.
     Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with
     individual virtual machines cannot reference an inbound NAT pool. They have to reference
     individual inbound NAT rules.
    :vartype inbound_nat_pools: list[~azure.mgmt.network.v2021_02_01.models.InboundNatPool]
    :ivar outbound_rules: The outbound rules.
    :vartype outbound_rules: list[~azure.mgmt.network.v2021_02_01.models.OutboundRule]
    :ivar resource_guid: The resource GUID property of the load balancer resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the load balancer resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'sku': {'key': 'sku', 'type': 'LoadBalancerSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[FrontendIPConfiguration]'},
        'backend_address_pools': {'key': 'properties.backendAddressPools', 'type': '[BackendAddressPool]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[LoadBalancingRule]'},
        'probes': {'key': 'properties.probes', 'type': '[Probe]'},
        'inbound_nat_rules': {'key': 'properties.inboundNatRules', 'type': '[InboundNatRule]'},
        'inbound_nat_pools': {'key': 'properties.inboundNatPools', 'type': '[InboundNatPool]'},
        'outbound_rules': {'key': 'properties.outboundRules', 'type': '[OutboundRule]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the load balancer.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword sku: The load balancer SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSku
        :keyword frontend_ip_configurations: Object representing the frontend IPs to be used for the
         load balancer.
        :paramtype frontend_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
        :keyword backend_address_pools: Collection of backend address pools used by a load balancer.
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
        :keyword load_balancing_rules: Object collection representing the load balancing rules Gets the
         provisioning.
        :paramtype load_balancing_rules: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancingRule]
        :keyword probes: Collection of probe objects used in the load balancer.
        :paramtype probes: list[~azure.mgmt.network.v2021_02_01.models.Probe]
        :keyword inbound_nat_rules: Collection of inbound NAT Rules used by a load balancer. Defining
         inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT
         pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are
         associated with individual virtual machines cannot reference an Inbound NAT pool. They have to
         reference individual inbound NAT rules.
        :paramtype inbound_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
        :keyword inbound_nat_pools: Defines an external port range for inbound NAT to a single backend
         port on NICs associated with a load balancer. Inbound NAT rules are created automatically for
         each NIC associated with the Load Balancer using an external port from this range. Defining an
         Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules.
         Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with
         individual virtual machines cannot reference an inbound NAT pool. They have to reference
         individual inbound NAT rules.
        :paramtype inbound_nat_pools: list[~azure.mgmt.network.v2021_02_01.models.InboundNatPool]
        :keyword outbound_rules: The outbound rules.
        :paramtype outbound_rules: list[~azure.mgmt.network.v2021_02_01.models.OutboundRule]
        """
        super(LoadBalancer, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)
        self.load_balancing_rules = kwargs.get('load_balancing_rules', None)
        self.probes = kwargs.get('probes', None)
        self.inbound_nat_rules = kwargs.get('inbound_nat_rules', None)
        self.inbound_nat_pools = kwargs.get('inbound_nat_pools', None)
        self.outbound_rules = kwargs.get('outbound_rules', None)
        self.resource_guid = None
        self.provisioning_state = None


class LoadBalancerBackendAddress(msrest.serialization.Model):
    """Load balancer backend addresses.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the backend address.
    :vartype name: str
    :ivar virtual_network: Reference to an existing virtual network.
    :vartype virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar subnet: Reference to an existing subnet.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar ip_address: IP Address belonging to the referenced virtual network.
    :vartype ip_address: str
    :ivar network_interface_ip_configuration: Reference to IP address defined in network
     interfaces.
    :vartype network_interface_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar load_balancer_frontend_ip_configuration: Reference to the frontend ip address
     configuration defined in regional loadbalancer.
    :vartype load_balancer_frontend_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _validation = {
        'network_interface_ip_configuration': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'virtual_network': {'key': 'properties.virtualNetwork', 'type': 'SubResource'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'network_interface_ip_configuration': {'key': 'properties.networkInterfaceIPConfiguration', 'type': 'SubResource'},
        'load_balancer_frontend_ip_configuration': {'key': 'properties.loadBalancerFrontendIPConfiguration', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the backend address.
        :paramtype name: str
        :keyword virtual_network: Reference to an existing virtual network.
        :paramtype virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword subnet: Reference to an existing subnet.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword ip_address: IP Address belonging to the referenced virtual network.
        :paramtype ip_address: str
        :keyword load_balancer_frontend_ip_configuration: Reference to the frontend ip address
         configuration defined in regional loadbalancer.
        :paramtype load_balancer_frontend_ip_configuration:
         ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(LoadBalancerBackendAddress, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.virtual_network = kwargs.get('virtual_network', None)
        self.subnet = kwargs.get('subnet', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.network_interface_ip_configuration = None
        self.load_balancer_frontend_ip_configuration = kwargs.get('load_balancer_frontend_ip_configuration', None)


class LoadBalancerBackendAddressPoolListResult(msrest.serialization.Model):
    """Response for ListBackendAddressPool API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of backend address pools in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BackendAddressPool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of backend address pools in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
        """
        super(LoadBalancerBackendAddressPoolListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerFrontendIPConfigurationListResult(msrest.serialization.Model):
    """Response for ListFrontendIPConfiguration API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of frontend IP configurations in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FrontendIPConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of frontend IP configurations in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
        """
        super(LoadBalancerFrontendIPConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerListResult(msrest.serialization.Model):
    """Response for ListLoadBalancers API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancers in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancer]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancers in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancer]
        """
        super(LoadBalancerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerLoadBalancingRuleListResult(msrest.serialization.Model):
    """Response for ListLoadBalancingRule API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancing rules in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancingRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancingRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancing rules in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancingRule]
        """
        super(LoadBalancerLoadBalancingRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerOutboundRuleListResult(msrest.serialization.Model):
    """Response for ListOutboundRule API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of outbound rules in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.OutboundRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OutboundRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of outbound rules in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.OutboundRule]
        """
        super(LoadBalancerOutboundRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerProbeListResult(msrest.serialization.Model):
    """Response for ListProbe API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of probes in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.Probe]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Probe]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of probes in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.Probe]
        """
        super(LoadBalancerProbeListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerSku(msrest.serialization.Model):
    """SKU of a load balancer.

    :ivar name: Name of a load balancer SKU. Possible values include: "Basic", "Standard",
     "Gateway".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSkuName
    :ivar tier: Tier of a load balancer SKU. Possible values include: "Regional", "Global".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSkuTier
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of a load balancer SKU. Possible values include: "Basic", "Standard",
         "Gateway".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSkuName
        :keyword tier: Tier of a load balancer SKU. Possible values include: "Regional", "Global".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.LoadBalancerSkuTier
        """
        super(LoadBalancerSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)


class LoadBalancerVipSwapRequest(msrest.serialization.Model):
    """The request for a VIP swap.

    :ivar frontend_ip_configurations: A list of frontend IP configuration resources that should
     swap VIPs.
    :vartype frontend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.LoadBalancerVipSwapRequestFrontendIPConfiguration]
    """

    _attribute_map = {
        'frontend_ip_configurations': {'key': 'frontendIPConfigurations', 'type': '[LoadBalancerVipSwapRequestFrontendIPConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword frontend_ip_configurations: A list of frontend IP configuration resources that should
         swap VIPs.
        :paramtype frontend_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.LoadBalancerVipSwapRequestFrontendIPConfiguration]
        """
        super(LoadBalancerVipSwapRequest, self).__init__(**kwargs)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)


class LoadBalancerVipSwapRequestFrontendIPConfiguration(msrest.serialization.Model):
    """VIP swap request's frontend IP configuration object.

    :ivar id: The ID of frontend IP configuration resource.
    :vartype id: str
    :ivar public_ip_address: A reference to public IP address resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The ID of frontend IP configuration resource.
        :paramtype id: str
        :keyword public_ip_address: A reference to public IP address resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(LoadBalancerVipSwapRequestFrontendIPConfiguration, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)


class LoadBalancingRule(SubResource):
    """A load balancing rule for a load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of load balancing rules used
     by the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_address_pool: A reference to a pool of DIPs. Inbound traffic is randomly load
     balanced across IPs in the backend IPs.
    :vartype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar backend_address_pools: An array of references to pool of DIPs.
    :vartype backend_address_pools: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar probe: The reference to the load balancer probe used by the load balancing rule.
    :vartype probe: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar protocol: The reference to the transport protocol used by the load balancing rule.
     Possible values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
    :ivar load_distribution: The load distribution policy for this rule. Possible values include:
     "Default", "SourceIP", "SourceIPProtocol".
    :vartype load_distribution: str or ~azure.mgmt.network.v2021_02_01.models.LoadDistribution
    :ivar frontend_port: The port for the external endpoint. Port numbers for each rule must be
     unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0
     enables "Any Port".
    :vartype frontend_port: int
    :ivar backend_port: The port used for internal connections on the endpoint. Acceptable values
     are between 0 and 65535. Note that value 0 enables "Any Port".
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
     connection termination. This element is only used when the protocol is set to TCP.
    :vartype enable_tcp_reset: bool
    :ivar disable_outbound_snat: Configures SNAT for the VMs in the backend pool to use the
     publicIP address specified in the frontend of the load balancing rule.
    :vartype disable_outbound_snat: bool
    :ivar provisioning_state: The provisioning state of the load balancing rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'backend_address_pools': {'key': 'properties.backendAddressPools', 'type': '[SubResource]'},
        'probe': {'key': 'properties.probe', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'load_distribution': {'key': 'properties.loadDistribution', 'type': 'str'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'enable_tcp_reset': {'key': 'properties.enableTcpReset', 'type': 'bool'},
        'disable_outbound_snat': {'key': 'properties.disableOutboundSnat', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of load balancing rules
         used by the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword backend_address_pool: A reference to a pool of DIPs. Inbound traffic is randomly load
         balanced across IPs in the backend IPs.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword backend_address_pools: An array of references to pool of DIPs.
        :paramtype backend_address_pools: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword probe: The reference to the load balancer probe used by the load balancing rule.
        :paramtype probe: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protocol: The reference to the transport protocol used by the load balancing rule.
         Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.TransportProtocol
        :keyword load_distribution: The load distribution policy for this rule. Possible values
         include: "Default", "SourceIP", "SourceIPProtocol".
        :paramtype load_distribution: str or ~azure.mgmt.network.v2021_02_01.models.LoadDistribution
        :keyword frontend_port: The port for the external endpoint. Port numbers for each rule must be
         unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0
         enables "Any Port".
        :paramtype frontend_port: int
        :keyword backend_port: The port used for internal connections on the endpoint. Acceptable
         values are between 0 and 65535. Note that value 0 enables "Any Port".
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or
         unexpected connection termination. This element is only used when the protocol is set to TCP.
        :paramtype enable_tcp_reset: bool
        :keyword disable_outbound_snat: Configures SNAT for the VMs in the backend pool to use the
         publicIP address specified in the frontend of the load balancing rule.
        :paramtype disable_outbound_snat: bool
        """
        super(LoadBalancingRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)
        self.probe = kwargs.get('probe', None)
        self.protocol = kwargs.get('protocol', None)
        self.load_distribution = kwargs.get('load_distribution', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.enable_tcp_reset = kwargs.get('enable_tcp_reset', None)
        self.disable_outbound_snat = kwargs.get('disable_outbound_snat', None)
        self.provisioning_state = None


class LocalNetworkGateway(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar local_network_address_space: Local network site address space.
    :vartype local_network_address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar gateway_ip_address: IP address of local network gateway.
    :vartype gateway_ip_address: str
    :ivar fqdn: FQDN of local network gateway.
    :vartype fqdn: str
    :ivar bgp_settings: Local network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
    :ivar resource_guid: The resource GUID property of the local network gateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the local network gateway resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'local_network_address_space': {'key': 'properties.localNetworkAddressSpace', 'type': 'AddressSpace'},
        'gateway_ip_address': {'key': 'properties.gatewayIpAddress', 'type': 'str'},
        'fqdn': {'key': 'properties.fqdn', 'type': 'str'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword local_network_address_space: Local network site address space.
        :paramtype local_network_address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword gateway_ip_address: IP address of local network gateway.
        :paramtype gateway_ip_address: str
        :keyword fqdn: FQDN of local network gateway.
        :paramtype fqdn: str
        :keyword bgp_settings: Local network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
        """
        super(LocalNetworkGateway, self).__init__(**kwargs)
        self.etag = None
        self.local_network_address_space = kwargs.get('local_network_address_space', None)
        self.gateway_ip_address = kwargs.get('gateway_ip_address', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.resource_guid = None
        self.provisioning_state = None


class LocalNetworkGatewayListResult(msrest.serialization.Model):
    """Response for ListLocalNetworkGateways API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of local network gateways that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.LocalNetworkGateway]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LocalNetworkGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of local network gateways that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.LocalNetworkGateway]
        """
        super(LocalNetworkGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LogSpecification(msrest.serialization.Model):
    """Description of logging specification.

    :ivar name: The name of the specification.
    :vartype name: str
    :ivar display_name: The display name of the specification.
    :vartype display_name: str
    :ivar blob_duration: Duration of the blob.
    :vartype blob_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the specification.
        :paramtype name: str
        :keyword display_name: The display name of the specification.
        :paramtype display_name: str
        :keyword blob_duration: Duration of the blob.
        :paramtype blob_duration: str
        """
        super(LogSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class ManagedRuleGroupOverride(msrest.serialization.Model):
    """Defines a managed rule group override setting.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. The managed rule group to override.
    :vartype rule_group_name: str
    :ivar rules: List of rules that will be disabled. If none specified, all rules in the group
     will be disabled.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleOverride]
    """

    _validation = {
        'rule_group_name': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[ManagedRuleOverride]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. The managed rule group to override.
        :paramtype rule_group_name: str
        :keyword rules: List of rules that will be disabled. If none specified, all rules in the group
         will be disabled.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleOverride]
        """
        super(ManagedRuleGroupOverride, self).__init__(**kwargs)
        self.rule_group_name = kwargs['rule_group_name']
        self.rules = kwargs.get('rules', None)


class ManagedRuleOverride(msrest.serialization.Model):
    """Defines a managed rule group override setting.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_id: Required. Identifier for the managed rule.
    :vartype rule_id: str
    :ivar state: The state of the managed rule. Defaults to Disabled if not specified. Possible
     values include: "Disabled".
    :vartype state: str or ~azure.mgmt.network.v2021_02_01.models.ManagedRuleEnabledState
    """

    _validation = {
        'rule_id': {'required': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_id: Required. Identifier for the managed rule.
        :paramtype rule_id: str
        :keyword state: The state of the managed rule. Defaults to Disabled if not specified. Possible
         values include: "Disabled".
        :paramtype state: str or ~azure.mgmt.network.v2021_02_01.models.ManagedRuleEnabledState
        """
        super(ManagedRuleOverride, self).__init__(**kwargs)
        self.rule_id = kwargs['rule_id']
        self.state = kwargs.get('state', None)


class ManagedRulesDefinition(msrest.serialization.Model):
    """Allow to exclude some variable satisfy the condition for the WAF check.

    All required parameters must be populated in order to send to Azure.

    :ivar exclusions: The Exclusions that are applied on the policy.
    :vartype exclusions: list[~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntry]
    :ivar managed_rule_sets: Required. The managed rule sets that are associated with the policy.
    :vartype managed_rule_sets: list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleSet]
    """

    _validation = {
        'managed_rule_sets': {'required': True},
    }

    _attribute_map = {
        'exclusions': {'key': 'exclusions', 'type': '[OwaspCrsExclusionEntry]'},
        'managed_rule_sets': {'key': 'managedRuleSets', 'type': '[ManagedRuleSet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword exclusions: The Exclusions that are applied on the policy.
        :paramtype exclusions: list[~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntry]
        :keyword managed_rule_sets: Required. The managed rule sets that are associated with the
         policy.
        :paramtype managed_rule_sets: list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleSet]
        """
        super(ManagedRulesDefinition, self).__init__(**kwargs)
        self.exclusions = kwargs.get('exclusions', None)
        self.managed_rule_sets = kwargs['managed_rule_sets']


class ManagedRuleSet(msrest.serialization.Model):
    """Defines a managed rule set.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_set_type: Required. Defines the rule set type to use.
    :vartype rule_set_type: str
    :ivar rule_set_version: Required. Defines the version of the rule set to use.
    :vartype rule_set_version: str
    :ivar rule_group_overrides: Defines the rule group overrides to apply to the rule set.
    :vartype rule_group_overrides:
     list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleGroupOverride]
    """

    _validation = {
        'rule_set_type': {'required': True},
        'rule_set_version': {'required': True},
    }

    _attribute_map = {
        'rule_set_type': {'key': 'ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'ruleSetVersion', 'type': 'str'},
        'rule_group_overrides': {'key': 'ruleGroupOverrides', 'type': '[ManagedRuleGroupOverride]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_set_type: Required. Defines the rule set type to use.
        :paramtype rule_set_type: str
        :keyword rule_set_version: Required. Defines the version of the rule set to use.
        :paramtype rule_set_version: str
        :keyword rule_group_overrides: Defines the rule group overrides to apply to the rule set.
        :paramtype rule_group_overrides:
         list[~azure.mgmt.network.v2021_02_01.models.ManagedRuleGroupOverride]
        """
        super(ManagedRuleSet, self).__init__(**kwargs)
        self.rule_set_type = kwargs['rule_set_type']
        self.rule_set_version = kwargs['rule_set_version']
        self.rule_group_overrides = kwargs.get('rule_group_overrides', None)


class ManagedServiceIdentity(msrest.serialization.Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of the system assigned identity. This property will only
     be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned'
     includes both an implicitly created identity and a set of user assigned identities. The type
     'None' will remove any identities from the virtual machine. Possible values include:
     "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.ResourceIdentityType
    :ivar user_assigned_identities: The list of user identities associated with resource. The user
     identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.network.v2021_02_01.models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of identity used for the resource. The type 'SystemAssigned,
         UserAssigned' includes both an implicitly created identity and a set of user assigned
         identities. The type 'None' will remove any identities from the virtual machine. Possible
         values include: "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
        :paramtype type: str or ~azure.mgmt.network.v2021_02_01.models.ResourceIdentityType
        :keyword user_assigned_identities: The list of user identities associated with resource. The
         user identity dictionary key references will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.network.v2021_02_01.models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties]
        """
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs.get('type', None)
        self.user_assigned_identities = kwargs.get('user_assigned_identities', None)


class MatchCondition(msrest.serialization.Model):
    """Define match conditions.

    All required parameters must be populated in order to send to Azure.

    :ivar match_variables: Required. List of match variables.
    :vartype match_variables: list[~azure.mgmt.network.v2021_02_01.models.MatchVariable]
    :ivar operator: Required. The operator to be matched. Possible values include: "IPMatch",
     "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual",
     "BeginsWith", "EndsWith", "Regex", "GeoMatch".
    :vartype operator: str or ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallOperator
    :ivar negation_conditon: Whether this is negate condition or not.
    :vartype negation_conditon: bool
    :ivar match_values: Required. Match value.
    :vartype match_values: list[str]
    :ivar transforms: List of transforms.
    :vartype transforms: list[str or
     ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallTransform]
    """

    _validation = {
        'match_variables': {'required': True},
        'operator': {'required': True},
        'match_values': {'required': True},
    }

    _attribute_map = {
        'match_variables': {'key': 'matchVariables', 'type': '[MatchVariable]'},
        'operator': {'key': 'operator', 'type': 'str'},
        'negation_conditon': {'key': 'negationConditon', 'type': 'bool'},
        'match_values': {'key': 'matchValues', 'type': '[str]'},
        'transforms': {'key': 'transforms', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword match_variables: Required. List of match variables.
        :paramtype match_variables: list[~azure.mgmt.network.v2021_02_01.models.MatchVariable]
        :keyword operator: Required. The operator to be matched. Possible values include: "IPMatch",
         "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual",
         "BeginsWith", "EndsWith", "Regex", "GeoMatch".
        :paramtype operator: str or
         ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallOperator
        :keyword negation_conditon: Whether this is negate condition or not.
        :paramtype negation_conditon: bool
        :keyword match_values: Required. Match value.
        :paramtype match_values: list[str]
        :keyword transforms: List of transforms.
        :paramtype transforms: list[str or
         ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallTransform]
        """
        super(MatchCondition, self).__init__(**kwargs)
        self.match_variables = kwargs['match_variables']
        self.operator = kwargs['operator']
        self.negation_conditon = kwargs.get('negation_conditon', None)
        self.match_values = kwargs['match_values']
        self.transforms = kwargs.get('transforms', None)


class MatchedRule(msrest.serialization.Model):
    """Matched rule.

    :ivar rule_name: Name of the matched network security rule.
    :vartype rule_name: str
    :ivar action: The network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
    :vartype action: str
    """

    _attribute_map = {
        'rule_name': {'key': 'ruleName', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_name: Name of the matched network security rule.
        :paramtype rule_name: str
        :keyword action: The network traffic is allowed or denied. Possible values are 'Allow' and
         'Deny'.
        :paramtype action: str
        """
        super(MatchedRule, self).__init__(**kwargs)
        self.rule_name = kwargs.get('rule_name', None)
        self.action = kwargs.get('action', None)


class MatchVariable(msrest.serialization.Model):
    """Define match variables.

    All required parameters must be populated in order to send to Azure.

    :ivar variable_name: Required. Match Variable. Possible values include: "RemoteAddr",
     "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeaders", "RequestBody",
     "RequestCookies".
    :vartype variable_name: str or
     ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallMatchVariable
    :ivar selector: The selector of match variable.
    :vartype selector: str
    """

    _validation = {
        'variable_name': {'required': True},
    }

    _attribute_map = {
        'variable_name': {'key': 'variableName', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword variable_name: Required. Match Variable. Possible values include: "RemoteAddr",
         "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeaders", "RequestBody",
         "RequestCookies".
        :paramtype variable_name: str or
         ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallMatchVariable
        :keyword selector: The selector of match variable.
        :paramtype selector: str
        """
        super(MatchVariable, self).__init__(**kwargs)
        self.variable_name = kwargs['variable_name']
        self.selector = kwargs.get('selector', None)


class MetricSpecification(msrest.serialization.Model):
    """Description of metrics specification.

    :ivar name: The name of the metric.
    :vartype name: str
    :ivar display_name: The display name of the metric.
    :vartype display_name: str
    :ivar display_description: The description of the metric.
    :vartype display_description: str
    :ivar unit: Units the metric to be displayed in.
    :vartype unit: str
    :ivar aggregation_type: The aggregation type.
    :vartype aggregation_type: str
    :ivar availabilities: List of availability.
    :vartype availabilities: list[~azure.mgmt.network.v2021_02_01.models.Availability]
    :ivar enable_regional_mdm_account: Whether regional MDM account enabled.
    :vartype enable_regional_mdm_account: bool
    :ivar fill_gap_with_zero: Whether gaps would be filled with zeros.
    :vartype fill_gap_with_zero: bool
    :ivar metric_filter_pattern: Pattern for the filter of the metric.
    :vartype metric_filter_pattern: str
    :ivar dimensions: List of dimensions.
    :vartype dimensions: list[~azure.mgmt.network.v2021_02_01.models.Dimension]
    :ivar is_internal: Whether the metric is internal.
    :vartype is_internal: bool
    :ivar source_mdm_account: The source MDM account.
    :vartype source_mdm_account: str
    :ivar source_mdm_namespace: The source MDM namespace.
    :vartype source_mdm_namespace: str
    :ivar resource_id_dimension_name_override: The resource Id dimension name override.
    :vartype resource_id_dimension_name_override: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'availabilities': {'key': 'availabilities', 'type': '[Availability]'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'bool'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'bool'},
        'metric_filter_pattern': {'key': 'metricFilterPattern', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[Dimension]'},
        'is_internal': {'key': 'isInternal', 'type': 'bool'},
        'source_mdm_account': {'key': 'sourceMdmAccount', 'type': 'str'},
        'source_mdm_namespace': {'key': 'sourceMdmNamespace', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the metric.
        :paramtype name: str
        :keyword display_name: The display name of the metric.
        :paramtype display_name: str
        :keyword display_description: The description of the metric.
        :paramtype display_description: str
        :keyword unit: Units the metric to be displayed in.
        :paramtype unit: str
        :keyword aggregation_type: The aggregation type.
        :paramtype aggregation_type: str
        :keyword availabilities: List of availability.
        :paramtype availabilities: list[~azure.mgmt.network.v2021_02_01.models.Availability]
        :keyword enable_regional_mdm_account: Whether regional MDM account enabled.
        :paramtype enable_regional_mdm_account: bool
        :keyword fill_gap_with_zero: Whether gaps would be filled with zeros.
        :paramtype fill_gap_with_zero: bool
        :keyword metric_filter_pattern: Pattern for the filter of the metric.
        :paramtype metric_filter_pattern: str
        :keyword dimensions: List of dimensions.
        :paramtype dimensions: list[~azure.mgmt.network.v2021_02_01.models.Dimension]
        :keyword is_internal: Whether the metric is internal.
        :paramtype is_internal: bool
        :keyword source_mdm_account: The source MDM account.
        :paramtype source_mdm_account: str
        :keyword source_mdm_namespace: The source MDM namespace.
        :paramtype source_mdm_namespace: str
        :keyword resource_id_dimension_name_override: The resource Id dimension name override.
        :paramtype resource_id_dimension_name_override: str
        """
        super(MetricSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.display_description = kwargs.get('display_description', None)
        self.unit = kwargs.get('unit', None)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.availabilities = kwargs.get('availabilities', None)
        self.enable_regional_mdm_account = kwargs.get('enable_regional_mdm_account', None)
        self.fill_gap_with_zero = kwargs.get('fill_gap_with_zero', None)
        self.metric_filter_pattern = kwargs.get('metric_filter_pattern', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.is_internal = kwargs.get('is_internal', None)
        self.source_mdm_account = kwargs.get('source_mdm_account', None)
        self.source_mdm_namespace = kwargs.get('source_mdm_namespace', None)
        self.resource_id_dimension_name_override = kwargs.get('resource_id_dimension_name_override', None)


class NatGateway(Resource):
    """Nat Gateway resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The nat gateway SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.NatGatewaySku
    :ivar zones: A list of availability zones denoting the zone in which Nat Gateway should be
     deployed.
    :vartype zones: list[str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar idle_timeout_in_minutes: The idle timeout of the nat gateway.
    :vartype idle_timeout_in_minutes: int
    :ivar public_ip_addresses: An array of public ip addresses associated with the nat gateway
     resource.
    :vartype public_ip_addresses: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar public_ip_prefixes: An array of public ip prefixes associated with the nat gateway
     resource.
    :vartype public_ip_prefixes: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar subnets: An array of references to the subnets using this nat gateway resource.
    :vartype subnets: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar resource_guid: The resource GUID property of the NAT gateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the NAT gateway resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'subnets': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'NatGatewaySku'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'etag': {'key': 'etag', 'type': 'str'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'public_ip_addresses': {'key': 'properties.publicIpAddresses', 'type': '[SubResource]'},
        'public_ip_prefixes': {'key': 'properties.publicIpPrefixes', 'type': '[SubResource]'},
        'subnets': {'key': 'properties.subnets', 'type': '[SubResource]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The nat gateway SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.NatGatewaySku
        :keyword zones: A list of availability zones denoting the zone in which Nat Gateway should be
         deployed.
        :paramtype zones: list[str]
        :keyword idle_timeout_in_minutes: The idle timeout of the nat gateway.
        :paramtype idle_timeout_in_minutes: int
        :keyword public_ip_addresses: An array of public ip addresses associated with the nat gateway
         resource.
        :paramtype public_ip_addresses: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword public_ip_prefixes: An array of public ip prefixes associated with the nat gateway
         resource.
        :paramtype public_ip_prefixes: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(NatGateway, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.zones = kwargs.get('zones', None)
        self.etag = None
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.public_ip_addresses = kwargs.get('public_ip_addresses', None)
        self.public_ip_prefixes = kwargs.get('public_ip_prefixes', None)
        self.subnets = None
        self.resource_guid = None
        self.provisioning_state = None


class NatGatewayListResult(msrest.serialization.Model):
    """Response for ListNatGateways API service call.

    :ivar value: A list of Nat Gateways that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NatGateway]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NatGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of Nat Gateways that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NatGateway]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NatGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NatGatewaySku(msrest.serialization.Model):
    """SKU of nat gateway.

    :ivar name: Name of Nat Gateway SKU. Possible values include: "Standard".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.NatGatewaySkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of Nat Gateway SKU. Possible values include: "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.NatGatewaySkuName
        """
        super(NatGatewaySku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class NatRule(FirewallPolicyRule):
    """Rule of type nat.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleType
    :ivar ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
    :vartype ip_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleNetworkProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar translated_address: The translated address for this NAT rule.
    :vartype translated_address: str
    :ivar translated_port: The translated port for this NAT rule.
    :vartype translated_port: str
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar translated_fqdn: The translated FQDN for this NAT rule.
    :vartype translated_fqdn: str
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'ip_protocols': {'key': 'ipProtocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'translated_address': {'key': 'translatedAddress', 'type': 'str'},
        'translated_port': {'key': 'translatedPort', 'type': 'str'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'translated_fqdn': {'key': 'translatedFqdn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
        :paramtype ip_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleNetworkProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword translated_address: The translated address for this NAT rule.
        :paramtype translated_address: str
        :keyword translated_port: The translated port for this NAT rule.
        :paramtype translated_port: str
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword translated_fqdn: The translated FQDN for this NAT rule.
        :paramtype translated_fqdn: str
        """
        super(NatRule, self).__init__(**kwargs)
        self.rule_type = 'NatRule'  # type: str
        self.ip_protocols = kwargs.get('ip_protocols', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)
        self.translated_address = kwargs.get('translated_address', None)
        self.translated_port = kwargs.get('translated_port', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)
        self.translated_fqdn = kwargs.get('translated_fqdn', None)


class NetworkConfigurationDiagnosticParameters(msrest.serialization.Model):
    """Parameters to get network configuration diagnostic.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The ID of the target resource to perform network
     configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and
     Application Gateway.
    :vartype target_resource_id: str
    :ivar verbosity_level: Verbosity level. Possible values include: "Normal", "Minimum", "Full".
    :vartype verbosity_level: str or ~azure.mgmt.network.v2021_02_01.models.VerbosityLevel
    :ivar profiles: Required. List of network configuration diagnostic profiles.
    :vartype profiles:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkConfigurationDiagnosticProfile]
    """

    _validation = {
        'target_resource_id': {'required': True},
        'profiles': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'verbosity_level': {'key': 'verbosityLevel', 'type': 'str'},
        'profiles': {'key': 'profiles', 'type': '[NetworkConfigurationDiagnosticProfile]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The ID of the target resource to perform network
         configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and
         Application Gateway.
        :paramtype target_resource_id: str
        :keyword verbosity_level: Verbosity level. Possible values include: "Normal", "Minimum",
         "Full".
        :paramtype verbosity_level: str or ~azure.mgmt.network.v2021_02_01.models.VerbosityLevel
        :keyword profiles: Required. List of network configuration diagnostic profiles.
        :paramtype profiles:
         list[~azure.mgmt.network.v2021_02_01.models.NetworkConfigurationDiagnosticProfile]
        """
        super(NetworkConfigurationDiagnosticParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.verbosity_level = kwargs.get('verbosity_level', None)
        self.profiles = kwargs['profiles']


class NetworkConfigurationDiagnosticProfile(msrest.serialization.Model):
    """Parameters to compare with network configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar direction: Required. The direction of the traffic. Possible values include: "Inbound",
     "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2021_02_01.models.Direction
    :ivar protocol: Required. Protocol to be verified on. Accepted values are '*', TCP, UDP.
    :vartype protocol: str
    :ivar source: Required. Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.
    :vartype source: str
    :ivar destination: Required. Traffic destination. Accepted values are: '*', IP Address/CIDR,
     Service Tag.
    :vartype destination: str
    :ivar destination_port: Required. Traffic destination port. Accepted values are '*' and a
     single port in the range (0 - 65535).
    :vartype destination_port: str
    """

    _validation = {
        'direction': {'required': True},
        'protocol': {'required': True},
        'source': {'required': True},
        'destination': {'required': True},
        'destination_port': {'required': True},
    }

    _attribute_map = {
        'direction': {'key': 'direction', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'destination': {'key': 'destination', 'type': 'str'},
        'destination_port': {'key': 'destinationPort', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword direction: Required. The direction of the traffic. Possible values include: "Inbound",
         "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2021_02_01.models.Direction
        :keyword protocol: Required. Protocol to be verified on. Accepted values are '*', TCP, UDP.
        :paramtype protocol: str
        :keyword source: Required. Traffic source. Accepted values are '*', IP Address/CIDR, Service
         Tag.
        :paramtype source: str
        :keyword destination: Required. Traffic destination. Accepted values are: '*', IP Address/CIDR,
         Service Tag.
        :paramtype destination: str
        :keyword destination_port: Required. Traffic destination port. Accepted values are '*' and a
         single port in the range (0 - 65535).
        :paramtype destination_port: str
        """
        super(NetworkConfigurationDiagnosticProfile, self).__init__(**kwargs)
        self.direction = kwargs['direction']
        self.protocol = kwargs['protocol']
        self.source = kwargs['source']
        self.destination = kwargs['destination']
        self.destination_port = kwargs['destination_port']


class NetworkConfigurationDiagnosticResponse(msrest.serialization.Model):
    """Results of network configuration diagnostic on the target resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar results: List of network configuration diagnostic results.
    :vartype results:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkConfigurationDiagnosticResult]
    """

    _validation = {
        'results': {'readonly': True},
    }

    _attribute_map = {
        'results': {'key': 'results', 'type': '[NetworkConfigurationDiagnosticResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(NetworkConfigurationDiagnosticResponse, self).__init__(**kwargs)
        self.results = None


class NetworkConfigurationDiagnosticResult(msrest.serialization.Model):
    """Network configuration diagnostic result corresponded to provided traffic query.

    :ivar profile: Network configuration diagnostic profile.
    :vartype profile: ~azure.mgmt.network.v2021_02_01.models.NetworkConfigurationDiagnosticProfile
    :ivar network_security_group_result: Network security group result.
    :vartype network_security_group_result:
     ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroupResult
    """

    _attribute_map = {
        'profile': {'key': 'profile', 'type': 'NetworkConfigurationDiagnosticProfile'},
        'network_security_group_result': {'key': 'networkSecurityGroupResult', 'type': 'NetworkSecurityGroupResult'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword profile: Network configuration diagnostic profile.
        :paramtype profile:
         ~azure.mgmt.network.v2021_02_01.models.NetworkConfigurationDiagnosticProfile
        :keyword network_security_group_result: Network security group result.
        :paramtype network_security_group_result:
         ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroupResult
        """
        super(NetworkConfigurationDiagnosticResult, self).__init__(**kwargs)
        self.profile = kwargs.get('profile', None)
        self.network_security_group_result = kwargs.get('network_security_group_result', None)


class NetworkIntentPolicy(Resource):
    """Network Intent Policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(NetworkIntentPolicy, self).__init__(**kwargs)
        self.etag = None


class NetworkIntentPolicyConfiguration(msrest.serialization.Model):
    """Details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.

    :ivar network_intent_policy_name: The name of the Network Intent Policy for storing in target
     subscription.
    :vartype network_intent_policy_name: str
    :ivar source_network_intent_policy: Source network intent policy.
    :vartype source_network_intent_policy:
     ~azure.mgmt.network.v2021_02_01.models.NetworkIntentPolicy
    """

    _attribute_map = {
        'network_intent_policy_name': {'key': 'networkIntentPolicyName', 'type': 'str'},
        'source_network_intent_policy': {'key': 'sourceNetworkIntentPolicy', 'type': 'NetworkIntentPolicy'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_intent_policy_name: The name of the Network Intent Policy for storing in
         target subscription.
        :paramtype network_intent_policy_name: str
        :keyword source_network_intent_policy: Source network intent policy.
        :paramtype source_network_intent_policy:
         ~azure.mgmt.network.v2021_02_01.models.NetworkIntentPolicy
        """
        super(NetworkIntentPolicyConfiguration, self).__init__(**kwargs)
        self.network_intent_policy_name = kwargs.get('network_intent_policy_name', None)
        self.source_network_intent_policy = kwargs.get('source_network_intent_policy', None)


class NetworkInterface(Resource):
    """A network interface in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the network interface.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_machine: The reference to a virtual machine.
    :vartype virtual_machine: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar network_security_group: The reference to the NetworkSecurityGroup resource.
    :vartype network_security_group: ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup
    :ivar private_endpoint: A reference to the private endpoint to which the network interface is
     linked.
    :vartype private_endpoint: ~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint
    :ivar ip_configurations: A list of IPConfigurations of the network interface.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
    :ivar tap_configurations: A list of TapConfigurations of the network interface.
    :vartype tap_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceTapConfiguration]
    :ivar dns_settings: The DNS settings in network interface.
    :vartype dns_settings: ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceDnsSettings
    :ivar mac_address: The MAC address of the network interface.
    :vartype mac_address: str
    :ivar primary: Whether this is a primary network interface on a virtual machine.
    :vartype primary: bool
    :ivar enable_accelerated_networking: If the network interface is accelerated networking
     enabled.
    :vartype enable_accelerated_networking: bool
    :ivar enable_ip_forwarding: Indicates whether IP forwarding is enabled on this network
     interface.
    :vartype enable_ip_forwarding: bool
    :ivar hosted_workloads: A list of references to linked BareMetal resources.
    :vartype hosted_workloads: list[str]
    :ivar dscp_configuration: A reference to the dscp configuration to which the network interface
     is linked.
    :vartype dscp_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar resource_guid: The resource GUID property of the network interface resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the network interface resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar workload_type: WorkloadType of the NetworkInterface for BareMetal resources.
    :vartype workload_type: str
    :ivar nic_type: Type of Network Interface resource. Possible values include: "Standard",
     "Elastic".
    :vartype nic_type: str or ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceNicType
    :ivar private_link_service: Privatelinkservice of the network interface resource.
    :vartype private_link_service: ~azure.mgmt.network.v2021_02_01.models.PrivateLinkService
    :ivar migration_phase: Migration phase of Network Interface resource. Possible values include:
     "None", "Prepare", "Commit", "Abort", "Committed".
    :vartype migration_phase: str or
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceMigrationPhase
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_machine': {'readonly': True},
        'private_endpoint': {'readonly': True},
        'tap_configurations': {'readonly': True},
        'mac_address': {'readonly': True},
        'primary': {'readonly': True},
        'hosted_workloads': {'readonly': True},
        'dscp_configuration': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_machine': {'key': 'properties.virtualMachine', 'type': 'SubResource'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'tap_configurations': {'key': 'properties.tapConfigurations', 'type': '[NetworkInterfaceTapConfiguration]'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'NetworkInterfaceDnsSettings'},
        'mac_address': {'key': 'properties.macAddress', 'type': 'str'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'enable_accelerated_networking': {'key': 'properties.enableAcceleratedNetworking', 'type': 'bool'},
        'enable_ip_forwarding': {'key': 'properties.enableIPForwarding', 'type': 'bool'},
        'hosted_workloads': {'key': 'properties.hostedWorkloads', 'type': '[str]'},
        'dscp_configuration': {'key': 'properties.dscpConfiguration', 'type': 'SubResource'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'workload_type': {'key': 'properties.workloadType', 'type': 'str'},
        'nic_type': {'key': 'properties.nicType', 'type': 'str'},
        'private_link_service': {'key': 'properties.privateLinkService', 'type': 'PrivateLinkService'},
        'migration_phase': {'key': 'properties.migrationPhase', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the network interface.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword network_security_group: The reference to the NetworkSecurityGroup resource.
        :paramtype network_security_group: ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup
        :keyword ip_configurations: A list of IPConfigurations of the network interface.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
        :keyword dns_settings: The DNS settings in network interface.
        :paramtype dns_settings: ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceDnsSettings
        :keyword enable_accelerated_networking: If the network interface is accelerated networking
         enabled.
        :paramtype enable_accelerated_networking: bool
        :keyword enable_ip_forwarding: Indicates whether IP forwarding is enabled on this network
         interface.
        :paramtype enable_ip_forwarding: bool
        :keyword workload_type: WorkloadType of the NetworkInterface for BareMetal resources.
        :paramtype workload_type: str
        :keyword nic_type: Type of Network Interface resource. Possible values include: "Standard",
         "Elastic".
        :paramtype nic_type: str or ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceNicType
        :keyword private_link_service: Privatelinkservice of the network interface resource.
        :paramtype private_link_service: ~azure.mgmt.network.v2021_02_01.models.PrivateLinkService
        :keyword migration_phase: Migration phase of Network Interface resource. Possible values
         include: "None", "Prepare", "Commit", "Abort", "Committed".
        :paramtype migration_phase: str or
         ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceMigrationPhase
        """
        super(NetworkInterface, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.virtual_machine = None
        self.network_security_group = kwargs.get('network_security_group', None)
        self.private_endpoint = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.tap_configurations = None
        self.dns_settings = kwargs.get('dns_settings', None)
        self.mac_address = None
        self.primary = None
        self.enable_accelerated_networking = kwargs.get('enable_accelerated_networking', None)
        self.enable_ip_forwarding = kwargs.get('enable_ip_forwarding', None)
        self.hosted_workloads = None
        self.dscp_configuration = None
        self.resource_guid = None
        self.provisioning_state = None
        self.workload_type = kwargs.get('workload_type', None)
        self.nic_type = kwargs.get('nic_type', None)
        self.private_link_service = kwargs.get('private_link_service', None)
        self.migration_phase = kwargs.get('migration_phase', None)


class NetworkInterfaceAssociation(msrest.serialization.Model):
    """Network interface and its custom security rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Network interface ID.
    :vartype id: str
    :ivar security_rules: Collection of custom security rules.
    :vartype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rules': {'key': 'securityRules', 'type': '[SecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword security_rules: Collection of custom security rules.
        :paramtype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
        """
        super(NetworkInterfaceAssociation, self).__init__(**kwargs)
        self.id = None
        self.security_rules = kwargs.get('security_rules', None)


class NetworkInterfaceDnsSettings(msrest.serialization.Model):
    """DNS settings of a network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dns_servers: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure
     provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be
     the only value in dnsServers collection.
    :vartype dns_servers: list[str]
    :ivar applied_dns_servers: If the VM that uses this NIC is part of an Availability Set, then
     this list will have the union of all DNS servers from all NICs that are part of the
     Availability Set. This property is what is configured on each of those VMs.
    :vartype applied_dns_servers: list[str]
    :ivar internal_dns_name_label: Relative DNS name for this NIC used for internal communications
     between VMs in the same virtual network.
    :vartype internal_dns_name_label: str
    :ivar internal_fqdn: Fully qualified DNS name supporting internal communications between VMs in
     the same virtual network.
    :vartype internal_fqdn: str
    :ivar internal_domain_name_suffix: Even if internalDnsNameLabel is not specified, a DNS entry
     is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the
     VM name with the value of internalDomainNameSuffix.
    :vartype internal_domain_name_suffix: str
    """

    _validation = {
        'applied_dns_servers': {'readonly': True},
        'internal_fqdn': {'readonly': True},
        'internal_domain_name_suffix': {'readonly': True},
    }

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'applied_dns_servers': {'key': 'appliedDnsServers', 'type': '[str]'},
        'internal_dns_name_label': {'key': 'internalDnsNameLabel', 'type': 'str'},
        'internal_fqdn': {'key': 'internalFqdn', 'type': 'str'},
        'internal_domain_name_suffix': {'key': 'internalDomainNameSuffix', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dns_servers: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to
         azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
         must be the only value in dnsServers collection.
        :paramtype dns_servers: list[str]
        :keyword internal_dns_name_label: Relative DNS name for this NIC used for internal
         communications between VMs in the same virtual network.
        :paramtype internal_dns_name_label: str
        """
        super(NetworkInterfaceDnsSettings, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)
        self.applied_dns_servers = None
        self.internal_dns_name_label = kwargs.get('internal_dns_name_label', None)
        self.internal_fqdn = None
        self.internal_domain_name_suffix = None


class NetworkInterfaceIPConfiguration(SubResource):
    """IPConfiguration in a network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar gateway_load_balancer: The reference to gateway load balancer frontend IP.
    :vartype gateway_load_balancer: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar virtual_network_taps: The reference to Virtual Network Taps.
    :vartype virtual_network_taps: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap]
    :ivar application_gateway_backend_address_pools: The reference to
     ApplicationGatewayBackendAddressPool resource.
    :vartype application_gateway_backend_address_pools:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool]
    :ivar load_balancer_backend_address_pools: The reference to LoadBalancerBackendAddressPool
     resource.
    :vartype load_balancer_backend_address_pools:
     list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
    :ivar load_balancer_inbound_nat_rules: A list of references of LoadBalancerInboundNatRules.
    :vartype load_balancer_inbound_nat_rules:
     list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
    :ivar private_ip_address: Private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar private_ip_address_version: Whether the specific IP configuration is IPv4 or IPv6.
     Default is IPv4. Possible values include: "IPv4", "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    :ivar subnet: Subnet bound to the IP configuration.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar primary: Whether this is a primary customer address on the network interface.
    :vartype primary: bool
    :ivar public_ip_address: Public IP address bound to the IP configuration.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar application_security_groups: Application security groups in which the IP configuration is
     included.
    :vartype application_security_groups:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
    :ivar provisioning_state: The provisioning state of the network interface IP configuration.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_link_connection_properties: PrivateLinkConnection properties for the network
     interface.
    :vartype private_link_connection_properties:
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'private_link_connection_properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'gateway_load_balancer': {'key': 'properties.gatewayLoadBalancer', 'type': 'SubResource'},
        'virtual_network_taps': {'key': 'properties.virtualNetworkTaps', 'type': '[VirtualNetworkTap]'},
        'application_gateway_backend_address_pools': {'key': 'properties.applicationGatewayBackendAddressPools', 'type': '[ApplicationGatewayBackendAddressPool]'},
        'load_balancer_backend_address_pools': {'key': 'properties.loadBalancerBackendAddressPools', 'type': '[BackendAddressPool]'},
        'load_balancer_inbound_nat_rules': {'key': 'properties.loadBalancerInboundNatRules', 'type': '[InboundNatRule]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'application_security_groups': {'key': 'properties.applicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_connection_properties': {'key': 'properties.privateLinkConnectionProperties', 'type': 'NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword gateway_load_balancer: The reference to gateway load balancer frontend IP.
        :paramtype gateway_load_balancer: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword virtual_network_taps: The reference to Virtual Network Taps.
        :paramtype virtual_network_taps: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap]
        :keyword application_gateway_backend_address_pools: The reference to
         ApplicationGatewayBackendAddressPool resource.
        :paramtype application_gateway_backend_address_pools:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayBackendAddressPool]
        :keyword load_balancer_backend_address_pools: The reference to LoadBalancerBackendAddressPool
         resource.
        :paramtype load_balancer_backend_address_pools:
         list[~azure.mgmt.network.v2021_02_01.models.BackendAddressPool]
        :keyword load_balancer_inbound_nat_rules: A list of references of LoadBalancerInboundNatRules.
        :paramtype load_balancer_inbound_nat_rules:
         list[~azure.mgmt.network.v2021_02_01.models.InboundNatRule]
        :keyword private_ip_address: Private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword private_ip_address_version: Whether the specific IP configuration is IPv4 or IPv6.
         Default is IPv4. Possible values include: "IPv4", "IPv6".
        :paramtype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        :keyword subnet: Subnet bound to the IP configuration.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword primary: Whether this is a primary customer address on the network interface.
        :paramtype primary: bool
        :keyword public_ip_address: Public IP address bound to the IP configuration.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        :keyword application_security_groups: Application security groups in which the IP configuration
         is included.
        :paramtype application_security_groups:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
        """
        super(NetworkInterfaceIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.gateway_load_balancer = kwargs.get('gateway_load_balancer', None)
        self.virtual_network_taps = kwargs.get('virtual_network_taps', None)
        self.application_gateway_backend_address_pools = kwargs.get('application_gateway_backend_address_pools', None)
        self.load_balancer_backend_address_pools = kwargs.get('load_balancer_backend_address_pools', None)
        self.load_balancer_inbound_nat_rules = kwargs.get('load_balancer_inbound_nat_rules', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)
        self.subnet = kwargs.get('subnet', None)
        self.primary = kwargs.get('primary', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.application_security_groups = kwargs.get('application_security_groups', None)
        self.provisioning_state = None
        self.private_link_connection_properties = None


class NetworkInterfaceIPConfigurationListResult(msrest.serialization.Model):
    """Response for list ip configurations API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of ip configurations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkInterfaceIPConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ip configurations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration]
        """
        super(NetworkInterfaceIPConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties(msrest.serialization.Model):
    """PrivateLinkConnection properties for the network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar group_id: The group ID for current private link connection.
    :vartype group_id: str
    :ivar required_member_name: The required member name for current private link connection.
    :vartype required_member_name: str
    :ivar fqdns: List of FQDNs for current private link connection.
    :vartype fqdns: list[str]
    """

    _validation = {
        'group_id': {'readonly': True},
        'required_member_name': {'readonly': True},
        'fqdns': {'readonly': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_member_name': {'key': 'requiredMemberName', 'type': 'str'},
        'fqdns': {'key': 'fqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties, self).__init__(**kwargs)
        self.group_id = None
        self.required_member_name = None
        self.fqdns = None


class NetworkInterfaceListResult(msrest.serialization.Model):
    """Response for the ListNetworkInterface API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of network interfaces in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkInterface]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of network interfaces in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
        """
        super(NetworkInterfaceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkInterfaceLoadBalancerListResult(msrest.serialization.Model):
    """Response for list ip configurations API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancers.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancer]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancers.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.LoadBalancer]
        """
        super(NetworkInterfaceLoadBalancerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkInterfaceTapConfiguration(SubResource):
    """Tap configuration in a Network Interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar virtual_network_tap: The reference to the Virtual Network Tap resource.
    :vartype virtual_network_tap: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap
    :ivar provisioning_state: The provisioning state of the network interface tap configuration
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'virtual_network_tap': {'key': 'properties.virtualNetworkTap', 'type': 'VirtualNetworkTap'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword virtual_network_tap: The reference to the Virtual Network Tap resource.
        :paramtype virtual_network_tap: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap
        """
        super(NetworkInterfaceTapConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.virtual_network_tap = kwargs.get('virtual_network_tap', None)
        self.provisioning_state = None


class NetworkInterfaceTapConfigurationListResult(msrest.serialization.Model):
    """Response for list tap configurations API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of tap configurations.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceTapConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkInterfaceTapConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of tap configurations.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceTapConfiguration]
        """
        super(NetworkInterfaceTapConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkProfile(Resource):
    """Network profile resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar container_network_interfaces: List of child container network interfaces.
    :vartype container_network_interfaces:
     list[~azure.mgmt.network.v2021_02_01.models.ContainerNetworkInterface]
    :ivar container_network_interface_configurations: List of chid container network interface
     configurations.
    :vartype container_network_interface_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ContainerNetworkInterfaceConfiguration]
    :ivar resource_guid: The resource GUID property of the network profile resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the network profile resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'container_network_interfaces': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'container_network_interfaces': {'key': 'properties.containerNetworkInterfaces', 'type': '[ContainerNetworkInterface]'},
        'container_network_interface_configurations': {'key': 'properties.containerNetworkInterfaceConfigurations', 'type': '[ContainerNetworkInterfaceConfiguration]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword container_network_interface_configurations: List of chid container network interface
         configurations.
        :paramtype container_network_interface_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ContainerNetworkInterfaceConfiguration]
        """
        super(NetworkProfile, self).__init__(**kwargs)
        self.etag = None
        self.container_network_interfaces = None
        self.container_network_interface_configurations = kwargs.get('container_network_interface_configurations', None)
        self.resource_guid = None
        self.provisioning_state = None


class NetworkProfileListResult(msrest.serialization.Model):
    """Response for ListNetworkProfiles API service call.

    :ivar value: A list of network profiles that exist in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkProfile]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkProfile]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of network profiles that exist in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkProfile]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkProfileListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkRule(FirewallPolicyRule):
    """Rule of type network.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleType
    :ivar ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
    :vartype ip_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleNetworkProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar destination_ip_groups: List of destination IpGroups for this rule.
    :vartype destination_ip_groups: list[str]
    :ivar destination_fqdns: List of destination FQDNs.
    :vartype destination_fqdns: list[str]
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'ip_protocols': {'key': 'ipProtocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'destination_ip_groups': {'key': 'destinationIpGroups', 'type': '[str]'},
        'destination_fqdns': {'key': 'destinationFqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
        :paramtype ip_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.FirewallPolicyRuleNetworkProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword destination_ip_groups: List of destination IpGroups for this rule.
        :paramtype destination_ip_groups: list[str]
        :keyword destination_fqdns: List of destination FQDNs.
        :paramtype destination_fqdns: list[str]
        """
        super(NetworkRule, self).__init__(**kwargs)
        self.rule_type = 'NetworkRule'  # type: str
        self.ip_protocols = kwargs.get('ip_protocols', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)
        self.source_ip_groups = kwargs.get('source_ip_groups', None)
        self.destination_ip_groups = kwargs.get('destination_ip_groups', None)
        self.destination_fqdns = kwargs.get('destination_fqdns', None)


class NetworkSecurityGroup(Resource):
    """NetworkSecurityGroup resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar security_rules: A collection of security rules of the network security group.
    :vartype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    :ivar default_security_rules: The default security rules of network security group.
    :vartype default_security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    :ivar network_interfaces: A collection of references to network interfaces.
    :vartype network_interfaces: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
    :ivar flow_logs: A collection of references to flow log resources.
    :vartype flow_logs: list[~azure.mgmt.network.v2021_02_01.models.FlowLog]
    :ivar resource_guid: The resource GUID property of the network security group resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the network security group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'default_security_rules': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'subnets': {'readonly': True},
        'flow_logs': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'security_rules': {'key': 'properties.securityRules', 'type': '[SecurityRule]'},
        'default_security_rules': {'key': 'properties.defaultSecurityRules', 'type': '[SecurityRule]'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'flow_logs': {'key': 'properties.flowLogs', 'type': '[FlowLog]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword security_rules: A collection of security rules of the network security group.
        :paramtype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
        """
        super(NetworkSecurityGroup, self).__init__(**kwargs)
        self.etag = None
        self.security_rules = kwargs.get('security_rules', None)
        self.default_security_rules = None
        self.network_interfaces = None
        self.subnets = None
        self.flow_logs = None
        self.resource_guid = None
        self.provisioning_state = None


class NetworkSecurityGroupListResult(msrest.serialization.Model):
    """Response for ListNetworkSecurityGroups API service call.

    :ivar value: A list of NetworkSecurityGroup resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of NetworkSecurityGroup resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkSecurityGroupResult(msrest.serialization.Model):
    """Network configuration diagnostic result corresponded provided traffic query.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar security_rule_access_result: The network traffic is allowed or denied. Possible values
     include: "Allow", "Deny".
    :vartype security_rule_access_result: str or
     ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
    :ivar evaluated_network_security_groups: List of results network security groups diagnostic.
    :vartype evaluated_network_security_groups:
     list[~azure.mgmt.network.v2021_02_01.models.EvaluatedNetworkSecurityGroup]
    """

    _validation = {
        'evaluated_network_security_groups': {'readonly': True},
    }

    _attribute_map = {
        'security_rule_access_result': {'key': 'securityRuleAccessResult', 'type': 'str'},
        'evaluated_network_security_groups': {'key': 'evaluatedNetworkSecurityGroups', 'type': '[EvaluatedNetworkSecurityGroup]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword security_rule_access_result: The network traffic is allowed or denied. Possible values
         include: "Allow", "Deny".
        :paramtype security_rule_access_result: str or
         ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
        """
        super(NetworkSecurityGroupResult, self).__init__(**kwargs)
        self.security_rule_access_result = kwargs.get('security_rule_access_result', None)
        self.evaluated_network_security_groups = None


class NetworkSecurityRulesEvaluationResult(msrest.serialization.Model):
    """Network security rules evaluation result.

    :ivar name: Name of the network security rule.
    :vartype name: str
    :ivar protocol_matched: Value indicating whether protocol is matched.
    :vartype protocol_matched: bool
    :ivar source_matched: Value indicating whether source is matched.
    :vartype source_matched: bool
    :ivar source_port_matched: Value indicating whether source port is matched.
    :vartype source_port_matched: bool
    :ivar destination_matched: Value indicating whether destination is matched.
    :vartype destination_matched: bool
    :ivar destination_port_matched: Value indicating whether destination port is matched.
    :vartype destination_port_matched: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'protocol_matched': {'key': 'protocolMatched', 'type': 'bool'},
        'source_matched': {'key': 'sourceMatched', 'type': 'bool'},
        'source_port_matched': {'key': 'sourcePortMatched', 'type': 'bool'},
        'destination_matched': {'key': 'destinationMatched', 'type': 'bool'},
        'destination_port_matched': {'key': 'destinationPortMatched', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the network security rule.
        :paramtype name: str
        :keyword protocol_matched: Value indicating whether protocol is matched.
        :paramtype protocol_matched: bool
        :keyword source_matched: Value indicating whether source is matched.
        :paramtype source_matched: bool
        :keyword source_port_matched: Value indicating whether source port is matched.
        :paramtype source_port_matched: bool
        :keyword destination_matched: Value indicating whether destination is matched.
        :paramtype destination_matched: bool
        :keyword destination_port_matched: Value indicating whether destination port is matched.
        :paramtype destination_port_matched: bool
        """
        super(NetworkSecurityRulesEvaluationResult, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.protocol_matched = kwargs.get('protocol_matched', None)
        self.source_matched = kwargs.get('source_matched', None)
        self.source_port_matched = kwargs.get('source_port_matched', None)
        self.destination_matched = kwargs.get('destination_matched', None)
        self.destination_port_matched = kwargs.get('destination_port_matched', None)


class NetworkVirtualAppliance(Resource):
    """NetworkVirtualAppliance Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: The service principal that has read access to cloud-init and config blob.
    :vartype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar nva_sku: Network Virtual Appliance SKU.
    :vartype nva_sku: ~azure.mgmt.network.v2021_02_01.models.VirtualApplianceSkuProperties
    :ivar address_prefix: Address Prefix.
    :vartype address_prefix: str
    :ivar boot_strap_configuration_blobs: BootStrapConfigurationBlobs storage URLs.
    :vartype boot_strap_configuration_blobs: list[str]
    :ivar virtual_hub: The Virtual Hub where Network Virtual Appliance is being deployed.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar cloud_init_configuration_blobs: CloudInitConfigurationBlob storage URLs.
    :vartype cloud_init_configuration_blobs: list[str]
    :ivar cloud_init_configuration: CloudInitConfiguration string in plain text.
    :vartype cloud_init_configuration: str
    :ivar virtual_appliance_asn: VirtualAppliance ASN.
    :vartype virtual_appliance_asn: long
    :ivar virtual_appliance_nics: List of Virtual Appliance Network Interfaces.
    :vartype virtual_appliance_nics:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualApplianceNicProperties]
    :ivar virtual_appliance_sites: List of references to VirtualApplianceSite.
    :vartype virtual_appliance_sites: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar inbound_security_rules: List of references to InboundSecurityRules.
    :vartype inbound_security_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'address_prefix': {'readonly': True},
        'virtual_appliance_asn': {'maximum': 4294967295, 'minimum': 0},
        'virtual_appliance_nics': {'readonly': True},
        'virtual_appliance_sites': {'readonly': True},
        'inbound_security_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'etag': {'key': 'etag', 'type': 'str'},
        'nva_sku': {'key': 'properties.nvaSku', 'type': 'VirtualApplianceSkuProperties'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'boot_strap_configuration_blobs': {'key': 'properties.bootStrapConfigurationBlobs', 'type': '[str]'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'cloud_init_configuration_blobs': {'key': 'properties.cloudInitConfigurationBlobs', 'type': '[str]'},
        'cloud_init_configuration': {'key': 'properties.cloudInitConfiguration', 'type': 'str'},
        'virtual_appliance_asn': {'key': 'properties.virtualApplianceAsn', 'type': 'long'},
        'virtual_appliance_nics': {'key': 'properties.virtualApplianceNics', 'type': '[VirtualApplianceNicProperties]'},
        'virtual_appliance_sites': {'key': 'properties.virtualApplianceSites', 'type': '[SubResource]'},
        'inbound_security_rules': {'key': 'properties.inboundSecurityRules', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: The service principal that has read access to cloud-init and config blob.
        :paramtype identity: ~azure.mgmt.network.v2021_02_01.models.ManagedServiceIdentity
        :keyword nva_sku: Network Virtual Appliance SKU.
        :paramtype nva_sku: ~azure.mgmt.network.v2021_02_01.models.VirtualApplianceSkuProperties
        :keyword boot_strap_configuration_blobs: BootStrapConfigurationBlobs storage URLs.
        :paramtype boot_strap_configuration_blobs: list[str]
        :keyword virtual_hub: The Virtual Hub where Network Virtual Appliance is being deployed.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword cloud_init_configuration_blobs: CloudInitConfigurationBlob storage URLs.
        :paramtype cloud_init_configuration_blobs: list[str]
        :keyword cloud_init_configuration: CloudInitConfiguration string in plain text.
        :paramtype cloud_init_configuration: str
        :keyword virtual_appliance_asn: VirtualAppliance ASN.
        :paramtype virtual_appliance_asn: long
        """
        super(NetworkVirtualAppliance, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.etag = None
        self.nva_sku = kwargs.get('nva_sku', None)
        self.address_prefix = None
        self.boot_strap_configuration_blobs = kwargs.get('boot_strap_configuration_blobs', None)
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.cloud_init_configuration_blobs = kwargs.get('cloud_init_configuration_blobs', None)
        self.cloud_init_configuration = kwargs.get('cloud_init_configuration', None)
        self.virtual_appliance_asn = kwargs.get('virtual_appliance_asn', None)
        self.virtual_appliance_nics = None
        self.virtual_appliance_sites = None
        self.inbound_security_rules = None
        self.provisioning_state = None


class NetworkVirtualApplianceListResult(msrest.serialization.Model):
    """Response for ListNetworkVirtualAppliances API service call.

    :ivar value: List of Network Virtual Appliances.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualAppliance]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkVirtualAppliance]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Network Virtual Appliances.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualAppliance]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkVirtualApplianceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkVirtualApplianceSiteListResult(msrest.serialization.Model):
    """Response for ListNetworkVirtualApplianceSites API service call.

    :ivar value: List of Network Virtual Appliance sites.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualApplianceSite]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualApplianceSite]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Network Virtual Appliance sites.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualApplianceSite]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkVirtualApplianceSiteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkVirtualApplianceSku(Resource):
    """Definition of the NetworkVirtualApplianceSkus resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar vendor: Network Virtual Appliance Sku vendor.
    :vartype vendor: str
    :ivar available_versions: Available Network Virtual Appliance versions.
    :vartype available_versions: list[str]
    :ivar available_scale_units: The list of scale units available.
    :vartype available_scale_units:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualApplianceSkuInstances]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'vendor': {'readonly': True},
        'available_versions': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'vendor': {'key': 'properties.vendor', 'type': 'str'},
        'available_versions': {'key': 'properties.availableVersions', 'type': '[str]'},
        'available_scale_units': {'key': 'properties.availableScaleUnits', 'type': '[NetworkVirtualApplianceSkuInstances]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword available_scale_units: The list of scale units available.
        :paramtype available_scale_units:
         list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualApplianceSkuInstances]
        """
        super(NetworkVirtualApplianceSku, self).__init__(**kwargs)
        self.etag = None
        self.vendor = None
        self.available_versions = None
        self.available_scale_units = kwargs.get('available_scale_units', None)


class NetworkVirtualApplianceSkuInstances(msrest.serialization.Model):
    """List of available Sku and instances.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar scale_unit: Scale Unit.
    :vartype scale_unit: str
    :ivar instance_count: Instance Count.
    :vartype instance_count: int
    """

    _validation = {
        'scale_unit': {'readonly': True},
        'instance_count': {'readonly': True},
    }

    _attribute_map = {
        'scale_unit': {'key': 'scaleUnit', 'type': 'str'},
        'instance_count': {'key': 'instanceCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(NetworkVirtualApplianceSkuInstances, self).__init__(**kwargs)
        self.scale_unit = None
        self.instance_count = None


class NetworkVirtualApplianceSkuListResult(msrest.serialization.Model):
    """Response for ListNetworkVirtualApplianceSkus API service call.

    :ivar value: List of Network Virtual Appliance Skus that are available.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualApplianceSku]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkVirtualApplianceSku]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Network Virtual Appliance Skus that are available.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkVirtualApplianceSku]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkVirtualApplianceSkuListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkWatcher(Resource):
    """Network watcher in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the network watcher resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(NetworkWatcher, self).__init__(**kwargs)
        self.etag = None
        self.provisioning_state = None


class NetworkWatcherListResult(msrest.serialization.Model):
    """Response for ListNetworkWatchers API service call.

    :ivar value: List of network watcher resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkWatcher]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkWatcher]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of network watcher resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.NetworkWatcher]
        """
        super(NetworkWatcherListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class NextHopParameters(msrest.serialization.Model):
    """Parameters that define the source and destination endpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The resource identifier of the target resource against
     which the action is to be performed.
    :vartype target_resource_id: str
    :ivar source_ip_address: Required. The source IP address.
    :vartype source_ip_address: str
    :ivar destination_ip_address: Required. The destination IP address.
    :vartype destination_ip_address: str
    :ivar target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled
     on any of the nics, then this parameter must be specified. Otherwise optional).
    :vartype target_nic_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'source_ip_address': {'required': True},
        'destination_ip_address': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'source_ip_address': {'key': 'sourceIPAddress', 'type': 'str'},
        'destination_ip_address': {'key': 'destinationIPAddress', 'type': 'str'},
        'target_nic_resource_id': {'key': 'targetNicResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The resource identifier of the target resource against
         which the action is to be performed.
        :paramtype target_resource_id: str
        :keyword source_ip_address: Required. The source IP address.
        :paramtype source_ip_address: str
        :keyword destination_ip_address: Required. The destination IP address.
        :paramtype destination_ip_address: str
        :keyword target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is
         enabled on any of the nics, then this parameter must be specified. Otherwise optional).
        :paramtype target_nic_resource_id: str
        """
        super(NextHopParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.source_ip_address = kwargs['source_ip_address']
        self.destination_ip_address = kwargs['destination_ip_address']
        self.target_nic_resource_id = kwargs.get('target_nic_resource_id', None)


class NextHopResult(msrest.serialization.Model):
    """The information about next hop from the specified VM.

    :ivar next_hop_type: Next hop type. Possible values include: "Internet", "VirtualAppliance",
     "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.NextHopType
    :ivar next_hop_ip_address: Next hop IP Address.
    :vartype next_hop_ip_address: str
    :ivar route_table_id: The resource identifier for the route table associated with the route
     being returned. If the route being returned does not correspond to any user created routes then
     this field will be the string 'System Route'.
    :vartype route_table_id: str
    """

    _attribute_map = {
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
        'route_table_id': {'key': 'routeTableId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword next_hop_type: Next hop type. Possible values include: "Internet", "VirtualAppliance",
         "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.NextHopType
        :keyword next_hop_ip_address: Next hop IP Address.
        :paramtype next_hop_ip_address: str
        :keyword route_table_id: The resource identifier for the route table associated with the route
         being returned. If the route being returned does not correspond to any user created routes then
         this field will be the string 'System Route'.
        :paramtype route_table_id: str
        """
        super(NextHopResult, self).__init__(**kwargs)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.route_table_id = kwargs.get('route_table_id', None)


class O365BreakOutCategoryPolicies(msrest.serialization.Model):
    """Office365 breakout categories.

    :ivar allow: Flag to control allow category.
    :vartype allow: bool
    :ivar optimize: Flag to control optimize category.
    :vartype optimize: bool
    :ivar default: Flag to control default category.
    :vartype default: bool
    """

    _attribute_map = {
        'allow': {'key': 'allow', 'type': 'bool'},
        'optimize': {'key': 'optimize', 'type': 'bool'},
        'default': {'key': 'default', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword allow: Flag to control allow category.
        :paramtype allow: bool
        :keyword optimize: Flag to control optimize category.
        :paramtype optimize: bool
        :keyword default: Flag to control default category.
        :paramtype default: bool
        """
        super(O365BreakOutCategoryPolicies, self).__init__(**kwargs)
        self.allow = kwargs.get('allow', None)
        self.optimize = kwargs.get('optimize', None)
        self.default = kwargs.get('default', None)


class O365PolicyProperties(msrest.serialization.Model):
    """The Office365 breakout policy.

    :ivar break_out_categories: Office365 breakout categories.
    :vartype break_out_categories:
     ~azure.mgmt.network.v2021_02_01.models.O365BreakOutCategoryPolicies
    """

    _attribute_map = {
        'break_out_categories': {'key': 'breakOutCategories', 'type': 'O365BreakOutCategoryPolicies'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword break_out_categories: Office365 breakout categories.
        :paramtype break_out_categories:
         ~azure.mgmt.network.v2021_02_01.models.O365BreakOutCategoryPolicies
        """
        super(O365PolicyProperties, self).__init__(**kwargs)
        self.break_out_categories = kwargs.get('break_out_categories', None)


class Office365PolicyProperties(msrest.serialization.Model):
    """Network Virtual Appliance Sku Properties.

    :ivar break_out_categories: Office 365 breakout categories.
    :vartype break_out_categories: ~azure.mgmt.network.v2021_02_01.models.BreakOutCategoryPolicies
    """

    _attribute_map = {
        'break_out_categories': {'key': 'breakOutCategories', 'type': 'BreakOutCategoryPolicies'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword break_out_categories: Office 365 breakout categories.
        :paramtype break_out_categories:
         ~azure.mgmt.network.v2021_02_01.models.BreakOutCategoryPolicies
        """
        super(Office365PolicyProperties, self).__init__(**kwargs)
        self.break_out_categories = kwargs.get('break_out_categories', None)


class Operation(msrest.serialization.Model):
    """Network REST API operation definition.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: Display metadata associated with the operation.
    :vartype display: ~azure.mgmt.network.v2021_02_01.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar service_specification: Specification of the service.
    :vartype service_specification:
     ~azure.mgmt.network.v2021_02_01.models.OperationPropertiesFormatServiceSpecification
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'OperationPropertiesFormatServiceSpecification'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: Display metadata associated with the operation.
        :paramtype display: ~azure.mgmt.network.v2021_02_01.models.OperationDisplay
        :keyword origin: Origin of the operation.
        :paramtype origin: str
        :keyword service_specification: Specification of the service.
        :paramtype service_specification:
         ~azure.mgmt.network.v2021_02_01.models.OperationPropertiesFormatServiceSpecification
        """
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.service_specification = kwargs.get('service_specification', None)


class OperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    :ivar provider: Service provider: Microsoft Network.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    :ivar operation: Type of the operation: get, read, delete, etc.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider: Service provider: Microsoft Network.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed.
        :paramtype resource: str
        :keyword operation: Type of the operation: get, read, delete, etc.
        :paramtype operation: str
        :keyword description: Description of the operation.
        :paramtype description: str
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.

    :ivar value: List of Network operations supported by the Network resource provider.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Network operations supported by the Network resource provider.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.Operation]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class OperationPropertiesFormatServiceSpecification(msrest.serialization.Model):
    """Specification of the service.

    :ivar metric_specifications: Operation service specification.
    :vartype metric_specifications:
     list[~azure.mgmt.network.v2021_02_01.models.MetricSpecification]
    :ivar log_specifications: Operation log specification.
    :vartype log_specifications: list[~azure.mgmt.network.v2021_02_01.models.LogSpecification]
    """

    _attribute_map = {
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[MetricSpecification]'},
        'log_specifications': {'key': 'logSpecifications', 'type': '[LogSpecification]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_specifications: Operation service specification.
        :paramtype metric_specifications:
         list[~azure.mgmt.network.v2021_02_01.models.MetricSpecification]
        :keyword log_specifications: Operation log specification.
        :paramtype log_specifications: list[~azure.mgmt.network.v2021_02_01.models.LogSpecification]
        """
        super(OperationPropertiesFormatServiceSpecification, self).__init__(**kwargs)
        self.metric_specifications = kwargs.get('metric_specifications', None)
        self.log_specifications = kwargs.get('log_specifications', None)


class OutboundRule(SubResource):
    """Outbound rule of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of outbound rules used by
     the load balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar allocated_outbound_ports: The number of outbound ports to be used for NAT.
    :vartype allocated_outbound_ports: int
    :ivar frontend_ip_configurations: The Frontend IP addresses of the load balancer.
    :vartype frontend_ip_configurations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar backend_address_pool: A reference to a pool of DIPs. Outbound traffic is randomly load
     balanced across IPs in the backend IPs.
    :vartype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the outbound rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar protocol: The protocol for the outbound rule in load balancer. Possible values include:
     "Tcp", "Udp", "All".
    :vartype protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.LoadBalancerOutboundRuleProtocol
    :ivar enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
     connection termination. This element is only used when the protocol is set to TCP.
    :vartype enable_tcp_reset: bool
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection.
    :vartype idle_timeout_in_minutes: int
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'allocated_outbound_ports': {'key': 'properties.allocatedOutboundPorts', 'type': 'int'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[SubResource]'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'enable_tcp_reset': {'key': 'properties.enableTcpReset', 'type': 'bool'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of outbound rules used by
         the load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword allocated_outbound_ports: The number of outbound ports to be used for NAT.
        :paramtype allocated_outbound_ports: int
        :keyword frontend_ip_configurations: The Frontend IP addresses of the load balancer.
        :paramtype frontend_ip_configurations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword backend_address_pool: A reference to a pool of DIPs. Outbound traffic is randomly load
         balanced across IPs in the backend IPs.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword protocol: The protocol for the outbound rule in load balancer. Possible values
         include: "Tcp", "Udp", "All".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.LoadBalancerOutboundRuleProtocol
        :keyword enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or
         unexpected connection termination. This element is only used when the protocol is set to TCP.
        :paramtype enable_tcp_reset: bool
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection.
        :paramtype idle_timeout_in_minutes: int
        """
        super(OutboundRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.allocated_outbound_ports = kwargs.get('allocated_outbound_ports', None)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.provisioning_state = None
        self.protocol = kwargs.get('protocol', None)
        self.enable_tcp_reset = kwargs.get('enable_tcp_reset', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)


class OwaspCrsExclusionEntry(msrest.serialization.Model):
    """Allow to exclude some variable satisfy the condition for the WAF check.

    All required parameters must be populated in order to send to Azure.

    :ivar match_variable: Required. The variable to be excluded. Possible values include:
     "RequestHeaderNames", "RequestCookieNames", "RequestArgNames".
    :vartype match_variable: str or
     ~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntryMatchVariable
    :ivar selector_match_operator: Required. When matchVariable is a collection, operate on the
     selector to specify which elements in the collection this exclusion applies to. Possible values
     include: "Equals", "Contains", "StartsWith", "EndsWith", "EqualsAny".
    :vartype selector_match_operator: str or
     ~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntrySelectorMatchOperator
    :ivar selector: Required. When matchVariable is a collection, operator used to specify which
     elements in the collection this exclusion applies to.
    :vartype selector: str
    """

    _validation = {
        'match_variable': {'required': True},
        'selector_match_operator': {'required': True},
        'selector': {'required': True},
    }

    _attribute_map = {
        'match_variable': {'key': 'matchVariable', 'type': 'str'},
        'selector_match_operator': {'key': 'selectorMatchOperator', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword match_variable: Required. The variable to be excluded. Possible values include:
         "RequestHeaderNames", "RequestCookieNames", "RequestArgNames".
        :paramtype match_variable: str or
         ~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntryMatchVariable
        :keyword selector_match_operator: Required. When matchVariable is a collection, operate on the
         selector to specify which elements in the collection this exclusion applies to. Possible values
         include: "Equals", "Contains", "StartsWith", "EndsWith", "EqualsAny".
        :paramtype selector_match_operator: str or
         ~azure.mgmt.network.v2021_02_01.models.OwaspCrsExclusionEntrySelectorMatchOperator
        :keyword selector: Required. When matchVariable is a collection, operator used to specify which
         elements in the collection this exclusion applies to.
        :paramtype selector: str
        """
        super(OwaspCrsExclusionEntry, self).__init__(**kwargs)
        self.match_variable = kwargs['match_variable']
        self.selector_match_operator = kwargs['selector_match_operator']
        self.selector = kwargs['selector']


class P2SConnectionConfiguration(SubResource):
    """P2SConnectionConfiguration Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar vpn_client_address_pool: The reference to the address space resource which represents
     Address space for P2S VpnClient.
    :vartype vpn_client_address_pool: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar routing_configuration: The Routing Configuration indicating the associated and propagated
     route tables on this connection.
    :vartype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
    :ivar enable_internet_security: Flag indicating whether the enable internet security flag is
     turned on for the P2S Connections or not.
    :vartype enable_internet_security: bool
    :ivar provisioning_state: The provisioning state of the P2SConnectionConfiguration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'vpn_client_address_pool': {'key': 'properties.vpnClientAddressPool', 'type': 'AddressSpace'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword vpn_client_address_pool: The reference to the address space resource which represents
         Address space for P2S VpnClient.
        :paramtype vpn_client_address_pool: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword routing_configuration: The Routing Configuration indicating the associated and
         propagated route tables on this connection.
        :paramtype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
        :keyword enable_internet_security: Flag indicating whether the enable internet security flag is
         turned on for the P2S Connections or not.
        :paramtype enable_internet_security: bool
        """
        super(P2SConnectionConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.vpn_client_address_pool = kwargs.get('vpn_client_address_pool', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.provisioning_state = None


class P2SVpnConnectionHealth(msrest.serialization.Model):
    """P2S Vpn connection detailed health written to sas url.

    :ivar sas_url: Returned sas url of the blob to which the p2s vpn connection detailed health
     will be written.
    :vartype sas_url: str
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_url: Returned sas url of the blob to which the p2s vpn connection detailed health
         will be written.
        :paramtype sas_url: str
        """
        super(P2SVpnConnectionHealth, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)


class P2SVpnConnectionHealthRequest(msrest.serialization.Model):
    """List of P2S Vpn connection health request.

    :ivar vpn_user_names_filter: The list of p2s vpn user names whose p2s vpn connection detailed
     health to retrieve for.
    :vartype vpn_user_names_filter: list[str]
    :ivar output_blob_sas_url: The sas-url to download the P2S Vpn connection health detail.
    :vartype output_blob_sas_url: str
    """

    _attribute_map = {
        'vpn_user_names_filter': {'key': 'vpnUserNamesFilter', 'type': '[str]'},
        'output_blob_sas_url': {'key': 'outputBlobSasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_user_names_filter: The list of p2s vpn user names whose p2s vpn connection
         detailed health to retrieve for.
        :paramtype vpn_user_names_filter: list[str]
        :keyword output_blob_sas_url: The sas-url to download the P2S Vpn connection health detail.
        :paramtype output_blob_sas_url: str
        """
        super(P2SVpnConnectionHealthRequest, self).__init__(**kwargs)
        self.vpn_user_names_filter = kwargs.get('vpn_user_names_filter', None)
        self.output_blob_sas_url = kwargs.get('output_blob_sas_url', None)


class P2SVpnConnectionRequest(msrest.serialization.Model):
    """List of p2s vpn connections to be disconnected.

    :ivar vpn_connection_ids: List of p2s vpn connection Ids.
    :vartype vpn_connection_ids: list[str]
    """

    _attribute_map = {
        'vpn_connection_ids': {'key': 'vpnConnectionIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_connection_ids: List of p2s vpn connection Ids.
        :paramtype vpn_connection_ids: list[str]
        """
        super(P2SVpnConnectionRequest, self).__init__(**kwargs)
        self.vpn_connection_ids = kwargs.get('vpn_connection_ids', None)


class P2SVpnGateway(Resource):
    """P2SVpnGateway Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_hub: The VirtualHub to which the gateway belongs.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar p2_s_connection_configurations: List of all p2s connection configurations of the gateway.
    :vartype p2_s_connection_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.P2SConnectionConfiguration]
    :ivar provisioning_state: The provisioning state of the P2S VPN gateway resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar vpn_gateway_scale_unit: The scale unit for this p2s vpn gateway.
    :vartype vpn_gateway_scale_unit: int
    :ivar vpn_server_configuration: The VpnServerConfiguration to which the p2sVpnGateway is
     attached to.
    :vartype vpn_server_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar vpn_client_connection_health: All P2S VPN clients' connection health status.
    :vartype vpn_client_connection_health:
     ~azure.mgmt.network.v2021_02_01.models.VpnClientConnectionHealth
    :ivar custom_dns_servers: List of all customer specified DNS servers IP addresses.
    :vartype custom_dns_servers: list[str]
    :ivar is_routing_preference_internet: Enable Routing Preference property for the Public IP
     Interface of the P2SVpnGateway.
    :vartype is_routing_preference_internet: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'vpn_client_connection_health': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'p2_s_connection_configurations': {'key': 'properties.p2SConnectionConfigurations', 'type': '[P2SConnectionConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_gateway_scale_unit': {'key': 'properties.vpnGatewayScaleUnit', 'type': 'int'},
        'vpn_server_configuration': {'key': 'properties.vpnServerConfiguration', 'type': 'SubResource'},
        'vpn_client_connection_health': {'key': 'properties.vpnClientConnectionHealth', 'type': 'VpnClientConnectionHealth'},
        'custom_dns_servers': {'key': 'properties.customDnsServers', 'type': '[str]'},
        'is_routing_preference_internet': {'key': 'properties.isRoutingPreferenceInternet', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_hub: The VirtualHub to which the gateway belongs.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword p2_s_connection_configurations: List of all p2s connection configurations of the
         gateway.
        :paramtype p2_s_connection_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.P2SConnectionConfiguration]
        :keyword vpn_gateway_scale_unit: The scale unit for this p2s vpn gateway.
        :paramtype vpn_gateway_scale_unit: int
        :keyword vpn_server_configuration: The VpnServerConfiguration to which the p2sVpnGateway is
         attached to.
        :paramtype vpn_server_configuration: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword custom_dns_servers: List of all customer specified DNS servers IP addresses.
        :paramtype custom_dns_servers: list[str]
        :keyword is_routing_preference_internet: Enable Routing Preference property for the Public IP
         Interface of the P2SVpnGateway.
        :paramtype is_routing_preference_internet: bool
        """
        super(P2SVpnGateway, self).__init__(**kwargs)
        self.etag = None
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.p2_s_connection_configurations = kwargs.get('p2_s_connection_configurations', None)
        self.provisioning_state = None
        self.vpn_gateway_scale_unit = kwargs.get('vpn_gateway_scale_unit', None)
        self.vpn_server_configuration = kwargs.get('vpn_server_configuration', None)
        self.vpn_client_connection_health = None
        self.custom_dns_servers = kwargs.get('custom_dns_servers', None)
        self.is_routing_preference_internet = kwargs.get('is_routing_preference_internet', None)


class P2SVpnProfileParameters(msrest.serialization.Model):
    """Vpn Client Parameters for package generation.

    :ivar authentication_method: VPN client authentication method. Possible values include:
     "EAPTLS", "EAPMSCHAPv2".
    :vartype authentication_method: str or
     ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
    """

    _attribute_map = {
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword authentication_method: VPN client authentication method. Possible values include:
         "EAPTLS", "EAPMSCHAPv2".
        :paramtype authentication_method: str or
         ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
        """
        super(P2SVpnProfileParameters, self).__init__(**kwargs)
        self.authentication_method = kwargs.get('authentication_method', None)


class PacketCapture(msrest.serialization.Model):
    """Parameters that define the create packet capture operation.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: long
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: long
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. The storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
    :ivar filters: A list of packet capture filters.
    :vartype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
    """

    _validation = {
        'target': {'required': True},
        'bytes_to_capture_per_packet': {'maximum': 4294967295, 'minimum': 0},
        'total_bytes_per_session': {'maximum': 4294967295, 'minimum': 0},
        'time_limit_in_seconds': {'maximum': 18000, 'minimum': 0},
        'storage_location': {'required': True},
    }

    _attribute_map = {
        'target': {'key': 'properties.target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'properties.bytesToCapturePerPacket', 'type': 'long'},
        'total_bytes_per_session': {'key': 'properties.totalBytesPerSession', 'type': 'long'},
        'time_limit_in_seconds': {'key': 'properties.timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'properties.storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'properties.filters', 'type': '[PacketCaptureFilter]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: long
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: long
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. The storage location for a packet capture session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
        :keyword filters: A list of packet capture filters.
        :paramtype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
        """
        super(PacketCapture, self).__init__(**kwargs)
        self.target = kwargs['target']
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs['storage_location']
        self.filters = kwargs.get('filters', None)


class PacketCaptureFilter(msrest.serialization.Model):
    """Filter that is applied to packet capture request. Multiple filters can be applied.

    :ivar protocol: Protocol to be filtered on. Possible values include: "TCP", "UDP", "Any".
     Default value: "Any".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.PcProtocol
    :ivar local_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
     address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries.
     Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
     supported. Default = null.
    :vartype local_ip_address: str
    :ivar remote_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
     address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries.
     Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
     supported. Default = null.
    :vartype remote_ip_address: str
    :ivar local_port: Local port to be filtered on. Notation: "80" for single port entry."80-85"
     for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
     ranges with multiple entries not currently supported. Default = null.
    :vartype local_port: str
    :ivar remote_port: Remote port to be filtered on. Notation: "80" for single port entry."80-85"
     for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
     ranges with multiple entries not currently supported. Default = null.
    :vartype remote_port: str
    """

    _attribute_map = {
        'protocol': {'key': 'protocol', 'type': 'str'},
        'local_ip_address': {'key': 'localIPAddress', 'type': 'str'},
        'remote_ip_address': {'key': 'remoteIPAddress', 'type': 'str'},
        'local_port': {'key': 'localPort', 'type': 'str'},
        'remote_port': {'key': 'remotePort', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol: Protocol to be filtered on. Possible values include: "TCP", "UDP", "Any".
         Default value: "Any".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.PcProtocol
        :keyword local_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
         address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries.
         Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
         supported. Default = null.
        :paramtype local_ip_address: str
        :keyword remote_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for
         single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple
         entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not
         currently supported. Default = null.
        :paramtype remote_ip_address: str
        :keyword local_port: Local port to be filtered on. Notation: "80" for single port entry."80-85"
         for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
         ranges with multiple entries not currently supported. Default = null.
        :paramtype local_port: str
        :keyword remote_port: Remote port to be filtered on. Notation: "80" for single port
         entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently
         supported. Mixing ranges with multiple entries not currently supported. Default = null.
        :paramtype remote_port: str
        """
        super(PacketCaptureFilter, self).__init__(**kwargs)
        self.protocol = kwargs.get('protocol', "Any")
        self.local_ip_address = kwargs.get('local_ip_address', None)
        self.remote_ip_address = kwargs.get('remote_ip_address', None)
        self.local_port = kwargs.get('local_port', None)
        self.remote_port = kwargs.get('remote_port', None)


class PacketCaptureListResult(msrest.serialization.Model):
    """List of packet capture sessions.

    :ivar value: Information about packet capture sessions.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureResult]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PacketCaptureResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Information about packet capture sessions.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureResult]
        """
        super(PacketCaptureListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PacketCaptureParameters(msrest.serialization.Model):
    """Parameters that define the create packet capture operation.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: long
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: long
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. The storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
    :ivar filters: A list of packet capture filters.
    :vartype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
    """

    _validation = {
        'target': {'required': True},
        'bytes_to_capture_per_packet': {'maximum': 4294967295, 'minimum': 0},
        'total_bytes_per_session': {'maximum': 4294967295, 'minimum': 0},
        'time_limit_in_seconds': {'maximum': 18000, 'minimum': 0},
        'storage_location': {'required': True},
    }

    _attribute_map = {
        'target': {'key': 'target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'bytesToCapturePerPacket', 'type': 'long'},
        'total_bytes_per_session': {'key': 'totalBytesPerSession', 'type': 'long'},
        'time_limit_in_seconds': {'key': 'timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'filters', 'type': '[PacketCaptureFilter]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: long
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: long
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. The storage location for a packet capture session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
        :keyword filters: A list of packet capture filters.
        :paramtype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
        """
        super(PacketCaptureParameters, self).__init__(**kwargs)
        self.target = kwargs['target']
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs['storage_location']
        self.filters = kwargs.get('filters', None)


class PacketCaptureQueryStatusResult(msrest.serialization.Model):
    """Status of packet capture session.

    :ivar name: The name of the packet capture resource.
    :vartype name: str
    :ivar id: The ID of the packet capture resource.
    :vartype id: str
    :ivar capture_start_time: The start time of the packet capture session.
    :vartype capture_start_time: ~datetime.datetime
    :ivar packet_capture_status: The status of the packet capture session. Possible values include:
     "NotStarted", "Running", "Stopped", "Error", "Unknown".
    :vartype packet_capture_status: str or ~azure.mgmt.network.v2021_02_01.models.PcStatus
    :ivar stop_reason: The reason the current packet capture session was stopped.
    :vartype stop_reason: str
    :ivar packet_capture_error: List of errors of packet capture session.
    :vartype packet_capture_error: list[str or ~azure.mgmt.network.v2021_02_01.models.PcError]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'capture_start_time': {'key': 'captureStartTime', 'type': 'iso-8601'},
        'packet_capture_status': {'key': 'packetCaptureStatus', 'type': 'str'},
        'stop_reason': {'key': 'stopReason', 'type': 'str'},
        'packet_capture_error': {'key': 'packetCaptureError', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the packet capture resource.
        :paramtype name: str
        :keyword id: The ID of the packet capture resource.
        :paramtype id: str
        :keyword capture_start_time: The start time of the packet capture session.
        :paramtype capture_start_time: ~datetime.datetime
        :keyword packet_capture_status: The status of the packet capture session. Possible values
         include: "NotStarted", "Running", "Stopped", "Error", "Unknown".
        :paramtype packet_capture_status: str or ~azure.mgmt.network.v2021_02_01.models.PcStatus
        :keyword stop_reason: The reason the current packet capture session was stopped.
        :paramtype stop_reason: str
        :keyword packet_capture_error: List of errors of packet capture session.
        :paramtype packet_capture_error: list[str or ~azure.mgmt.network.v2021_02_01.models.PcError]
        """
        super(PacketCaptureQueryStatusResult, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.capture_start_time = kwargs.get('capture_start_time', None)
        self.packet_capture_status = kwargs.get('packet_capture_status', None)
        self.stop_reason = kwargs.get('stop_reason', None)
        self.packet_capture_error = kwargs.get('packet_capture_error', None)


class PacketCaptureResult(msrest.serialization.Model):
    """Information about packet capture session.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the packet capture session.
    :vartype name: str
    :ivar id: ID of the packet capture operation.
    :vartype id: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar target: The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: long
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: long
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: The storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
    :ivar filters: A list of packet capture filters.
    :vartype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
    :ivar provisioning_state: The provisioning state of the packet capture session. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'etag': {'readonly': True},
        'bytes_to_capture_per_packet': {'maximum': 4294967295, 'minimum': 0},
        'total_bytes_per_session': {'maximum': 4294967295, 'minimum': 0},
        'time_limit_in_seconds': {'maximum': 18000, 'minimum': 0},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'target': {'key': 'properties.target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'properties.bytesToCapturePerPacket', 'type': 'long'},
        'total_bytes_per_session': {'key': 'properties.totalBytesPerSession', 'type': 'long'},
        'time_limit_in_seconds': {'key': 'properties.timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'properties.storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'properties.filters', 'type': '[PacketCaptureFilter]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: long
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: long
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: The storage location for a packet capture session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
        :keyword filters: A list of packet capture filters.
        :paramtype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
        """
        super(PacketCaptureResult, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.etag = None
        self.target = kwargs.get('target', None)
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs.get('storage_location', None)
        self.filters = kwargs.get('filters', None)
        self.provisioning_state = None


class PacketCaptureResultProperties(PacketCaptureParameters):
    """The properties of a packet capture session.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: long
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: long
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. The storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
    :ivar filters: A list of packet capture filters.
    :vartype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
    :ivar provisioning_state: The provisioning state of the packet capture session. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'target': {'required': True},
        'bytes_to_capture_per_packet': {'maximum': 4294967295, 'minimum': 0},
        'total_bytes_per_session': {'maximum': 4294967295, 'minimum': 0},
        'time_limit_in_seconds': {'maximum': 18000, 'minimum': 0},
        'storage_location': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'target': {'key': 'target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'bytesToCapturePerPacket', 'type': 'long'},
        'total_bytes_per_session': {'key': 'totalBytesPerSession', 'type': 'long'},
        'time_limit_in_seconds': {'key': 'timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'filters', 'type': '[PacketCaptureFilter]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: long
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: long
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. The storage location for a packet capture session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2021_02_01.models.PacketCaptureStorageLocation
        :keyword filters: A list of packet capture filters.
        :paramtype filters: list[~azure.mgmt.network.v2021_02_01.models.PacketCaptureFilter]
        """
        super(PacketCaptureResultProperties, self).__init__(**kwargs)
        self.provisioning_state = None


class PacketCaptureStorageLocation(msrest.serialization.Model):
    """The storage location for a packet capture session.

    :ivar storage_id: The ID of the storage account to save the packet capture session. Required if
     no local file path is provided.
    :vartype storage_id: str
    :ivar storage_path: The URI of the storage path to save the packet capture. Must be a
     well-formed URI describing the location to save the packet capture.
    :vartype storage_path: str
    :ivar file_path: A valid local path on the targeting VM. Must include the name of the capture
     file (*.cap). For linux virtual machine it must start with /var/captures. Required if no
     storage ID is provided, otherwise optional.
    :vartype file_path: str
    """

    _attribute_map = {
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'storage_path': {'key': 'storagePath', 'type': 'str'},
        'file_path': {'key': 'filePath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_id: The ID of the storage account to save the packet capture session. Required
         if no local file path is provided.
        :paramtype storage_id: str
        :keyword storage_path: The URI of the storage path to save the packet capture. Must be a
         well-formed URI describing the location to save the packet capture.
        :paramtype storage_path: str
        :keyword file_path: A valid local path on the targeting VM. Must include the name of the
         capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if
         no storage ID is provided, otherwise optional.
        :paramtype file_path: str
        """
        super(PacketCaptureStorageLocation, self).__init__(**kwargs)
        self.storage_id = kwargs.get('storage_id', None)
        self.storage_path = kwargs.get('storage_path', None)
        self.file_path = kwargs.get('file_path', None)


class PatchRouteFilter(SubResource):
    """Route Filter Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar rules: Collection of RouteFilterRules contained within a route filter.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
    :ivar peerings: A collection of references to express route circuit peerings.
    :vartype peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar ipv6_peerings: A collection of references to express route circuit ipv6 peerings.
    :vartype ipv6_peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar provisioning_state: The provisioning state of the route filter resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'peerings': {'readonly': True},
        'ipv6_peerings': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'rules': {'key': 'properties.rules', 'type': '[RouteFilterRule]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'ipv6_peerings': {'key': 'properties.ipv6Peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword rules: Collection of RouteFilterRules contained within a route filter.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
        """
        super(PatchRouteFilter, self).__init__(**kwargs)
        self.name = None
        self.etag = None
        self.type = None
        self.tags = kwargs.get('tags', None)
        self.rules = kwargs.get('rules', None)
        self.peerings = None
        self.ipv6_peerings = None
        self.provisioning_state = None


class PatchRouteFilterRule(SubResource):
    """Route Filter Rule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar access: The access type of the rule. Possible values include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
    :ivar route_filter_rule_type: The rule type of the rule. Possible values include: "Community".
    :vartype route_filter_rule_type: str or
     ~azure.mgmt.network.v2021_02_01.models.RouteFilterRuleType
    :ivar communities: The collection for bgp community values to filter on. e.g.
     ['12076:5010','12076:5020'].
    :vartype communities: list[str]
    :ivar provisioning_state: The provisioning state of the route filter rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'route_filter_rule_type': {'key': 'properties.routeFilterRuleType', 'type': 'str'},
        'communities': {'key': 'properties.communities', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword access: The access type of the rule. Possible values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
        :keyword route_filter_rule_type: The rule type of the rule. Possible values include:
         "Community".
        :paramtype route_filter_rule_type: str or
         ~azure.mgmt.network.v2021_02_01.models.RouteFilterRuleType
        :keyword communities: The collection for bgp community values to filter on. e.g.
         ['12076:5010','12076:5020'].
        :paramtype communities: list[str]
        """
        super(PatchRouteFilterRule, self).__init__(**kwargs)
        self.name = None
        self.etag = None
        self.access = kwargs.get('access', None)
        self.route_filter_rule_type = kwargs.get('route_filter_rule_type', None)
        self.communities = kwargs.get('communities', None)
        self.provisioning_state = None


class PeerExpressRouteCircuitConnection(SubResource):
    """Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the circuit.
    :vartype express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the peered circuit.
    :vartype peer_express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
    :vartype address_prefix: str
    :ivar circuit_connection_status: Express Route Circuit connection state. Possible values
     include: "Connected", "Connecting", "Disconnected".
    :vartype circuit_connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.CircuitConnectionStatus
    :ivar connection_name: The name of the express route circuit connection resource.
    :vartype connection_name: str
    :ivar auth_resource_guid: The resource guid of the authorization used for the express route
     circuit connection.
    :vartype auth_resource_guid: str
    :ivar provisioning_state: The provisioning state of the peer express route circuit connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'circuit_connection_status': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'express_route_circuit_peering': {'key': 'properties.expressRouteCircuitPeering', 'type': 'SubResource'},
        'peer_express_route_circuit_peering': {'key': 'properties.peerExpressRouteCircuitPeering', 'type': 'SubResource'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'circuit_connection_status': {'key': 'properties.circuitConnectionStatus', 'type': 'str'},
        'connection_name': {'key': 'properties.connectionName', 'type': 'str'},
        'auth_resource_guid': {'key': 'properties.authResourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the circuit.
        :paramtype express_route_circuit_peering: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the peered circuit.
        :paramtype peer_express_route_circuit_peering:
         ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
        :paramtype address_prefix: str
        :keyword connection_name: The name of the express route circuit connection resource.
        :paramtype connection_name: str
        :keyword auth_resource_guid: The resource guid of the authorization used for the express route
         circuit connection.
        :paramtype auth_resource_guid: str
        """
        super(PeerExpressRouteCircuitConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.express_route_circuit_peering = kwargs.get('express_route_circuit_peering', None)
        self.peer_express_route_circuit_peering = kwargs.get('peer_express_route_circuit_peering', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.circuit_connection_status = None
        self.connection_name = kwargs.get('connection_name', None)
        self.auth_resource_guid = kwargs.get('auth_resource_guid', None)
        self.provisioning_state = None


class PeerExpressRouteCircuitConnectionListResult(msrest.serialization.Model):
    """Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.

    :ivar value: The global reach peer circuit connection associated with Private Peering in an
     ExpressRoute Circuit.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PeerExpressRouteCircuitConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PeerExpressRouteCircuitConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The global reach peer circuit connection associated with Private Peering in an
         ExpressRoute Circuit.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.PeerExpressRouteCircuitConnection]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(PeerExpressRouteCircuitConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class PeerRoute(msrest.serialization.Model):
    """Peer routing details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The peer's local address.
    :vartype local_address: str
    :ivar network: The route's network prefix.
    :vartype network: str
    :ivar next_hop: The route's next hop.
    :vartype next_hop: str
    :ivar source_peer: The peer this route was learned from.
    :vartype source_peer: str
    :ivar origin: The source this route was learned from.
    :vartype origin: str
    :ivar as_path: The route's AS path sequence.
    :vartype as_path: str
    :ivar weight: The route's weight.
    :vartype weight: int
    """

    _validation = {
        'local_address': {'readonly': True},
        'network': {'readonly': True},
        'next_hop': {'readonly': True},
        'source_peer': {'readonly': True},
        'origin': {'readonly': True},
        'as_path': {'readonly': True},
        'weight': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'source_peer': {'key': 'sourcePeer', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PeerRoute, self).__init__(**kwargs)
        self.local_address = None
        self.network = None
        self.next_hop = None
        self.source_peer = None
        self.origin = None
        self.as_path = None
        self.weight = None


class PeerRouteList(msrest.serialization.Model):
    """List of virtual router peer routes.

    :ivar value: List of peer routes.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PeerRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PeerRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of peer routes.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PeerRoute]
        """
        super(PeerRouteList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PolicySettings(msrest.serialization.Model):
    """Defines contents of a web application firewall global configuration.

    :ivar state: The state of the policy. Possible values include: "Disabled", "Enabled".
    :vartype state: str or
     ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallEnabledState
    :ivar mode: The mode of the policy. Possible values include: "Prevention", "Detection".
    :vartype mode: str or ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallMode
    :ivar request_body_check: Whether to allow WAF to check request Body.
    :vartype request_body_check: bool
    :ivar max_request_body_size_in_kb: Maximum request body size in Kb for WAF.
    :vartype max_request_body_size_in_kb: int
    :ivar file_upload_limit_in_mb: Maximum file upload size in Mb for WAF.
    :vartype file_upload_limit_in_mb: int
    """

    _validation = {
        'max_request_body_size_in_kb': {'minimum': 8},
        'file_upload_limit_in_mb': {'minimum': 0},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'mode': {'key': 'mode', 'type': 'str'},
        'request_body_check': {'key': 'requestBodyCheck', 'type': 'bool'},
        'max_request_body_size_in_kb': {'key': 'maxRequestBodySizeInKb', 'type': 'int'},
        'file_upload_limit_in_mb': {'key': 'fileUploadLimitInMb', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword state: The state of the policy. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or
         ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallEnabledState
        :keyword mode: The mode of the policy. Possible values include: "Prevention", "Detection".
        :paramtype mode: str or ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallMode
        :keyword request_body_check: Whether to allow WAF to check request Body.
        :paramtype request_body_check: bool
        :keyword max_request_body_size_in_kb: Maximum request body size in Kb for WAF.
        :paramtype max_request_body_size_in_kb: int
        :keyword file_upload_limit_in_mb: Maximum file upload size in Mb for WAF.
        :paramtype file_upload_limit_in_mb: int
        """
        super(PolicySettings, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)
        self.mode = kwargs.get('mode', None)
        self.request_body_check = kwargs.get('request_body_check', None)
        self.max_request_body_size_in_kb = kwargs.get('max_request_body_size_in_kb', None)
        self.file_upload_limit_in_mb = kwargs.get('file_upload_limit_in_mb', None)


class PrepareNetworkPoliciesRequest(msrest.serialization.Model):
    """Details of PrepareNetworkPolicies for Subnet.

    :ivar service_name: The name of the service for which subnet is being prepared for.
    :vartype service_name: str
    :ivar network_intent_policy_configurations: A list of NetworkIntentPolicyConfiguration.
    :vartype network_intent_policy_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkIntentPolicyConfiguration]
    """

    _attribute_map = {
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'network_intent_policy_configurations': {'key': 'networkIntentPolicyConfigurations', 'type': '[NetworkIntentPolicyConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_name: The name of the service for which subnet is being prepared for.
        :paramtype service_name: str
        :keyword network_intent_policy_configurations: A list of NetworkIntentPolicyConfiguration.
        :paramtype network_intent_policy_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.NetworkIntentPolicyConfiguration]
        """
        super(PrepareNetworkPoliciesRequest, self).__init__(**kwargs)
        self.service_name = kwargs.get('service_name', None)
        self.network_intent_policy_configurations = kwargs.get('network_intent_policy_configurations', None)


class PrivateDnsZoneConfig(msrest.serialization.Model):
    """PrivateDnsZoneConfig resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar id: The id of the privateDnsZoneConfig.
    :vartype id: str
    :ivar type: Type of resource. Will be specified as private dns zone configurations.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_dns_zone_id: The resource id of the private dns zone.
    :vartype private_dns_zone_id: str
    :ivar provisioning_state: The provisioning state of the private dns zone group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar record_sets: A collection of information regarding a recordSet, holding information to
     identify private resources.
    :vartype record_sets: list[~azure.mgmt.network.v2021_02_01.models.RecordSet]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'record_sets': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_dns_zone_id': {'key': 'properties.privateDnsZoneId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'record_sets': {'key': 'properties.recordSets', 'type': '[RecordSet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword private_dns_zone_id: The resource id of the private dns zone.
        :paramtype private_dns_zone_id: str
        """
        super(PrivateDnsZoneConfig, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = None
        self.type = None
        self.etag = None
        self.private_dns_zone_id = kwargs.get('private_dns_zone_id', None)
        self.provisioning_state = None
        self.record_sets = None


class PrivateDnsZoneGroup(SubResource):
    """Private dns zone group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar type: Type of resource. Will be specified as private dns zone groups.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the private dns zone group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_dns_zone_configs: A collection of private dns zone configurations of the private
     dns zone group.
    :vartype private_dns_zone_configs:
     list[~azure.mgmt.network.v2021_02_01.models.PrivateDnsZoneConfig]
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_dns_zone_configs': {'key': 'properties.privateDnsZoneConfigs', 'type': '[PrivateDnsZoneConfig]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword type: Type of resource. Will be specified as private dns zone groups.
        :paramtype type: str
        :keyword private_dns_zone_configs: A collection of private dns zone configurations of the
         private dns zone group.
        :paramtype private_dns_zone_configs:
         list[~azure.mgmt.network.v2021_02_01.models.PrivateDnsZoneConfig]
        """
        super(PrivateDnsZoneGroup, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.etag = None
        self.provisioning_state = None
        self.private_dns_zone_configs = kwargs.get('private_dns_zone_configs', None)


class PrivateDnsZoneGroupListResult(msrest.serialization.Model):
    """Response for the ListPrivateDnsZoneGroups API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of private dns zone group resources in a private endpoint.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateDnsZoneGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateDnsZoneGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of private dns zone group resources in a private endpoint.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateDnsZoneGroup]
        """
        super(PrivateDnsZoneGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class PrivateEndpoint(Resource):
    """Private endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the load balancer.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource id of private endpoint.
    :vartype resource_guid: str
    :ivar subnet: The ID of the subnet from which the private IP will be allocated.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar network_interfaces: An array of references to the network interfaces created for this
     private endpoint.
    :vartype network_interfaces: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
    :ivar provisioning_state: The provisioning state of the private endpoint resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_link_service_connections: A grouping of information about the connection to the
     remote resource.
    :vartype private_link_service_connections:
     list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnection]
    :ivar manual_private_link_service_connections: A grouping of information about the connection
     to the remote resource. Used when the network admin does not have access to approve connections
     to the remote resource.
    :vartype manual_private_link_service_connections:
     list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnection]
    :ivar custom_dns_configs: An array of custom dns configurations.
    :vartype custom_dns_configs:
     list[~azure.mgmt.network.v2021_02_01.models.CustomDnsConfigPropertiesFormat]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_service_connections': {'key': 'properties.privateLinkServiceConnections', 'type': '[PrivateLinkServiceConnection]'},
        'manual_private_link_service_connections': {'key': 'properties.manualPrivateLinkServiceConnections', 'type': '[PrivateLinkServiceConnection]'},
        'custom_dns_configs': {'key': 'properties.customDnsConfigs', 'type': '[CustomDnsConfigPropertiesFormat]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the load balancer.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword resource_guid: The resource id of private endpoint.
        :paramtype resource_guid: str
        :keyword subnet: The ID of the subnet from which the private IP will be allocated.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword private_link_service_connections: A grouping of information about the connection to
         the remote resource.
        :paramtype private_link_service_connections:
         list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnection]
        :keyword manual_private_link_service_connections: A grouping of information about the
         connection to the remote resource. Used when the network admin does not have access to approve
         connections to the remote resource.
        :paramtype manual_private_link_service_connections:
         list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnection]
        :keyword custom_dns_configs: An array of custom dns configurations.
        :paramtype custom_dns_configs:
         list[~azure.mgmt.network.v2021_02_01.models.CustomDnsConfigPropertiesFormat]
        """
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.resource_guid = kwargs.get('resource_guid', None)
        self.subnet = kwargs.get('subnet', None)
        self.network_interfaces = None
        self.provisioning_state = None
        self.private_link_service_connections = kwargs.get('private_link_service_connections', None)
        self.manual_private_link_service_connections = kwargs.get('manual_private_link_service_connections', None)
        self.custom_dns_configs = kwargs.get('custom_dns_configs', None)


class PrivateEndpointConnection(SubResource):
    """PrivateEndpointConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_endpoint: The resource of private end point.
    :vartype private_endpoint: ~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar link_identifier: The consumer link id.
    :vartype link_identifier: str
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'private_endpoint': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'link_identifier': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'link_identifier': {'key': 'properties.linkIdentifier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
        """
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.private_endpoint = None
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = None
        self.link_identifier = None


class PrivateEndpointConnectionListResult(msrest.serialization.Model):
    """Response for the ListPrivateEndpointConnection API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of PrivateEndpointConnection resources for a specific private link service.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpointConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of PrivateEndpointConnection resources for a specific private link
         service.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpointConnection]
        """
        super(PrivateEndpointConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class PrivateEndpointListResult(msrest.serialization.Model):
    """Response for the ListPrivateEndpoints API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of private endpoint resources in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpoint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of private endpoint resources in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint]
        """
        super(PrivateEndpointListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class PrivateLinkService(Resource):
    """Private link service resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the load balancer.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar load_balancer_frontend_ip_configurations: An array of references to the load balancer IP
     configurations.
    :vartype load_balancer_frontend_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
    :ivar resource_guid: The resource id of private link service.
    :vartype resource_guid: str
    :ivar ip_configurations: An array of private link service IP configurations.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceIpConfiguration]
    :ivar network_interfaces: An array of references to the network interfaces created for this
     private link service.
    :vartype network_interfaces: list[~azure.mgmt.network.v2021_02_01.models.NetworkInterface]
    :ivar provisioning_state: The provisioning state of the private link service resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_endpoint_connections: An array of list about connections to the private endpoint.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpointConnection]
    :ivar visibility: The visibility list of the private link service.
    :vartype visibility:
     ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServicePropertiesVisibility
    :ivar auto_approval: The auto-approval list of the private link service.
    :vartype auto_approval:
     ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServicePropertiesAutoApproval
    :ivar fqdns: The list of Fqdn.
    :vartype fqdns: list[str]
    :ivar alias: The alias of the private link service.
    :vartype alias: str
    :ivar enable_proxy_protocol: Whether the private link service is enabled for proxy protocol or
     not.
    :vartype enable_proxy_protocol: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'alias': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'load_balancer_frontend_ip_configurations': {'key': 'properties.loadBalancerFrontendIpConfigurations', 'type': '[FrontendIPConfiguration]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[PrivateLinkServiceIpConfiguration]'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'visibility': {'key': 'properties.visibility', 'type': 'PrivateLinkServicePropertiesVisibility'},
        'auto_approval': {'key': 'properties.autoApproval', 'type': 'PrivateLinkServicePropertiesAutoApproval'},
        'fqdns': {'key': 'properties.fqdns', 'type': '[str]'},
        'alias': {'key': 'properties.alias', 'type': 'str'},
        'enable_proxy_protocol': {'key': 'properties.enableProxyProtocol', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the load balancer.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword load_balancer_frontend_ip_configurations: An array of references to the load balancer
         IP configurations.
        :paramtype load_balancer_frontend_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration]
        :keyword resource_guid: The resource id of private link service.
        :paramtype resource_guid: str
        :keyword ip_configurations: An array of private link service IP configurations.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceIpConfiguration]
        :keyword visibility: The visibility list of the private link service.
        :paramtype visibility:
         ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServicePropertiesVisibility
        :keyword auto_approval: The auto-approval list of the private link service.
        :paramtype auto_approval:
         ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServicePropertiesAutoApproval
        :keyword fqdns: The list of Fqdn.
        :paramtype fqdns: list[str]
        :keyword enable_proxy_protocol: Whether the private link service is enabled for proxy protocol
         or not.
        :paramtype enable_proxy_protocol: bool
        """
        super(PrivateLinkService, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.load_balancer_frontend_ip_configurations = kwargs.get('load_balancer_frontend_ip_configurations', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.network_interfaces = None
        self.provisioning_state = None
        self.private_endpoint_connections = None
        self.visibility = kwargs.get('visibility', None)
        self.auto_approval = kwargs.get('auto_approval', None)
        self.fqdns = kwargs.get('fqdns', None)
        self.alias = None
        self.enable_proxy_protocol = kwargs.get('enable_proxy_protocol', None)


class PrivateLinkServiceConnection(SubResource):
    """PrivateLinkServiceConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the private link service connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_link_service_id: The resource id of private link service.
    :vartype private_link_service_id: str
    :ivar resolved_private_link_service_location: The location for the resolved private link
     service.
    :vartype resolved_private_link_service_location: str
    :ivar group_ids: The ID(s) of the group(s) obtained from the remote resource that this private
     endpoint should connect to.
    :vartype group_ids: list[str]
    :ivar request_message: A message passed to the owner of the remote resource with this
     connection request. Restricted to 140 chars.
    :vartype request_message: str
    :ivar private_link_service_connection_state: A collection of read-only information about the
     state of the connection to the remote resource.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_service_id': {'key': 'properties.privateLinkServiceId', 'type': 'str'},
        'resolved_private_link_service_location': {'key': 'properties.resolvedPrivateLinkServiceLocation', 'type': 'str'},
        'group_ids': {'key': 'properties.groupIds', 'type': '[str]'},
        'request_message': {'key': 'properties.requestMessage', 'type': 'str'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword private_link_service_id: The resource id of private link service.
        :paramtype private_link_service_id: str
        :keyword resolved_private_link_service_location: The location for the resolved private link
         service.
        :paramtype resolved_private_link_service_location: str
        :keyword group_ids: The ID(s) of the group(s) obtained from the remote resource that this
         private endpoint should connect to.
        :paramtype group_ids: list[str]
        :keyword request_message: A message passed to the owner of the remote resource with this
         connection request. Restricted to 140 chars.
        :paramtype request_message: str
        :keyword private_link_service_connection_state: A collection of read-only information about the
         state of the connection to the remote resource.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.network.v2021_02_01.models.PrivateLinkServiceConnectionState
        """
        super(PrivateLinkServiceConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.provisioning_state = None
        self.private_link_service_id = kwargs.get('private_link_service_id', None)
        self.resolved_private_link_service_location = kwargs.get('resolved_private_link_service_location', None)
        self.group_ids = kwargs.get('group_ids', None)
        self.request_message = kwargs.get('request_message', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)


class PrivateLinkServiceConnectionState(msrest.serialization.Model):
    """A collection of information about the state of the connection between service consumer and provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service.
    :vartype status: str
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Indicates whether the connection has been Approved/Rejected/Removed by the
         owner of the service.
        :paramtype status: str
        :keyword description: The reason for approval/rejection of the connection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer.
        :paramtype actions_required: str
        """
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.description = kwargs.get('description', None)
        self.actions_required = kwargs.get('actions_required', None)


class PrivateLinkServiceIpConfiguration(SubResource):
    """The private link service ip configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of private link service ip configuration.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: The reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
    :ivar primary: Whether the ip configuration is primary or not.
    :vartype primary: bool
    :ivar provisioning_state: The provisioning state of the private link service IP configuration
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_ip_address_version: Whether the specific IP configuration is IPv4 or IPv6.
     Default is IPv4. Possible values include: "IPv4", "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of private link service ip configuration.
        :paramtype name: str
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: The reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.Subnet
        :keyword primary: Whether the ip configuration is primary or not.
        :paramtype primary: bool
        :keyword private_ip_address_version: Whether the specific IP configuration is IPv4 or IPv6.
         Default is IPv4. Possible values include: "IPv4", "IPv6".
        :paramtype private_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        """
        super(PrivateLinkServiceIpConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.primary = kwargs.get('primary', None)
        self.provisioning_state = None
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)


class PrivateLinkServiceListResult(msrest.serialization.Model):
    """Response for the ListPrivateLinkService API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of PrivateLinkService resources in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkService]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateLinkService]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of PrivateLinkService resources in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PrivateLinkService]
        """
        super(PrivateLinkServiceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ResourceSet(msrest.serialization.Model):
    """The base resource set for visibility and auto-approval.

    :ivar subscriptions: The list of subscriptions.
    :vartype subscriptions: list[str]
    """

    _attribute_map = {
        'subscriptions': {'key': 'subscriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword subscriptions: The list of subscriptions.
        :paramtype subscriptions: list[str]
        """
        super(ResourceSet, self).__init__(**kwargs)
        self.subscriptions = kwargs.get('subscriptions', None)


class PrivateLinkServicePropertiesAutoApproval(ResourceSet):
    """The auto-approval list of the private link service.

    :ivar subscriptions: The list of subscriptions.
    :vartype subscriptions: list[str]
    """

    _attribute_map = {
        'subscriptions': {'key': 'subscriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword subscriptions: The list of subscriptions.
        :paramtype subscriptions: list[str]
        """
        super(PrivateLinkServicePropertiesAutoApproval, self).__init__(**kwargs)


class PrivateLinkServicePropertiesVisibility(ResourceSet):
    """The visibility list of the private link service.

    :ivar subscriptions: The list of subscriptions.
    :vartype subscriptions: list[str]
    """

    _attribute_map = {
        'subscriptions': {'key': 'subscriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword subscriptions: The list of subscriptions.
        :paramtype subscriptions: list[str]
        """
        super(PrivateLinkServicePropertiesVisibility, self).__init__(**kwargs)


class PrivateLinkServiceVisibility(msrest.serialization.Model):
    """Response for the CheckPrivateLinkServiceVisibility API service call.

    :ivar visible: Private Link Service Visibility (True/False).
    :vartype visible: bool
    """

    _attribute_map = {
        'visible': {'key': 'visible', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword visible: Private Link Service Visibility (True/False).
        :paramtype visible: bool
        """
        super(PrivateLinkServiceVisibility, self).__init__(**kwargs)
        self.visible = kwargs.get('visible', None)


class Probe(SubResource):
    """A load balancer probe.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within the set of probes used by the load
     balancer. This name can be used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar load_balancing_rules: The load balancer rules that use this probe.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar protocol: The protocol of the end point. If 'Tcp' is specified, a received ACK is
     required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response
     from the specifies URI is required for the probe to be successful. Possible values include:
     "Http", "Tcp", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ProbeProtocol
    :ivar port: The port for communicating the probe. Possible values range from 1 to 65535,
     inclusive.
    :vartype port: int
    :ivar interval_in_seconds: The interval, in seconds, for how frequently to probe the endpoint
     for health status. Typically, the interval is slightly less than half the allocated timeout
     period (in seconds) which allows two full probes before taking the instance out of rotation.
     The default value is 15, the minimum value is 5.
    :vartype interval_in_seconds: int
    :ivar number_of_probes: The number of probes where if no response, will result in stopping
     further traffic from being delivered to the endpoint. This values allows endpoints to be taken
     out of rotation faster or slower than the typical times used in Azure.
    :vartype number_of_probes: int
    :ivar request_path: The URI used for requesting health status from the VM. Path is required if
     a protocol is set to http. Otherwise, it is not allowed. There is no default value.
    :vartype request_path: str
    :ivar provisioning_state: The provisioning state of the probe resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'interval_in_seconds': {'key': 'properties.intervalInSeconds', 'type': 'int'},
        'number_of_probes': {'key': 'properties.numberOfProbes', 'type': 'int'},
        'request_path': {'key': 'properties.requestPath', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within the set of probes used by the
         load balancer. This name can be used to access the resource.
        :paramtype name: str
        :keyword protocol: The protocol of the end point. If 'Tcp' is specified, a received ACK is
         required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response
         from the specifies URI is required for the probe to be successful. Possible values include:
         "Http", "Tcp", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.ProbeProtocol
        :keyword port: The port for communicating the probe. Possible values range from 1 to 65535,
         inclusive.
        :paramtype port: int
        :keyword interval_in_seconds: The interval, in seconds, for how frequently to probe the
         endpoint for health status. Typically, the interval is slightly less than half the allocated
         timeout period (in seconds) which allows two full probes before taking the instance out of
         rotation. The default value is 15, the minimum value is 5.
        :paramtype interval_in_seconds: int
        :keyword number_of_probes: The number of probes where if no response, will result in stopping
         further traffic from being delivered to the endpoint. This values allows endpoints to be taken
         out of rotation faster or slower than the typical times used in Azure.
        :paramtype number_of_probes: int
        :keyword request_path: The URI used for requesting health status from the VM. Path is required
         if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
        :paramtype request_path: str
        """
        super(Probe, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.load_balancing_rules = None
        self.protocol = kwargs.get('protocol', None)
        self.port = kwargs.get('port', None)
        self.interval_in_seconds = kwargs.get('interval_in_seconds', None)
        self.number_of_probes = kwargs.get('number_of_probes', None)
        self.request_path = kwargs.get('request_path', None)
        self.provisioning_state = None


class PropagatedRouteTable(msrest.serialization.Model):
    """The list of RouteTables to advertise the routes to.

    :ivar labels: The list of labels.
    :vartype labels: list[str]
    :ivar ids: The list of resource ids of all the RouteTables.
    :vartype ids: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _attribute_map = {
        'labels': {'key': 'labels', 'type': '[str]'},
        'ids': {'key': 'ids', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword labels: The list of labels.
        :paramtype labels: list[str]
        :keyword ids: The list of resource ids of all the RouteTables.
        :paramtype ids: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(PropagatedRouteTable, self).__init__(**kwargs)
        self.labels = kwargs.get('labels', None)
        self.ids = kwargs.get('ids', None)


class ProtocolConfiguration(msrest.serialization.Model):
    """Configuration of the protocol.

    :ivar http_configuration: HTTP configuration of the connectivity check.
    :vartype http_configuration: ~azure.mgmt.network.v2021_02_01.models.HTTPConfiguration
    """

    _attribute_map = {
        'http_configuration': {'key': 'HTTPConfiguration', 'type': 'HTTPConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword http_configuration: HTTP configuration of the connectivity check.
        :paramtype http_configuration: ~azure.mgmt.network.v2021_02_01.models.HTTPConfiguration
        """
        super(ProtocolConfiguration, self).__init__(**kwargs)
        self.http_configuration = kwargs.get('http_configuration', None)


class ProtocolCustomSettingsFormat(msrest.serialization.Model):
    """DDoS custom policy properties.

    :ivar protocol: The protocol for which the DDoS protection policy is being customized. Possible
     values include: "Tcp", "Udp", "Syn".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.DdosCustomPolicyProtocol
    :ivar trigger_rate_override: The customized DDoS protection trigger rate.
    :vartype trigger_rate_override: str
    :ivar source_rate_override: The customized DDoS protection source rate.
    :vartype source_rate_override: str
    :ivar trigger_sensitivity_override: The customized DDoS protection trigger rate sensitivity
     degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger
     rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less
     sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t.
     normal traffic. Possible values include: "Relaxed", "Low", "Default", "High".
    :vartype trigger_sensitivity_override: str or
     ~azure.mgmt.network.v2021_02_01.models.DdosCustomPolicyTriggerSensitivityOverride
    """

    _attribute_map = {
        'protocol': {'key': 'protocol', 'type': 'str'},
        'trigger_rate_override': {'key': 'triggerRateOverride', 'type': 'str'},
        'source_rate_override': {'key': 'sourceRateOverride', 'type': 'str'},
        'trigger_sensitivity_override': {'key': 'triggerSensitivityOverride', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol: The protocol for which the DDoS protection policy is being customized.
         Possible values include: "Tcp", "Udp", "Syn".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.DdosCustomPolicyProtocol
        :keyword trigger_rate_override: The customized DDoS protection trigger rate.
        :paramtype trigger_rate_override: str
        :keyword source_rate_override: The customized DDoS protection source rate.
        :paramtype source_rate_override: str
        :keyword trigger_sensitivity_override: The customized DDoS protection trigger rate sensitivity
         degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger
         rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less
         sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t.
         normal traffic. Possible values include: "Relaxed", "Low", "Default", "High".
        :paramtype trigger_sensitivity_override: str or
         ~azure.mgmt.network.v2021_02_01.models.DdosCustomPolicyTriggerSensitivityOverride
        """
        super(ProtocolCustomSettingsFormat, self).__init__(**kwargs)
        self.protocol = kwargs.get('protocol', None)
        self.trigger_rate_override = kwargs.get('trigger_rate_override', None)
        self.source_rate_override = kwargs.get('source_rate_override', None)
        self.trigger_sensitivity_override = kwargs.get('trigger_sensitivity_override', None)


class PublicIPAddress(Resource):
    """Public IP address resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the public ip address.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar sku: The public IP address SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar public_ip_allocation_method: The public IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype public_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar public_ip_address_version: The public IP address version. Possible values include:
     "IPv4", "IPv6".
    :vartype public_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    :ivar ip_configuration: The IP configuration associated with the public IP address.
    :vartype ip_configuration: ~azure.mgmt.network.v2021_02_01.models.IPConfiguration
    :ivar dns_settings: The FQDN of the DNS record associated with the public IP address.
    :vartype dns_settings: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressDnsSettings
    :ivar ddos_settings: The DDoS protection custom policy associated with the public IP address.
    :vartype ddos_settings: ~azure.mgmt.network.v2021_02_01.models.DdosSettings
    :ivar ip_tags: The list of tags associated with the public IP address.
    :vartype ip_tags: list[~azure.mgmt.network.v2021_02_01.models.IpTag]
    :ivar ip_address: The IP address associated with the public IP address resource.
    :vartype ip_address: str
    :ivar public_ip_prefix: The Public IP Prefix this Public IP Address should be allocated from.
    :vartype public_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar idle_timeout_in_minutes: The idle timeout of the public IP address.
    :vartype idle_timeout_in_minutes: int
    :ivar resource_guid: The resource GUID property of the public IP address resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the public IP address resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar service_public_ip_address: The service public IP address of the public IP address
     resource.
    :vartype service_public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar nat_gateway: The NatGateway for the Public IP address.
    :vartype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.NatGateway
    :ivar migration_phase: Migration phase of Public IP Address. Possible values include: "None",
     "Prepare", "Commit", "Abort", "Committed".
    :vartype migration_phase: str or
     ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressMigrationPhase
    :ivar linked_public_ip_address: The linked public IP address of the public IP address resource.
    :vartype linked_public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
    :ivar delete_option: Specify what happens to the public IP address when the VM using it is
     deleted. Possible values include: "Delete", "Detach".
    :vartype delete_option: str or ~azure.mgmt.network.v2021_02_01.models.DeleteOptions
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'ip_configuration': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'sku': {'key': 'sku', 'type': 'PublicIPAddressSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'public_ip_allocation_method': {'key': 'properties.publicIPAllocationMethod', 'type': 'str'},
        'public_ip_address_version': {'key': 'properties.publicIPAddressVersion', 'type': 'str'},
        'ip_configuration': {'key': 'properties.ipConfiguration', 'type': 'IPConfiguration'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'PublicIPAddressDnsSettings'},
        'ddos_settings': {'key': 'properties.ddosSettings', 'type': 'DdosSettings'},
        'ip_tags': {'key': 'properties.ipTags', 'type': '[IpTag]'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'public_ip_prefix': {'key': 'properties.publicIPPrefix', 'type': 'SubResource'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'service_public_ip_address': {'key': 'properties.servicePublicIPAddress', 'type': 'PublicIPAddress'},
        'nat_gateway': {'key': 'properties.natGateway', 'type': 'NatGateway'},
        'migration_phase': {'key': 'properties.migrationPhase', 'type': 'str'},
        'linked_public_ip_address': {'key': 'properties.linkedPublicIPAddress', 'type': 'PublicIPAddress'},
        'delete_option': {'key': 'properties.deleteOption', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the public ip address.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword sku: The public IP address SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSku
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword public_ip_allocation_method: The public IP address allocation method. Possible values
         include: "Static", "Dynamic".
        :paramtype public_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword public_ip_address_version: The public IP address version. Possible values include:
         "IPv4", "IPv6".
        :paramtype public_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        :keyword dns_settings: The FQDN of the DNS record associated with the public IP address.
        :paramtype dns_settings: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressDnsSettings
        :keyword ddos_settings: The DDoS protection custom policy associated with the public IP
         address.
        :paramtype ddos_settings: ~azure.mgmt.network.v2021_02_01.models.DdosSettings
        :keyword ip_tags: The list of tags associated with the public IP address.
        :paramtype ip_tags: list[~azure.mgmt.network.v2021_02_01.models.IpTag]
        :keyword ip_address: The IP address associated with the public IP address resource.
        :paramtype ip_address: str
        :keyword public_ip_prefix: The Public IP Prefix this Public IP Address should be allocated
         from.
        :paramtype public_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword idle_timeout_in_minutes: The idle timeout of the public IP address.
        :paramtype idle_timeout_in_minutes: int
        :keyword service_public_ip_address: The service public IP address of the public IP address
         resource.
        :paramtype service_public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        :keyword nat_gateway: The NatGateway for the Public IP address.
        :paramtype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.NatGateway
        :keyword migration_phase: Migration phase of Public IP Address. Possible values include:
         "None", "Prepare", "Commit", "Abort", "Committed".
        :paramtype migration_phase: str or
         ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressMigrationPhase
        :keyword linked_public_ip_address: The linked public IP address of the public IP address
         resource.
        :paramtype linked_public_ip_address: ~azure.mgmt.network.v2021_02_01.models.PublicIPAddress
        :keyword delete_option: Specify what happens to the public IP address when the VM using it is
         deleted. Possible values include: "Delete", "Detach".
        :paramtype delete_option: str or ~azure.mgmt.network.v2021_02_01.models.DeleteOptions
        """
        super(PublicIPAddress, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.zones = kwargs.get('zones', None)
        self.public_ip_allocation_method = kwargs.get('public_ip_allocation_method', None)
        self.public_ip_address_version = kwargs.get('public_ip_address_version', None)
        self.ip_configuration = None
        self.dns_settings = kwargs.get('dns_settings', None)
        self.ddos_settings = kwargs.get('ddos_settings', None)
        self.ip_tags = kwargs.get('ip_tags', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.public_ip_prefix = kwargs.get('public_ip_prefix', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.service_public_ip_address = kwargs.get('service_public_ip_address', None)
        self.nat_gateway = kwargs.get('nat_gateway', None)
        self.migration_phase = kwargs.get('migration_phase', None)
        self.linked_public_ip_address = kwargs.get('linked_public_ip_address', None)
        self.delete_option = kwargs.get('delete_option', None)


class PublicIPAddressDnsSettings(msrest.serialization.Model):
    """Contains FQDN of the DNS record associated with the public IP address.

    :ivar domain_name_label: The domain name label. The concatenation of the domain name label and
     the regionalized DNS zone make up the fully qualified domain name associated with the public IP
     address. If a domain name label is specified, an A DNS record is created for the public IP in
     the Microsoft Azure DNS system.
    :vartype domain_name_label: str
    :ivar fqdn: The Fully Qualified Domain Name of the A DNS record associated with the public IP.
     This is the concatenation of the domainNameLabel and the regionalized DNS zone.
    :vartype fqdn: str
    :ivar reverse_fqdn: The reverse FQDN. A user-visible, fully qualified domain name that resolves
     to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created
     pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
    :vartype reverse_fqdn: str
    """

    _attribute_map = {
        'domain_name_label': {'key': 'domainNameLabel', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'reverse_fqdn': {'key': 'reverseFqdn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword domain_name_label: The domain name label. The concatenation of the domain name label
         and the regionalized DNS zone make up the fully qualified domain name associated with the
         public IP address. If a domain name label is specified, an A DNS record is created for the
         public IP in the Microsoft Azure DNS system.
        :paramtype domain_name_label: str
        :keyword fqdn: The Fully Qualified Domain Name of the A DNS record associated with the public
         IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
        :paramtype fqdn: str
        :keyword reverse_fqdn: The reverse FQDN. A user-visible, fully qualified domain name that
         resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is
         created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
        :paramtype reverse_fqdn: str
        """
        super(PublicIPAddressDnsSettings, self).__init__(**kwargs)
        self.domain_name_label = kwargs.get('domain_name_label', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.reverse_fqdn = kwargs.get('reverse_fqdn', None)


class PublicIPAddressListResult(msrest.serialization.Model):
    """Response for ListPublicIpAddresses API service call.

    :ivar value: A list of public IP addresses that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PublicIPAddress]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PublicIPAddress]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of public IP addresses that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PublicIPAddress]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(PublicIPAddressListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class PublicIPAddressSku(msrest.serialization.Model):
    """SKU of a public IP address.

    :ivar name: Name of a public IP address SKU. Possible values include: "Basic", "Standard".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSkuName
    :ivar tier: Tier of a public IP address SKU. Possible values include: "Regional", "Global".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSkuTier
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of a public IP address SKU. Possible values include: "Basic", "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSkuName
        :keyword tier: Tier of a public IP address SKU. Possible values include: "Regional", "Global".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPAddressSkuTier
        """
        super(PublicIPAddressSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)


class PublicIPPrefix(Resource):
    """Public IP prefix resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the public ip address.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar sku: The public IP prefix SKU.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar public_ip_address_version: The public IP address version. Possible values include:
     "IPv4", "IPv6".
    :vartype public_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
    :ivar ip_tags: The list of tags associated with the public IP prefix.
    :vartype ip_tags: list[~azure.mgmt.network.v2021_02_01.models.IpTag]
    :ivar prefix_length: The Length of the Public IP Prefix.
    :vartype prefix_length: int
    :ivar ip_prefix: The allocated Prefix.
    :vartype ip_prefix: str
    :ivar public_ip_addresses: The list of all referenced PublicIPAddresses.
    :vartype public_ip_addresses:
     list[~azure.mgmt.network.v2021_02_01.models.ReferencedPublicIpAddress]
    :ivar load_balancer_frontend_ip_configuration: The reference to load balancer frontend IP
     configuration associated with the public IP prefix.
    :vartype load_balancer_frontend_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar custom_ip_prefix: The customIpPrefix that this prefix is associated with.
    :vartype custom_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar resource_guid: The resource GUID property of the public IP prefix resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the public IP prefix resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar nat_gateway: NatGateway of Public IP Prefix.
    :vartype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.NatGateway
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'ip_prefix': {'readonly': True},
        'public_ip_addresses': {'readonly': True},
        'load_balancer_frontend_ip_configuration': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'sku': {'key': 'sku', 'type': 'PublicIPPrefixSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'public_ip_address_version': {'key': 'properties.publicIPAddressVersion', 'type': 'str'},
        'ip_tags': {'key': 'properties.ipTags', 'type': '[IpTag]'},
        'prefix_length': {'key': 'properties.prefixLength', 'type': 'int'},
        'ip_prefix': {'key': 'properties.ipPrefix', 'type': 'str'},
        'public_ip_addresses': {'key': 'properties.publicIPAddresses', 'type': '[ReferencedPublicIpAddress]'},
        'load_balancer_frontend_ip_configuration': {'key': 'properties.loadBalancerFrontendIpConfiguration', 'type': 'SubResource'},
        'custom_ip_prefix': {'key': 'properties.customIPPrefix', 'type': 'SubResource'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'nat_gateway': {'key': 'properties.natGateway', 'type': 'NatGateway'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the public ip address.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword sku: The public IP prefix SKU.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSku
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword public_ip_address_version: The public IP address version. Possible values include:
         "IPv4", "IPv6".
        :paramtype public_ip_address_version: str or ~azure.mgmt.network.v2021_02_01.models.IPVersion
        :keyword ip_tags: The list of tags associated with the public IP prefix.
        :paramtype ip_tags: list[~azure.mgmt.network.v2021_02_01.models.IpTag]
        :keyword prefix_length: The Length of the Public IP Prefix.
        :paramtype prefix_length: int
        :keyword custom_ip_prefix: The customIpPrefix that this prefix is associated with.
        :paramtype custom_ip_prefix: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword nat_gateway: NatGateway of Public IP Prefix.
        :paramtype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.NatGateway
        """
        super(PublicIPPrefix, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.zones = kwargs.get('zones', None)
        self.public_ip_address_version = kwargs.get('public_ip_address_version', None)
        self.ip_tags = kwargs.get('ip_tags', None)
        self.prefix_length = kwargs.get('prefix_length', None)
        self.ip_prefix = None
        self.public_ip_addresses = None
        self.load_balancer_frontend_ip_configuration = None
        self.custom_ip_prefix = kwargs.get('custom_ip_prefix', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.nat_gateway = kwargs.get('nat_gateway', None)


class PublicIPPrefixListResult(msrest.serialization.Model):
    """Response for ListPublicIpPrefixes API service call.

    :ivar value: A list of public IP prefixes that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.PublicIPPrefix]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PublicIPPrefix]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of public IP prefixes that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.PublicIPPrefix]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(PublicIPPrefixListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class PublicIPPrefixSku(msrest.serialization.Model):
    """SKU of a public IP prefix.

    :ivar name: Name of a public IP prefix SKU. Possible values include: "Standard".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSkuName
    :ivar tier: Tier of a public IP prefix SKU. Possible values include: "Regional", "Global".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSkuTier
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of a public IP prefix SKU. Possible values include: "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSkuName
        :keyword tier: Tier of a public IP prefix SKU. Possible values include: "Regional", "Global".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.PublicIPPrefixSkuTier
        """
        super(PublicIPPrefixSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)


class QosIpRange(msrest.serialization.Model):
    """Qos Traffic Profiler IP Range properties.

    :ivar start_ip: Start IP Address.
    :vartype start_ip: str
    :ivar end_ip: End IP Address.
    :vartype end_ip: str
    """

    _attribute_map = {
        'start_ip': {'key': 'startIP', 'type': 'str'},
        'end_ip': {'key': 'endIP', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_ip: Start IP Address.
        :paramtype start_ip: str
        :keyword end_ip: End IP Address.
        :paramtype end_ip: str
        """
        super(QosIpRange, self).__init__(**kwargs)
        self.start_ip = kwargs.get('start_ip', None)
        self.end_ip = kwargs.get('end_ip', None)


class QosPortRange(msrest.serialization.Model):
    """Qos Traffic Profiler Port range properties.

    :ivar start: Qos Port Range start.
    :vartype start: int
    :ivar end: Qos Port Range end.
    :vartype end: int
    """

    _attribute_map = {
        'start': {'key': 'start', 'type': 'int'},
        'end': {'key': 'end', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start: Qos Port Range start.
        :paramtype start: int
        :keyword end: Qos Port Range end.
        :paramtype end: int
        """
        super(QosPortRange, self).__init__(**kwargs)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)


class QueryTroubleshootingParameters(msrest.serialization.Model):
    """Parameters that define the resource to query the troubleshooting result.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource ID to query the troubleshooting result.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource ID to query the troubleshooting
         result.
        :paramtype target_resource_id: str
        """
        super(QueryTroubleshootingParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class RadiusServer(msrest.serialization.Model):
    """Radius Server Settings.

    All required parameters must be populated in order to send to Azure.

    :ivar radius_server_address: Required. The address of this radius server.
    :vartype radius_server_address: str
    :ivar radius_server_score: The initial score assigned to this radius server.
    :vartype radius_server_score: long
    :ivar radius_server_secret: The secret used for this radius server.
    :vartype radius_server_secret: str
    """

    _validation = {
        'radius_server_address': {'required': True},
    }

    _attribute_map = {
        'radius_server_address': {'key': 'radiusServerAddress', 'type': 'str'},
        'radius_server_score': {'key': 'radiusServerScore', 'type': 'long'},
        'radius_server_secret': {'key': 'radiusServerSecret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword radius_server_address: Required. The address of this radius server.
        :paramtype radius_server_address: str
        :keyword radius_server_score: The initial score assigned to this radius server.
        :paramtype radius_server_score: long
        :keyword radius_server_secret: The secret used for this radius server.
        :paramtype radius_server_secret: str
        """
        super(RadiusServer, self).__init__(**kwargs)
        self.radius_server_address = kwargs['radius_server_address']
        self.radius_server_score = kwargs.get('radius_server_score', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)


class RecordSet(msrest.serialization.Model):
    """A collective group of information about the record set information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar record_type: Resource record type.
    :vartype record_type: str
    :ivar record_set_name: Recordset name.
    :vartype record_set_name: str
    :ivar fqdn: Fqdn that resolves to private endpoint ip address.
    :vartype fqdn: str
    :ivar provisioning_state: The provisioning state of the recordset. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar ttl: Recordset time to live.
    :vartype ttl: int
    :ivar ip_addresses: The private ip address of the private endpoint.
    :vartype ip_addresses: list[str]
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'record_type': {'key': 'recordType', 'type': 'str'},
        'record_set_name': {'key': 'recordSetName', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'ttl': {'key': 'ttl', 'type': 'int'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword record_type: Resource record type.
        :paramtype record_type: str
        :keyword record_set_name: Recordset name.
        :paramtype record_set_name: str
        :keyword fqdn: Fqdn that resolves to private endpoint ip address.
        :paramtype fqdn: str
        :keyword ttl: Recordset time to live.
        :paramtype ttl: int
        :keyword ip_addresses: The private ip address of the private endpoint.
        :paramtype ip_addresses: list[str]
        """
        super(RecordSet, self).__init__(**kwargs)
        self.record_type = kwargs.get('record_type', None)
        self.record_set_name = kwargs.get('record_set_name', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.provisioning_state = None
        self.ttl = kwargs.get('ttl', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)


class ReferencedPublicIpAddress(msrest.serialization.Model):
    """Reference to a public IP address.

    :ivar id: The PublicIPAddress Reference.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The PublicIPAddress Reference.
        :paramtype id: str
        """
        super(ReferencedPublicIpAddress, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ResourceNavigationLink(SubResource):
    """ResourceNavigationLink resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar linked_resource_type: Resource type of the linked resource.
    :vartype linked_resource_type: str
    :ivar link: Link to the external resource.
    :vartype link: str
    :ivar provisioning_state: The provisioning state of the resource navigation link resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'linked_resource_type': {'key': 'properties.linkedResourceType', 'type': 'str'},
        'link': {'key': 'properties.link', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword linked_resource_type: Resource type of the linked resource.
        :paramtype linked_resource_type: str
        :keyword link: Link to the external resource.
        :paramtype link: str
        """
        super(ResourceNavigationLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.linked_resource_type = kwargs.get('linked_resource_type', None)
        self.link = kwargs.get('link', None)
        self.provisioning_state = None


class ResourceNavigationLinksListResult(msrest.serialization.Model):
    """Response for ResourceNavigationLinks_List operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The resource navigation links in a subnet.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ResourceNavigationLink]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ResourceNavigationLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The resource navigation links in a subnet.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ResourceNavigationLink]
        """
        super(ResourceNavigationLinksListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class RetentionPolicyParameters(msrest.serialization.Model):
    """Parameters that define the retention policy for flow log.

    :ivar days: Number of days to retain flow log records.
    :vartype days: int
    :ivar enabled: Flag to enable/disable retention.
    :vartype enabled: bool
    """

    _attribute_map = {
        'days': {'key': 'days', 'type': 'int'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword days: Number of days to retain flow log records.
        :paramtype days: int
        :keyword enabled: Flag to enable/disable retention.
        :paramtype enabled: bool
        """
        super(RetentionPolicyParameters, self).__init__(**kwargs)
        self.days = kwargs.get('days', 0)
        self.enabled = kwargs.get('enabled', False)


class Route(SubResource):
    """Route resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar address_prefix: The destination CIDR to which the route applies.
    :vartype address_prefix: str
    :ivar next_hop_type: The type of Azure hop the packet should be sent to. Possible values
     include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.RouteNextHopType
    :ivar next_hop_ip_address: The IP address packets should be forwarded to. Next hop values are
     only allowed in routes where the next hop type is VirtualAppliance.
    :vartype next_hop_ip_address: str
    :ivar provisioning_state: The provisioning state of the route resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar has_bgp_override: A value indicating whether this route overrides overlapping BGP routes
     regardless of LPM.
    :vartype has_bgp_override: bool
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'next_hop_type': {'key': 'properties.nextHopType', 'type': 'str'},
        'next_hop_ip_address': {'key': 'properties.nextHopIpAddress', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'has_bgp_override': {'key': 'properties.hasBgpOverride', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type: The type of the resource.
        :paramtype type: str
        :keyword address_prefix: The destination CIDR to which the route applies.
        :paramtype address_prefix: str
        :keyword next_hop_type: The type of Azure hop the packet should be sent to. Possible values
         include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2021_02_01.models.RouteNextHopType
        :keyword next_hop_ip_address: The IP address packets should be forwarded to. Next hop values
         are only allowed in routes where the next hop type is VirtualAppliance.
        :paramtype next_hop_ip_address: str
        :keyword has_bgp_override: A value indicating whether this route overrides overlapping BGP
         routes regardless of LPM.
        :paramtype has_bgp_override: bool
        """
        super(Route, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.provisioning_state = None
        self.has_bgp_override = kwargs.get('has_bgp_override', None)


class RouteFilter(Resource):
    """Route Filter Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar rules: Collection of RouteFilterRules contained within a route filter.
    :vartype rules: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
    :ivar peerings: A collection of references to express route circuit peerings.
    :vartype peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar ipv6_peerings: A collection of references to express route circuit ipv6 peerings.
    :vartype ipv6_peerings: list[~azure.mgmt.network.v2021_02_01.models.ExpressRouteCircuitPeering]
    :ivar provisioning_state: The provisioning state of the route filter resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'peerings': {'readonly': True},
        'ipv6_peerings': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'rules': {'key': 'properties.rules', 'type': '[RouteFilterRule]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'ipv6_peerings': {'key': 'properties.ipv6Peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword rules: Collection of RouteFilterRules contained within a route filter.
        :paramtype rules: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
        """
        super(RouteFilter, self).__init__(**kwargs)
        self.etag = None
        self.rules = kwargs.get('rules', None)
        self.peerings = None
        self.ipv6_peerings = None
        self.provisioning_state = None


class RouteFilterListResult(msrest.serialization.Model):
    """Response for the ListRouteFilters API service call.

    :ivar value: A list of route filters in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.RouteFilter]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteFilter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of route filters in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.RouteFilter]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteFilterListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteFilterRule(SubResource):
    """Route Filter Rule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar access: The access type of the rule. Possible values include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
    :ivar route_filter_rule_type: The rule type of the rule. Possible values include: "Community".
    :vartype route_filter_rule_type: str or
     ~azure.mgmt.network.v2021_02_01.models.RouteFilterRuleType
    :ivar communities: The collection for bgp community values to filter on. e.g.
     ['12076:5010','12076:5020'].
    :vartype communities: list[str]
    :ivar provisioning_state: The provisioning state of the route filter rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'route_filter_rule_type': {'key': 'properties.routeFilterRuleType', 'type': 'str'},
        'communities': {'key': 'properties.communities', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword access: The access type of the rule. Possible values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
        :keyword route_filter_rule_type: The rule type of the rule. Possible values include:
         "Community".
        :paramtype route_filter_rule_type: str or
         ~azure.mgmt.network.v2021_02_01.models.RouteFilterRuleType
        :keyword communities: The collection for bgp community values to filter on. e.g.
         ['12076:5010','12076:5020'].
        :paramtype communities: list[str]
        """
        super(RouteFilterRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.location = kwargs.get('location', None)
        self.etag = None
        self.access = kwargs.get('access', None)
        self.route_filter_rule_type = kwargs.get('route_filter_rule_type', None)
        self.communities = kwargs.get('communities', None)
        self.provisioning_state = None


class RouteFilterRuleListResult(msrest.serialization.Model):
    """Response for the ListRouteFilterRules API service call.

    :ivar value: A list of RouteFilterRules in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteFilterRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of RouteFilterRules in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.RouteFilterRule]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteFilterRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteListResult(msrest.serialization.Model):
    """Response for the ListRoute API service call.

    :ivar value: A list of routes in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.Route]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Route]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of routes in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.Route]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteTable(Resource):
    """Route table resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar routes: Collection of routes contained within a route table.
    :vartype routes: list[~azure.mgmt.network.v2021_02_01.models.Route]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
    :ivar disable_bgp_route_propagation: Whether to disable the routes learned by BGP on that route
     table. True means disable.
    :vartype disable_bgp_route_propagation: bool
    :ivar provisioning_state: The provisioning state of the route table resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar resource_guid: The resource GUID property of the route table.
    :vartype resource_guid: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'subnets': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[Route]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'disable_bgp_route_propagation': {'key': 'properties.disableBgpRoutePropagation', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword routes: Collection of routes contained within a route table.
        :paramtype routes: list[~azure.mgmt.network.v2021_02_01.models.Route]
        :keyword disable_bgp_route_propagation: Whether to disable the routes learned by BGP on that
         route table. True means disable.
        :paramtype disable_bgp_route_propagation: bool
        """
        super(RouteTable, self).__init__(**kwargs)
        self.etag = None
        self.routes = kwargs.get('routes', None)
        self.subnets = None
        self.disable_bgp_route_propagation = kwargs.get('disable_bgp_route_propagation', None)
        self.provisioning_state = None
        self.resource_guid = None


class RouteTableListResult(msrest.serialization.Model):
    """Response for the ListRouteTable API service call.

    :ivar value: A list of route tables in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.RouteTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of route tables in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.RouteTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RoutingConfiguration(msrest.serialization.Model):
    """Routing Configuration indicating the associated and propagated route tables for this connection.

    :ivar associated_route_table: The resource id RouteTable associated with this
     RoutingConfiguration.
    :vartype associated_route_table: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar propagated_route_tables: The list of RouteTables to advertise the routes to.
    :vartype propagated_route_tables: ~azure.mgmt.network.v2021_02_01.models.PropagatedRouteTable
    :ivar vnet_routes: List of routes that control routing from VirtualHub into a virtual network
     connection.
    :vartype vnet_routes: ~azure.mgmt.network.v2021_02_01.models.VnetRoute
    """

    _attribute_map = {
        'associated_route_table': {'key': 'associatedRouteTable', 'type': 'SubResource'},
        'propagated_route_tables': {'key': 'propagatedRouteTables', 'type': 'PropagatedRouteTable'},
        'vnet_routes': {'key': 'vnetRoutes', 'type': 'VnetRoute'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword associated_route_table: The resource id RouteTable associated with this
         RoutingConfiguration.
        :paramtype associated_route_table: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword propagated_route_tables: The list of RouteTables to advertise the routes to.
        :paramtype propagated_route_tables: ~azure.mgmt.network.v2021_02_01.models.PropagatedRouteTable
        :keyword vnet_routes: List of routes that control routing from VirtualHub into a virtual
         network connection.
        :paramtype vnet_routes: ~azure.mgmt.network.v2021_02_01.models.VnetRoute
        """
        super(RoutingConfiguration, self).__init__(**kwargs)
        self.associated_route_table = kwargs.get('associated_route_table', None)
        self.propagated_route_tables = kwargs.get('propagated_route_tables', None)
        self.vnet_routes = kwargs.get('vnet_routes', None)


class SecurityGroupNetworkInterface(msrest.serialization.Model):
    """Network interface and all its associated security rules.

    :ivar id: ID of the network interface.
    :vartype id: str
    :ivar security_rule_associations: All security rules associated with the network interface.
    :vartype security_rule_associations:
     ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAssociations
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rule_associations': {'key': 'securityRuleAssociations', 'type': 'SecurityRuleAssociations'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: ID of the network interface.
        :paramtype id: str
        :keyword security_rule_associations: All security rules associated with the network interface.
        :paramtype security_rule_associations:
         ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAssociations
        """
        super(SecurityGroupNetworkInterface, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.security_rule_associations = kwargs.get('security_rule_associations', None)


class SecurityGroupViewParameters(msrest.serialization.Model):
    """Parameters that define the VM to check security groups for.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. ID of the target VM.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. ID of the target VM.
        :paramtype target_resource_id: str
        """
        super(SecurityGroupViewParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class SecurityGroupViewResult(msrest.serialization.Model):
    """The information about security rules applied to the specified VM.

    :ivar network_interfaces: List of network interfaces on the specified VM.
    :vartype network_interfaces:
     list[~azure.mgmt.network.v2021_02_01.models.SecurityGroupNetworkInterface]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[SecurityGroupNetworkInterface]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interfaces: List of network interfaces on the specified VM.
        :paramtype network_interfaces:
         list[~azure.mgmt.network.v2021_02_01.models.SecurityGroupNetworkInterface]
        """
        super(SecurityGroupViewResult, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class SecurityPartnerProvider(Resource):
    """Security Partner Provider resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the Security Partner Provider resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar security_provider_name: The security provider name. Possible values include: "ZScaler",
     "IBoss", "Checkpoint".
    :vartype security_provider_name: str or
     ~azure.mgmt.network.v2021_02_01.models.SecurityProviderName
    :ivar connection_status: The connection status with the Security Partner Provider. Possible
     values include: "Unknown", "PartiallyConnected", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.SecurityPartnerProviderConnectionStatus
    :ivar virtual_hub: The virtualHub to which the Security Partner Provider belongs.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'connection_status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'security_provider_name': {'key': 'properties.securityProviderName', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword security_provider_name: The security provider name. Possible values include:
         "ZScaler", "IBoss", "Checkpoint".
        :paramtype security_provider_name: str or
         ~azure.mgmt.network.v2021_02_01.models.SecurityProviderName
        :keyword virtual_hub: The virtualHub to which the Security Partner Provider belongs.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(SecurityPartnerProvider, self).__init__(**kwargs)
        self.etag = None
        self.provisioning_state = None
        self.security_provider_name = kwargs.get('security_provider_name', None)
        self.connection_status = None
        self.virtual_hub = kwargs.get('virtual_hub', None)


class SecurityPartnerProviderListResult(msrest.serialization.Model):
    """Response for ListSecurityPartnerProviders API service call.

    :ivar value: List of Security Partner Providers in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.SecurityPartnerProvider]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityPartnerProvider]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Security Partner Providers in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.SecurityPartnerProvider]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(SecurityPartnerProviderListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class SecurityRule(SubResource):
    """Network security rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar description: A description for this rule. Restricted to 140 chars.
    :vartype description: str
    :ivar protocol: Network protocol this rule applies to. Possible values include: "Tcp", "Udp",
     "Icmp", "Esp", "*", "Ah".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleProtocol
    :ivar source_port_range: The source port or range. Integer or range between 0 and 65535.
     Asterisk '*' can also be used to match all ports.
    :vartype source_port_range: str
    :ivar destination_port_range: The destination port or range. Integer or range between 0 and
     65535. Asterisk '*' can also be used to match all ports.
    :vartype destination_port_range: str
    :ivar source_address_prefix: The CIDR or source IP range. Asterisk '*' can also be used to
     match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     can also be used. If this is an ingress rule, specifies where network traffic originates from.
    :vartype source_address_prefix: str
    :ivar source_address_prefixes: The CIDR or source IP ranges.
    :vartype source_address_prefixes: list[str]
    :ivar source_application_security_groups: The application security group specified as source.
    :vartype source_application_security_groups:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
    :ivar destination_address_prefix: The destination address prefix. CIDR or destination IP range.
     Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     'AzureLoadBalancer' and 'Internet' can also be used.
    :vartype destination_address_prefix: str
    :ivar destination_address_prefixes: The destination address prefixes. CIDR or destination IP
     ranges.
    :vartype destination_address_prefixes: list[str]
    :ivar destination_application_security_groups: The application security group specified as
     destination.
    :vartype destination_application_security_groups:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
    :ivar source_port_ranges: The source port ranges.
    :vartype source_port_ranges: list[str]
    :ivar destination_port_ranges: The destination port ranges.
    :vartype destination_port_ranges: list[str]
    :ivar access: The network traffic is allowed or denied. Possible values include: "Allow",
     "Deny".
    :vartype access: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
    :ivar priority: The priority of the rule. The value can be between 100 and 4096. The priority
     number must be unique for each rule in the collection. The lower the priority number, the
     higher the priority of the rule.
    :vartype priority: int
    :ivar direction: The direction of the rule. The direction specifies if rule will be evaluated
     on incoming or outgoing traffic. Possible values include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleDirection
    :ivar provisioning_state: The provisioning state of the security rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'source_port_range': {'key': 'properties.sourcePortRange', 'type': 'str'},
        'destination_port_range': {'key': 'properties.destinationPortRange', 'type': 'str'},
        'source_address_prefix': {'key': 'properties.sourceAddressPrefix', 'type': 'str'},
        'source_address_prefixes': {'key': 'properties.sourceAddressPrefixes', 'type': '[str]'},
        'source_application_security_groups': {'key': 'properties.sourceApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'destination_address_prefix': {'key': 'properties.destinationAddressPrefix', 'type': 'str'},
        'destination_address_prefixes': {'key': 'properties.destinationAddressPrefixes', 'type': '[str]'},
        'destination_application_security_groups': {'key': 'properties.destinationApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[str]'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'direction': {'key': 'properties.direction', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type: The type of the resource.
        :paramtype type: str
        :keyword description: A description for this rule. Restricted to 140 chars.
        :paramtype description: str
        :keyword protocol: Network protocol this rule applies to. Possible values include: "Tcp",
         "Udp", "Icmp", "Esp", "*", "Ah".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleProtocol
        :keyword source_port_range: The source port or range. Integer or range between 0 and 65535.
         Asterisk '*' can also be used to match all ports.
        :paramtype source_port_range: str
        :keyword destination_port_range: The destination port or range. Integer or range between 0 and
         65535. Asterisk '*' can also be used to match all ports.
        :paramtype destination_port_range: str
        :keyword source_address_prefix: The CIDR or source IP range. Asterisk '*' can also be used to
         match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
         can also be used. If this is an ingress rule, specifies where network traffic originates from.
        :paramtype source_address_prefix: str
        :keyword source_address_prefixes: The CIDR or source IP ranges.
        :paramtype source_address_prefixes: list[str]
        :keyword source_application_security_groups: The application security group specified as
         source.
        :paramtype source_application_security_groups:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
        :keyword destination_address_prefix: The destination address prefix. CIDR or destination IP
         range. Asterisk '*' can also be used to match all source IPs. Default tags such as
         'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
        :paramtype destination_address_prefix: str
        :keyword destination_address_prefixes: The destination address prefixes. CIDR or destination IP
         ranges.
        :paramtype destination_address_prefixes: list[str]
        :keyword destination_application_security_groups: The application security group specified as
         destination.
        :paramtype destination_application_security_groups:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationSecurityGroup]
        :keyword source_port_ranges: The source port ranges.
        :paramtype source_port_ranges: list[str]
        :keyword destination_port_ranges: The destination port ranges.
        :paramtype destination_port_ranges: list[str]
        :keyword access: The network traffic is allowed or denied. Possible values include: "Allow",
         "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleAccess
        :keyword priority: The priority of the rule. The value can be between 100 and 4096. The
         priority number must be unique for each rule in the collection. The lower the priority number,
         the higher the priority of the rule.
        :paramtype priority: int
        :keyword direction: The direction of the rule. The direction specifies if rule will be
         evaluated on incoming or outgoing traffic. Possible values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2021_02_01.models.SecurityRuleDirection
        """
        super(SecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.description = kwargs.get('description', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_port_range = kwargs.get('source_port_range', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.source_address_prefixes = kwargs.get('source_address_prefixes', None)
        self.source_application_security_groups = kwargs.get('source_application_security_groups', None)
        self.destination_address_prefix = kwargs.get('destination_address_prefix', None)
        self.destination_address_prefixes = kwargs.get('destination_address_prefixes', None)
        self.destination_application_security_groups = kwargs.get('destination_application_security_groups', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.access = kwargs.get('access', None)
        self.priority = kwargs.get('priority', None)
        self.direction = kwargs.get('direction', None)
        self.provisioning_state = None


class SecurityRuleAssociations(msrest.serialization.Model):
    """All security rules associated with the network interface.

    :ivar network_interface_association: Network interface and it's custom security rules.
    :vartype network_interface_association:
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceAssociation
    :ivar subnet_association: Subnet and it's custom security rules.
    :vartype subnet_association: ~azure.mgmt.network.v2021_02_01.models.SubnetAssociation
    :ivar default_security_rules: Collection of default security rules of the network security
     group.
    :vartype default_security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    :ivar effective_security_rules: Collection of effective security rules.
    :vartype effective_security_rules:
     list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityRule]
    """

    _attribute_map = {
        'network_interface_association': {'key': 'networkInterfaceAssociation', 'type': 'NetworkInterfaceAssociation'},
        'subnet_association': {'key': 'subnetAssociation', 'type': 'SubnetAssociation'},
        'default_security_rules': {'key': 'defaultSecurityRules', 'type': '[SecurityRule]'},
        'effective_security_rules': {'key': 'effectiveSecurityRules', 'type': '[EffectiveNetworkSecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interface_association: Network interface and it's custom security rules.
        :paramtype network_interface_association:
         ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceAssociation
        :keyword subnet_association: Subnet and it's custom security rules.
        :paramtype subnet_association: ~azure.mgmt.network.v2021_02_01.models.SubnetAssociation
        :keyword default_security_rules: Collection of default security rules of the network security
         group.
        :paramtype default_security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
        :keyword effective_security_rules: Collection of effective security rules.
        :paramtype effective_security_rules:
         list[~azure.mgmt.network.v2021_02_01.models.EffectiveNetworkSecurityRule]
        """
        super(SecurityRuleAssociations, self).__init__(**kwargs)
        self.network_interface_association = kwargs.get('network_interface_association', None)
        self.subnet_association = kwargs.get('subnet_association', None)
        self.default_security_rules = kwargs.get('default_security_rules', None)
        self.effective_security_rules = kwargs.get('effective_security_rules', None)


class SecurityRuleListResult(msrest.serialization.Model):
    """Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.

    :ivar value: The security rules in a network security group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The security rules in a network security group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(SecurityRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ServiceAssociationLink(SubResource):
    """ServiceAssociationLink resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar linked_resource_type: Resource type of the linked resource.
    :vartype linked_resource_type: str
    :ivar link: Link to the external resource.
    :vartype link: str
    :ivar provisioning_state: The provisioning state of the service association link resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar allow_delete: If true, the resource can be deleted.
    :vartype allow_delete: bool
    :ivar locations: A list of locations.
    :vartype locations: list[str]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'linked_resource_type': {'key': 'properties.linkedResourceType', 'type': 'str'},
        'link': {'key': 'properties.link', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'allow_delete': {'key': 'properties.allowDelete', 'type': 'bool'},
        'locations': {'key': 'properties.locations', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword linked_resource_type: Resource type of the linked resource.
        :paramtype linked_resource_type: str
        :keyword link: Link to the external resource.
        :paramtype link: str
        :keyword allow_delete: If true, the resource can be deleted.
        :paramtype allow_delete: bool
        :keyword locations: A list of locations.
        :paramtype locations: list[str]
        """
        super(ServiceAssociationLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.linked_resource_type = kwargs.get('linked_resource_type', None)
        self.link = kwargs.get('link', None)
        self.provisioning_state = None
        self.allow_delete = kwargs.get('allow_delete', None)
        self.locations = kwargs.get('locations', None)


class ServiceAssociationLinksListResult(msrest.serialization.Model):
    """Response for ServiceAssociationLinks_List operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The service association links in a subnet.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceAssociationLink]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServiceAssociationLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The service association links in a subnet.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceAssociationLink]
        """
        super(ServiceAssociationLinksListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ServiceEndpointPolicy(Resource):
    """Service End point policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar kind: Kind of service endpoint policy. This is metadata used for the Azure portal
     experience.
    :vartype kind: str
    :ivar service_endpoint_policy_definitions: A collection of service endpoint policy definitions
     of the service endpoint policy.
    :vartype service_endpoint_policy_definitions:
     list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicyDefinition]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
    :ivar resource_guid: The resource GUID property of the service endpoint policy resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the service endpoint policy resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'kind': {'readonly': True},
        'subnets': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'service_endpoint_policy_definitions': {'key': 'properties.serviceEndpointPolicyDefinitions', 'type': '[ServiceEndpointPolicyDefinition]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword service_endpoint_policy_definitions: A collection of service endpoint policy
         definitions of the service endpoint policy.
        :paramtype service_endpoint_policy_definitions:
         list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicyDefinition]
        """
        super(ServiceEndpointPolicy, self).__init__(**kwargs)
        self.etag = None
        self.kind = None
        self.service_endpoint_policy_definitions = kwargs.get('service_endpoint_policy_definitions', None)
        self.subnets = None
        self.resource_guid = None
        self.provisioning_state = None


class ServiceEndpointPolicyDefinition(SubResource):
    """Service Endpoint policy definitions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar description: A description for this rule. Restricted to 140 chars.
    :vartype description: str
    :ivar service: Service endpoint name.
    :vartype service: str
    :ivar service_resources: A list of service resources.
    :vartype service_resources: list[str]
    :ivar provisioning_state: The provisioning state of the service endpoint policy definition
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'service': {'key': 'properties.service', 'type': 'str'},
        'service_resources': {'key': 'properties.serviceResources', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword description: A description for this rule. Restricted to 140 chars.
        :paramtype description: str
        :keyword service: Service endpoint name.
        :paramtype service: str
        :keyword service_resources: A list of service resources.
        :paramtype service_resources: list[str]
        """
        super(ServiceEndpointPolicyDefinition, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.description = kwargs.get('description', None)
        self.service = kwargs.get('service', None)
        self.service_resources = kwargs.get('service_resources', None)
        self.provisioning_state = None


class ServiceEndpointPolicyDefinitionListResult(msrest.serialization.Model):
    """Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint policy.

    :ivar value: The service endpoint policy definition in a service endpoint policy.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicyDefinition]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServiceEndpointPolicyDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The service endpoint policy definition in a service endpoint policy.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicyDefinition]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ServiceEndpointPolicyDefinitionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ServiceEndpointPolicyListResult(msrest.serialization.Model):
    """Response for ListServiceEndpointPolicies API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of ServiceEndpointPolicy resources.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicy]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServiceEndpointPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ServiceEndpointPolicy resources.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicy]
        """
        super(ServiceEndpointPolicyListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ServiceEndpointPropertiesFormat(msrest.serialization.Model):
    """The service endpoint properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar service: The type of the endpoint service.
    :vartype service: str
    :ivar locations: A list of locations.
    :vartype locations: list[str]
    :ivar provisioning_state: The provisioning state of the service endpoint resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'service': {'key': 'service', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service: The type of the endpoint service.
        :paramtype service: str
        :keyword locations: A list of locations.
        :paramtype locations: list[str]
        """
        super(ServiceEndpointPropertiesFormat, self).__init__(**kwargs)
        self.service = kwargs.get('service', None)
        self.locations = kwargs.get('locations', None)
        self.provisioning_state = None


class ServiceTagInformation(msrest.serialization.Model):
    """The service tag information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar properties: Properties of the service tag information.
    :vartype properties:
     ~azure.mgmt.network.v2021_02_01.models.ServiceTagInformationPropertiesFormat
    :ivar name: The name of service tag.
    :vartype name: str
    :ivar id: The ID of service tag.
    :vartype id: str
    """

    _validation = {
        'properties': {'readonly': True},
        'name': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'ServiceTagInformationPropertiesFormat'},
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ServiceTagInformation, self).__init__(**kwargs)
        self.properties = None
        self.name = None
        self.id = None


class ServiceTagInformationPropertiesFormat(msrest.serialization.Model):
    """Properties of the service tag information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar change_number: The iteration number of service tag.
    :vartype change_number: str
    :ivar region: The region of service tag.
    :vartype region: str
    :ivar system_service: The name of system service.
    :vartype system_service: str
    :ivar address_prefixes: The list of IP address prefixes.
    :vartype address_prefixes: list[str]
    :ivar state: The state of the service tag.
    :vartype state: str
    """

    _validation = {
        'change_number': {'readonly': True},
        'region': {'readonly': True},
        'system_service': {'readonly': True},
        'address_prefixes': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'change_number': {'key': 'changeNumber', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'system_service': {'key': 'systemService', 'type': 'str'},
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ServiceTagInformationPropertiesFormat, self).__init__(**kwargs)
        self.change_number = None
        self.region = None
        self.system_service = None
        self.address_prefixes = None
        self.state = None


class ServiceTagsListResult(msrest.serialization.Model):
    """Response for the ListServiceTags API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the cloud.
    :vartype name: str
    :ivar id: The ID of the cloud.
    :vartype id: str
    :ivar type: The azure resource type.
    :vartype type: str
    :ivar change_number: The iteration number.
    :vartype change_number: str
    :ivar cloud: The name of the cloud.
    :vartype cloud: str
    :ivar values: The list of service tag information resources.
    :vartype values: list[~azure.mgmt.network.v2021_02_01.models.ServiceTagInformation]
    :ivar next_link: The URL to get next page of service tag information resources.
    :vartype next_link: str
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'change_number': {'readonly': True},
        'cloud': {'readonly': True},
        'values': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'change_number': {'key': 'changeNumber', 'type': 'str'},
        'cloud': {'key': 'cloud', 'type': 'str'},
        'values': {'key': 'values', 'type': '[ServiceTagInformation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ServiceTagsListResult, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.type = None
        self.change_number = None
        self.cloud = None
        self.values = None
        self.next_link = None


class SessionIds(msrest.serialization.Model):
    """List of session IDs.

    :ivar session_ids: List of session IDs.
    :vartype session_ids: list[str]
    """

    _attribute_map = {
        'session_ids': {'key': 'sessionIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword session_ids: List of session IDs.
        :paramtype session_ids: list[str]
        """
        super(SessionIds, self).__init__(**kwargs)
        self.session_ids = kwargs.get('session_ids', None)


class Sku(msrest.serialization.Model):
    """The sku of this Bastion Host.

    :ivar name: The name of this Bastion Host. Possible values include: "Basic", "Standard".
     Default value: "Standard".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.BastionHostSkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of this Bastion Host. Possible values include: "Basic", "Standard".
         Default value: "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.BastionHostSkuName
        """
        super(Sku, self).__init__(**kwargs)
        self.name = kwargs.get('name', "Standard")


class StaticRoute(msrest.serialization.Model):
    """List of all Static Routes.

    :ivar name: The name of the StaticRoute that is unique within a VnetRoute.
    :vartype name: str
    :ivar address_prefixes: List of all address prefixes.
    :vartype address_prefixes: list[str]
    :ivar next_hop_ip_address: The ip address of the next hop.
    :vartype next_hop_ip_address: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the StaticRoute that is unique within a VnetRoute.
        :paramtype name: str
        :keyword address_prefixes: List of all address prefixes.
        :paramtype address_prefixes: list[str]
        :keyword next_hop_ip_address: The ip address of the next hop.
        :paramtype next_hop_ip_address: str
        """
        super(StaticRoute, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)


class Subnet(SubResource):
    """Subnet in a virtual network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar address_prefix: The address prefix for the subnet.
    :vartype address_prefix: str
    :ivar address_prefixes: List of address prefixes for the subnet.
    :vartype address_prefixes: list[str]
    :ivar network_security_group: The reference to the NetworkSecurityGroup resource.
    :vartype network_security_group: ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup
    :ivar route_table: The reference to the RouteTable resource.
    :vartype route_table: ~azure.mgmt.network.v2021_02_01.models.RouteTable
    :ivar nat_gateway: Nat gateway associated with this subnet.
    :vartype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar service_endpoints: An array of service endpoints.
    :vartype service_endpoints:
     list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPropertiesFormat]
    :ivar service_endpoint_policies: An array of service endpoint policies.
    :vartype service_endpoint_policies:
     list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicy]
    :ivar private_endpoints: An array of references to private endpoints.
    :vartype private_endpoints: list[~azure.mgmt.network.v2021_02_01.models.PrivateEndpoint]
    :ivar ip_configurations: An array of references to the network interface IP configurations
     using subnet.
    :vartype ip_configurations: list[~azure.mgmt.network.v2021_02_01.models.IPConfiguration]
    :ivar ip_configuration_profiles: Array of IP configuration profiles which reference this
     subnet.
    :vartype ip_configuration_profiles:
     list[~azure.mgmt.network.v2021_02_01.models.IPConfigurationProfile]
    :ivar ip_allocations: Array of IpAllocation which reference this subnet.
    :vartype ip_allocations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar resource_navigation_links: An array of references to the external resources using subnet.
    :vartype resource_navigation_links:
     list[~azure.mgmt.network.v2021_02_01.models.ResourceNavigationLink]
    :ivar service_association_links: An array of references to services injecting into this subnet.
    :vartype service_association_links:
     list[~azure.mgmt.network.v2021_02_01.models.ServiceAssociationLink]
    :ivar delegations: An array of references to the delegations on the subnet.
    :vartype delegations: list[~azure.mgmt.network.v2021_02_01.models.Delegation]
    :ivar purpose: A read-only string identifying the intention of use for this subnet based on
     delegations and other user-defined properties.
    :vartype purpose: str
    :ivar provisioning_state: The provisioning state of the subnet resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar private_endpoint_network_policies: Enable or Disable apply network policies on private
     end point in the subnet. Possible values include: "Enabled", "Disabled". Default value:
     "Enabled".
    :vartype private_endpoint_network_policies: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPrivateEndpointNetworkPolicies
    :ivar private_link_service_network_policies: Enable or Disable apply network policies on
     private link service in the subnet. Possible values include: "Enabled", "Disabled". Default
     value: "Enabled".
    :vartype private_link_service_network_policies: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPrivateLinkServiceNetworkPolicies
    :ivar application_gateway_ip_configurations: Application gateway IP configurations of virtual
     network resource.
    :vartype application_gateway_ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayIPConfiguration]
    """

    _validation = {
        'etag': {'readonly': True},
        'private_endpoints': {'readonly': True},
        'ip_configurations': {'readonly': True},
        'ip_configuration_profiles': {'readonly': True},
        'resource_navigation_links': {'readonly': True},
        'service_association_links': {'readonly': True},
        'purpose': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'address_prefixes': {'key': 'properties.addressPrefixes', 'type': '[str]'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'route_table': {'key': 'properties.routeTable', 'type': 'RouteTable'},
        'nat_gateway': {'key': 'properties.natGateway', 'type': 'SubResource'},
        'service_endpoints': {'key': 'properties.serviceEndpoints', 'type': '[ServiceEndpointPropertiesFormat]'},
        'service_endpoint_policies': {'key': 'properties.serviceEndpointPolicies', 'type': '[ServiceEndpointPolicy]'},
        'private_endpoints': {'key': 'properties.privateEndpoints', 'type': '[PrivateEndpoint]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[IPConfiguration]'},
        'ip_configuration_profiles': {'key': 'properties.ipConfigurationProfiles', 'type': '[IPConfigurationProfile]'},
        'ip_allocations': {'key': 'properties.ipAllocations', 'type': '[SubResource]'},
        'resource_navigation_links': {'key': 'properties.resourceNavigationLinks', 'type': '[ResourceNavigationLink]'},
        'service_association_links': {'key': 'properties.serviceAssociationLinks', 'type': '[ServiceAssociationLink]'},
        'delegations': {'key': 'properties.delegations', 'type': '[Delegation]'},
        'purpose': {'key': 'properties.purpose', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_endpoint_network_policies': {'key': 'properties.privateEndpointNetworkPolicies', 'type': 'str'},
        'private_link_service_network_policies': {'key': 'properties.privateLinkServiceNetworkPolicies', 'type': 'str'},
        'application_gateway_ip_configurations': {'key': 'properties.applicationGatewayIpConfigurations', 'type': '[ApplicationGatewayIPConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword address_prefix: The address prefix for the subnet.
        :paramtype address_prefix: str
        :keyword address_prefixes: List of address prefixes for the subnet.
        :paramtype address_prefixes: list[str]
        :keyword network_security_group: The reference to the NetworkSecurityGroup resource.
        :paramtype network_security_group: ~azure.mgmt.network.v2021_02_01.models.NetworkSecurityGroup
        :keyword route_table: The reference to the RouteTable resource.
        :paramtype route_table: ~azure.mgmt.network.v2021_02_01.models.RouteTable
        :keyword nat_gateway: Nat gateway associated with this subnet.
        :paramtype nat_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword service_endpoints: An array of service endpoints.
        :paramtype service_endpoints:
         list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPropertiesFormat]
        :keyword service_endpoint_policies: An array of service endpoint policies.
        :paramtype service_endpoint_policies:
         list[~azure.mgmt.network.v2021_02_01.models.ServiceEndpointPolicy]
        :keyword ip_allocations: Array of IpAllocation which reference this subnet.
        :paramtype ip_allocations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword delegations: An array of references to the delegations on the subnet.
        :paramtype delegations: list[~azure.mgmt.network.v2021_02_01.models.Delegation]
        :keyword private_endpoint_network_policies: Enable or Disable apply network policies on private
         end point in the subnet. Possible values include: "Enabled", "Disabled". Default value:
         "Enabled".
        :paramtype private_endpoint_network_policies: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPrivateEndpointNetworkPolicies
        :keyword private_link_service_network_policies: Enable or Disable apply network policies on
         private link service in the subnet. Possible values include: "Enabled", "Disabled". Default
         value: "Enabled".
        :paramtype private_link_service_network_policies: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPrivateLinkServiceNetworkPolicies
        :keyword application_gateway_ip_configurations: Application gateway IP configurations of
         virtual network resource.
        :paramtype application_gateway_ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.ApplicationGatewayIPConfiguration]
        """
        super(Subnet, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.route_table = kwargs.get('route_table', None)
        self.nat_gateway = kwargs.get('nat_gateway', None)
        self.service_endpoints = kwargs.get('service_endpoints', None)
        self.service_endpoint_policies = kwargs.get('service_endpoint_policies', None)
        self.private_endpoints = None
        self.ip_configurations = None
        self.ip_configuration_profiles = None
        self.ip_allocations = kwargs.get('ip_allocations', None)
        self.resource_navigation_links = None
        self.service_association_links = None
        self.delegations = kwargs.get('delegations', None)
        self.purpose = None
        self.provisioning_state = None
        self.private_endpoint_network_policies = kwargs.get('private_endpoint_network_policies', "Enabled")
        self.private_link_service_network_policies = kwargs.get('private_link_service_network_policies', "Enabled")
        self.application_gateway_ip_configurations = kwargs.get('application_gateway_ip_configurations', None)


class SubnetAssociation(msrest.serialization.Model):
    """Subnet and it's custom security rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Subnet ID.
    :vartype id: str
    :ivar security_rules: Collection of custom security rules.
    :vartype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rules': {'key': 'securityRules', 'type': '[SecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword security_rules: Collection of custom security rules.
        :paramtype security_rules: list[~azure.mgmt.network.v2021_02_01.models.SecurityRule]
        """
        super(SubnetAssociation, self).__init__(**kwargs)
        self.id = None
        self.security_rules = kwargs.get('security_rules', None)


class SubnetListResult(msrest.serialization.Model):
    """Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.

    :ivar value: The subnets in a virtual network.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Subnet]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The subnets in a virtual network.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(SubnetListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class TagsObject(msrest.serialization.Model):
    """Tags object for patch operations.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(TagsObject, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class Topology(msrest.serialization.Model):
    """Topology of the specified resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: GUID representing the operation id.
    :vartype id: str
    :ivar created_date_time: The datetime when the topology was initially created for the resource
     group.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_modified: The datetime when the topology was last modified.
    :vartype last_modified: ~datetime.datetime
    :ivar resources: A list of topology resources.
    :vartype resources: list[~azure.mgmt.network.v2021_02_01.models.TopologyResource]
    """

    _validation = {
        'id': {'readonly': True},
        'created_date_time': {'readonly': True},
        'last_modified': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
        'resources': {'key': 'resources', 'type': '[TopologyResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resources: A list of topology resources.
        :paramtype resources: list[~azure.mgmt.network.v2021_02_01.models.TopologyResource]
        """
        super(Topology, self).__init__(**kwargs)
        self.id = None
        self.created_date_time = None
        self.last_modified = None
        self.resources = kwargs.get('resources', None)


class TopologyAssociation(msrest.serialization.Model):
    """Resources that have an association with the parent resource.

    :ivar name: The name of the resource that is associated with the parent resource.
    :vartype name: str
    :ivar resource_id: The ID of the resource that is associated with the parent resource.
    :vartype resource_id: str
    :ivar association_type: The association type of the child resource to the parent resource.
     Possible values include: "Associated", "Contains".
    :vartype association_type: str or ~azure.mgmt.network.v2021_02_01.models.AssociationType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'association_type': {'key': 'associationType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the resource that is associated with the parent resource.
        :paramtype name: str
        :keyword resource_id: The ID of the resource that is associated with the parent resource.
        :paramtype resource_id: str
        :keyword association_type: The association type of the child resource to the parent resource.
         Possible values include: "Associated", "Contains".
        :paramtype association_type: str or ~azure.mgmt.network.v2021_02_01.models.AssociationType
        """
        super(TopologyAssociation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.association_type = kwargs.get('association_type', None)


class TopologyParameters(msrest.serialization.Model):
    """Parameters that define the representation of topology.

    :ivar target_resource_group_name: The name of the target resource group to perform topology on.
    :vartype target_resource_group_name: str
    :ivar target_virtual_network: The reference to the Virtual Network resource.
    :vartype target_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar target_subnet: The reference to the Subnet resource.
    :vartype target_subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    """

    _attribute_map = {
        'target_resource_group_name': {'key': 'targetResourceGroupName', 'type': 'str'},
        'target_virtual_network': {'key': 'targetVirtualNetwork', 'type': 'SubResource'},
        'target_subnet': {'key': 'targetSubnet', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_group_name: The name of the target resource group to perform topology
         on.
        :paramtype target_resource_group_name: str
        :keyword target_virtual_network: The reference to the Virtual Network resource.
        :paramtype target_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword target_subnet: The reference to the Subnet resource.
        :paramtype target_subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(TopologyParameters, self).__init__(**kwargs)
        self.target_resource_group_name = kwargs.get('target_resource_group_name', None)
        self.target_virtual_network = kwargs.get('target_virtual_network', None)
        self.target_subnet = kwargs.get('target_subnet', None)


class TopologyResource(msrest.serialization.Model):
    """The network resource topology information for the given resource group.

    :ivar name: Name of the resource.
    :vartype name: str
    :ivar id: ID of the resource.
    :vartype id: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar associations: Holds the associations the resource has with other resources in the
     resource group.
    :vartype associations: list[~azure.mgmt.network.v2021_02_01.models.TopologyAssociation]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'associations': {'key': 'associations', 'type': '[TopologyAssociation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the resource.
        :paramtype name: str
        :keyword id: ID of the resource.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword associations: Holds the associations the resource has with other resources in the
         resource group.
        :paramtype associations: list[~azure.mgmt.network.v2021_02_01.models.TopologyAssociation]
        """
        super(TopologyResource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.location = kwargs.get('location', None)
        self.associations = kwargs.get('associations', None)


class TrafficAnalyticsConfigurationProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    :ivar enabled: Flag to enable/disable traffic analytics.
    :vartype enabled: bool
    :ivar workspace_id: The resource guid of the attached workspace.
    :vartype workspace_id: str
    :ivar workspace_region: The location of the attached workspace.
    :vartype workspace_region: str
    :ivar workspace_resource_id: Resource Id of the attached workspace.
    :vartype workspace_resource_id: str
    :ivar traffic_analytics_interval: The interval in minutes which would decide how frequently TA
     service should do flow analytics.
    :vartype traffic_analytics_interval: int
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'workspace_region': {'key': 'workspaceRegion', 'type': 'str'},
        'workspace_resource_id': {'key': 'workspaceResourceId', 'type': 'str'},
        'traffic_analytics_interval': {'key': 'trafficAnalyticsInterval', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Flag to enable/disable traffic analytics.
        :paramtype enabled: bool
        :keyword workspace_id: The resource guid of the attached workspace.
        :paramtype workspace_id: str
        :keyword workspace_region: The location of the attached workspace.
        :paramtype workspace_region: str
        :keyword workspace_resource_id: Resource Id of the attached workspace.
        :paramtype workspace_resource_id: str
        :keyword traffic_analytics_interval: The interval in minutes which would decide how frequently
         TA service should do flow analytics.
        :paramtype traffic_analytics_interval: int
        """
        super(TrafficAnalyticsConfigurationProperties, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.workspace_region = kwargs.get('workspace_region', None)
        self.workspace_resource_id = kwargs.get('workspace_resource_id', None)
        self.traffic_analytics_interval = kwargs.get('traffic_analytics_interval', None)


class TrafficAnalyticsProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    :ivar network_watcher_flow_analytics_configuration: Parameters that define the configuration of
     traffic analytics.
    :vartype network_watcher_flow_analytics_configuration:
     ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsConfigurationProperties
    """

    _attribute_map = {
        'network_watcher_flow_analytics_configuration': {'key': 'networkWatcherFlowAnalyticsConfiguration', 'type': 'TrafficAnalyticsConfigurationProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_watcher_flow_analytics_configuration: Parameters that define the configuration
         of traffic analytics.
        :paramtype network_watcher_flow_analytics_configuration:
         ~azure.mgmt.network.v2021_02_01.models.TrafficAnalyticsConfigurationProperties
        """
        super(TrafficAnalyticsProperties, self).__init__(**kwargs)
        self.network_watcher_flow_analytics_configuration = kwargs.get('network_watcher_flow_analytics_configuration', None)


class TrafficSelectorPolicy(msrest.serialization.Model):
    """An traffic selector policy for a virtual network gateway connection.

    All required parameters must be populated in order to send to Azure.

    :ivar local_address_ranges: Required. A collection of local address spaces in CIDR format.
    :vartype local_address_ranges: list[str]
    :ivar remote_address_ranges: Required. A collection of remote address spaces in CIDR format.
    :vartype remote_address_ranges: list[str]
    """

    _validation = {
        'local_address_ranges': {'required': True},
        'remote_address_ranges': {'required': True},
    }

    _attribute_map = {
        'local_address_ranges': {'key': 'localAddressRanges', 'type': '[str]'},
        'remote_address_ranges': {'key': 'remoteAddressRanges', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword local_address_ranges: Required. A collection of local address spaces in CIDR format.
        :paramtype local_address_ranges: list[str]
        :keyword remote_address_ranges: Required. A collection of remote address spaces in CIDR format.
        :paramtype remote_address_ranges: list[str]
        """
        super(TrafficSelectorPolicy, self).__init__(**kwargs)
        self.local_address_ranges = kwargs['local_address_ranges']
        self.remote_address_ranges = kwargs['remote_address_ranges']


class TroubleshootingDetails(msrest.serialization.Model):
    """Information gained from troubleshooting of specified resource.

    :ivar id: The id of the get troubleshoot operation.
    :vartype id: str
    :ivar reason_type: Reason type of failure.
    :vartype reason_type: str
    :ivar summary: A summary of troubleshooting.
    :vartype summary: str
    :ivar detail: Details on troubleshooting results.
    :vartype detail: str
    :ivar recommended_actions: List of recommended actions.
    :vartype recommended_actions:
     list[~azure.mgmt.network.v2021_02_01.models.TroubleshootingRecommendedActions]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'reason_type': {'key': 'reasonType', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'str'},
        'detail': {'key': 'detail', 'type': 'str'},
        'recommended_actions': {'key': 'recommendedActions', 'type': '[TroubleshootingRecommendedActions]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The id of the get troubleshoot operation.
        :paramtype id: str
        :keyword reason_type: Reason type of failure.
        :paramtype reason_type: str
        :keyword summary: A summary of troubleshooting.
        :paramtype summary: str
        :keyword detail: Details on troubleshooting results.
        :paramtype detail: str
        :keyword recommended_actions: List of recommended actions.
        :paramtype recommended_actions:
         list[~azure.mgmt.network.v2021_02_01.models.TroubleshootingRecommendedActions]
        """
        super(TroubleshootingDetails, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.reason_type = kwargs.get('reason_type', None)
        self.summary = kwargs.get('summary', None)
        self.detail = kwargs.get('detail', None)
        self.recommended_actions = kwargs.get('recommended_actions', None)


class TroubleshootingParameters(msrest.serialization.Model):
    """Parameters that define the resource to troubleshoot.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource to troubleshoot.
    :vartype target_resource_id: str
    :ivar storage_id: Required. The ID for the storage account to save the troubleshoot result.
    :vartype storage_id: str
    :ivar storage_path: Required. The path to the blob to save the troubleshoot result in.
    :vartype storage_path: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'storage_id': {'required': True},
        'storage_path': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'storage_path': {'key': 'properties.storagePath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource to troubleshoot.
        :paramtype target_resource_id: str
        :keyword storage_id: Required. The ID for the storage account to save the troubleshoot result.
        :paramtype storage_id: str
        :keyword storage_path: Required. The path to the blob to save the troubleshoot result in.
        :paramtype storage_path: str
        """
        super(TroubleshootingParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.storage_id = kwargs['storage_id']
        self.storage_path = kwargs['storage_path']


class TroubleshootingRecommendedActions(msrest.serialization.Model):
    """Recommended actions based on discovered issues.

    :ivar action_id: ID of the recommended action.
    :vartype action_id: str
    :ivar action_text: Description of recommended actions.
    :vartype action_text: str
    :ivar action_uri: The uri linking to a documentation for the recommended troubleshooting
     actions.
    :vartype action_uri: str
    :ivar action_uri_text: The information from the URI for the recommended troubleshooting
     actions.
    :vartype action_uri_text: str
    """

    _attribute_map = {
        'action_id': {'key': 'actionId', 'type': 'str'},
        'action_text': {'key': 'actionText', 'type': 'str'},
        'action_uri': {'key': 'actionUri', 'type': 'str'},
        'action_uri_text': {'key': 'actionUriText', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword action_id: ID of the recommended action.
        :paramtype action_id: str
        :keyword action_text: Description of recommended actions.
        :paramtype action_text: str
        :keyword action_uri: The uri linking to a documentation for the recommended troubleshooting
         actions.
        :paramtype action_uri: str
        :keyword action_uri_text: The information from the URI for the recommended troubleshooting
         actions.
        :paramtype action_uri_text: str
        """
        super(TroubleshootingRecommendedActions, self).__init__(**kwargs)
        self.action_id = kwargs.get('action_id', None)
        self.action_text = kwargs.get('action_text', None)
        self.action_uri = kwargs.get('action_uri', None)
        self.action_uri_text = kwargs.get('action_uri_text', None)


class TroubleshootingResult(msrest.serialization.Model):
    """Troubleshooting information gained from specified resource.

    :ivar start_time: The start time of the troubleshooting.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the troubleshooting.
    :vartype end_time: ~datetime.datetime
    :ivar code: The result code of the troubleshooting.
    :vartype code: str
    :ivar results: Information from troubleshooting.
    :vartype results: list[~azure.mgmt.network.v2021_02_01.models.TroubleshootingDetails]
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'code': {'key': 'code', 'type': 'str'},
        'results': {'key': 'results', 'type': '[TroubleshootingDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: The start time of the troubleshooting.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the troubleshooting.
        :paramtype end_time: ~datetime.datetime
        :keyword code: The result code of the troubleshooting.
        :paramtype code: str
        :keyword results: Information from troubleshooting.
        :paramtype results: list[~azure.mgmt.network.v2021_02_01.models.TroubleshootingDetails]
        """
        super(TroubleshootingResult, self).__init__(**kwargs)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.code = kwargs.get('code', None)
        self.results = kwargs.get('results', None)


class TunnelConnectionHealth(msrest.serialization.Model):
    """VirtualNetworkGatewayConnection properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tunnel: Tunnel name.
    :vartype tunnel: str
    :ivar connection_status: Virtual Network Gateway connection status. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar ingress_bytes_transferred: The Ingress Bytes Transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: The Egress Bytes Transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar last_connection_established_utc_time: The time at which connection was established in Utc
     format.
    :vartype last_connection_established_utc_time: str
    """

    _validation = {
        'tunnel': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'last_connection_established_utc_time': {'readonly': True},
    }

    _attribute_map = {
        'tunnel': {'key': 'tunnel', 'type': 'str'},
        'connection_status': {'key': 'connectionStatus', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'egressBytesTransferred', 'type': 'long'},
        'last_connection_established_utc_time': {'key': 'lastConnectionEstablishedUtcTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(TunnelConnectionHealth, self).__init__(**kwargs)
        self.tunnel = None
        self.connection_status = None
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.last_connection_established_utc_time = None


class UnprepareNetworkPoliciesRequest(msrest.serialization.Model):
    """Details of UnprepareNetworkPolicies for Subnet.

    :ivar service_name: The name of the service for which subnet is being unprepared for.
    :vartype service_name: str
    """

    _attribute_map = {
        'service_name': {'key': 'serviceName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_name: The name of the service for which subnet is being unprepared for.
        :paramtype service_name: str
        """
        super(UnprepareNetworkPoliciesRequest, self).__init__(**kwargs)
        self.service_name = kwargs.get('service_name', None)


class Usage(msrest.serialization.Model):
    """The network resource usage.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource identifier.
    :vartype id: str
    :ivar unit: Required. An enum describing the unit of measurement. Possible values include:
     "Count".
    :vartype unit: str or ~azure.mgmt.network.v2021_02_01.models.UsageUnit
    :ivar current_value: Required. The current value of the usage.
    :vartype current_value: long
    :ivar limit: Required. The limit of usage.
    :vartype limit: long
    :ivar name: Required. The name of the type of usage.
    :vartype name: ~azure.mgmt.network.v2021_02_01.models.UsageName
    """

    _validation = {
        'id': {'readonly': True},
        'unit': {'required': True},
        'current_value': {'required': True},
        'limit': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'current_value': {'key': 'currentValue', 'type': 'long'},
        'limit': {'key': 'limit', 'type': 'long'},
        'name': {'key': 'name', 'type': 'UsageName'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword unit: Required. An enum describing the unit of measurement. Possible values include:
         "Count".
        :paramtype unit: str or ~azure.mgmt.network.v2021_02_01.models.UsageUnit
        :keyword current_value: Required. The current value of the usage.
        :paramtype current_value: long
        :keyword limit: Required. The limit of usage.
        :paramtype limit: long
        :keyword name: Required. The name of the type of usage.
        :paramtype name: ~azure.mgmt.network.v2021_02_01.models.UsageName
        """
        super(Usage, self).__init__(**kwargs)
        self.id = None
        self.unit = kwargs['unit']
        self.current_value = kwargs['current_value']
        self.limit = kwargs['limit']
        self.name = kwargs['name']


class UsageName(msrest.serialization.Model):
    """The usage names.

    :ivar value: A string describing the resource name.
    :vartype value: str
    :ivar localized_value: A localized string describing the resource name.
    :vartype localized_value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A string describing the resource name.
        :paramtype value: str
        :keyword localized_value: A localized string describing the resource name.
        :paramtype localized_value: str
        """
        super(UsageName, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.localized_value = kwargs.get('localized_value', None)


class UsagesListResult(msrest.serialization.Model):
    """The list usages operation response.

    :ivar value: The list network resource usages.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.Usage]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list network resource usages.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.Usage]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(UsagesListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VerificationIPFlowParameters(msrest.serialization.Model):
    """Parameters that define the IP flow to be verified.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The ID of the target resource to perform next-hop on.
    :vartype target_resource_id: str
    :ivar direction: Required. The direction of the packet represented as a 5-tuple. Possible
     values include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2021_02_01.models.Direction
    :ivar protocol: Required. Protocol to be verified on. Possible values include: "TCP", "UDP".
    :vartype protocol: str or ~azure.mgmt.network.v2021_02_01.models.IpFlowProtocol
    :ivar local_port: Required. The local port. Acceptable values are a single integer in the range
     (0-65535). Support for * for the source port, which depends on the direction.
    :vartype local_port: str
    :ivar remote_port: Required. The remote port. Acceptable values are a single integer in the
     range (0-65535). Support for * for the source port, which depends on the direction.
    :vartype remote_port: str
    :ivar local_ip_address: Required. The local IP address. Acceptable values are valid IPv4
     addresses.
    :vartype local_ip_address: str
    :ivar remote_ip_address: Required. The remote IP address. Acceptable values are valid IPv4
     addresses.
    :vartype remote_ip_address: str
    :ivar target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled
     on any of them, then this parameter must be specified. Otherwise optional).
    :vartype target_nic_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'direction': {'required': True},
        'protocol': {'required': True},
        'local_port': {'required': True},
        'remote_port': {'required': True},
        'local_ip_address': {'required': True},
        'remote_ip_address': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'local_port': {'key': 'localPort', 'type': 'str'},
        'remote_port': {'key': 'remotePort', 'type': 'str'},
        'local_ip_address': {'key': 'localIPAddress', 'type': 'str'},
        'remote_ip_address': {'key': 'remoteIPAddress', 'type': 'str'},
        'target_nic_resource_id': {'key': 'targetNicResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The ID of the target resource to perform next-hop on.
        :paramtype target_resource_id: str
        :keyword direction: Required. The direction of the packet represented as a 5-tuple. Possible
         values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2021_02_01.models.Direction
        :keyword protocol: Required. Protocol to be verified on. Possible values include: "TCP", "UDP".
        :paramtype protocol: str or ~azure.mgmt.network.v2021_02_01.models.IpFlowProtocol
        :keyword local_port: Required. The local port. Acceptable values are a single integer in the
         range (0-65535). Support for * for the source port, which depends on the direction.
        :paramtype local_port: str
        :keyword remote_port: Required. The remote port. Acceptable values are a single integer in the
         range (0-65535). Support for * for the source port, which depends on the direction.
        :paramtype remote_port: str
        :keyword local_ip_address: Required. The local IP address. Acceptable values are valid IPv4
         addresses.
        :paramtype local_ip_address: str
        :keyword remote_ip_address: Required. The remote IP address. Acceptable values are valid IPv4
         addresses.
        :paramtype remote_ip_address: str
        :keyword target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is
         enabled on any of them, then this parameter must be specified. Otherwise optional).
        :paramtype target_nic_resource_id: str
        """
        super(VerificationIPFlowParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.direction = kwargs['direction']
        self.protocol = kwargs['protocol']
        self.local_port = kwargs['local_port']
        self.remote_port = kwargs['remote_port']
        self.local_ip_address = kwargs['local_ip_address']
        self.remote_ip_address = kwargs['remote_ip_address']
        self.target_nic_resource_id = kwargs.get('target_nic_resource_id', None)


class VerificationIPFlowResult(msrest.serialization.Model):
    """Results of IP flow verification on the target resource.

    :ivar access: Indicates whether the traffic is allowed or denied. Possible values include:
     "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
    :ivar rule_name: Name of the rule. If input is not matched against any security rule, it is not
     displayed.
    :vartype rule_name: str
    """

    _attribute_map = {
        'access': {'key': 'access', 'type': 'str'},
        'rule_name': {'key': 'ruleName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword access: Indicates whether the traffic is allowed or denied. Possible values include:
         "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2021_02_01.models.Access
        :keyword rule_name: Name of the rule. If input is not matched against any security rule, it is
         not displayed.
        :paramtype rule_name: str
        """
        super(VerificationIPFlowResult, self).__init__(**kwargs)
        self.access = kwargs.get('access', None)
        self.rule_name = kwargs.get('rule_name', None)


class VirtualApplianceNicProperties(msrest.serialization.Model):
    """Network Virtual Appliance NIC properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: NIC name.
    :vartype name: str
    :ivar public_ip_address: Public IP address.
    :vartype public_ip_address: str
    :ivar private_ip_address: Private IP address.
    :vartype private_ip_address: str
    """

    _validation = {
        'name': {'readonly': True},
        'public_ip_address': {'readonly': True},
        'private_ip_address': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualApplianceNicProperties, self).__init__(**kwargs)
        self.name = None
        self.public_ip_address = None
        self.private_ip_address = None


class VirtualApplianceSite(SubResource):
    """Virtual Appliance Site resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the virtual appliance site.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Site type.
    :vartype type: str
    :ivar address_prefix: Address Prefix.
    :vartype address_prefix: str
    :ivar o365_policy: Office 365 Policy.
    :vartype o365_policy: ~azure.mgmt.network.v2021_02_01.models.Office365PolicyProperties
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'o365_policy': {'key': 'properties.o365Policy', 'type': 'Office365PolicyProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the virtual appliance site.
        :paramtype name: str
        :keyword address_prefix: Address Prefix.
        :paramtype address_prefix: str
        :keyword o365_policy: Office 365 Policy.
        :paramtype o365_policy: ~azure.mgmt.network.v2021_02_01.models.Office365PolicyProperties
        """
        super(VirtualApplianceSite, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.address_prefix = kwargs.get('address_prefix', None)
        self.o365_policy = kwargs.get('o365_policy', None)
        self.provisioning_state = None


class VirtualApplianceSkuProperties(msrest.serialization.Model):
    """Network Virtual Appliance Sku Properties.

    :ivar vendor: Virtual Appliance Vendor.
    :vartype vendor: str
    :ivar bundled_scale_unit: Virtual Appliance Scale Unit.
    :vartype bundled_scale_unit: str
    :ivar market_place_version: Virtual Appliance Version.
    :vartype market_place_version: str
    """

    _attribute_map = {
        'vendor': {'key': 'vendor', 'type': 'str'},
        'bundled_scale_unit': {'key': 'bundledScaleUnit', 'type': 'str'},
        'market_place_version': {'key': 'marketPlaceVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vendor: Virtual Appliance Vendor.
        :paramtype vendor: str
        :keyword bundled_scale_unit: Virtual Appliance Scale Unit.
        :paramtype bundled_scale_unit: str
        :keyword market_place_version: Virtual Appliance Version.
        :paramtype market_place_version: str
        """
        super(VirtualApplianceSkuProperties, self).__init__(**kwargs)
        self.vendor = kwargs.get('vendor', None)
        self.bundled_scale_unit = kwargs.get('bundled_scale_unit', None)
        self.market_place_version = kwargs.get('market_place_version', None)


class VirtualHub(Resource):
    """VirtualHub Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_wan: The VirtualWAN to which the VirtualHub belongs.
    :vartype virtual_wan: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar vpn_gateway: The VpnGateway associated with this VirtualHub.
    :vartype vpn_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar p2_s_vpn_gateway: The P2SVpnGateway associated with this VirtualHub.
    :vartype p2_s_vpn_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar express_route_gateway: The expressRouteGateway associated with this VirtualHub.
    :vartype express_route_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar azure_firewall: The azureFirewall associated with this VirtualHub.
    :vartype azure_firewall: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar security_partner_provider: The securityPartnerProvider associated with this VirtualHub.
    :vartype security_partner_provider: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar address_prefix: Address-prefix for this VirtualHub.
    :vartype address_prefix: str
    :ivar route_table: The routeTable associated with this virtual hub.
    :vartype route_table: ~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTable
    :ivar provisioning_state: The provisioning state of the virtual hub resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar security_provider_name: The Security Provider name.
    :vartype security_provider_name: str
    :ivar virtual_hub_route_table_v2_s: List of all virtual hub route table v2s associated with
     this VirtualHub.
    :vartype virtual_hub_route_table_v2_s:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTableV2]
    :ivar sku: The sku of this VirtualHub.
    :vartype sku: str
    :ivar routing_state: The routing state. Possible values include: "None", "Provisioned",
     "Provisioning", "Failed".
    :vartype routing_state: str or ~azure.mgmt.network.v2021_02_01.models.RoutingState
    :ivar bgp_connections: List of references to Bgp Connections.
    :vartype bgp_connections: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar ip_configurations: List of references to IpConfigurations.
    :vartype ip_configurations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar virtual_router_asn: VirtualRouter ASN.
    :vartype virtual_router_asn: long
    :ivar virtual_router_ips: VirtualRouter IPs.
    :vartype virtual_router_ips: list[str]
    :ivar allow_branch_to_branch_traffic: Flag to control transit for VirtualRouter hub.
    :vartype allow_branch_to_branch_traffic: bool
    :ivar preferred_routing_gateway: The preferred gateway to route on-prem traffic. Possible
     values include: "ExpressRoute", "VpnGateway", "None".
    :vartype preferred_routing_gateway: str or
     ~azure.mgmt.network.v2021_02_01.models.PreferredRoutingGateway
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'routing_state': {'readonly': True},
        'bgp_connections': {'readonly': True},
        'ip_configurations': {'readonly': True},
        'virtual_router_asn': {'maximum': 4294967295, 'minimum': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWan', 'type': 'SubResource'},
        'vpn_gateway': {'key': 'properties.vpnGateway', 'type': 'SubResource'},
        'p2_s_vpn_gateway': {'key': 'properties.p2SVpnGateway', 'type': 'SubResource'},
        'express_route_gateway': {'key': 'properties.expressRouteGateway', 'type': 'SubResource'},
        'azure_firewall': {'key': 'properties.azureFirewall', 'type': 'SubResource'},
        'security_partner_provider': {'key': 'properties.securityPartnerProvider', 'type': 'SubResource'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'route_table': {'key': 'properties.routeTable', 'type': 'VirtualHubRouteTable'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'security_provider_name': {'key': 'properties.securityProviderName', 'type': 'str'},
        'virtual_hub_route_table_v2_s': {'key': 'properties.virtualHubRouteTableV2s', 'type': '[VirtualHubRouteTableV2]'},
        'sku': {'key': 'properties.sku', 'type': 'str'},
        'routing_state': {'key': 'properties.routingState', 'type': 'str'},
        'bgp_connections': {'key': 'properties.bgpConnections', 'type': '[SubResource]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[SubResource]'},
        'virtual_router_asn': {'key': 'properties.virtualRouterAsn', 'type': 'long'},
        'virtual_router_ips': {'key': 'properties.virtualRouterIps', 'type': '[str]'},
        'allow_branch_to_branch_traffic': {'key': 'properties.allowBranchToBranchTraffic', 'type': 'bool'},
        'preferred_routing_gateway': {'key': 'properties.preferredRoutingGateway', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_wan: The VirtualWAN to which the VirtualHub belongs.
        :paramtype virtual_wan: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword vpn_gateway: The VpnGateway associated with this VirtualHub.
        :paramtype vpn_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword p2_s_vpn_gateway: The P2SVpnGateway associated with this VirtualHub.
        :paramtype p2_s_vpn_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword express_route_gateway: The expressRouteGateway associated with this VirtualHub.
        :paramtype express_route_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword azure_firewall: The azureFirewall associated with this VirtualHub.
        :paramtype azure_firewall: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword security_partner_provider: The securityPartnerProvider associated with this
         VirtualHub.
        :paramtype security_partner_provider: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword address_prefix: Address-prefix for this VirtualHub.
        :paramtype address_prefix: str
        :keyword route_table: The routeTable associated with this virtual hub.
        :paramtype route_table: ~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTable
        :keyword security_provider_name: The Security Provider name.
        :paramtype security_provider_name: str
        :keyword virtual_hub_route_table_v2_s: List of all virtual hub route table v2s associated with
         this VirtualHub.
        :paramtype virtual_hub_route_table_v2_s:
         list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteTableV2]
        :keyword sku: The sku of this VirtualHub.
        :paramtype sku: str
        :keyword virtual_router_asn: VirtualRouter ASN.
        :paramtype virtual_router_asn: long
        :keyword virtual_router_ips: VirtualRouter IPs.
        :paramtype virtual_router_ips: list[str]
        :keyword allow_branch_to_branch_traffic: Flag to control transit for VirtualRouter hub.
        :paramtype allow_branch_to_branch_traffic: bool
        :keyword preferred_routing_gateway: The preferred gateway to route on-prem traffic. Possible
         values include: "ExpressRoute", "VpnGateway", "None".
        :paramtype preferred_routing_gateway: str or
         ~azure.mgmt.network.v2021_02_01.models.PreferredRoutingGateway
        """
        super(VirtualHub, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.vpn_gateway = kwargs.get('vpn_gateway', None)
        self.p2_s_vpn_gateway = kwargs.get('p2_s_vpn_gateway', None)
        self.express_route_gateway = kwargs.get('express_route_gateway', None)
        self.azure_firewall = kwargs.get('azure_firewall', None)
        self.security_partner_provider = kwargs.get('security_partner_provider', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.route_table = kwargs.get('route_table', None)
        self.provisioning_state = None
        self.security_provider_name = kwargs.get('security_provider_name', None)
        self.virtual_hub_route_table_v2_s = kwargs.get('virtual_hub_route_table_v2_s', None)
        self.sku = kwargs.get('sku', None)
        self.routing_state = None
        self.bgp_connections = None
        self.ip_configurations = None
        self.virtual_router_asn = kwargs.get('virtual_router_asn', None)
        self.virtual_router_ips = kwargs.get('virtual_router_ips', None)
        self.allow_branch_to_branch_traffic = kwargs.get('allow_branch_to_branch_traffic', None)
        self.preferred_routing_gateway = kwargs.get('preferred_routing_gateway', None)


class VirtualHubEffectiveRoute(msrest.serialization.Model):
    """The effective route configured on the virtual hub or specified resource.

    :ivar address_prefixes: The list of address prefixes.
    :vartype address_prefixes: list[str]
    :ivar next_hops: The list of next hops.
    :vartype next_hops: list[str]
    :ivar next_hop_type: The type of the next hop.
    :vartype next_hop_type: str
    :ivar as_path: The ASPath of this route.
    :vartype as_path: str
    :ivar route_origin: The origin of this route.
    :vartype route_origin: str
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hops': {'key': 'nextHops', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'route_origin': {'key': 'routeOrigin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_prefixes: The list of address prefixes.
        :paramtype address_prefixes: list[str]
        :keyword next_hops: The list of next hops.
        :paramtype next_hops: list[str]
        :keyword next_hop_type: The type of the next hop.
        :paramtype next_hop_type: str
        :keyword as_path: The ASPath of this route.
        :paramtype as_path: str
        :keyword route_origin: The origin of this route.
        :paramtype route_origin: str
        """
        super(VirtualHubEffectiveRoute, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hops = kwargs.get('next_hops', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.as_path = kwargs.get('as_path', None)
        self.route_origin = kwargs.get('route_origin', None)


class VirtualHubEffectiveRouteList(msrest.serialization.Model):
    """EffectiveRoutes List.

    :ivar value: The list of effective routes configured on the virtual hub or the specified
     resource.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubEffectiveRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHubEffectiveRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of effective routes configured on the virtual hub or the specified
         resource.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubEffectiveRoute]
        """
        super(VirtualHubEffectiveRouteList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class VirtualHubId(msrest.serialization.Model):
    """Virtual Hub identifier.

    :ivar id: The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be
     deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same
     subscription.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be
         deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same
         subscription.
        :paramtype id: str
        """
        super(VirtualHubId, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualHubRoute(msrest.serialization.Model):
    """VirtualHub route.

    :ivar address_prefixes: List of all addressPrefixes.
    :vartype address_prefixes: list[str]
    :ivar next_hop_ip_address: NextHop ip address.
    :vartype next_hop_ip_address: str
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_prefixes: List of all addressPrefixes.
        :paramtype address_prefixes: list[str]
        :keyword next_hop_ip_address: NextHop ip address.
        :paramtype next_hop_ip_address: str
        """
        super(VirtualHubRoute, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)


class VirtualHubRouteTable(msrest.serialization.Model):
    """VirtualHub route table.

    :ivar routes: List of all routes.
    :vartype routes: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRoute]
    """

    _attribute_map = {
        'routes': {'key': 'routes', 'type': '[VirtualHubRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword routes: List of all routes.
        :paramtype routes: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRoute]
        """
        super(VirtualHubRouteTable, self).__init__(**kwargs)
        self.routes = kwargs.get('routes', None)


class VirtualHubRouteTableV2(SubResource):
    """VirtualHubRouteTableV2 Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar routes: List of all routes.
    :vartype routes: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteV2]
    :ivar attached_connections: List of all connections attached to this route table v2.
    :vartype attached_connections: list[str]
    :ivar provisioning_state: The provisioning state of the virtual hub route table v2 resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[VirtualHubRouteV2]'},
        'attached_connections': {'key': 'properties.attachedConnections', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword routes: List of all routes.
        :paramtype routes: list[~azure.mgmt.network.v2021_02_01.models.VirtualHubRouteV2]
        :keyword attached_connections: List of all connections attached to this route table v2.
        :paramtype attached_connections: list[str]
        """
        super(VirtualHubRouteTableV2, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.routes = kwargs.get('routes', None)
        self.attached_connections = kwargs.get('attached_connections', None)
        self.provisioning_state = None


class VirtualHubRouteV2(msrest.serialization.Model):
    """VirtualHubRouteTableV2 route.

    :ivar destination_type: The type of destinations.
    :vartype destination_type: str
    :ivar destinations: List of all destinations.
    :vartype destinations: list[str]
    :ivar next_hop_type: The type of next hops.
    :vartype next_hop_type: str
    :ivar next_hops: NextHops ip address.
    :vartype next_hops: list[str]
    """

    _attribute_map = {
        'destination_type': {'key': 'destinationType', 'type': 'str'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hops': {'key': 'nextHops', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword destination_type: The type of destinations.
        :paramtype destination_type: str
        :keyword destinations: List of all destinations.
        :paramtype destinations: list[str]
        :keyword next_hop_type: The type of next hops.
        :paramtype next_hop_type: str
        :keyword next_hops: NextHops ip address.
        :paramtype next_hops: list[str]
        """
        super(VirtualHubRouteV2, self).__init__(**kwargs)
        self.destination_type = kwargs.get('destination_type', None)
        self.destinations = kwargs.get('destinations', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hops = kwargs.get('next_hops', None)


class VirtualNetwork(Resource):
    """Virtual Network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the virtual network.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar address_space: The AddressSpace that contains an array of IP address ranges that can be
     used by subnets.
    :vartype address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar dhcp_options: The dhcpOptions that contains an array of DNS servers available to VMs
     deployed in the virtual network.
    :vartype dhcp_options: ~azure.mgmt.network.v2021_02_01.models.DhcpOptions
    :ivar flow_timeout_in_minutes: The FlowTimeout value (in minutes) for the Virtual Network.
    :vartype flow_timeout_in_minutes: int
    :ivar subnets: A list of subnets in a Virtual Network.
    :vartype subnets: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
    :ivar virtual_network_peerings: A list of peerings in a Virtual Network.
    :vartype virtual_network_peerings:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeering]
    :ivar resource_guid: The resourceGuid property of the Virtual Network resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar enable_ddos_protection: Indicates if DDoS protection is enabled for all the protected
     resources in the virtual network. It requires a DDoS protection plan associated with the
     resource.
    :vartype enable_ddos_protection: bool
    :ivar enable_vm_protection: Indicates if VM protection is enabled for all the subnets in the
     virtual network.
    :vartype enable_vm_protection: bool
    :ivar ddos_protection_plan: The DDoS protection plan associated with the virtual network.
    :vartype ddos_protection_plan: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar bgp_communities: Bgp Communities sent over ExpressRoute with each route corresponding to
     a prefix in this VNET.
    :vartype bgp_communities: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkBgpCommunities
    :ivar ip_allocations: Array of IpAllocation which reference this VNET.
    :vartype ip_allocations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'address_space': {'key': 'properties.addressSpace', 'type': 'AddressSpace'},
        'dhcp_options': {'key': 'properties.dhcpOptions', 'type': 'DhcpOptions'},
        'flow_timeout_in_minutes': {'key': 'properties.flowTimeoutInMinutes', 'type': 'int'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'virtual_network_peerings': {'key': 'properties.virtualNetworkPeerings', 'type': '[VirtualNetworkPeering]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'enable_ddos_protection': {'key': 'properties.enableDdosProtection', 'type': 'bool'},
        'enable_vm_protection': {'key': 'properties.enableVmProtection', 'type': 'bool'},
        'ddos_protection_plan': {'key': 'properties.ddosProtectionPlan', 'type': 'SubResource'},
        'bgp_communities': {'key': 'properties.bgpCommunities', 'type': 'VirtualNetworkBgpCommunities'},
        'ip_allocations': {'key': 'properties.ipAllocations', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of the virtual network.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword address_space: The AddressSpace that contains an array of IP address ranges that can
         be used by subnets.
        :paramtype address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword dhcp_options: The dhcpOptions that contains an array of DNS servers available to VMs
         deployed in the virtual network.
        :paramtype dhcp_options: ~azure.mgmt.network.v2021_02_01.models.DhcpOptions
        :keyword flow_timeout_in_minutes: The FlowTimeout value (in minutes) for the Virtual Network.
        :paramtype flow_timeout_in_minutes: int
        :keyword subnets: A list of subnets in a Virtual Network.
        :paramtype subnets: list[~azure.mgmt.network.v2021_02_01.models.Subnet]
        :keyword virtual_network_peerings: A list of peerings in a Virtual Network.
        :paramtype virtual_network_peerings:
         list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeering]
        :keyword enable_ddos_protection: Indicates if DDoS protection is enabled for all the protected
         resources in the virtual network. It requires a DDoS protection plan associated with the
         resource.
        :paramtype enable_ddos_protection: bool
        :keyword enable_vm_protection: Indicates if VM protection is enabled for all the subnets in the
         virtual network.
        :paramtype enable_vm_protection: bool
        :keyword ddos_protection_plan: The DDoS protection plan associated with the virtual network.
        :paramtype ddos_protection_plan: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword bgp_communities: Bgp Communities sent over ExpressRoute with each route corresponding
         to a prefix in this VNET.
        :paramtype bgp_communities: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkBgpCommunities
        :keyword ip_allocations: Array of IpAllocation which reference this VNET.
        :paramtype ip_allocations: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(VirtualNetwork, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.address_space = kwargs.get('address_space', None)
        self.dhcp_options = kwargs.get('dhcp_options', None)
        self.flow_timeout_in_minutes = kwargs.get('flow_timeout_in_minutes', None)
        self.subnets = kwargs.get('subnets', None)
        self.virtual_network_peerings = kwargs.get('virtual_network_peerings', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.enable_ddos_protection = kwargs.get('enable_ddos_protection', False)
        self.enable_vm_protection = kwargs.get('enable_vm_protection', False)
        self.ddos_protection_plan = kwargs.get('ddos_protection_plan', None)
        self.bgp_communities = kwargs.get('bgp_communities', None)
        self.ip_allocations = kwargs.get('ip_allocations', None)


class VirtualNetworkBgpCommunities(msrest.serialization.Model):
    """Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar virtual_network_community: Required. The BGP community associated with the virtual
     network.
    :vartype virtual_network_community: str
    :ivar regional_community: The BGP community associated with the region of the virtual network.
    :vartype regional_community: str
    """

    _validation = {
        'virtual_network_community': {'required': True},
        'regional_community': {'readonly': True},
    }

    _attribute_map = {
        'virtual_network_community': {'key': 'virtualNetworkCommunity', 'type': 'str'},
        'regional_community': {'key': 'regionalCommunity', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword virtual_network_community: Required. The BGP community associated with the virtual
         network.
        :paramtype virtual_network_community: str
        """
        super(VirtualNetworkBgpCommunities, self).__init__(**kwargs)
        self.virtual_network_community = kwargs['virtual_network_community']
        self.regional_community = None


class VirtualNetworkConnectionGatewayReference(msrest.serialization.Model):
    """A reference to VirtualNetworkGateway or LocalNetworkGateway resource.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
    :vartype id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
        :paramtype id: str
        """
        super(VirtualNetworkConnectionGatewayReference, self).__init__(**kwargs)
        self.id = kwargs['id']


class VirtualNetworkGateway(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of type local virtual network gateway.
    :vartype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar ip_configurations: IP configurations for virtual network gateway.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayIPConfiguration]
    :ivar gateway_type: The type of this virtual network gateway. Possible values include: "Vpn",
     "ExpressRoute", "LocalGateway".
    :vartype gateway_type: str or ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayType
    :ivar vpn_type: The type of this virtual network gateway. Possible values include:
     "PolicyBased", "RouteBased".
    :vartype vpn_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnType
    :ivar vpn_gateway_generation: The generation for this VirtualNetworkGateway. Must be None if
     gatewayType is not VPN. Possible values include: "None", "Generation1", "Generation2".
    :vartype vpn_gateway_generation: str or
     ~azure.mgmt.network.v2021_02_01.models.VpnGatewayGeneration
    :ivar enable_bgp: Whether BGP is enabled for this virtual network gateway or not.
    :vartype enable_bgp: bool
    :ivar enable_private_ip_address: Whether private IP needs to be enabled on this gateway for
     connections or not.
    :vartype enable_private_ip_address: bool
    :ivar active: ActiveActive flag.
    :vartype active: bool
    :ivar gateway_default_site: The reference to the LocalNetworkGateway resource which represents
     local network site having default routes. Assign Null value in case of removing existing
     default site setting.
    :vartype gateway_default_site: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar sku: The reference to the VirtualNetworkGatewaySku resource which represents the SKU
     selected for Virtual network gateway.
    :vartype sku: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySku
    :ivar vpn_client_configuration: The reference to the VpnClientConfiguration resource which
     represents the P2S VpnClient configurations.
    :vartype vpn_client_configuration:
     ~azure.mgmt.network.v2021_02_01.models.VpnClientConfiguration
    :ivar bgp_settings: Virtual network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
    :ivar custom_routes: The reference to the address space resource which represents the custom
     routes address space specified by the customer for virtual network gateway and VpnClient.
    :vartype custom_routes: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar resource_guid: The resource GUID property of the virtual network gateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network gateway resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar enable_dns_forwarding: Whether dns forwarding is enabled or not.
    :vartype enable_dns_forwarding: bool
    :ivar inbound_dns_forwarding_endpoint: The IP address allocated by the gateway to which dns
     requests can be sent.
    :vartype inbound_dns_forwarding_endpoint: str
    :ivar v_net_extended_location_resource_id: Customer vnet resource id. VirtualNetworkGateway of
     type local gateway is associated with the customer vnet.
    :vartype v_net_extended_location_resource_id: str
    :ivar nat_rules: NatRules for virtual network gateway.
    :vartype nat_rules: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayNatRule]
    :ivar enable_bgp_route_translation_for_nat: EnableBgpRouteTranslationForNat flag.
    :vartype enable_bgp_route_translation_for_nat: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'inbound_dns_forwarding_endpoint': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[VirtualNetworkGatewayIPConfiguration]'},
        'gateway_type': {'key': 'properties.gatewayType', 'type': 'str'},
        'vpn_type': {'key': 'properties.vpnType', 'type': 'str'},
        'vpn_gateway_generation': {'key': 'properties.vpnGatewayGeneration', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'enable_private_ip_address': {'key': 'properties.enablePrivateIpAddress', 'type': 'bool'},
        'active': {'key': 'properties.activeActive', 'type': 'bool'},
        'gateway_default_site': {'key': 'properties.gatewayDefaultSite', 'type': 'SubResource'},
        'sku': {'key': 'properties.sku', 'type': 'VirtualNetworkGatewaySku'},
        'vpn_client_configuration': {'key': 'properties.vpnClientConfiguration', 'type': 'VpnClientConfiguration'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'custom_routes': {'key': 'properties.customRoutes', 'type': 'AddressSpace'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'enable_dns_forwarding': {'key': 'properties.enableDnsForwarding', 'type': 'bool'},
        'inbound_dns_forwarding_endpoint': {'key': 'properties.inboundDnsForwardingEndpoint', 'type': 'str'},
        'v_net_extended_location_resource_id': {'key': 'properties.vNetExtendedLocationResourceId', 'type': 'str'},
        'nat_rules': {'key': 'properties.natRules', 'type': '[VirtualNetworkGatewayNatRule]'},
        'enable_bgp_route_translation_for_nat': {'key': 'properties.enableBgpRouteTranslationForNat', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: The extended location of type local virtual network gateway.
        :paramtype extended_location: ~azure.mgmt.network.v2021_02_01.models.ExtendedLocation
        :keyword ip_configurations: IP configurations for virtual network gateway.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayIPConfiguration]
        :keyword gateway_type: The type of this virtual network gateway. Possible values include:
         "Vpn", "ExpressRoute", "LocalGateway".
        :paramtype gateway_type: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayType
        :keyword vpn_type: The type of this virtual network gateway. Possible values include:
         "PolicyBased", "RouteBased".
        :paramtype vpn_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnType
        :keyword vpn_gateway_generation: The generation for this VirtualNetworkGateway. Must be None if
         gatewayType is not VPN. Possible values include: "None", "Generation1", "Generation2".
        :paramtype vpn_gateway_generation: str or
         ~azure.mgmt.network.v2021_02_01.models.VpnGatewayGeneration
        :keyword enable_bgp: Whether BGP is enabled for this virtual network gateway or not.
        :paramtype enable_bgp: bool
        :keyword enable_private_ip_address: Whether private IP needs to be enabled on this gateway for
         connections or not.
        :paramtype enable_private_ip_address: bool
        :keyword active: ActiveActive flag.
        :paramtype active: bool
        :keyword gateway_default_site: The reference to the LocalNetworkGateway resource which
         represents local network site having default routes. Assign Null value in case of removing
         existing default site setting.
        :paramtype gateway_default_site: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword sku: The reference to the VirtualNetworkGatewaySku resource which represents the SKU
         selected for Virtual network gateway.
        :paramtype sku: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySku
        :keyword vpn_client_configuration: The reference to the VpnClientConfiguration resource which
         represents the P2S VpnClient configurations.
        :paramtype vpn_client_configuration:
         ~azure.mgmt.network.v2021_02_01.models.VpnClientConfiguration
        :keyword bgp_settings: Virtual network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
        :keyword custom_routes: The reference to the address space resource which represents the custom
         routes address space specified by the customer for virtual network gateway and VpnClient.
        :paramtype custom_routes: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword enable_dns_forwarding: Whether dns forwarding is enabled or not.
        :paramtype enable_dns_forwarding: bool
        :keyword v_net_extended_location_resource_id: Customer vnet resource id. VirtualNetworkGateway
         of type local gateway is associated with the customer vnet.
        :paramtype v_net_extended_location_resource_id: str
        :keyword nat_rules: NatRules for virtual network gateway.
        :paramtype nat_rules: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayNatRule]
        :keyword enable_bgp_route_translation_for_nat: EnableBgpRouteTranslationForNat flag.
        :paramtype enable_bgp_route_translation_for_nat: bool
        """
        super(VirtualNetworkGateway, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.gateway_type = kwargs.get('gateway_type', None)
        self.vpn_type = kwargs.get('vpn_type', None)
        self.vpn_gateway_generation = kwargs.get('vpn_gateway_generation', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.enable_private_ip_address = kwargs.get('enable_private_ip_address', None)
        self.active = kwargs.get('active', None)
        self.gateway_default_site = kwargs.get('gateway_default_site', None)
        self.sku = kwargs.get('sku', None)
        self.vpn_client_configuration = kwargs.get('vpn_client_configuration', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.custom_routes = kwargs.get('custom_routes', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.enable_dns_forwarding = kwargs.get('enable_dns_forwarding', None)
        self.inbound_dns_forwarding_endpoint = None
        self.v_net_extended_location_resource_id = kwargs.get('v_net_extended_location_resource_id', None)
        self.nat_rules = kwargs.get('nat_rules', None)
        self.enable_bgp_route_translation_for_nat = kwargs.get('enable_bgp_route_translation_for_nat', None)


class VirtualNetworkGatewayConnection(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar authorization_key: The authorizationKey.
    :vartype authorization_key: str
    :ivar virtual_network_gateway1: Required. The reference to virtual network gateway resource.
    :vartype virtual_network_gateway1: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway
    :ivar virtual_network_gateway2: The reference to virtual network gateway resource.
    :vartype virtual_network_gateway2: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway
    :ivar local_network_gateway2: The reference to local network gateway resource.
    :vartype local_network_gateway2: ~azure.mgmt.network.v2021_02_01.models.LocalNetworkGateway
    :ivar ingress_nat_rules: List of ingress NatRules.
    :vartype ingress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar egress_nat_rules: List of egress NatRules.
    :vartype egress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar connection_type: Required. Gateway connection type. Possible values include: "IPsec",
     "Vnet2Vnet", "ExpressRoute", "VPNClient".
    :vartype connection_type: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionType
    :ivar connection_protocol: Connection protocol used for this connection. Possible values
     include: "IKEv2", "IKEv1".
    :vartype connection_protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
    :ivar routing_weight: The routing weight.
    :vartype routing_weight: int
    :ivar dpd_timeout_seconds: The dead peer detection timeout of this connection in seconds.
    :vartype dpd_timeout_seconds: int
    :ivar connection_mode: The connection mode for this connection. Possible values include:
     "Default", "ResponderOnly", "InitiatorOnly".
    :vartype connection_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionMode
    :ivar shared_key: The IPSec shared key.
    :vartype shared_key: str
    :ivar connection_status: Virtual Network Gateway connection status. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar tunnel_connection_status: Collection of all tunnels' connection health status.
    :vartype tunnel_connection_status:
     list[~azure.mgmt.network.v2021_02_01.models.TunnelConnectionHealth]
    :ivar egress_bytes_transferred: The egress bytes transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar ingress_bytes_transferred: The ingress bytes transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar peer: The reference to peerings resource.
    :vartype peer: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_local_azure_ip_address: Use private local Azure IP for the connection.
    :vartype use_local_azure_ip_address: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar traffic_selector_policies: The Traffic Selector Policies to be considered by this
     connection.
    :vartype traffic_selector_policies:
     list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
    :ivar resource_guid: The resource GUID property of the virtual network gateway connection
     resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network gateway connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar express_route_gateway_bypass: Bypass ExpressRoute Gateway for data forwarding.
    :vartype express_route_gateway_bypass: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_network_gateway1': {'required': True},
        'connection_type': {'required': True},
        'connection_status': {'readonly': True},
        'tunnel_connection_status': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'virtual_network_gateway1': {'key': 'properties.virtualNetworkGateway1', 'type': 'VirtualNetworkGateway'},
        'virtual_network_gateway2': {'key': 'properties.virtualNetworkGateway2', 'type': 'VirtualNetworkGateway'},
        'local_network_gateway2': {'key': 'properties.localNetworkGateway2', 'type': 'LocalNetworkGateway'},
        'ingress_nat_rules': {'key': 'properties.ingressNatRules', 'type': '[SubResource]'},
        'egress_nat_rules': {'key': 'properties.egressNatRules', 'type': '[SubResource]'},
        'connection_type': {'key': 'properties.connectionType', 'type': 'str'},
        'connection_protocol': {'key': 'properties.connectionProtocol', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'dpd_timeout_seconds': {'key': 'properties.dpdTimeoutSeconds', 'type': 'int'},
        'connection_mode': {'key': 'properties.connectionMode', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'tunnel_connection_status': {'key': 'properties.tunnelConnectionStatus', 'type': '[TunnelConnectionHealth]'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'peer': {'key': 'properties.peer', 'type': 'SubResource'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_local_azure_ip_address': {'key': 'properties.useLocalAzureIpAddress', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'traffic_selector_policies': {'key': 'properties.trafficSelectorPolicies', 'type': '[TrafficSelectorPolicy]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'express_route_gateway_bypass': {'key': 'properties.expressRouteGatewayBypass', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword authorization_key: The authorizationKey.
        :paramtype authorization_key: str
        :keyword virtual_network_gateway1: Required. The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway1:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway
        :keyword virtual_network_gateway2: The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway2:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway
        :keyword local_network_gateway2: The reference to local network gateway resource.
        :paramtype local_network_gateway2: ~azure.mgmt.network.v2021_02_01.models.LocalNetworkGateway
        :keyword ingress_nat_rules: List of ingress NatRules.
        :paramtype ingress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword egress_nat_rules: List of egress NatRules.
        :paramtype egress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword connection_type: Required. Gateway connection type. Possible values include: "IPsec",
         "Vnet2Vnet", "ExpressRoute", "VPNClient".
        :paramtype connection_type: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionType
        :keyword connection_protocol: Connection protocol used for this connection. Possible values
         include: "IKEv2", "IKEv1".
        :paramtype connection_protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
        :keyword routing_weight: The routing weight.
        :paramtype routing_weight: int
        :keyword dpd_timeout_seconds: The dead peer detection timeout of this connection in seconds.
        :paramtype dpd_timeout_seconds: int
        :keyword connection_mode: The connection mode for this connection. Possible values include:
         "Default", "ResponderOnly", "InitiatorOnly".
        :paramtype connection_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionMode
        :keyword shared_key: The IPSec shared key.
        :paramtype shared_key: str
        :keyword peer: The reference to peerings resource.
        :paramtype peer: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_local_azure_ip_address: Use private local Azure IP for the connection.
        :paramtype use_local_azure_ip_address: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword traffic_selector_policies: The Traffic Selector Policies to be considered by this
         connection.
        :paramtype traffic_selector_policies:
         list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
        :keyword express_route_gateway_bypass: Bypass ExpressRoute Gateway for data forwarding.
        :paramtype express_route_gateway_bypass: bool
        """
        super(VirtualNetworkGatewayConnection, self).__init__(**kwargs)
        self.etag = None
        self.authorization_key = kwargs.get('authorization_key', None)
        self.virtual_network_gateway1 = kwargs['virtual_network_gateway1']
        self.virtual_network_gateway2 = kwargs.get('virtual_network_gateway2', None)
        self.local_network_gateway2 = kwargs.get('local_network_gateway2', None)
        self.ingress_nat_rules = kwargs.get('ingress_nat_rules', None)
        self.egress_nat_rules = kwargs.get('egress_nat_rules', None)
        self.connection_type = kwargs['connection_type']
        self.connection_protocol = kwargs.get('connection_protocol', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.dpd_timeout_seconds = kwargs.get('dpd_timeout_seconds', None)
        self.connection_mode = kwargs.get('connection_mode', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.connection_status = None
        self.tunnel_connection_status = None
        self.egress_bytes_transferred = None
        self.ingress_bytes_transferred = None
        self.peer = kwargs.get('peer', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_local_azure_ip_address = kwargs.get('use_local_azure_ip_address', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.traffic_selector_policies = kwargs.get('traffic_selector_policies', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.express_route_gateway_bypass = kwargs.get('express_route_gateway_bypass', None)


class VirtualNetworkGatewayConnectionListEntity(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar authorization_key: The authorizationKey.
    :vartype authorization_key: str
    :ivar virtual_network_gateway1: Required. The reference to virtual network gateway resource.
    :vartype virtual_network_gateway1:
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
    :ivar virtual_network_gateway2: The reference to virtual network gateway resource.
    :vartype virtual_network_gateway2:
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
    :ivar local_network_gateway2: The reference to local network gateway resource.
    :vartype local_network_gateway2:
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
    :ivar connection_type: Required. Gateway connection type. Possible values include: "IPsec",
     "Vnet2Vnet", "ExpressRoute", "VPNClient".
    :vartype connection_type: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionType
    :ivar connection_protocol: Connection protocol used for this connection. Possible values
     include: "IKEv2", "IKEv1".
    :vartype connection_protocol: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
    :ivar routing_weight: The routing weight.
    :vartype routing_weight: int
    :ivar connection_mode: The connection mode for this connection. Possible values include:
     "Default", "ResponderOnly", "InitiatorOnly".
    :vartype connection_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionMode
    :ivar shared_key: The IPSec shared key.
    :vartype shared_key: str
    :ivar connection_status: Virtual Network Gateway connection status. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar tunnel_connection_status: Collection of all tunnels' connection health status.
    :vartype tunnel_connection_status:
     list[~azure.mgmt.network.v2021_02_01.models.TunnelConnectionHealth]
    :ivar egress_bytes_transferred: The egress bytes transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar ingress_bytes_transferred: The ingress bytes transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar peer: The reference to peerings resource.
    :vartype peer: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar traffic_selector_policies: The Traffic Selector Policies to be considered by this
     connection.
    :vartype traffic_selector_policies:
     list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
    :ivar resource_guid: The resource GUID property of the virtual network gateway connection
     resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network gateway connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar express_route_gateway_bypass: Bypass ExpressRoute Gateway for data forwarding.
    :vartype express_route_gateway_bypass: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_network_gateway1': {'required': True},
        'connection_type': {'required': True},
        'connection_status': {'readonly': True},
        'tunnel_connection_status': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'virtual_network_gateway1': {'key': 'properties.virtualNetworkGateway1', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'virtual_network_gateway2': {'key': 'properties.virtualNetworkGateway2', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'local_network_gateway2': {'key': 'properties.localNetworkGateway2', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'connection_type': {'key': 'properties.connectionType', 'type': 'str'},
        'connection_protocol': {'key': 'properties.connectionProtocol', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'connection_mode': {'key': 'properties.connectionMode', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'tunnel_connection_status': {'key': 'properties.tunnelConnectionStatus', 'type': '[TunnelConnectionHealth]'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'peer': {'key': 'properties.peer', 'type': 'SubResource'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'traffic_selector_policies': {'key': 'properties.trafficSelectorPolicies', 'type': '[TrafficSelectorPolicy]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'express_route_gateway_bypass': {'key': 'properties.expressRouteGatewayBypass', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword authorization_key: The authorizationKey.
        :paramtype authorization_key: str
        :keyword virtual_network_gateway1: Required. The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway1:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
        :keyword virtual_network_gateway2: The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway2:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
        :keyword local_network_gateway2: The reference to local network gateway resource.
        :paramtype local_network_gateway2:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkConnectionGatewayReference
        :keyword connection_type: Required. Gateway connection type. Possible values include: "IPsec",
         "Vnet2Vnet", "ExpressRoute", "VPNClient".
        :paramtype connection_type: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionType
        :keyword connection_protocol: Connection protocol used for this connection. Possible values
         include: "IKEv2", "IKEv1".
        :paramtype connection_protocol: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
        :keyword routing_weight: The routing weight.
        :paramtype routing_weight: int
        :keyword connection_mode: The connection mode for this connection. Possible values include:
         "Default", "ResponderOnly", "InitiatorOnly".
        :paramtype connection_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionMode
        :keyword shared_key: The IPSec shared key.
        :paramtype shared_key: str
        :keyword peer: The reference to peerings resource.
        :paramtype peer: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword traffic_selector_policies: The Traffic Selector Policies to be considered by this
         connection.
        :paramtype traffic_selector_policies:
         list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
        :keyword express_route_gateway_bypass: Bypass ExpressRoute Gateway for data forwarding.
        :paramtype express_route_gateway_bypass: bool
        """
        super(VirtualNetworkGatewayConnectionListEntity, self).__init__(**kwargs)
        self.etag = None
        self.authorization_key = kwargs.get('authorization_key', None)
        self.virtual_network_gateway1 = kwargs['virtual_network_gateway1']
        self.virtual_network_gateway2 = kwargs.get('virtual_network_gateway2', None)
        self.local_network_gateway2 = kwargs.get('local_network_gateway2', None)
        self.connection_type = kwargs['connection_type']
        self.connection_protocol = kwargs.get('connection_protocol', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.connection_mode = kwargs.get('connection_mode', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.connection_status = None
        self.tunnel_connection_status = None
        self.egress_bytes_transferred = None
        self.ingress_bytes_transferred = None
        self.peer = kwargs.get('peer', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.traffic_selector_policies = kwargs.get('traffic_selector_policies', None)
        self.resource_guid = None
        self.provisioning_state = None
        self.express_route_gateway_bypass = kwargs.get('express_route_gateway_bypass', None)


class VirtualNetworkGatewayConnectionListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworkGatewayConnections API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of VirtualNetworkGatewayConnection resources that exists in a resource
     group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGatewayConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of VirtualNetworkGatewayConnection resources that exists in a resource
         group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnection]
        """
        super(VirtualNetworkGatewayConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewayIPConfiguration(SubResource):
    """IP configuration for virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
    :ivar subnet: The reference to the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar public_ip_address: The reference to the public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar private_ip_address: Private IP Address for this gateway.
    :vartype private_ip_address: str
    :ivar provisioning_state: The provisioning state of the virtual network gateway IP
     configuration resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'private_ip_address': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword private_ip_allocation_method: The private IP address allocation method. Possible
         values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2021_02_01.models.IPAllocationMethod
        :keyword subnet: The reference to the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword public_ip_address: The reference to the public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(VirtualNetworkGatewayIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.private_ip_address = None
        self.provisioning_state = None


class VirtualNetworkGatewayListConnectionsResult(msrest.serialization.Model):
    """Response for the VirtualNetworkGatewayListConnections API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of VirtualNetworkGatewayConnection resources that exists in a resource
     group.
    :vartype value:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionListEntity]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGatewayConnectionListEntity]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of VirtualNetworkGatewayConnection resources that exists in a resource
         group.
        :paramtype value:
         list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionListEntity]
        """
        super(VirtualNetworkGatewayListConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewayListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworkGateways API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of VirtualNetworkGateway resources that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of VirtualNetworkGateway resources that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGateway]
        """
        super(VirtualNetworkGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewayNatRule(SubResource):
    """VirtualNetworkGatewayNatRule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar provisioning_state: The provisioning state of the NAT Rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar type_properties_type: The type of NAT rule for VPN NAT. Possible values include:
     "Static", "Dynamic".
    :vartype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleType
    :ivar mode: The Source NAT direction of a VPN NAT. Possible values include: "EgressSnat",
     "IngressSnat".
    :vartype mode: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMode
    :ivar internal_mappings: The private IP address internal mapping for NAT.
    :vartype internal_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
    :ivar external_mappings: The private IP address external mapping for NAT.
    :vartype external_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
    :ivar ip_configuration_id: The IP Configuration ID this NAT rule applies to.
    :vartype ip_configuration_id: str
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'mode': {'key': 'properties.mode', 'type': 'str'},
        'internal_mappings': {'key': 'properties.internalMappings', 'type': '[VpnNatRuleMapping]'},
        'external_mappings': {'key': 'properties.externalMappings', 'type': '[VpnNatRuleMapping]'},
        'ip_configuration_id': {'key': 'properties.ipConfigurationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type_properties_type: The type of NAT rule for VPN NAT. Possible values include:
         "Static", "Dynamic".
        :paramtype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleType
        :keyword mode: The Source NAT direction of a VPN NAT. Possible values include: "EgressSnat",
         "IngressSnat".
        :paramtype mode: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMode
        :keyword internal_mappings: The private IP address internal mapping for NAT.
        :paramtype internal_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
        :keyword external_mappings: The private IP address external mapping for NAT.
        :paramtype external_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
        :keyword ip_configuration_id: The IP Configuration ID this NAT rule applies to.
        :paramtype ip_configuration_id: str
        """
        super(VirtualNetworkGatewayNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.provisioning_state = None
        self.type_properties_type = kwargs.get('type_properties_type', None)
        self.mode = kwargs.get('mode', None)
        self.internal_mappings = kwargs.get('internal_mappings', None)
        self.external_mappings = kwargs.get('external_mappings', None)
        self.ip_configuration_id = kwargs.get('ip_configuration_id', None)


class VirtualNetworkGatewaySku(msrest.serialization.Model):
    """VirtualNetworkGatewaySku details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Gateway SKU name. Possible values include: "Basic", "HighPerformance", "Standard",
     "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw4", "VpnGw5", "VpnGw1AZ", "VpnGw2AZ",
     "VpnGw3AZ", "VpnGw4AZ", "VpnGw5AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
    :vartype name: str or ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySkuName
    :ivar tier: Gateway SKU tier. Possible values include: "Basic", "HighPerformance", "Standard",
     "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw4", "VpnGw5", "VpnGw1AZ", "VpnGw2AZ",
     "VpnGw3AZ", "VpnGw4AZ", "VpnGw5AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
    :vartype tier: str or ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySkuTier
    :ivar capacity: The capacity.
    :vartype capacity: int
    """

    _validation = {
        'capacity': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gateway SKU name. Possible values include: "Basic", "HighPerformance",
         "Standard", "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw4", "VpnGw5", "VpnGw1AZ",
         "VpnGw2AZ", "VpnGw3AZ", "VpnGw4AZ", "VpnGw5AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
        :paramtype name: str or ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySkuName
        :keyword tier: Gateway SKU tier. Possible values include: "Basic", "HighPerformance",
         "Standard", "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw4", "VpnGw5", "VpnGw1AZ",
         "VpnGw2AZ", "VpnGw3AZ", "VpnGw4AZ", "VpnGw5AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
        :paramtype tier: str or ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewaySkuTier
        """
        super(VirtualNetworkGatewaySku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.capacity = None


class VirtualNetworkListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworks API service call.

    :ivar value: A list of VirtualNetwork resources in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetwork]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetwork]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of VirtualNetwork resources in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetwork]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkListUsageResult(msrest.serialization.Model):
    """Response for the virtual networks GetUsage API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: VirtualNetwork usage stats.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkUsage]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkUsage]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkListUsageResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkPeering(SubResource):
    """Peerings in a virtual network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar allow_virtual_network_access: Whether the VMs in the local virtual network space would be
     able to access the VMs in remote virtual network space.
    :vartype allow_virtual_network_access: bool
    :ivar allow_forwarded_traffic: Whether the forwarded traffic from the VMs in the local virtual
     network will be allowed/disallowed in remote virtual network.
    :vartype allow_forwarded_traffic: bool
    :ivar allow_gateway_transit: If gateway links can be used in remote virtual networking to link
     to this virtual network.
    :vartype allow_gateway_transit: bool
    :ivar use_remote_gateways: If remote gateways can be used on this virtual network. If the flag
     is set to true, and allowGatewayTransit on remote peering is also true, virtual network will
     use gateways of remote virtual network for transit. Only one peering can have this flag set to
     true. This flag cannot be set if virtual network already has a gateway.
    :vartype use_remote_gateways: bool
    :ivar remote_virtual_network: The reference to the remote virtual network. The remote virtual
     network can be in the same or different region (preview). See here to register for the preview
     and learn more
     (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
    :vartype remote_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar remote_address_space: The reference to the address space peered with the remote virtual
     network.
    :vartype remote_address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar remote_virtual_network_address_space: The reference to the current address space of the
     remote virtual network.
    :vartype remote_virtual_network_address_space:
     ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar remote_bgp_communities: The reference to the remote virtual network's Bgp Communities.
    :vartype remote_bgp_communities:
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkBgpCommunities
    :ivar peering_state: The status of the virtual network peering. Possible values include:
     "Initiated", "Connected", "Disconnected".
    :vartype peering_state: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeeringState
    :ivar peering_sync_level: The peering sync status of the virtual network peering. Possible
     values include: "FullyInSync", "RemoteNotInSync", "LocalNotInSync", "LocalAndRemoteNotInSync".
    :vartype peering_sync_level: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeeringLevel
    :ivar provisioning_state: The provisioning state of the virtual network peering resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar do_not_verify_remote_gateways: If we need to verify the provisioning state of the remote
     gateway.
    :vartype do_not_verify_remote_gateways: bool
    :ivar resource_guid: The resourceGuid property of the Virtual Network peering resource.
    :vartype resource_guid: str
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'allow_virtual_network_access': {'key': 'properties.allowVirtualNetworkAccess', 'type': 'bool'},
        'allow_forwarded_traffic': {'key': 'properties.allowForwardedTraffic', 'type': 'bool'},
        'allow_gateway_transit': {'key': 'properties.allowGatewayTransit', 'type': 'bool'},
        'use_remote_gateways': {'key': 'properties.useRemoteGateways', 'type': 'bool'},
        'remote_virtual_network': {'key': 'properties.remoteVirtualNetwork', 'type': 'SubResource'},
        'remote_address_space': {'key': 'properties.remoteAddressSpace', 'type': 'AddressSpace'},
        'remote_virtual_network_address_space': {'key': 'properties.remoteVirtualNetworkAddressSpace', 'type': 'AddressSpace'},
        'remote_bgp_communities': {'key': 'properties.remoteBgpCommunities', 'type': 'VirtualNetworkBgpCommunities'},
        'peering_state': {'key': 'properties.peeringState', 'type': 'str'},
        'peering_sync_level': {'key': 'properties.peeringSyncLevel', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'do_not_verify_remote_gateways': {'key': 'properties.doNotVerifyRemoteGateways', 'type': 'bool'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type: Resource type.
        :paramtype type: str
        :keyword allow_virtual_network_access: Whether the VMs in the local virtual network space would
         be able to access the VMs in remote virtual network space.
        :paramtype allow_virtual_network_access: bool
        :keyword allow_forwarded_traffic: Whether the forwarded traffic from the VMs in the local
         virtual network will be allowed/disallowed in remote virtual network.
        :paramtype allow_forwarded_traffic: bool
        :keyword allow_gateway_transit: If gateway links can be used in remote virtual networking to
         link to this virtual network.
        :paramtype allow_gateway_transit: bool
        :keyword use_remote_gateways: If remote gateways can be used on this virtual network. If the
         flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network
         will use gateways of remote virtual network for transit. Only one peering can have this flag
         set to true. This flag cannot be set if virtual network already has a gateway.
        :paramtype use_remote_gateways: bool
        :keyword remote_virtual_network: The reference to the remote virtual network. The remote
         virtual network can be in the same or different region (preview). See here to register for the
         preview and learn more
         (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
        :paramtype remote_virtual_network: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword remote_address_space: The reference to the address space peered with the remote
         virtual network.
        :paramtype remote_address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword remote_virtual_network_address_space: The reference to the current address space of
         the remote virtual network.
        :paramtype remote_virtual_network_address_space:
         ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword remote_bgp_communities: The reference to the remote virtual network's Bgp Communities.
        :paramtype remote_bgp_communities:
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkBgpCommunities
        :keyword peering_state: The status of the virtual network peering. Possible values include:
         "Initiated", "Connected", "Disconnected".
        :paramtype peering_state: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeeringState
        :keyword peering_sync_level: The peering sync status of the virtual network peering. Possible
         values include: "FullyInSync", "RemoteNotInSync", "LocalNotInSync", "LocalAndRemoteNotInSync".
        :paramtype peering_sync_level: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeeringLevel
        :keyword do_not_verify_remote_gateways: If we need to verify the provisioning state of the
         remote gateway.
        :paramtype do_not_verify_remote_gateways: bool
        """
        super(VirtualNetworkPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.allow_virtual_network_access = kwargs.get('allow_virtual_network_access', None)
        self.allow_forwarded_traffic = kwargs.get('allow_forwarded_traffic', None)
        self.allow_gateway_transit = kwargs.get('allow_gateway_transit', None)
        self.use_remote_gateways = kwargs.get('use_remote_gateways', None)
        self.remote_virtual_network = kwargs.get('remote_virtual_network', None)
        self.remote_address_space = kwargs.get('remote_address_space', None)
        self.remote_virtual_network_address_space = kwargs.get('remote_virtual_network_address_space', None)
        self.remote_bgp_communities = kwargs.get('remote_bgp_communities', None)
        self.peering_state = kwargs.get('peering_state', None)
        self.peering_sync_level = kwargs.get('peering_sync_level', None)
        self.provisioning_state = None
        self.do_not_verify_remote_gateways = kwargs.get('do_not_verify_remote_gateways', None)
        self.resource_guid = None


class VirtualNetworkPeeringListResult(msrest.serialization.Model):
    """Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.

    :ivar value: The peerings in a virtual network.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in a virtual network.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkPeering]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkPeeringListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkTap(Resource):
    """Virtual Network Tap resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar network_interface_tap_configurations: Specifies the list of resource IDs for the network
     interface IP configuration that needs to be tapped.
    :vartype network_interface_tap_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceTapConfiguration]
    :ivar resource_guid: The resource GUID property of the virtual network tap resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network tap resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar destination_network_interface_ip_configuration: The reference to the private IP Address
     of the collector nic that will receive the tap.
    :vartype destination_network_interface_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration
    :ivar destination_load_balancer_front_end_ip_configuration: The reference to the private IP
     address on the internal Load Balancer that will receive the tap.
    :vartype destination_load_balancer_front_end_ip_configuration:
     ~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration
    :ivar destination_port: The VXLAN destination port that will receive the tapped traffic.
    :vartype destination_port: int
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'network_interface_tap_configurations': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'network_interface_tap_configurations': {'key': 'properties.networkInterfaceTapConfigurations', 'type': '[NetworkInterfaceTapConfiguration]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'destination_network_interface_ip_configuration': {'key': 'properties.destinationNetworkInterfaceIPConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'destination_load_balancer_front_end_ip_configuration': {'key': 'properties.destinationLoadBalancerFrontEndIPConfiguration', 'type': 'FrontendIPConfiguration'},
        'destination_port': {'key': 'properties.destinationPort', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword destination_network_interface_ip_configuration: The reference to the private IP
         Address of the collector nic that will receive the tap.
        :paramtype destination_network_interface_ip_configuration:
         ~azure.mgmt.network.v2021_02_01.models.NetworkInterfaceIPConfiguration
        :keyword destination_load_balancer_front_end_ip_configuration: The reference to the private IP
         address on the internal Load Balancer that will receive the tap.
        :paramtype destination_load_balancer_front_end_ip_configuration:
         ~azure.mgmt.network.v2021_02_01.models.FrontendIPConfiguration
        :keyword destination_port: The VXLAN destination port that will receive the tapped traffic.
        :paramtype destination_port: int
        """
        super(VirtualNetworkTap, self).__init__(**kwargs)
        self.etag = None
        self.network_interface_tap_configurations = None
        self.resource_guid = None
        self.provisioning_state = None
        self.destination_network_interface_ip_configuration = kwargs.get('destination_network_interface_ip_configuration', None)
        self.destination_load_balancer_front_end_ip_configuration = kwargs.get('destination_load_balancer_front_end_ip_configuration', None)
        self.destination_port = kwargs.get('destination_port', None)


class VirtualNetworkTapListResult(msrest.serialization.Model):
    """Response for ListVirtualNetworkTap API service call.

    :ivar value: A list of VirtualNetworkTaps in a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkTap]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of VirtualNetworkTaps in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualNetworkTap]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkTapListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkUsage(msrest.serialization.Model):
    """Usage details for subnet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar current_value: Indicates number of IPs used from the Subnet.
    :vartype current_value: float
    :ivar id: Subnet identifier.
    :vartype id: str
    :ivar limit: Indicates the size of the subnet.
    :vartype limit: float
    :ivar name: The name containing common and localized value for usage.
    :vartype name: ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkUsageName
    :ivar unit: Usage units. Returns 'Count'.
    :vartype unit: str
    """

    _validation = {
        'current_value': {'readonly': True},
        'id': {'readonly': True},
        'limit': {'readonly': True},
        'name': {'readonly': True},
        'unit': {'readonly': True},
    }

    _attribute_map = {
        'current_value': {'key': 'currentValue', 'type': 'float'},
        'id': {'key': 'id', 'type': 'str'},
        'limit': {'key': 'limit', 'type': 'float'},
        'name': {'key': 'name', 'type': 'VirtualNetworkUsageName'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualNetworkUsage, self).__init__(**kwargs)
        self.current_value = None
        self.id = None
        self.limit = None
        self.name = None
        self.unit = None


class VirtualNetworkUsageName(msrest.serialization.Model):
    """Usage strings container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar localized_value: Localized subnet size and usage string.
    :vartype localized_value: str
    :ivar value: Subnet size and usage string.
    :vartype value: str
    """

    _validation = {
        'localized_value': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualNetworkUsageName, self).__init__(**kwargs)
        self.localized_value = None
        self.value = None


class VirtualRouter(Resource):
    """VirtualRouter Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_router_asn: VirtualRouter ASN.
    :vartype virtual_router_asn: long
    :ivar virtual_router_ips: VirtualRouter IPs.
    :vartype virtual_router_ips: list[str]
    :ivar hosted_subnet: The Subnet on which VirtualRouter is hosted.
    :vartype hosted_subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar hosted_gateway: The Gateway on which VirtualRouter is hosted.
    :vartype hosted_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar peerings: List of references to VirtualRouterPeerings.
    :vartype peerings: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_router_asn': {'maximum': 4294967295, 'minimum': 0},
        'peerings': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_router_asn': {'key': 'properties.virtualRouterAsn', 'type': 'long'},
        'virtual_router_ips': {'key': 'properties.virtualRouterIps', 'type': '[str]'},
        'hosted_subnet': {'key': 'properties.hostedSubnet', 'type': 'SubResource'},
        'hosted_gateway': {'key': 'properties.hostedGateway', 'type': 'SubResource'},
        'peerings': {'key': 'properties.peerings', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_router_asn: VirtualRouter ASN.
        :paramtype virtual_router_asn: long
        :keyword virtual_router_ips: VirtualRouter IPs.
        :paramtype virtual_router_ips: list[str]
        :keyword hosted_subnet: The Subnet on which VirtualRouter is hosted.
        :paramtype hosted_subnet: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword hosted_gateway: The Gateway on which VirtualRouter is hosted.
        :paramtype hosted_gateway: ~azure.mgmt.network.v2021_02_01.models.SubResource
        """
        super(VirtualRouter, self).__init__(**kwargs)
        self.etag = None
        self.virtual_router_asn = kwargs.get('virtual_router_asn', None)
        self.virtual_router_ips = kwargs.get('virtual_router_ips', None)
        self.hosted_subnet = kwargs.get('hosted_subnet', None)
        self.hosted_gateway = kwargs.get('hosted_gateway', None)
        self.peerings = None
        self.provisioning_state = None


class VirtualRouterListResult(msrest.serialization.Model):
    """Response for ListVirtualRouters API service call.

    :ivar value: List of Virtual Routers.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualRouter]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualRouter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Virtual Routers.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualRouter]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualRouterListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualRouterPeering(SubResource):
    """Virtual Router Peering resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the virtual router peering that is unique within a virtual router.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Peering type.
    :vartype type: str
    :ivar peer_asn: Peer ASN.
    :vartype peer_asn: long
    :ivar peer_ip: Peer IP.
    :vartype peer_ip: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 0},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'peer_asn': {'key': 'properties.peerAsn', 'type': 'long'},
        'peer_ip': {'key': 'properties.peerIp', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the virtual router peering that is unique within a virtual router.
        :paramtype name: str
        :keyword peer_asn: Peer ASN.
        :paramtype peer_asn: long
        :keyword peer_ip: Peer IP.
        :paramtype peer_ip: str
        """
        super(VirtualRouterPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.peer_asn = kwargs.get('peer_asn', None)
        self.peer_ip = kwargs.get('peer_ip', None)
        self.provisioning_state = None


class VirtualRouterPeeringListResult(msrest.serialization.Model):
    """Response for ListVirtualRouterPeerings API service call.

    :ivar value: List of VirtualRouterPeerings in a VirtualRouter.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualRouterPeering]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualRouterPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualRouterPeerings in a VirtualRouter.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VirtualRouterPeering]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualRouterPeeringListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualWAN(Resource):
    """VirtualWAN Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar disable_vpn_encryption: Vpn encryption to be disabled or not.
    :vartype disable_vpn_encryption: bool
    :ivar virtual_hubs: List of VirtualHubs in the VirtualWAN.
    :vartype virtual_hubs: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar vpn_sites: List of VpnSites in the VirtualWAN.
    :vartype vpn_sites: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
    :vartype allow_branch_to_branch_traffic: bool
    :ivar allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
    :vartype allow_vnet_to_vnet_traffic: bool
    :ivar office365_local_breakout_category: The office local breakout category. Possible values
     include: "Optimize", "OptimizeAndAllow", "All", "None".
    :vartype office365_local_breakout_category: str or
     ~azure.mgmt.network.v2021_02_01.models.OfficeTrafficCategory
    :ivar provisioning_state: The provisioning state of the virtual WAN resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar type_properties_type: The type of the VirtualWAN.
    :vartype type_properties_type: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_hubs': {'readonly': True},
        'vpn_sites': {'readonly': True},
        'office365_local_breakout_category': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'disable_vpn_encryption': {'key': 'properties.disableVpnEncryption', 'type': 'bool'},
        'virtual_hubs': {'key': 'properties.virtualHubs', 'type': '[SubResource]'},
        'vpn_sites': {'key': 'properties.vpnSites', 'type': '[SubResource]'},
        'allow_branch_to_branch_traffic': {'key': 'properties.allowBranchToBranchTraffic', 'type': 'bool'},
        'allow_vnet_to_vnet_traffic': {'key': 'properties.allowVnetToVnetTraffic', 'type': 'bool'},
        'office365_local_breakout_category': {'key': 'properties.office365LocalBreakoutCategory', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword disable_vpn_encryption: Vpn encryption to be disabled or not.
        :paramtype disable_vpn_encryption: bool
        :keyword allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
        :paramtype allow_branch_to_branch_traffic: bool
        :keyword allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
        :paramtype allow_vnet_to_vnet_traffic: bool
        :keyword type_properties_type: The type of the VirtualWAN.
        :paramtype type_properties_type: str
        """
        super(VirtualWAN, self).__init__(**kwargs)
        self.etag = None
        self.disable_vpn_encryption = kwargs.get('disable_vpn_encryption', None)
        self.virtual_hubs = None
        self.vpn_sites = None
        self.allow_branch_to_branch_traffic = kwargs.get('allow_branch_to_branch_traffic', None)
        self.allow_vnet_to_vnet_traffic = kwargs.get('allow_vnet_to_vnet_traffic', None)
        self.office365_local_breakout_category = None
        self.provisioning_state = None
        self.type_properties_type = kwargs.get('type_properties_type', None)


class VirtualWanSecurityProvider(msrest.serialization.Model):
    """Collection of SecurityProviders.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the security provider.
    :vartype name: str
    :ivar url: Url of the security provider.
    :vartype url: str
    :ivar type: Name of the security provider. Possible values include: "External", "Native".
    :vartype type: str or ~azure.mgmt.network.v2021_02_01.models.VirtualWanSecurityProviderType
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the security provider.
        :paramtype name: str
        :keyword url: Url of the security provider.
        :paramtype url: str
        """
        super(VirtualWanSecurityProvider, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.url = kwargs.get('url', None)
        self.type = None


class VirtualWanSecurityProviders(msrest.serialization.Model):
    """Collection of SecurityProviders.

    :ivar supported_providers: List of VirtualWAN security providers.
    :vartype supported_providers:
     list[~azure.mgmt.network.v2021_02_01.models.VirtualWanSecurityProvider]
    """

    _attribute_map = {
        'supported_providers': {'key': 'supportedProviders', 'type': '[VirtualWanSecurityProvider]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword supported_providers: List of VirtualWAN security providers.
        :paramtype supported_providers:
         list[~azure.mgmt.network.v2021_02_01.models.VirtualWanSecurityProvider]
        """
        super(VirtualWanSecurityProviders, self).__init__(**kwargs)
        self.supported_providers = kwargs.get('supported_providers', None)


class VirtualWanVpnProfileParameters(msrest.serialization.Model):
    """Virtual Wan Vpn profile parameters Vpn profile generation.

    :ivar vpn_server_configuration_resource_id: VpnServerConfiguration partial resource uri with
     which VirtualWan is associated to.
    :vartype vpn_server_configuration_resource_id: str
    :ivar authentication_method: VPN client authentication method. Possible values include:
     "EAPTLS", "EAPMSCHAPv2".
    :vartype authentication_method: str or
     ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
    """

    _attribute_map = {
        'vpn_server_configuration_resource_id': {'key': 'vpnServerConfigurationResourceId', 'type': 'str'},
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_server_configuration_resource_id: VpnServerConfiguration partial resource uri with
         which VirtualWan is associated to.
        :paramtype vpn_server_configuration_resource_id: str
        :keyword authentication_method: VPN client authentication method. Possible values include:
         "EAPTLS", "EAPMSCHAPv2".
        :paramtype authentication_method: str or
         ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
        """
        super(VirtualWanVpnProfileParameters, self).__init__(**kwargs)
        self.vpn_server_configuration_resource_id = kwargs.get('vpn_server_configuration_resource_id', None)
        self.authentication_method = kwargs.get('authentication_method', None)


class VM(Resource):
    """Describes a Virtual Machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(VM, self).__init__(**kwargs)


class VnetRoute(msrest.serialization.Model):
    """List of routes that control routing from VirtualHub into a virtual network connection.

    :ivar static_routes: List of all Static Routes.
    :vartype static_routes: list[~azure.mgmt.network.v2021_02_01.models.StaticRoute]
    """

    _attribute_map = {
        'static_routes': {'key': 'staticRoutes', 'type': '[StaticRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword static_routes: List of all Static Routes.
        :paramtype static_routes: list[~azure.mgmt.network.v2021_02_01.models.StaticRoute]
        """
        super(VnetRoute, self).__init__(**kwargs)
        self.static_routes = kwargs.get('static_routes', None)


class VpnClientConfiguration(msrest.serialization.Model):
    """VpnClientConfiguration for P2S client.

    :ivar vpn_client_address_pool: The reference to the address space resource which represents
     Address space for P2S VpnClient.
    :vartype vpn_client_address_pool: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar vpn_client_root_certificates: VpnClientRootCertificate for virtual network gateway.
    :vartype vpn_client_root_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnClientRootCertificate]
    :ivar vpn_client_revoked_certificates: VpnClientRevokedCertificate for Virtual network gateway.
    :vartype vpn_client_revoked_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnClientRevokedCertificate]
    :ivar vpn_client_protocols: VpnClientProtocols for Virtual network gateway.
    :vartype vpn_client_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.VpnClientProtocol]
    :ivar vpn_authentication_types: VPN authentication types for the virtual network gateway..
    :vartype vpn_authentication_types: list[str or
     ~azure.mgmt.network.v2021_02_01.models.VpnAuthenticationType]
    :ivar vpn_client_ipsec_policies: VpnClientIpsecPolicies for virtual network gateway P2S client.
    :vartype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar radius_server_address: The radius server address property of the VirtualNetworkGateway
     resource for vpn client connection.
    :vartype radius_server_address: str
    :ivar radius_server_secret: The radius secret property of the VirtualNetworkGateway resource
     for vpn client connection.
    :vartype radius_server_secret: str
    :ivar radius_servers: The radiusServers property for multiple radius server configuration.
    :vartype radius_servers: list[~azure.mgmt.network.v2021_02_01.models.RadiusServer]
    :ivar aad_tenant: The AADTenant property of the VirtualNetworkGateway resource for vpn client
     connection used for AAD authentication.
    :vartype aad_tenant: str
    :ivar aad_audience: The AADAudience property of the VirtualNetworkGateway resource for vpn
     client connection used for AAD authentication.
    :vartype aad_audience: str
    :ivar aad_issuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn client
     connection used for AAD authentication.
    :vartype aad_issuer: str
    """

    _attribute_map = {
        'vpn_client_address_pool': {'key': 'vpnClientAddressPool', 'type': 'AddressSpace'},
        'vpn_client_root_certificates': {'key': 'vpnClientRootCertificates', 'type': '[VpnClientRootCertificate]'},
        'vpn_client_revoked_certificates': {'key': 'vpnClientRevokedCertificates', 'type': '[VpnClientRevokedCertificate]'},
        'vpn_client_protocols': {'key': 'vpnClientProtocols', 'type': '[str]'},
        'vpn_authentication_types': {'key': 'vpnAuthenticationTypes', 'type': '[str]'},
        'vpn_client_ipsec_policies': {'key': 'vpnClientIpsecPolicies', 'type': '[IpsecPolicy]'},
        'radius_server_address': {'key': 'radiusServerAddress', 'type': 'str'},
        'radius_server_secret': {'key': 'radiusServerSecret', 'type': 'str'},
        'radius_servers': {'key': 'radiusServers', 'type': '[RadiusServer]'},
        'aad_tenant': {'key': 'aadTenant', 'type': 'str'},
        'aad_audience': {'key': 'aadAudience', 'type': 'str'},
        'aad_issuer': {'key': 'aadIssuer', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_client_address_pool: The reference to the address space resource which represents
         Address space for P2S VpnClient.
        :paramtype vpn_client_address_pool: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword vpn_client_root_certificates: VpnClientRootCertificate for virtual network gateway.
        :paramtype vpn_client_root_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnClientRootCertificate]
        :keyword vpn_client_revoked_certificates: VpnClientRevokedCertificate for Virtual network
         gateway.
        :paramtype vpn_client_revoked_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnClientRevokedCertificate]
        :keyword vpn_client_protocols: VpnClientProtocols for Virtual network gateway.
        :paramtype vpn_client_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.VpnClientProtocol]
        :keyword vpn_authentication_types: VPN authentication types for the virtual network gateway..
        :paramtype vpn_authentication_types: list[str or
         ~azure.mgmt.network.v2021_02_01.models.VpnAuthenticationType]
        :keyword vpn_client_ipsec_policies: VpnClientIpsecPolicies for virtual network gateway P2S
         client.
        :paramtype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword radius_server_address: The radius server address property of the VirtualNetworkGateway
         resource for vpn client connection.
        :paramtype radius_server_address: str
        :keyword radius_server_secret: The radius secret property of the VirtualNetworkGateway resource
         for vpn client connection.
        :paramtype radius_server_secret: str
        :keyword radius_servers: The radiusServers property for multiple radius server configuration.
        :paramtype radius_servers: list[~azure.mgmt.network.v2021_02_01.models.RadiusServer]
        :keyword aad_tenant: The AADTenant property of the VirtualNetworkGateway resource for vpn
         client connection used for AAD authentication.
        :paramtype aad_tenant: str
        :keyword aad_audience: The AADAudience property of the VirtualNetworkGateway resource for vpn
         client connection used for AAD authentication.
        :paramtype aad_audience: str
        :keyword aad_issuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn
         client connection used for AAD authentication.
        :paramtype aad_issuer: str
        """
        super(VpnClientConfiguration, self).__init__(**kwargs)
        self.vpn_client_address_pool = kwargs.get('vpn_client_address_pool', None)
        self.vpn_client_root_certificates = kwargs.get('vpn_client_root_certificates', None)
        self.vpn_client_revoked_certificates = kwargs.get('vpn_client_revoked_certificates', None)
        self.vpn_client_protocols = kwargs.get('vpn_client_protocols', None)
        self.vpn_authentication_types = kwargs.get('vpn_authentication_types', None)
        self.vpn_client_ipsec_policies = kwargs.get('vpn_client_ipsec_policies', None)
        self.radius_server_address = kwargs.get('radius_server_address', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)
        self.radius_servers = kwargs.get('radius_servers', None)
        self.aad_tenant = kwargs.get('aad_tenant', None)
        self.aad_audience = kwargs.get('aad_audience', None)
        self.aad_issuer = kwargs.get('aad_issuer', None)


class VpnClientConnectionHealth(msrest.serialization.Model):
    """VpnClientConnectionHealth properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar total_ingress_bytes_transferred: Total of the Ingress Bytes Transferred in this P2S Vpn
     connection.
    :vartype total_ingress_bytes_transferred: long
    :ivar total_egress_bytes_transferred: Total of the Egress Bytes Transferred in this connection.
    :vartype total_egress_bytes_transferred: long
    :ivar vpn_client_connections_count: The total of p2s vpn clients connected at this time to this
     P2SVpnGateway.
    :vartype vpn_client_connections_count: int
    :ivar allocated_ip_addresses: List of allocated ip addresses to the connected p2s vpn clients.
    :vartype allocated_ip_addresses: list[str]
    """

    _validation = {
        'total_ingress_bytes_transferred': {'readonly': True},
        'total_egress_bytes_transferred': {'readonly': True},
    }

    _attribute_map = {
        'total_ingress_bytes_transferred': {'key': 'totalIngressBytesTransferred', 'type': 'long'},
        'total_egress_bytes_transferred': {'key': 'totalEgressBytesTransferred', 'type': 'long'},
        'vpn_client_connections_count': {'key': 'vpnClientConnectionsCount', 'type': 'int'},
        'allocated_ip_addresses': {'key': 'allocatedIpAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_client_connections_count: The total of p2s vpn clients connected at this time to
         this P2SVpnGateway.
        :paramtype vpn_client_connections_count: int
        :keyword allocated_ip_addresses: List of allocated ip addresses to the connected p2s vpn
         clients.
        :paramtype allocated_ip_addresses: list[str]
        """
        super(VpnClientConnectionHealth, self).__init__(**kwargs)
        self.total_ingress_bytes_transferred = None
        self.total_egress_bytes_transferred = None
        self.vpn_client_connections_count = kwargs.get('vpn_client_connections_count', None)
        self.allocated_ip_addresses = kwargs.get('allocated_ip_addresses', None)


class VpnClientConnectionHealthDetail(msrest.serialization.Model):
    """VPN client connection health detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vpn_connection_id: The vpn client Id.
    :vartype vpn_connection_id: str
    :ivar vpn_connection_duration: The duration time of a connected vpn client.
    :vartype vpn_connection_duration: long
    :ivar vpn_connection_time: The start time of a connected vpn client.
    :vartype vpn_connection_time: str
    :ivar public_ip_address: The public Ip of a connected vpn client.
    :vartype public_ip_address: str
    :ivar private_ip_address: The assigned private Ip of a connected vpn client.
    :vartype private_ip_address: str
    :ivar vpn_user_name: The user name of a connected vpn client.
    :vartype vpn_user_name: str
    :ivar max_bandwidth: The max band width.
    :vartype max_bandwidth: long
    :ivar egress_packets_transferred: The egress packets per second.
    :vartype egress_packets_transferred: long
    :ivar egress_bytes_transferred: The egress bytes per second.
    :vartype egress_bytes_transferred: long
    :ivar ingress_packets_transferred: The ingress packets per second.
    :vartype ingress_packets_transferred: long
    :ivar ingress_bytes_transferred: The ingress bytes per second.
    :vartype ingress_bytes_transferred: long
    :ivar max_packets_per_second: The max packets transferred per second.
    :vartype max_packets_per_second: long
    """

    _validation = {
        'vpn_connection_id': {'readonly': True},
        'vpn_connection_duration': {'readonly': True},
        'vpn_connection_time': {'readonly': True},
        'public_ip_address': {'readonly': True},
        'private_ip_address': {'readonly': True},
        'vpn_user_name': {'readonly': True},
        'max_bandwidth': {'readonly': True},
        'egress_packets_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'ingress_packets_transferred': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'max_packets_per_second': {'readonly': True},
    }

    _attribute_map = {
        'vpn_connection_id': {'key': 'vpnConnectionId', 'type': 'str'},
        'vpn_connection_duration': {'key': 'vpnConnectionDuration', 'type': 'long'},
        'vpn_connection_time': {'key': 'vpnConnectionTime', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'vpn_user_name': {'key': 'vpnUserName', 'type': 'str'},
        'max_bandwidth': {'key': 'maxBandwidth', 'type': 'long'},
        'egress_packets_transferred': {'key': 'egressPacketsTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'egressBytesTransferred', 'type': 'long'},
        'ingress_packets_transferred': {'key': 'ingressPacketsTransferred', 'type': 'long'},
        'ingress_bytes_transferred': {'key': 'ingressBytesTransferred', 'type': 'long'},
        'max_packets_per_second': {'key': 'maxPacketsPerSecond', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VpnClientConnectionHealthDetail, self).__init__(**kwargs)
        self.vpn_connection_id = None
        self.vpn_connection_duration = None
        self.vpn_connection_time = None
        self.public_ip_address = None
        self.private_ip_address = None
        self.vpn_user_name = None
        self.max_bandwidth = None
        self.egress_packets_transferred = None
        self.egress_bytes_transferred = None
        self.ingress_packets_transferred = None
        self.ingress_bytes_transferred = None
        self.max_packets_per_second = None


class VpnClientConnectionHealthDetailListResult(msrest.serialization.Model):
    """List of virtual network gateway vpn client connection health.

    :ivar value: List of vpn client connection health.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.VpnClientConnectionHealthDetail]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnClientConnectionHealthDetail]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of vpn client connection health.
        :paramtype value: list[~azure.mgmt.network.v2021_02_01.models.VpnClientConnectionHealthDetail]
        """
        super(VpnClientConnectionHealthDetailListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class VpnClientIPsecParameters(msrest.serialization.Model):
    """An IPSec parameters for a virtual network gateway P2S connection.

    All required parameters must be populated in order to send to Azure.

    :ivar sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode or
     Phase 2 SA) lifetime in seconds for P2S client.
    :vartype sa_life_time_seconds: int
    :ivar sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) payload size in KB for P2S client..
    :vartype sa_data_size_kilobytes: int
    :ivar ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible values
     include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
     "GCMAES256".
    :vartype ipsec_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IpsecEncryption
    :ivar ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible values
     include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
    :vartype ipsec_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IpsecIntegrity
    :ivar ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
     include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
    :vartype ike_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IkeEncryption
    :ivar ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
     include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
    :vartype ike_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IkeIntegrity
    :ivar dh_group: Required. The DH Group used in IKE Phase 1 for initial SA. Possible values
     include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
     "DHGroup24".
    :vartype dh_group: str or ~azure.mgmt.network.v2021_02_01.models.DhGroup
    :ivar pfs_group: Required. The Pfs Group used in IKE Phase 2 for new child SA. Possible values
     include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM".
    :vartype pfs_group: str or ~azure.mgmt.network.v2021_02_01.models.PfsGroup
    """

    _validation = {
        'sa_life_time_seconds': {'required': True},
        'sa_data_size_kilobytes': {'required': True},
        'ipsec_encryption': {'required': True},
        'ipsec_integrity': {'required': True},
        'ike_encryption': {'required': True},
        'ike_integrity': {'required': True},
        'dh_group': {'required': True},
        'pfs_group': {'required': True},
    }

    _attribute_map = {
        'sa_life_time_seconds': {'key': 'saLifeTimeSeconds', 'type': 'int'},
        'sa_data_size_kilobytes': {'key': 'saDataSizeKilobytes', 'type': 'int'},
        'ipsec_encryption': {'key': 'ipsecEncryption', 'type': 'str'},
        'ipsec_integrity': {'key': 'ipsecIntegrity', 'type': 'str'},
        'ike_encryption': {'key': 'ikeEncryption', 'type': 'str'},
        'ike_integrity': {'key': 'ikeIntegrity', 'type': 'str'},
        'dh_group': {'key': 'dhGroup', 'type': 'str'},
        'pfs_group': {'key': 'pfsGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode
         or Phase 2 SA) lifetime in seconds for P2S client.
        :paramtype sa_life_time_seconds: int
        :keyword sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick
         Mode or Phase 2 SA) payload size in KB for P2S client..
        :paramtype sa_data_size_kilobytes: int
        :keyword ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible
         values include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
         "GCMAES256".
        :paramtype ipsec_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IpsecEncryption
        :keyword ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible
         values include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
        :paramtype ipsec_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IpsecIntegrity
        :keyword ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
         include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
        :paramtype ike_encryption: str or ~azure.mgmt.network.v2021_02_01.models.IkeEncryption
        :keyword ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
         include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
        :paramtype ike_integrity: str or ~azure.mgmt.network.v2021_02_01.models.IkeIntegrity
        :keyword dh_group: Required. The DH Group used in IKE Phase 1 for initial SA. Possible values
         include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
         "DHGroup24".
        :paramtype dh_group: str or ~azure.mgmt.network.v2021_02_01.models.DhGroup
        :keyword pfs_group: Required. The Pfs Group used in IKE Phase 2 for new child SA. Possible
         values include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14",
         "PFSMM".
        :paramtype pfs_group: str or ~azure.mgmt.network.v2021_02_01.models.PfsGroup
        """
        super(VpnClientIPsecParameters, self).__init__(**kwargs)
        self.sa_life_time_seconds = kwargs['sa_life_time_seconds']
        self.sa_data_size_kilobytes = kwargs['sa_data_size_kilobytes']
        self.ipsec_encryption = kwargs['ipsec_encryption']
        self.ipsec_integrity = kwargs['ipsec_integrity']
        self.ike_encryption = kwargs['ike_encryption']
        self.ike_integrity = kwargs['ike_integrity']
        self.dh_group = kwargs['dh_group']
        self.pfs_group = kwargs['pfs_group']


class VpnClientParameters(msrest.serialization.Model):
    """Vpn Client Parameters for package generation.

    :ivar processor_architecture: VPN client Processor Architecture. Possible values include:
     "Amd64", "X86".
    :vartype processor_architecture: str or
     ~azure.mgmt.network.v2021_02_01.models.ProcessorArchitecture
    :ivar authentication_method: VPN client authentication method. Possible values include:
     "EAPTLS", "EAPMSCHAPv2".
    :vartype authentication_method: str or
     ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
    :ivar radius_server_auth_certificate: The public certificate data for the radius server
     authentication certificate as a Base-64 encoded string. Required only if external radius
     authentication has been configured with EAPTLS authentication.
    :vartype radius_server_auth_certificate: str
    :ivar client_root_certificates: A list of client root certificates public certificate data
     encoded as Base-64 strings. Optional parameter for external radius based authentication with
     EAPTLS.
    :vartype client_root_certificates: list[str]
    """

    _attribute_map = {
        'processor_architecture': {'key': 'processorArchitecture', 'type': 'str'},
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
        'radius_server_auth_certificate': {'key': 'radiusServerAuthCertificate', 'type': 'str'},
        'client_root_certificates': {'key': 'clientRootCertificates', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword processor_architecture: VPN client Processor Architecture. Possible values include:
         "Amd64", "X86".
        :paramtype processor_architecture: str or
         ~azure.mgmt.network.v2021_02_01.models.ProcessorArchitecture
        :keyword authentication_method: VPN client authentication method. Possible values include:
         "EAPTLS", "EAPMSCHAPv2".
        :paramtype authentication_method: str or
         ~azure.mgmt.network.v2021_02_01.models.AuthenticationMethod
        :keyword radius_server_auth_certificate: The public certificate data for the radius server
         authentication certificate as a Base-64 encoded string. Required only if external radius
         authentication has been configured with EAPTLS authentication.
        :paramtype radius_server_auth_certificate: str
        :keyword client_root_certificates: A list of client root certificates public certificate data
         encoded as Base-64 strings. Optional parameter for external radius based authentication with
         EAPTLS.
        :paramtype client_root_certificates: list[str]
        """
        super(VpnClientParameters, self).__init__(**kwargs)
        self.processor_architecture = kwargs.get('processor_architecture', None)
        self.authentication_method = kwargs.get('authentication_method', None)
        self.radius_server_auth_certificate = kwargs.get('radius_server_auth_certificate', None)
        self.client_root_certificates = kwargs.get('client_root_certificates', None)


class VpnClientRevokedCertificate(SubResource):
    """VPN client revoked certificate of virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar thumbprint: The revoked VPN client certificate thumbprint.
    :vartype thumbprint: str
    :ivar provisioning_state: The provisioning state of the VPN client revoked certificate
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'thumbprint': {'key': 'properties.thumbprint', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword thumbprint: The revoked VPN client certificate thumbprint.
        :paramtype thumbprint: str
        """
        super(VpnClientRevokedCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.thumbprint = kwargs.get('thumbprint', None)
        self.provisioning_state = None


class VpnClientRootCertificate(SubResource):
    """VPN client root certificate of virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar public_cert_data: Required. The certificate public data.
    :vartype public_cert_data: str
    :ivar provisioning_state: The provisioning state of the VPN client root certificate resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'public_cert_data': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'public_cert_data': {'key': 'properties.publicCertData', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword public_cert_data: Required. The certificate public data.
        :paramtype public_cert_data: str
        """
        super(VpnClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.public_cert_data = kwargs['public_cert_data']
        self.provisioning_state = None


class VpnConnection(SubResource):
    """VpnConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar remote_vpn_site: Id of the connected vpn site.
    :vartype remote_vpn_site: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar routing_weight: Routing weight for vpn connection.
    :vartype routing_weight: int
    :ivar dpd_timeout_seconds: DPD timeout in seconds for vpn connection.
    :vartype dpd_timeout_seconds: int
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or ~azure.mgmt.network.v2021_02_01.models.VpnConnectionStatus
    :ivar vpn_connection_protocol_type: Connection protocol used for this connection. Possible
     values include: "IKEv2", "IKEv1".
    :vartype vpn_connection_protocol_type: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
    :ivar ingress_bytes_transferred: Ingress bytes transferred.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: Egress bytes transferred.
    :vartype egress_bytes_transferred: long
    :ivar connection_bandwidth: Expected bandwidth in MBPS.
    :vartype connection_bandwidth: int
    :ivar shared_key: SharedKey for the vpn connection.
    :vartype shared_key: str
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar traffic_selector_policies: The Traffic Selector Policies to be considered by this
     connection.
    :vartype traffic_selector_policies:
     list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
    :ivar enable_rate_limiting: EnableBgp flag.
    :vartype enable_rate_limiting: bool
    :ivar enable_internet_security: Enable internet security.
    :vartype enable_internet_security: bool
    :ivar use_local_azure_ip_address: Use local azure ip to initiate connection.
    :vartype use_local_azure_ip_address: bool
    :ivar provisioning_state: The provisioning state of the VPN connection resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar vpn_link_connections: List of all vpn site link connections to the gateway.
    :vartype vpn_link_connections:
     list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLinkConnection]
    :ivar routing_configuration: The Routing Configuration indicating the associated and propagated
     route tables on this connection.
    :vartype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
    """

    _validation = {
        'etag': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_vpn_site': {'key': 'properties.remoteVpnSite', 'type': 'SubResource'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'dpd_timeout_seconds': {'key': 'properties.dpdTimeoutSeconds', 'type': 'int'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'vpn_connection_protocol_type': {'key': 'properties.vpnConnectionProtocolType', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'connection_bandwidth': {'key': 'properties.connectionBandwidth', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'traffic_selector_policies': {'key': 'properties.trafficSelectorPolicies', 'type': '[TrafficSelectorPolicy]'},
        'enable_rate_limiting': {'key': 'properties.enableRateLimiting', 'type': 'bool'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'use_local_azure_ip_address': {'key': 'properties.useLocalAzureIpAddress', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_link_connections': {'key': 'properties.vpnLinkConnections', 'type': '[VpnSiteLinkConnection]'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword remote_vpn_site: Id of the connected vpn site.
        :paramtype remote_vpn_site: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword routing_weight: Routing weight for vpn connection.
        :paramtype routing_weight: int
        :keyword dpd_timeout_seconds: DPD timeout in seconds for vpn connection.
        :paramtype dpd_timeout_seconds: int
        :keyword vpn_connection_protocol_type: Connection protocol used for this connection. Possible
         values include: "IKEv2", "IKEv1".
        :paramtype vpn_connection_protocol_type: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
        :keyword connection_bandwidth: Expected bandwidth in MBPS.
        :paramtype connection_bandwidth: int
        :keyword shared_key: SharedKey for the vpn connection.
        :paramtype shared_key: str
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword traffic_selector_policies: The Traffic Selector Policies to be considered by this
         connection.
        :paramtype traffic_selector_policies:
         list[~azure.mgmt.network.v2021_02_01.models.TrafficSelectorPolicy]
        :keyword enable_rate_limiting: EnableBgp flag.
        :paramtype enable_rate_limiting: bool
        :keyword enable_internet_security: Enable internet security.
        :paramtype enable_internet_security: bool
        :keyword use_local_azure_ip_address: Use local azure ip to initiate connection.
        :paramtype use_local_azure_ip_address: bool
        :keyword vpn_link_connections: List of all vpn site link connections to the gateway.
        :paramtype vpn_link_connections:
         list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLinkConnection]
        :keyword routing_configuration: The Routing Configuration indicating the associated and
         propagated route tables on this connection.
        :paramtype routing_configuration: ~azure.mgmt.network.v2021_02_01.models.RoutingConfiguration
        """
        super(VpnConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.remote_vpn_site = kwargs.get('remote_vpn_site', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.dpd_timeout_seconds = kwargs.get('dpd_timeout_seconds', None)
        self.connection_status = None
        self.vpn_connection_protocol_type = kwargs.get('vpn_connection_protocol_type', None)
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.connection_bandwidth = kwargs.get('connection_bandwidth', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.traffic_selector_policies = kwargs.get('traffic_selector_policies', None)
        self.enable_rate_limiting = kwargs.get('enable_rate_limiting', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.use_local_azure_ip_address = kwargs.get('use_local_azure_ip_address', None)
        self.provisioning_state = None
        self.vpn_link_connections = kwargs.get('vpn_link_connections', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)


class VpnConnectionPacketCaptureStartParameters(msrest.serialization.Model):
    """Vpn Connection packet capture parameters supplied to start packet capture on gateway connection.

    :ivar filter_data: Start Packet capture parameters on vpn connection.
    :vartype filter_data: str
    :ivar link_connection_names: List of site link connection names.
    :vartype link_connection_names: list[str]
    """

    _attribute_map = {
        'filter_data': {'key': 'filterData', 'type': 'str'},
        'link_connection_names': {'key': 'linkConnectionNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword filter_data: Start Packet capture parameters on vpn connection.
        :paramtype filter_data: str
        :keyword link_connection_names: List of site link connection names.
        :paramtype link_connection_names: list[str]
        """
        super(VpnConnectionPacketCaptureStartParameters, self).__init__(**kwargs)
        self.filter_data = kwargs.get('filter_data', None)
        self.link_connection_names = kwargs.get('link_connection_names', None)


class VpnConnectionPacketCaptureStopParameters(msrest.serialization.Model):
    """Vpn Connection packet capture parameters supplied to stop packet capture on gateway connection.

    :ivar sas_url: SAS url for packet capture on vpn connection.
    :vartype sas_url: str
    :ivar link_connection_names: List of site link connection names.
    :vartype link_connection_names: list[str]
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
        'link_connection_names': {'key': 'linkConnectionNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_url: SAS url for packet capture on vpn connection.
        :paramtype sas_url: str
        :keyword link_connection_names: List of site link connection names.
        :paramtype link_connection_names: list[str]
        """
        super(VpnConnectionPacketCaptureStopParameters, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)
        self.link_connection_names = kwargs.get('link_connection_names', None)


class VpnDeviceScriptParameters(msrest.serialization.Model):
    """Vpn device configuration script generation parameters.

    :ivar vendor: The vendor for the vpn device.
    :vartype vendor: str
    :ivar device_family: The device family for the vpn device.
    :vartype device_family: str
    :ivar firmware_version: The firmware version for the vpn device.
    :vartype firmware_version: str
    """

    _attribute_map = {
        'vendor': {'key': 'vendor', 'type': 'str'},
        'device_family': {'key': 'deviceFamily', 'type': 'str'},
        'firmware_version': {'key': 'firmwareVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vendor: The vendor for the vpn device.
        :paramtype vendor: str
        :keyword device_family: The device family for the vpn device.
        :paramtype device_family: str
        :keyword firmware_version: The firmware version for the vpn device.
        :paramtype firmware_version: str
        """
        super(VpnDeviceScriptParameters, self).__init__(**kwargs)
        self.vendor = kwargs.get('vendor', None)
        self.device_family = kwargs.get('device_family', None)
        self.firmware_version = kwargs.get('firmware_version', None)


class VpnGateway(Resource):
    """VpnGateway Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_hub: The VirtualHub to which the gateway belongs.
    :vartype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar connections: List of all vpn connections to the gateway.
    :vartype connections: list[~azure.mgmt.network.v2021_02_01.models.VpnConnection]
    :ivar bgp_settings: Local network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the VPN gateway resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar vpn_gateway_scale_unit: The scale unit for this vpn gateway.
    :vartype vpn_gateway_scale_unit: int
    :ivar ip_configurations: List of all IPs configured on the gateway.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2021_02_01.models.VpnGatewayIpConfiguration]
    :ivar is_routing_preference_internet: Enable Routing Preference property for the Public IP
     Interface of the VpnGateway.
    :vartype is_routing_preference_internet: bool
    :ivar nat_rules: List of all the nat Rules associated with the gateway.
    :vartype nat_rules: list[~azure.mgmt.network.v2021_02_01.models.VpnGatewayNatRule]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'ip_configurations': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'connections': {'key': 'properties.connections', 'type': '[VpnConnection]'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_gateway_scale_unit': {'key': 'properties.vpnGatewayScaleUnit', 'type': 'int'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[VpnGatewayIpConfiguration]'},
        'is_routing_preference_internet': {'key': 'properties.isRoutingPreferenceInternet', 'type': 'bool'},
        'nat_rules': {'key': 'properties.natRules', 'type': '[VpnGatewayNatRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_hub: The VirtualHub to which the gateway belongs.
        :paramtype virtual_hub: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword connections: List of all vpn connections to the gateway.
        :paramtype connections: list[~azure.mgmt.network.v2021_02_01.models.VpnConnection]
        :keyword bgp_settings: Local network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
        :keyword vpn_gateway_scale_unit: The scale unit for this vpn gateway.
        :paramtype vpn_gateway_scale_unit: int
        :keyword is_routing_preference_internet: Enable Routing Preference property for the Public IP
         Interface of the VpnGateway.
        :paramtype is_routing_preference_internet: bool
        :keyword nat_rules: List of all the nat Rules associated with the gateway.
        :paramtype nat_rules: list[~azure.mgmt.network.v2021_02_01.models.VpnGatewayNatRule]
        """
        super(VpnGateway, self).__init__(**kwargs)
        self.etag = None
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.connections = kwargs.get('connections', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.provisioning_state = None
        self.vpn_gateway_scale_unit = kwargs.get('vpn_gateway_scale_unit', None)
        self.ip_configurations = None
        self.is_routing_preference_internet = kwargs.get('is_routing_preference_internet', None)
        self.nat_rules = kwargs.get('nat_rules', None)


class VpnGatewayIpConfiguration(msrest.serialization.Model):
    """IP Configuration of a VPN Gateway Resource.

    :ivar id: The identifier of the IP configuration for a VPN Gateway.
    :vartype id: str
    :ivar public_ip_address: The public IP address of this IP configuration.
    :vartype public_ip_address: str
    :ivar private_ip_address: The private IP address of this IP configuration.
    :vartype private_ip_address: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The identifier of the IP configuration for a VPN Gateway.
        :paramtype id: str
        :keyword public_ip_address: The public IP address of this IP configuration.
        :paramtype public_ip_address: str
        :keyword private_ip_address: The private IP address of this IP configuration.
        :paramtype private_ip_address: str
        """
        super(VpnGatewayIpConfiguration, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)


class VpnGatewayNatRule(SubResource):
    """VpnGatewayNatRule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar provisioning_state: The provisioning state of the NAT Rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar type_properties_type: The type of NAT rule for VPN NAT. Possible values include:
     "Static", "Dynamic".
    :vartype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleType
    :ivar mode: The Source NAT direction of a VPN NAT. Possible values include: "EgressSnat",
     "IngressSnat".
    :vartype mode: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMode
    :ivar internal_mappings: The private IP address internal mapping for NAT.
    :vartype internal_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
    :ivar external_mappings: The private IP address external mapping for NAT.
    :vartype external_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
    :ivar ip_configuration_id: The IP Configuration ID this NAT rule applies to.
    :vartype ip_configuration_id: str
    :ivar egress_vpn_site_link_connections: List of egress VpnSiteLinkConnections.
    :vartype egress_vpn_site_link_connections:
     list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar ingress_vpn_site_link_connections: List of ingress VpnSiteLinkConnections.
    :vartype ingress_vpn_site_link_connections:
     list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'egress_vpn_site_link_connections': {'readonly': True},
        'ingress_vpn_site_link_connections': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'mode': {'key': 'properties.mode', 'type': 'str'},
        'internal_mappings': {'key': 'properties.internalMappings', 'type': '[VpnNatRuleMapping]'},
        'external_mappings': {'key': 'properties.externalMappings', 'type': '[VpnNatRuleMapping]'},
        'ip_configuration_id': {'key': 'properties.ipConfigurationId', 'type': 'str'},
        'egress_vpn_site_link_connections': {'key': 'properties.egressVpnSiteLinkConnections', 'type': '[SubResource]'},
        'ingress_vpn_site_link_connections': {'key': 'properties.ingressVpnSiteLinkConnections', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword type_properties_type: The type of NAT rule for VPN NAT. Possible values include:
         "Static", "Dynamic".
        :paramtype type_properties_type: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleType
        :keyword mode: The Source NAT direction of a VPN NAT. Possible values include: "EgressSnat",
         "IngressSnat".
        :paramtype mode: str or ~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMode
        :keyword internal_mappings: The private IP address internal mapping for NAT.
        :paramtype internal_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
        :keyword external_mappings: The private IP address external mapping for NAT.
        :paramtype external_mappings: list[~azure.mgmt.network.v2021_02_01.models.VpnNatRuleMapping]
        :keyword ip_configuration_id: The IP Configuration ID this NAT rule applies to.
        :paramtype ip_configuration_id: str
        """
        super(VpnGatewayNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.provisioning_state = None
        self.type_properties_type = kwargs.get('type_properties_type', None)
        self.mode = kwargs.get('mode', None)
        self.internal_mappings = kwargs.get('internal_mappings', None)
        self.external_mappings = kwargs.get('external_mappings', None)
        self.ip_configuration_id = kwargs.get('ip_configuration_id', None)
        self.egress_vpn_site_link_connections = None
        self.ingress_vpn_site_link_connections = None


class VpnGatewayPacketCaptureStartParameters(msrest.serialization.Model):
    """Start packet capture parameters.

    :ivar filter_data: Start Packet capture parameters on vpn gateway.
    :vartype filter_data: str
    """

    _attribute_map = {
        'filter_data': {'key': 'filterData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword filter_data: Start Packet capture parameters on vpn gateway.
        :paramtype filter_data: str
        """
        super(VpnGatewayPacketCaptureStartParameters, self).__init__(**kwargs)
        self.filter_data = kwargs.get('filter_data', None)


class VpnGatewayPacketCaptureStopParameters(msrest.serialization.Model):
    """Stop packet capture parameters.

    :ivar sas_url: SAS url for packet capture on vpn gateway.
    :vartype sas_url: str
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_url: SAS url for packet capture on vpn gateway.
        :paramtype sas_url: str
        """
        super(VpnGatewayPacketCaptureStopParameters, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)


class VpnLinkBgpSettings(msrest.serialization.Model):
    """BGP settings details for a link.

    :ivar asn: The BGP speaker's ASN.
    :vartype asn: long
    :ivar bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
    :vartype bgp_peering_address: str
    """

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'long'},
        'bgp_peering_address': {'key': 'bgpPeeringAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asn: The BGP speaker's ASN.
        :paramtype asn: long
        :keyword bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
        :paramtype bgp_peering_address: str
        """
        super(VpnLinkBgpSettings, self).__init__(**kwargs)
        self.asn = kwargs.get('asn', None)
        self.bgp_peering_address = kwargs.get('bgp_peering_address', None)


class VpnLinkProviderProperties(msrest.serialization.Model):
    """List of properties of a link provider.

    :ivar link_provider_name: Name of the link provider.
    :vartype link_provider_name: str
    :ivar link_speed_in_mbps: Link speed.
    :vartype link_speed_in_mbps: int
    """

    _attribute_map = {
        'link_provider_name': {'key': 'linkProviderName', 'type': 'str'},
        'link_speed_in_mbps': {'key': 'linkSpeedInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword link_provider_name: Name of the link provider.
        :paramtype link_provider_name: str
        :keyword link_speed_in_mbps: Link speed.
        :paramtype link_speed_in_mbps: int
        """
        super(VpnLinkProviderProperties, self).__init__(**kwargs)
        self.link_provider_name = kwargs.get('link_provider_name', None)
        self.link_speed_in_mbps = kwargs.get('link_speed_in_mbps', None)


class VpnNatRuleMapping(msrest.serialization.Model):
    """Vpn NatRule mapping.

    :ivar address_space: Address space for Vpn NatRule mapping.
    :vartype address_space: str
    """

    _attribute_map = {
        'address_space': {'key': 'addressSpace', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_space: Address space for Vpn NatRule mapping.
        :paramtype address_space: str
        """
        super(VpnNatRuleMapping, self).__init__(**kwargs)
        self.address_space = kwargs.get('address_space', None)


class VpnPacketCaptureStartParameters(msrest.serialization.Model):
    """Start packet capture parameters on virtual network gateway.

    :ivar filter_data: Start Packet capture parameters.
    :vartype filter_data: str
    """

    _attribute_map = {
        'filter_data': {'key': 'filterData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword filter_data: Start Packet capture parameters.
        :paramtype filter_data: str
        """
        super(VpnPacketCaptureStartParameters, self).__init__(**kwargs)
        self.filter_data = kwargs.get('filter_data', None)


class VpnPacketCaptureStopParameters(msrest.serialization.Model):
    """Stop packet capture parameters.

    :ivar sas_url: SAS url for packet capture on virtual network gateway.
    :vartype sas_url: str
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_url: SAS url for packet capture on virtual network gateway.
        :paramtype sas_url: str
        """
        super(VpnPacketCaptureStopParameters, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)


class VpnProfileResponse(msrest.serialization.Model):
    """Vpn Profile Response for package generation.

    :ivar profile_url: URL to the VPN profile.
    :vartype profile_url: str
    """

    _attribute_map = {
        'profile_url': {'key': 'profileUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword profile_url: URL to the VPN profile.
        :paramtype profile_url: str
        """
        super(VpnProfileResponse, self).__init__(**kwargs)
        self.profile_url = kwargs.get('profile_url', None)


class VpnServerConfigRadiusClientRootCertificate(msrest.serialization.Model):
    """Properties of the Radius client root certificate of VpnServerConfiguration.

    :ivar name: The certificate name.
    :vartype name: str
    :ivar thumbprint: The Radius client root certificate thumbprint.
    :vartype thumbprint: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The certificate name.
        :paramtype name: str
        :keyword thumbprint: The Radius client root certificate thumbprint.
        :paramtype thumbprint: str
        """
        super(VpnServerConfigRadiusClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.thumbprint = kwargs.get('thumbprint', None)


class VpnServerConfigRadiusServerRootCertificate(msrest.serialization.Model):
    """Properties of Radius Server root certificate of VpnServerConfiguration.

    :ivar name: The certificate name.
    :vartype name: str
    :ivar public_cert_data: The certificate public data.
    :vartype public_cert_data: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'public_cert_data': {'key': 'publicCertData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The certificate name.
        :paramtype name: str
        :keyword public_cert_data: The certificate public data.
        :paramtype public_cert_data: str
        """
        super(VpnServerConfigRadiusServerRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.public_cert_data = kwargs.get('public_cert_data', None)


class VpnServerConfiguration(Resource):
    """VpnServerConfiguration Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar name_properties_name: The name of the VpnServerConfiguration that is unique within a
     resource group.
    :vartype name_properties_name: str
    :ivar vpn_protocols: VPN protocols for the VpnServerConfiguration.
    :vartype vpn_protocols: list[str or
     ~azure.mgmt.network.v2021_02_01.models.VpnGatewayTunnelingProtocol]
    :ivar vpn_authentication_types: VPN authentication types for the VpnServerConfiguration.
    :vartype vpn_authentication_types: list[str or
     ~azure.mgmt.network.v2021_02_01.models.VpnAuthenticationType]
    :ivar vpn_client_root_certificates: VPN client root certificate of VpnServerConfiguration.
    :vartype vpn_client_root_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigVpnClientRootCertificate]
    :ivar vpn_client_revoked_certificates: VPN client revoked certificate of
     VpnServerConfiguration.
    :vartype vpn_client_revoked_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigVpnClientRevokedCertificate]
    :ivar radius_server_root_certificates: Radius Server root certificate of
     VpnServerConfiguration.
    :vartype radius_server_root_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigRadiusServerRootCertificate]
    :ivar radius_client_root_certificates: Radius client root certificate of
     VpnServerConfiguration.
    :vartype radius_client_root_certificates:
     list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigRadiusClientRootCertificate]
    :ivar vpn_client_ipsec_policies: VpnClientIpsecPolicies for VpnServerConfiguration.
    :vartype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar radius_server_address: The radius server address property of the VpnServerConfiguration
     resource for point to site client connection.
    :vartype radius_server_address: str
    :ivar radius_server_secret: The radius secret property of the VpnServerConfiguration resource
     for point to site client connection.
    :vartype radius_server_secret: str
    :ivar radius_servers: Multiple Radius Server configuration for VpnServerConfiguration.
    :vartype radius_servers: list[~azure.mgmt.network.v2021_02_01.models.RadiusServer]
    :ivar aad_authentication_parameters: The set of aad vpn authentication parameters.
    :vartype aad_authentication_parameters:
     ~azure.mgmt.network.v2021_02_01.models.AadAuthenticationParameters
    :ivar provisioning_state: The provisioning state of the VpnServerConfiguration resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar p2_s_vpn_gateways: List of references to P2SVpnGateways.
    :vartype p2_s_vpn_gateways: list[~azure.mgmt.network.v2021_02_01.models.P2SVpnGateway]
    :ivar etag_properties_etag: A unique read-only string that changes whenever the resource is
     updated.
    :vartype etag_properties_etag: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'p2_s_vpn_gateways': {'readonly': True},
        'etag_properties_etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'name_properties_name': {'key': 'properties.name', 'type': 'str'},
        'vpn_protocols': {'key': 'properties.vpnProtocols', 'type': '[str]'},
        'vpn_authentication_types': {'key': 'properties.vpnAuthenticationTypes', 'type': '[str]'},
        'vpn_client_root_certificates': {'key': 'properties.vpnClientRootCertificates', 'type': '[VpnServerConfigVpnClientRootCertificate]'},
        'vpn_client_revoked_certificates': {'key': 'properties.vpnClientRevokedCertificates', 'type': '[VpnServerConfigVpnClientRevokedCertificate]'},
        'radius_server_root_certificates': {'key': 'properties.radiusServerRootCertificates', 'type': '[VpnServerConfigRadiusServerRootCertificate]'},
        'radius_client_root_certificates': {'key': 'properties.radiusClientRootCertificates', 'type': '[VpnServerConfigRadiusClientRootCertificate]'},
        'vpn_client_ipsec_policies': {'key': 'properties.vpnClientIpsecPolicies', 'type': '[IpsecPolicy]'},
        'radius_server_address': {'key': 'properties.radiusServerAddress', 'type': 'str'},
        'radius_server_secret': {'key': 'properties.radiusServerSecret', 'type': 'str'},
        'radius_servers': {'key': 'properties.radiusServers', 'type': '[RadiusServer]'},
        'aad_authentication_parameters': {'key': 'properties.aadAuthenticationParameters', 'type': 'AadAuthenticationParameters'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'p2_s_vpn_gateways': {'key': 'properties.p2SVpnGateways', 'type': '[P2SVpnGateway]'},
        'etag_properties_etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword name_properties_name: The name of the VpnServerConfiguration that is unique within a
         resource group.
        :paramtype name_properties_name: str
        :keyword vpn_protocols: VPN protocols for the VpnServerConfiguration.
        :paramtype vpn_protocols: list[str or
         ~azure.mgmt.network.v2021_02_01.models.VpnGatewayTunnelingProtocol]
        :keyword vpn_authentication_types: VPN authentication types for the VpnServerConfiguration.
        :paramtype vpn_authentication_types: list[str or
         ~azure.mgmt.network.v2021_02_01.models.VpnAuthenticationType]
        :keyword vpn_client_root_certificates: VPN client root certificate of VpnServerConfiguration.
        :paramtype vpn_client_root_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigVpnClientRootCertificate]
        :keyword vpn_client_revoked_certificates: VPN client revoked certificate of
         VpnServerConfiguration.
        :paramtype vpn_client_revoked_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigVpnClientRevokedCertificate]
        :keyword radius_server_root_certificates: Radius Server root certificate of
         VpnServerConfiguration.
        :paramtype radius_server_root_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigRadiusServerRootCertificate]
        :keyword radius_client_root_certificates: Radius client root certificate of
         VpnServerConfiguration.
        :paramtype radius_client_root_certificates:
         list[~azure.mgmt.network.v2021_02_01.models.VpnServerConfigRadiusClientRootCertificate]
        :keyword vpn_client_ipsec_policies: VpnClientIpsecPolicies for VpnServerConfiguration.
        :paramtype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword radius_server_address: The radius server address property of the
         VpnServerConfiguration resource for point to site client connection.
        :paramtype radius_server_address: str
        :keyword radius_server_secret: The radius secret property of the VpnServerConfiguration
         resource for point to site client connection.
        :paramtype radius_server_secret: str
        :keyword radius_servers: Multiple Radius Server configuration for VpnServerConfiguration.
        :paramtype radius_servers: list[~azure.mgmt.network.v2021_02_01.models.RadiusServer]
        :keyword aad_authentication_parameters: The set of aad vpn authentication parameters.
        :paramtype aad_authentication_parameters:
         ~azure.mgmt.network.v2021_02_01.models.AadAuthenticationParameters
        """
        super(VpnServerConfiguration, self).__init__(**kwargs)
        self.etag = None
        self.name_properties_name = kwargs.get('name_properties_name', None)
        self.vpn_protocols = kwargs.get('vpn_protocols', None)
        self.vpn_authentication_types = kwargs.get('vpn_authentication_types', None)
        self.vpn_client_root_certificates = kwargs.get('vpn_client_root_certificates', None)
        self.vpn_client_revoked_certificates = kwargs.get('vpn_client_revoked_certificates', None)
        self.radius_server_root_certificates = kwargs.get('radius_server_root_certificates', None)
        self.radius_client_root_certificates = kwargs.get('radius_client_root_certificates', None)
        self.vpn_client_ipsec_policies = kwargs.get('vpn_client_ipsec_policies', None)
        self.radius_server_address = kwargs.get('radius_server_address', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)
        self.radius_servers = kwargs.get('radius_servers', None)
        self.aad_authentication_parameters = kwargs.get('aad_authentication_parameters', None)
        self.provisioning_state = None
        self.p2_s_vpn_gateways = None
        self.etag_properties_etag = None


class VpnServerConfigurationsResponse(msrest.serialization.Model):
    """VpnServerConfigurations list associated with VirtualWan Response.

    :ivar vpn_server_configuration_resource_ids: List of VpnServerConfigurations associated with
     VirtualWan.
    :vartype vpn_server_configuration_resource_ids: list[str]
    """

    _attribute_map = {
        'vpn_server_configuration_resource_ids': {'key': 'vpnServerConfigurationResourceIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_server_configuration_resource_ids: List of VpnServerConfigurations associated with
         VirtualWan.
        :paramtype vpn_server_configuration_resource_ids: list[str]
        """
        super(VpnServerConfigurationsResponse, self).__init__(**kwargs)
        self.vpn_server_configuration_resource_ids = kwargs.get('vpn_server_configuration_resource_ids', None)


class VpnServerConfigVpnClientRevokedCertificate(msrest.serialization.Model):
    """Properties of the revoked VPN client certificate of VpnServerConfiguration.

    :ivar name: The certificate name.
    :vartype name: str
    :ivar thumbprint: The revoked VPN client certificate thumbprint.
    :vartype thumbprint: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The certificate name.
        :paramtype name: str
        :keyword thumbprint: The revoked VPN client certificate thumbprint.
        :paramtype thumbprint: str
        """
        super(VpnServerConfigVpnClientRevokedCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.thumbprint = kwargs.get('thumbprint', None)


class VpnServerConfigVpnClientRootCertificate(msrest.serialization.Model):
    """Properties of VPN client root certificate of VpnServerConfiguration.

    :ivar name: The certificate name.
    :vartype name: str
    :ivar public_cert_data: The certificate public data.
    :vartype public_cert_data: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'public_cert_data': {'key': 'publicCertData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The certificate name.
        :paramtype name: str
        :keyword public_cert_data: The certificate public data.
        :paramtype public_cert_data: str
        """
        super(VpnServerConfigVpnClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.public_cert_data = kwargs.get('public_cert_data', None)


class VpnSite(Resource):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_wan: The VirtualWAN to which the vpnSite belongs.
    :vartype virtual_wan: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar device_properties: The device properties.
    :vartype device_properties: ~azure.mgmt.network.v2021_02_01.models.DeviceProperties
    :ivar ip_address: The ip-address for the vpn-site.
    :vartype ip_address: str
    :ivar site_key: The key for vpn-site that can be used for connections.
    :vartype site_key: str
    :ivar address_space: The AddressSpace that contains an array of IP address ranges.
    :vartype address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
    :ivar bgp_properties: The set of bgp properties.
    :vartype bgp_properties: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the VPN site resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar is_security_site: IsSecuritySite flag.
    :vartype is_security_site: bool
    :ivar vpn_site_links: List of all vpn site links.
    :vartype vpn_site_links: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLink]
    :ivar o365_policy: Office365 Policy.
    :vartype o365_policy: ~azure.mgmt.network.v2021_02_01.models.O365PolicyProperties
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWan', 'type': 'SubResource'},
        'device_properties': {'key': 'properties.deviceProperties', 'type': 'DeviceProperties'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'site_key': {'key': 'properties.siteKey', 'type': 'str'},
        'address_space': {'key': 'properties.addressSpace', 'type': 'AddressSpace'},
        'bgp_properties': {'key': 'properties.bgpProperties', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'is_security_site': {'key': 'properties.isSecuritySite', 'type': 'bool'},
        'vpn_site_links': {'key': 'properties.vpnSiteLinks', 'type': '[VpnSiteLink]'},
        'o365_policy': {'key': 'properties.o365Policy', 'type': 'O365PolicyProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_wan: The VirtualWAN to which the vpnSite belongs.
        :paramtype virtual_wan: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword device_properties: The device properties.
        :paramtype device_properties: ~azure.mgmt.network.v2021_02_01.models.DeviceProperties
        :keyword ip_address: The ip-address for the vpn-site.
        :paramtype ip_address: str
        :keyword site_key: The key for vpn-site that can be used for connections.
        :paramtype site_key: str
        :keyword address_space: The AddressSpace that contains an array of IP address ranges.
        :paramtype address_space: ~azure.mgmt.network.v2021_02_01.models.AddressSpace
        :keyword bgp_properties: The set of bgp properties.
        :paramtype bgp_properties: ~azure.mgmt.network.v2021_02_01.models.BgpSettings
        :keyword is_security_site: IsSecuritySite flag.
        :paramtype is_security_site: bool
        :keyword vpn_site_links: List of all vpn site links.
        :paramtype vpn_site_links: list[~azure.mgmt.network.v2021_02_01.models.VpnSiteLink]
        :keyword o365_policy: Office365 Policy.
        :paramtype o365_policy: ~azure.mgmt.network.v2021_02_01.models.O365PolicyProperties
        """
        super(VpnSite, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.device_properties = kwargs.get('device_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.site_key = kwargs.get('site_key', None)
        self.address_space = kwargs.get('address_space', None)
        self.bgp_properties = kwargs.get('bgp_properties', None)
        self.provisioning_state = None
        self.is_security_site = kwargs.get('is_security_site', None)
        self.vpn_site_links = kwargs.get('vpn_site_links', None)
        self.o365_policy = kwargs.get('o365_policy', None)


class VpnSiteId(msrest.serialization.Model):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vpn_site: The resource-uri of the vpn-site for which config is to be fetched.
    :vartype vpn_site: str
    """

    _validation = {
        'vpn_site': {'readonly': True},
    }

    _attribute_map = {
        'vpn_site': {'key': 'vpnSite', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VpnSiteId, self).__init__(**kwargs)
        self.vpn_site = None


class VpnSiteLink(SubResource):
    """VpnSiteLink Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar link_properties: The link provider properties.
    :vartype link_properties: ~azure.mgmt.network.v2021_02_01.models.VpnLinkProviderProperties
    :ivar ip_address: The ip-address for the vpn-site-link.
    :vartype ip_address: str
    :ivar fqdn: FQDN of vpn-site-link.
    :vartype fqdn: str
    :ivar bgp_properties: The set of bgp properties.
    :vartype bgp_properties: ~azure.mgmt.network.v2021_02_01.models.VpnLinkBgpSettings
    :ivar provisioning_state: The provisioning state of the VPN site link resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'link_properties': {'key': 'properties.linkProperties', 'type': 'VpnLinkProviderProperties'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'fqdn': {'key': 'properties.fqdn', 'type': 'str'},
        'bgp_properties': {'key': 'properties.bgpProperties', 'type': 'VpnLinkBgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword link_properties: The link provider properties.
        :paramtype link_properties: ~azure.mgmt.network.v2021_02_01.models.VpnLinkProviderProperties
        :keyword ip_address: The ip-address for the vpn-site-link.
        :paramtype ip_address: str
        :keyword fqdn: FQDN of vpn-site-link.
        :paramtype fqdn: str
        :keyword bgp_properties: The set of bgp properties.
        :paramtype bgp_properties: ~azure.mgmt.network.v2021_02_01.models.VpnLinkBgpSettings
        """
        super(VpnSiteLink, self).__init__(**kwargs)
        self.etag = None
        self.name = kwargs.get('name', None)
        self.type = None
        self.link_properties = kwargs.get('link_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bgp_properties = kwargs.get('bgp_properties', None)
        self.provisioning_state = None


class VpnSiteLinkConnection(SubResource):
    """VpnSiteLinkConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar vpn_site_link: Id of the connected vpn site link.
    :vartype vpn_site_link: ~azure.mgmt.network.v2021_02_01.models.SubResource
    :ivar routing_weight: Routing weight for vpn connection.
    :vartype routing_weight: int
    :ivar vpn_link_connection_mode: Vpn link connection mode. Possible values include: "Default",
     "ResponderOnly", "InitiatorOnly".
    :vartype vpn_link_connection_mode: str or
     ~azure.mgmt.network.v2021_02_01.models.VpnLinkConnectionMode
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or ~azure.mgmt.network.v2021_02_01.models.VpnConnectionStatus
    :ivar vpn_connection_protocol_type: Connection protocol used for this connection. Possible
     values include: "IKEv2", "IKEv1".
    :vartype vpn_connection_protocol_type: str or
     ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
    :ivar ingress_bytes_transferred: Ingress bytes transferred.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: Egress bytes transferred.
    :vartype egress_bytes_transferred: long
    :ivar connection_bandwidth: Expected bandwidth in MBPS.
    :vartype connection_bandwidth: int
    :ivar shared_key: SharedKey for the vpn connection.
    :vartype shared_key: str
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
    :ivar enable_rate_limiting: EnableBgp flag.
    :vartype enable_rate_limiting: bool
    :ivar use_local_azure_ip_address: Use local azure ip to initiate connection.
    :vartype use_local_azure_ip_address: bool
    :ivar provisioning_state: The provisioning state of the VPN site link connection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar ingress_nat_rules: List of ingress NatRules.
    :vartype ingress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar egress_nat_rules: List of egress NatRules.
    :vartype egress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'vpn_site_link': {'key': 'properties.vpnSiteLink', 'type': 'SubResource'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'vpn_link_connection_mode': {'key': 'properties.vpnLinkConnectionMode', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'vpn_connection_protocol_type': {'key': 'properties.vpnConnectionProtocolType', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'connection_bandwidth': {'key': 'properties.connectionBandwidth', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'enable_rate_limiting': {'key': 'properties.enableRateLimiting', 'type': 'bool'},
        'use_local_azure_ip_address': {'key': 'properties.useLocalAzureIpAddress', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'ingress_nat_rules': {'key': 'properties.ingressNatRules', 'type': '[SubResource]'},
        'egress_nat_rules': {'key': 'properties.egressNatRules', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword vpn_site_link: Id of the connected vpn site link.
        :paramtype vpn_site_link: ~azure.mgmt.network.v2021_02_01.models.SubResource
        :keyword routing_weight: Routing weight for vpn connection.
        :paramtype routing_weight: int
        :keyword vpn_link_connection_mode: Vpn link connection mode. Possible values include:
         "Default", "ResponderOnly", "InitiatorOnly".
        :paramtype vpn_link_connection_mode: str or
         ~azure.mgmt.network.v2021_02_01.models.VpnLinkConnectionMode
        :keyword vpn_connection_protocol_type: Connection protocol used for this connection. Possible
         values include: "IKEv2", "IKEv1".
        :paramtype vpn_connection_protocol_type: str or
         ~azure.mgmt.network.v2021_02_01.models.VirtualNetworkGatewayConnectionProtocol
        :keyword connection_bandwidth: Expected bandwidth in MBPS.
        :paramtype connection_bandwidth: int
        :keyword shared_key: SharedKey for the vpn connection.
        :paramtype shared_key: str
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2021_02_01.models.IpsecPolicy]
        :keyword enable_rate_limiting: EnableBgp flag.
        :paramtype enable_rate_limiting: bool
        :keyword use_local_azure_ip_address: Use local azure ip to initiate connection.
        :paramtype use_local_azure_ip_address: bool
        :keyword ingress_nat_rules: List of ingress NatRules.
        :paramtype ingress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        :keyword egress_nat_rules: List of egress NatRules.
        :paramtype egress_nat_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
        """
        super(VpnSiteLinkConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.vpn_site_link = kwargs.get('vpn_site_link', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.vpn_link_connection_mode = kwargs.get('vpn_link_connection_mode', None)
        self.connection_status = None
        self.vpn_connection_protocol_type = kwargs.get('vpn_connection_protocol_type', None)
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.connection_bandwidth = kwargs.get('connection_bandwidth', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.enable_rate_limiting = kwargs.get('enable_rate_limiting', None)
        self.use_local_azure_ip_address = kwargs.get('use_local_azure_ip_address', None)
        self.provisioning_state = None
        self.ingress_nat_rules = kwargs.get('ingress_nat_rules', None)
        self.egress_nat_rules = kwargs.get('egress_nat_rules', None)


class WebApplicationFirewallCustomRule(msrest.serialization.Model):
    """Defines contents of a web application rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the resource that is unique within a policy. This name can be used to
     access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Required. Priority of the rule. Rules with a lower value will be evaluated
     before rules with a higher value.
    :vartype priority: int
    :ivar rule_type: Required. The rule type. Possible values include: "MatchRule", "Invalid".
    :vartype rule_type: str or
     ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallRuleType
    :ivar match_conditions: Required. List of match conditions.
    :vartype match_conditions: list[~azure.mgmt.network.v2021_02_01.models.MatchCondition]
    :ivar action: Required. Type of Actions. Possible values include: "Allow", "Block", "Log".
    :vartype action: str or ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallAction
    """

    _validation = {
        'name': {'max_length': 128, 'min_length': 0},
        'etag': {'readonly': True},
        'priority': {'required': True},
        'rule_type': {'required': True},
        'match_conditions': {'required': True},
        'action': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'match_conditions': {'key': 'matchConditions', 'type': '[MatchCondition]'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the resource that is unique within a policy. This name can be used
         to access the resource.
        :paramtype name: str
        :keyword priority: Required. Priority of the rule. Rules with a lower value will be evaluated
         before rules with a higher value.
        :paramtype priority: int
        :keyword rule_type: Required. The rule type. Possible values include: "MatchRule", "Invalid".
        :paramtype rule_type: str or
         ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallRuleType
        :keyword match_conditions: Required. List of match conditions.
        :paramtype match_conditions: list[~azure.mgmt.network.v2021_02_01.models.MatchCondition]
        :keyword action: Required. Type of Actions. Possible values include: "Allow", "Block", "Log".
        :paramtype action: str or ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallAction
        """
        super(WebApplicationFirewallCustomRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs['priority']
        self.rule_type = kwargs['rule_type']
        self.match_conditions = kwargs['match_conditions']
        self.action = kwargs['action']


class WebApplicationFirewallPolicy(Resource):
    """Defines web application firewall policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar policy_settings: The PolicySettings for policy.
    :vartype policy_settings: ~azure.mgmt.network.v2021_02_01.models.PolicySettings
    :ivar custom_rules: The custom rules inside the policy.
    :vartype custom_rules:
     list[~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallCustomRule]
    :ivar application_gateways: A collection of references to application gateways.
    :vartype application_gateways: list[~azure.mgmt.network.v2021_02_01.models.ApplicationGateway]
    :ivar provisioning_state: The provisioning state of the web application firewall policy
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2021_02_01.models.ProvisioningState
    :ivar resource_state: Resource status of the policy. Possible values include: "Creating",
     "Enabling", "Enabled", "Disabling", "Disabled", "Deleting".
    :vartype resource_state: str or
     ~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallPolicyResourceState
    :ivar managed_rules: Describes the managedRules structure.
    :vartype managed_rules: ~azure.mgmt.network.v2021_02_01.models.ManagedRulesDefinition
    :ivar http_listeners: A collection of references to application gateway http listeners.
    :vartype http_listeners: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    :ivar path_based_rules: A collection of references to application gateway path rules.
    :vartype path_based_rules: list[~azure.mgmt.network.v2021_02_01.models.SubResource]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'application_gateways': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_state': {'readonly': True},
        'http_listeners': {'readonly': True},
        'path_based_rules': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'policy_settings': {'key': 'properties.policySettings', 'type': 'PolicySettings'},
        'custom_rules': {'key': 'properties.customRules', 'type': '[WebApplicationFirewallCustomRule]'},
        'application_gateways': {'key': 'properties.applicationGateways', 'type': '[ApplicationGateway]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_state': {'key': 'properties.resourceState', 'type': 'str'},
        'managed_rules': {'key': 'properties.managedRules', 'type': 'ManagedRulesDefinition'},
        'http_listeners': {'key': 'properties.httpListeners', 'type': '[SubResource]'},
        'path_based_rules': {'key': 'properties.pathBasedRules', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword policy_settings: The PolicySettings for policy.
        :paramtype policy_settings: ~azure.mgmt.network.v2021_02_01.models.PolicySettings
        :keyword custom_rules: The custom rules inside the policy.
        :paramtype custom_rules:
         list[~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallCustomRule]
        :keyword managed_rules: Describes the managedRules structure.
        :paramtype managed_rules: ~azure.mgmt.network.v2021_02_01.models.ManagedRulesDefinition
        """
        super(WebApplicationFirewallPolicy, self).__init__(**kwargs)
        self.etag = None
        self.policy_settings = kwargs.get('policy_settings', None)
        self.custom_rules = kwargs.get('custom_rules', None)
        self.application_gateways = None
        self.provisioning_state = None
        self.resource_state = None
        self.managed_rules = kwargs.get('managed_rules', None)
        self.http_listeners = None
        self.path_based_rules = None


class WebApplicationFirewallPolicyListResult(msrest.serialization.Model):
    """Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of WebApplicationFirewallPolicies within a resource group.
    :vartype value: list[~azure.mgmt.network.v2021_02_01.models.WebApplicationFirewallPolicy]
    :ivar next_link: URL to get the next set of WebApplicationFirewallPolicy objects if there are
     any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[WebApplicationFirewallPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(WebApplicationFirewallPolicyListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None
