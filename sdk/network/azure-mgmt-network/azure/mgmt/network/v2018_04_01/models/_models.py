# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AddressSpace(msrest.serialization.Model):
    """AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.

    :ivar address_prefixes: A list of address blocks reserved for this virtual network in CIDR
     notation.
    :vartype address_prefixes: list[str]
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address_prefixes: A list of address blocks reserved for this virtual network in CIDR
         notation.
        :paramtype address_prefixes: list[str]
        """
        super(AddressSpace, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(Resource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class ApplicationGateway(Resource):
    """Application gateway resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting where the resource needs to come from.
    :vartype zones: list[str]
    :ivar sku: SKU of the application gateway resource.
    :vartype sku: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySku
    :ivar ssl_policy: SSL policy of the application gateway resource.
    :vartype ssl_policy: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicy
    :ivar operational_state: Operational state of the application gateway resource. Possible values
     include: "Stopped", "Starting", "Running", "Stopping".
    :vartype operational_state: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayOperationalState
    :ivar gateway_ip_configurations: Subnets of application the gateway resource.
    :vartype gateway_ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayIPConfiguration]
    :ivar authentication_certificates: Authentication certificates of the application gateway
     resource.
    :vartype authentication_certificates:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAuthenticationCertificate]
    :ivar ssl_certificates: SSL certificates of the application gateway resource.
    :vartype ssl_certificates:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCertificate]
    :ivar frontend_ip_configurations: Frontend IP addresses of the application gateway resource.
    :vartype frontend_ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFrontendIPConfiguration]
    :ivar frontend_ports: Frontend ports of the application gateway resource.
    :vartype frontend_ports:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFrontendPort]
    :ivar probes: Probes of the application gateway resource.
    :vartype probes: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProbe]
    :ivar backend_address_pools: Backend address pool of the application gateway resource.
    :vartype backend_address_pools:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool]
    :ivar backend_http_settings_collection: Backend http settings of the application gateway
     resource.
    :vartype backend_http_settings_collection:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHttpSettings]
    :ivar http_listeners: Http listeners of the application gateway resource.
    :vartype http_listeners:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayHttpListener]
    :ivar url_path_maps: URL path map of the application gateway resource.
    :vartype url_path_maps:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayUrlPathMap]
    :ivar request_routing_rules: Request routing rules of the application gateway resource.
    :vartype request_routing_rules:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRequestRoutingRule]
    :ivar redirect_configurations: Redirect configurations of the application gateway resource.
    :vartype redirect_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRedirectConfiguration]
    :ivar web_application_firewall_configuration: Web application firewall configuration.
    :vartype web_application_firewall_configuration:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayWebApplicationFirewallConfiguration
    :ivar enable_http2: Whether HTTP2 is enabled on the application gateway resource.
    :vartype enable_http2: bool
    :ivar enable_fips: Whether FIPS is enabled on the application gateway resource.
    :vartype enable_fips: bool
    :ivar autoscale_configuration: Autoscale Configuration.
    :vartype autoscale_configuration:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAutoscaleConfiguration
    :ivar resource_guid: Resource GUID property of the application gateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: Provisioning state of the application gateway resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'operational_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'sku': {'key': 'properties.sku', 'type': 'ApplicationGatewaySku'},
        'ssl_policy': {'key': 'properties.sslPolicy', 'type': 'ApplicationGatewaySslPolicy'},
        'operational_state': {'key': 'properties.operationalState', 'type': 'str'},
        'gateway_ip_configurations': {'key': 'properties.gatewayIPConfigurations', 'type': '[ApplicationGatewayIPConfiguration]'},
        'authentication_certificates': {'key': 'properties.authenticationCertificates', 'type': '[ApplicationGatewayAuthenticationCertificate]'},
        'ssl_certificates': {'key': 'properties.sslCertificates', 'type': '[ApplicationGatewaySslCertificate]'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[ApplicationGatewayFrontendIPConfiguration]'},
        'frontend_ports': {'key': 'properties.frontendPorts', 'type': '[ApplicationGatewayFrontendPort]'},
        'probes': {'key': 'properties.probes', 'type': '[ApplicationGatewayProbe]'},
        'backend_address_pools': {'key': 'properties.backendAddressPools', 'type': '[ApplicationGatewayBackendAddressPool]'},
        'backend_http_settings_collection': {'key': 'properties.backendHttpSettingsCollection', 'type': '[ApplicationGatewayBackendHttpSettings]'},
        'http_listeners': {'key': 'properties.httpListeners', 'type': '[ApplicationGatewayHttpListener]'},
        'url_path_maps': {'key': 'properties.urlPathMaps', 'type': '[ApplicationGatewayUrlPathMap]'},
        'request_routing_rules': {'key': 'properties.requestRoutingRules', 'type': '[ApplicationGatewayRequestRoutingRule]'},
        'redirect_configurations': {'key': 'properties.redirectConfigurations', 'type': '[ApplicationGatewayRedirectConfiguration]'},
        'web_application_firewall_configuration': {'key': 'properties.webApplicationFirewallConfiguration', 'type': 'ApplicationGatewayWebApplicationFirewallConfiguration'},
        'enable_http2': {'key': 'properties.enableHttp2', 'type': 'bool'},
        'enable_fips': {'key': 'properties.enableFips', 'type': 'bool'},
        'autoscale_configuration': {'key': 'properties.autoscaleConfiguration', 'type': 'ApplicationGatewayAutoscaleConfiguration'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword zones: A list of availability zones denoting where the resource needs to come from.
        :paramtype zones: list[str]
        :keyword sku: SKU of the application gateway resource.
        :paramtype sku: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySku
        :keyword ssl_policy: SSL policy of the application gateway resource.
        :paramtype ssl_policy: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicy
        :keyword gateway_ip_configurations: Subnets of application the gateway resource.
        :paramtype gateway_ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayIPConfiguration]
        :keyword authentication_certificates: Authentication certificates of the application gateway
         resource.
        :paramtype authentication_certificates:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAuthenticationCertificate]
        :keyword ssl_certificates: SSL certificates of the application gateway resource.
        :paramtype ssl_certificates:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCertificate]
        :keyword frontend_ip_configurations: Frontend IP addresses of the application gateway resource.
        :paramtype frontend_ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFrontendIPConfiguration]
        :keyword frontend_ports: Frontend ports of the application gateway resource.
        :paramtype frontend_ports:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFrontendPort]
        :keyword probes: Probes of the application gateway resource.
        :paramtype probes: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProbe]
        :keyword backend_address_pools: Backend address pool of the application gateway resource.
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool]
        :keyword backend_http_settings_collection: Backend http settings of the application gateway
         resource.
        :paramtype backend_http_settings_collection:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHttpSettings]
        :keyword http_listeners: Http listeners of the application gateway resource.
        :paramtype http_listeners:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayHttpListener]
        :keyword url_path_maps: URL path map of the application gateway resource.
        :paramtype url_path_maps:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayUrlPathMap]
        :keyword request_routing_rules: Request routing rules of the application gateway resource.
        :paramtype request_routing_rules:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRequestRoutingRule]
        :keyword redirect_configurations: Redirect configurations of the application gateway resource.
        :paramtype redirect_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRedirectConfiguration]
        :keyword web_application_firewall_configuration: Web application firewall configuration.
        :paramtype web_application_firewall_configuration:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayWebApplicationFirewallConfiguration
        :keyword enable_http2: Whether HTTP2 is enabled on the application gateway resource.
        :paramtype enable_http2: bool
        :keyword enable_fips: Whether FIPS is enabled on the application gateway resource.
        :paramtype enable_fips: bool
        :keyword autoscale_configuration: Autoscale Configuration.
        :paramtype autoscale_configuration:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAutoscaleConfiguration
        :keyword resource_guid: Resource GUID property of the application gateway resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: Provisioning state of the application gateway resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGateway, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.zones = kwargs.get('zones', None)
        self.sku = kwargs.get('sku', None)
        self.ssl_policy = kwargs.get('ssl_policy', None)
        self.operational_state = None
        self.gateway_ip_configurations = kwargs.get('gateway_ip_configurations', None)
        self.authentication_certificates = kwargs.get('authentication_certificates', None)
        self.ssl_certificates = kwargs.get('ssl_certificates', None)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.frontend_ports = kwargs.get('frontend_ports', None)
        self.probes = kwargs.get('probes', None)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)
        self.backend_http_settings_collection = kwargs.get('backend_http_settings_collection', None)
        self.http_listeners = kwargs.get('http_listeners', None)
        self.url_path_maps = kwargs.get('url_path_maps', None)
        self.request_routing_rules = kwargs.get('request_routing_rules', None)
        self.redirect_configurations = kwargs.get('redirect_configurations', None)
        self.web_application_firewall_configuration = kwargs.get('web_application_firewall_configuration', None)
        self.enable_http2 = kwargs.get('enable_http2', None)
        self.enable_fips = kwargs.get('enable_fips', None)
        self.autoscale_configuration = kwargs.get('autoscale_configuration', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(SubResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ApplicationGatewayAuthenticationCertificate(SubResource):
    """Authentication certificates of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the authentication certificate that is unique within an Application
     Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Certificate public data.
    :vartype data: str
    :ivar provisioning_state: Provisioning state of the authentication certificate resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the authentication certificate that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword data: Certificate public data.
        :paramtype data: str
        :keyword provisioning_state: Provisioning state of the authentication certificate resource.
         Possible values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayAuthenticationCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.data = kwargs.get('data', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayAutoscaleBounds(msrest.serialization.Model):
    """Application Gateway autoscale bounds on number of Application Gateway instance.

    All required parameters must be populated in order to send to Azure.

    :ivar min: Required. Lower bound on number of Application Gateway instances.
    :vartype min: int
    :ivar max: Required. Upper bound on number of Application Gateway instances.
    :vartype max: int
    """

    _validation = {
        'min': {'required': True},
        'max': {'required': True},
    }

    _attribute_map = {
        'min': {'key': 'min', 'type': 'int'},
        'max': {'key': 'max', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min: Required. Lower bound on number of Application Gateway instances.
        :paramtype min: int
        :keyword max: Required. Upper bound on number of Application Gateway instances.
        :paramtype max: int
        """
        super(ApplicationGatewayAutoscaleBounds, self).__init__(**kwargs)
        self.min = kwargs['min']
        self.max = kwargs['max']


class ApplicationGatewayAutoscaleConfiguration(msrest.serialization.Model):
    """Application Gateway autoscale configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar bounds: Required. Autoscale bounds.
    :vartype bounds: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAutoscaleBounds
    """

    _validation = {
        'bounds': {'required': True},
    }

    _attribute_map = {
        'bounds': {'key': 'bounds', 'type': 'ApplicationGatewayAutoscaleBounds'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword bounds: Required. Autoscale bounds.
        :paramtype bounds: ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayAutoscaleBounds
        """
        super(ApplicationGatewayAutoscaleConfiguration, self).__init__(**kwargs)
        self.bounds = kwargs['bounds']


class ApplicationGatewayAvailableSslOptions(Resource):
    """Response for ApplicationGatewayAvailableSslOptions API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar predefined_policies: List of available Ssl predefined policy.
    :vartype predefined_policies: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar default_policy: Name of the Ssl predefined policy applied by default to application
     gateway. Possible values include: "AppGwSslPolicy20150501", "AppGwSslPolicy20170401",
     "AppGwSslPolicy20170401S".
    :vartype default_policy: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyName
    :ivar available_cipher_suites: List of available Ssl cipher suites.
    :vartype available_cipher_suites: list[str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
    :ivar available_protocols: List of available Ssl protocols.
    :vartype available_protocols: list[str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'predefined_policies': {'key': 'properties.predefinedPolicies', 'type': '[SubResource]'},
        'default_policy': {'key': 'properties.defaultPolicy', 'type': 'str'},
        'available_cipher_suites': {'key': 'properties.availableCipherSuites', 'type': '[str]'},
        'available_protocols': {'key': 'properties.availableProtocols', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword predefined_policies: List of available Ssl predefined policy.
        :paramtype predefined_policies: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword default_policy: Name of the Ssl predefined policy applied by default to application
         gateway. Possible values include: "AppGwSslPolicy20150501", "AppGwSslPolicy20170401",
         "AppGwSslPolicy20170401S".
        :paramtype default_policy: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyName
        :keyword available_cipher_suites: List of available Ssl cipher suites.
        :paramtype available_cipher_suites: list[str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
        :keyword available_protocols: List of available Ssl protocols.
        :paramtype available_protocols: list[str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol]
        """
        super(ApplicationGatewayAvailableSslOptions, self).__init__(**kwargs)
        self.predefined_policies = kwargs.get('predefined_policies', None)
        self.default_policy = kwargs.get('default_policy', None)
        self.available_cipher_suites = kwargs.get('available_cipher_suites', None)
        self.available_protocols = kwargs.get('available_protocols', None)


class ApplicationGatewayAvailableSslPredefinedPolicies(msrest.serialization.Model):
    """Response for ApplicationGatewayAvailableSslOptions API service call.

    :ivar value: List of available Ssl predefined policy.
    :vartype value:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPredefinedPolicy]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewaySslPredefinedPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of available Ssl predefined policy.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPredefinedPolicy]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayAvailableSslPredefinedPolicies, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayAvailableWafRuleSetsResult(msrest.serialization.Model):
    """Response for ApplicationGatewayAvailableWafRuleSets API service call.

    :ivar value: The list of application gateway rule sets.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRuleSet]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGatewayFirewallRuleSet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of application gateway rule sets.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRuleSet]
        """
        super(ApplicationGatewayAvailableWafRuleSetsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ApplicationGatewayBackendAddress(msrest.serialization.Model):
    """Backend address of an application gateway.

    :ivar fqdn: Fully qualified domain name (FQDN).
    :vartype fqdn: str
    :ivar ip_address: IP address.
    :vartype ip_address: str
    """

    _attribute_map = {
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword fqdn: Fully qualified domain name (FQDN).
        :paramtype fqdn: str
        :keyword ip_address: IP address.
        :paramtype ip_address: str
        """
        super(ApplicationGatewayBackendAddress, self).__init__(**kwargs)
        self.fqdn = kwargs.get('fqdn', None)
        self.ip_address = kwargs.get('ip_address', None)


class ApplicationGatewayBackendAddressPool(SubResource):
    """Backend Address Pool of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the backend address pool that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar backend_ip_configurations: Collection of references to IPs defined in network interfaces.
    :vartype backend_ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
    :ivar backend_addresses: Backend addresses.
    :vartype backend_addresses:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddress]
    :ivar provisioning_state: Provisioning state of the backend address pool resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'backend_addresses': {'key': 'properties.backendAddresses', 'type': '[ApplicationGatewayBackendAddress]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the backend address pool that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword backend_ip_configurations: Collection of references to IPs defined in network
         interfaces.
        :paramtype backend_ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
        :keyword backend_addresses: Backend addresses.
        :paramtype backend_addresses:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddress]
        :keyword provisioning_state: Provisioning state of the backend address pool resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayBackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.backend_ip_configurations = kwargs.get('backend_ip_configurations', None)
        self.backend_addresses = kwargs.get('backend_addresses', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayBackendHealth(msrest.serialization.Model):
    """List of ApplicationGatewayBackendHealthPool resources.

    :ivar backend_address_pools:
    :vartype backend_address_pools:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthPool]
    """

    _attribute_map = {
        'backend_address_pools': {'key': 'backendAddressPools', 'type': '[ApplicationGatewayBackendHealthPool]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_address_pools:
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthPool]
        """
        super(ApplicationGatewayBackendHealth, self).__init__(**kwargs)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)


class ApplicationGatewayBackendHealthHttpSettings(msrest.serialization.Model):
    """Application gateway BackendHealthHttp settings.

    :ivar backend_http_settings: Reference of an ApplicationGatewayBackendHttpSettings resource.
    :vartype backend_http_settings:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHttpSettings
    :ivar servers: List of ApplicationGatewayBackendHealthServer resources.
    :vartype servers:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthServer]
    """

    _attribute_map = {
        'backend_http_settings': {'key': 'backendHttpSettings', 'type': 'ApplicationGatewayBackendHttpSettings'},
        'servers': {'key': 'servers', 'type': '[ApplicationGatewayBackendHealthServer]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_http_settings: Reference of an ApplicationGatewayBackendHttpSettings resource.
        :paramtype backend_http_settings:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHttpSettings
        :keyword servers: List of ApplicationGatewayBackendHealthServer resources.
        :paramtype servers:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthServer]
        """
        super(ApplicationGatewayBackendHealthHttpSettings, self).__init__(**kwargs)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.servers = kwargs.get('servers', None)


class ApplicationGatewayBackendHealthPool(msrest.serialization.Model):
    """Application gateway BackendHealth pool.

    :ivar backend_address_pool: Reference of an ApplicationGatewayBackendAddressPool resource.
    :vartype backend_address_pool:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool
    :ivar backend_http_settings_collection: List of ApplicationGatewayBackendHealthHttpSettings
     resources.
    :vartype backend_http_settings_collection:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthHttpSettings]
    """

    _attribute_map = {
        'backend_address_pool': {'key': 'backendAddressPool', 'type': 'ApplicationGatewayBackendAddressPool'},
        'backend_http_settings_collection': {'key': 'backendHttpSettingsCollection', 'type': '[ApplicationGatewayBackendHealthHttpSettings]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword backend_address_pool: Reference of an ApplicationGatewayBackendAddressPool resource.
        :paramtype backend_address_pool:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool
        :keyword backend_http_settings_collection: List of ApplicationGatewayBackendHealthHttpSettings
         resources.
        :paramtype backend_http_settings_collection:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthHttpSettings]
        """
        super(ApplicationGatewayBackendHealthPool, self).__init__(**kwargs)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings_collection = kwargs.get('backend_http_settings_collection', None)


class ApplicationGatewayBackendHealthServer(msrest.serialization.Model):
    """Application gateway backendhealth http settings.

    :ivar address: IP address or FQDN of backend server.
    :vartype address: str
    :ivar ip_configuration: Reference of IP configuration of backend server.
    :vartype ip_configuration:
     ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration
    :ivar health: Health of backend server. Possible values include: "Unknown", "Up", "Down",
     "Partial", "Draining".
    :vartype health: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthServerHealth
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'ip_configuration': {'key': 'ipConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'health': {'key': 'health', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword address: IP address or FQDN of backend server.
        :paramtype address: str
        :keyword ip_configuration: Reference of IP configuration of backend server.
        :paramtype ip_configuration:
         ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration
        :keyword health: Health of backend server. Possible values include: "Unknown", "Up", "Down",
         "Partial", "Draining".
        :paramtype health: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendHealthServerHealth
        """
        super(ApplicationGatewayBackendHealthServer, self).__init__(**kwargs)
        self.address = kwargs.get('address', None)
        self.ip_configuration = kwargs.get('ip_configuration', None)
        self.health = kwargs.get('health', None)


class ApplicationGatewayBackendHttpSettings(SubResource):
    """Backend address pool settings of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the backend http settings that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar port: The destination port on the backend.
    :vartype port: int
    :ivar protocol: The protocol used to communicate with the backend. Possible values are 'Http'
     and 'Https'. Possible values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
    :ivar cookie_based_affinity: Cookie based affinity. Possible values include: "Enabled",
     "Disabled".
    :vartype cookie_based_affinity: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayCookieBasedAffinity
    :ivar request_timeout: Request timeout in seconds. Application Gateway will fail the request if
     response is not received within RequestTimeout. Acceptable values are from 1 second to 86400
     seconds.
    :vartype request_timeout: int
    :ivar probe: Probe resource of an application gateway.
    :vartype probe: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar authentication_certificates: Array of references to application gateway authentication
     certificates.
    :vartype authentication_certificates: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar connection_draining: Connection draining of the backend http settings resource.
    :vartype connection_draining:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayConnectionDraining
    :ivar host_name: Host header to be sent to the backend servers.
    :vartype host_name: str
    :ivar pick_host_name_from_backend_address: Whether to pick host header should be picked from
     the host name of the backend server. Default value is false.
    :vartype pick_host_name_from_backend_address: bool
    :ivar affinity_cookie_name: Cookie name to use for the affinity cookie.
    :vartype affinity_cookie_name: str
    :ivar probe_enabled: Whether the probe is enabled. Default value is false.
    :vartype probe_enabled: bool
    :ivar path: Path which should be used as a prefix for all HTTP requests. Null means no path
     will be prefixed. Default value is null.
    :vartype path: str
    :ivar provisioning_state: Provisioning state of the backend http settings resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'cookie_based_affinity': {'key': 'properties.cookieBasedAffinity', 'type': 'str'},
        'request_timeout': {'key': 'properties.requestTimeout', 'type': 'int'},
        'probe': {'key': 'properties.probe', 'type': 'SubResource'},
        'authentication_certificates': {'key': 'properties.authenticationCertificates', 'type': '[SubResource]'},
        'connection_draining': {'key': 'properties.connectionDraining', 'type': 'ApplicationGatewayConnectionDraining'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'pick_host_name_from_backend_address': {'key': 'properties.pickHostNameFromBackendAddress', 'type': 'bool'},
        'affinity_cookie_name': {'key': 'properties.affinityCookieName', 'type': 'str'},
        'probe_enabled': {'key': 'properties.probeEnabled', 'type': 'bool'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the backend http settings that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword port: The destination port on the backend.
        :paramtype port: int
        :keyword protocol: The protocol used to communicate with the backend. Possible values are
         'Http' and 'Https'. Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
        :keyword cookie_based_affinity: Cookie based affinity. Possible values include: "Enabled",
         "Disabled".
        :paramtype cookie_based_affinity: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayCookieBasedAffinity
        :keyword request_timeout: Request timeout in seconds. Application Gateway will fail the request
         if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400
         seconds.
        :paramtype request_timeout: int
        :keyword probe: Probe resource of an application gateway.
        :paramtype probe: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword authentication_certificates: Array of references to application gateway authentication
         certificates.
        :paramtype authentication_certificates:
         list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword connection_draining: Connection draining of the backend http settings resource.
        :paramtype connection_draining:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayConnectionDraining
        :keyword host_name: Host header to be sent to the backend servers.
        :paramtype host_name: str
        :keyword pick_host_name_from_backend_address: Whether to pick host header should be picked from
         the host name of the backend server. Default value is false.
        :paramtype pick_host_name_from_backend_address: bool
        :keyword affinity_cookie_name: Cookie name to use for the affinity cookie.
        :paramtype affinity_cookie_name: str
        :keyword probe_enabled: Whether the probe is enabled. Default value is false.
        :paramtype probe_enabled: bool
        :keyword path: Path which should be used as a prefix for all HTTP requests. Null means no path
         will be prefixed. Default value is null.
        :paramtype path: str
        :keyword provisioning_state: Provisioning state of the backend http settings resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayBackendHttpSettings, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.port = kwargs.get('port', None)
        self.protocol = kwargs.get('protocol', None)
        self.cookie_based_affinity = kwargs.get('cookie_based_affinity', None)
        self.request_timeout = kwargs.get('request_timeout', None)
        self.probe = kwargs.get('probe', None)
        self.authentication_certificates = kwargs.get('authentication_certificates', None)
        self.connection_draining = kwargs.get('connection_draining', None)
        self.host_name = kwargs.get('host_name', None)
        self.pick_host_name_from_backend_address = kwargs.get('pick_host_name_from_backend_address', None)
        self.affinity_cookie_name = kwargs.get('affinity_cookie_name', None)
        self.probe_enabled = kwargs.get('probe_enabled', None)
        self.path = kwargs.get('path', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayConnectionDraining(msrest.serialization.Model):
    """Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Whether connection draining is enabled or not.
    :vartype enabled: bool
    :ivar drain_timeout_in_sec: Required. The number of seconds connection draining is active.
     Acceptable values are from 1 second to 3600 seconds.
    :vartype drain_timeout_in_sec: int
    """

    _validation = {
        'enabled': {'required': True},
        'drain_timeout_in_sec': {'required': True, 'maximum': 3600, 'minimum': 1},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'drain_timeout_in_sec': {'key': 'drainTimeoutInSec', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Required. Whether connection draining is enabled or not.
        :paramtype enabled: bool
        :keyword drain_timeout_in_sec: Required. The number of seconds connection draining is active.
         Acceptable values are from 1 second to 3600 seconds.
        :paramtype drain_timeout_in_sec: int
        """
        super(ApplicationGatewayConnectionDraining, self).__init__(**kwargs)
        self.enabled = kwargs['enabled']
        self.drain_timeout_in_sec = kwargs['drain_timeout_in_sec']


class ApplicationGatewayFirewallDisabledRuleGroup(msrest.serialization.Model):
    """Allows to disable rules within a rule group or an entire rule group.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. The name of the rule group that will be disabled.
    :vartype rule_group_name: str
    :ivar rules: The list of rules that will be disabled. If null, all rules of the rule group will
     be disabled.
    :vartype rules: list[int]
    """

    _validation = {
        'rule_group_name': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. The name of the rule group that will be disabled.
        :paramtype rule_group_name: str
        :keyword rules: The list of rules that will be disabled. If null, all rules of the rule group
         will be disabled.
        :paramtype rules: list[int]
        """
        super(ApplicationGatewayFirewallDisabledRuleGroup, self).__init__(**kwargs)
        self.rule_group_name = kwargs['rule_group_name']
        self.rules = kwargs.get('rules', None)


class ApplicationGatewayFirewallRule(msrest.serialization.Model):
    """A web application firewall rule.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_id: Required. The identifier of the web application firewall rule.
    :vartype rule_id: int
    :ivar description: The description of the web application firewall rule.
    :vartype description: str
    """

    _validation = {
        'rule_id': {'required': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'int'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_id: Required. The identifier of the web application firewall rule.
        :paramtype rule_id: int
        :keyword description: The description of the web application firewall rule.
        :paramtype description: str
        """
        super(ApplicationGatewayFirewallRule, self).__init__(**kwargs)
        self.rule_id = kwargs['rule_id']
        self.description = kwargs.get('description', None)


class ApplicationGatewayFirewallRuleGroup(msrest.serialization.Model):
    """A web application firewall rule group.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. The name of the web application firewall rule group.
    :vartype rule_group_name: str
    :ivar description: The description of the web application firewall rule group.
    :vartype description: str
    :ivar rules: Required. The rules of the web application firewall rule group.
    :vartype rules: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRule]
    """

    _validation = {
        'rule_group_name': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[ApplicationGatewayFirewallRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. The name of the web application firewall rule group.
        :paramtype rule_group_name: str
        :keyword description: The description of the web application firewall rule group.
        :paramtype description: str
        :keyword rules: Required. The rules of the web application firewall rule group.
        :paramtype rules: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRule]
        """
        super(ApplicationGatewayFirewallRuleGroup, self).__init__(**kwargs)
        self.rule_group_name = kwargs['rule_group_name']
        self.description = kwargs.get('description', None)
        self.rules = kwargs['rules']


class ApplicationGatewayFirewallRuleSet(Resource):
    """A web application firewall rule set.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: The provisioning state of the web application firewall rule set.
    :vartype provisioning_state: str
    :ivar rule_set_type: The type of the web application firewall rule set.
    :vartype rule_set_type: str
    :ivar rule_set_version: The version of the web application firewall rule set type.
    :vartype rule_set_version: str
    :ivar rule_groups: The rule groups of the web application firewall rule set.
    :vartype rule_groups:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRuleGroup]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'rule_set_type': {'key': 'properties.ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'properties.ruleSetVersion', 'type': 'str'},
        'rule_groups': {'key': 'properties.ruleGroups', 'type': '[ApplicationGatewayFirewallRuleGroup]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword provisioning_state: The provisioning state of the web application firewall rule set.
        :paramtype provisioning_state: str
        :keyword rule_set_type: The type of the web application firewall rule set.
        :paramtype rule_set_type: str
        :keyword rule_set_version: The version of the web application firewall rule set type.
        :paramtype rule_set_version: str
        :keyword rule_groups: The rule groups of the web application firewall rule set.
        :paramtype rule_groups:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallRuleGroup]
        """
        super(ApplicationGatewayFirewallRuleSet, self).__init__(**kwargs)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.rule_set_type = kwargs.get('rule_set_type', None)
        self.rule_set_version = kwargs.get('rule_set_version', None)
        self.rule_groups = kwargs.get('rule_groups', None)


class ApplicationGatewayFrontendIPConfiguration(SubResource):
    """Frontend IP configuration of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the frontend IP configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar private_ip_address: PrivateIPAddress of the network interface IP Configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: PrivateIP allocation method. Possible values include:
     "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar subnet: Reference of the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar public_ip_address: Reference of the PublicIP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Provisioning state of the public IP resource. Possible values are:
     'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the frontend IP configuration that is unique within an Application
         Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword private_ip_address: PrivateIPAddress of the network interface IP Configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: PrivateIP allocation method. Possible values include:
         "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword subnet: Reference of the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword public_ip_address: Reference of the PublicIP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: Provisioning state of the public IP resource. Possible values are:
         'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayFrontendIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayFrontendPort(SubResource):
    """Frontend port of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the frontend port that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar port: Frontend port.
    :vartype port: int
    :ivar provisioning_state: Provisioning state of the frontend port resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the frontend port that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword port: Frontend port.
        :paramtype port: int
        :keyword provisioning_state: Provisioning state of the frontend port resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayFrontendPort, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.port = kwargs.get('port', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayHttpListener(SubResource):
    """Http listener of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the HTTP listener that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar frontend_ip_configuration: Frontend IP configuration resource of an application gateway.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar frontend_port: Frontend port resource of an application gateway.
    :vartype frontend_port: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar protocol: Protocol of the HTTP listener. Possible values are 'Http' and 'Https'. Possible
     values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
    :ivar host_name: Host name of HTTP listener.
    :vartype host_name: str
    :ivar ssl_certificate: SSL certificate resource of an application gateway.
    :vartype ssl_certificate: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar require_server_name_indication: Applicable only if protocol is https. Enables SNI for
     multi-hosting.
    :vartype require_server_name_indication: bool
    :ivar provisioning_state: Provisioning state of the HTTP listener resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'ssl_certificate': {'key': 'properties.sslCertificate', 'type': 'SubResource'},
        'require_server_name_indication': {'key': 'properties.requireServerNameIndication', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the HTTP listener that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword frontend_ip_configuration: Frontend IP configuration resource of an application
         gateway.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword frontend_port: Frontend port resource of an application gateway.
        :paramtype frontend_port: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword protocol: Protocol of the HTTP listener. Possible values are 'Http' and 'Https'.
         Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
        :keyword host_name: Host name of HTTP listener.
        :paramtype host_name: str
        :keyword ssl_certificate: SSL certificate resource of an application gateway.
        :paramtype ssl_certificate: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword require_server_name_indication: Applicable only if protocol is https. Enables SNI for
         multi-hosting.
        :paramtype require_server_name_indication: bool
        :keyword provisioning_state: Provisioning state of the HTTP listener resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayHttpListener, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.protocol = kwargs.get('protocol', None)
        self.host_name = kwargs.get('host_name', None)
        self.ssl_certificate = kwargs.get('ssl_certificate', None)
        self.require_server_name_indication = kwargs.get('require_server_name_indication', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayIPConfiguration(SubResource):
    """IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the IP configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar subnet: Reference of the subnet resource. A subnet from where application gateway gets
     its private address.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Provisioning state of the application gateway subnet resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the IP configuration that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword subnet: Reference of the subnet resource. A subnet from where application gateway gets
         its private address.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: Provisioning state of the application gateway subnet resource.
         Possible values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.subnet = kwargs.get('subnet', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayListResult(msrest.serialization.Model):
    """Response for ListApplicationGateways API service call.

    :ivar value: List of an application gateways in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGateway]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of an application gateways in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGateway]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ApplicationGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationGatewayPathRule(SubResource):
    """Path rule of URL path map of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the path rule that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar paths: Path rules of URL path map.
    :vartype paths: list[str]
    :ivar backend_address_pool: Backend address pool resource of URL path map path rule.
    :vartype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar backend_http_settings: Backend http settings resource of URL path map path rule.
    :vartype backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar redirect_configuration: Redirect configuration resource of URL path map path rule.
    :vartype redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Path rule of URL path map resource. Possible values are: 'Updating',
     'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'paths': {'key': 'properties.paths', 'type': '[str]'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'backend_http_settings': {'key': 'properties.backendHttpSettings', 'type': 'SubResource'},
        'redirect_configuration': {'key': 'properties.redirectConfiguration', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the path rule that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword paths: Path rules of URL path map.
        :paramtype paths: list[str]
        :keyword backend_address_pool: Backend address pool resource of URL path map path rule.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword backend_http_settings: Backend http settings resource of URL path map path rule.
        :paramtype backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword redirect_configuration: Redirect configuration resource of URL path map path rule.
        :paramtype redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: Path rule of URL path map resource. Possible values are:
         'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayPathRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.paths = kwargs.get('paths', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.redirect_configuration = kwargs.get('redirect_configuration', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayProbe(SubResource):
    """Probe of the application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the probe that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar protocol: The protocol used for the probe. Possible values are 'Http' and 'Https'.
     Possible values include: "Http", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
    :ivar host: Host name to send the probe to.
    :vartype host: str
    :ivar path: Relative path of probe. Valid path starts from '/'. Probe is sent to
     :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
    :vartype path: str
    :ivar interval: The probing interval in seconds. This is the time interval between two
     consecutive probes. Acceptable values are from 1 second to 86400 seconds.
    :vartype interval: int
    :ivar timeout: the probe timeout in seconds. Probe marked as failed if valid response is not
     received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
    :vartype timeout: int
    :ivar unhealthy_threshold: The probe retry count. Backend server is marked down after
     consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second
     to 20.
    :vartype unhealthy_threshold: int
    :ivar pick_host_name_from_backend_http_settings: Whether the host header should be picked from
     the backend http settings. Default value is false.
    :vartype pick_host_name_from_backend_http_settings: bool
    :ivar min_servers: Minimum number of servers that are always marked healthy. Default value is
     0.
    :vartype min_servers: int
    :ivar match: Criterion for classifying a healthy probe response.
    :vartype match:
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProbeHealthResponseMatch
    :ivar provisioning_state: Provisioning state of the backend http settings resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'host': {'key': 'properties.host', 'type': 'str'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'interval': {'key': 'properties.interval', 'type': 'int'},
        'timeout': {'key': 'properties.timeout', 'type': 'int'},
        'unhealthy_threshold': {'key': 'properties.unhealthyThreshold', 'type': 'int'},
        'pick_host_name_from_backend_http_settings': {'key': 'properties.pickHostNameFromBackendHttpSettings', 'type': 'bool'},
        'min_servers': {'key': 'properties.minServers', 'type': 'int'},
        'match': {'key': 'properties.match', 'type': 'ApplicationGatewayProbeHealthResponseMatch'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the probe that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword protocol: The protocol used for the probe. Possible values are 'Http' and 'Https'.
         Possible values include: "Http", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProtocol
        :keyword host: Host name to send the probe to.
        :paramtype host: str
        :keyword path: Relative path of probe. Valid path starts from '/'. Probe is sent to
         :code:`<Protocol>`://:code:`<host>`::code:`<port>`:code:`<path>`.
        :paramtype path: str
        :keyword interval: The probing interval in seconds. This is the time interval between two
         consecutive probes. Acceptable values are from 1 second to 86400 seconds.
        :paramtype interval: int
        :keyword timeout: the probe timeout in seconds. Probe marked as failed if valid response is not
         received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
        :paramtype timeout: int
        :keyword unhealthy_threshold: The probe retry count. Backend server is marked down after
         consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second
         to 20.
        :paramtype unhealthy_threshold: int
        :keyword pick_host_name_from_backend_http_settings: Whether the host header should be picked
         from the backend http settings. Default value is false.
        :paramtype pick_host_name_from_backend_http_settings: bool
        :keyword min_servers: Minimum number of servers that are always marked healthy. Default value
         is 0.
        :paramtype min_servers: int
        :keyword match: Criterion for classifying a healthy probe response.
        :paramtype match:
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayProbeHealthResponseMatch
        :keyword provisioning_state: Provisioning state of the backend http settings resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayProbe, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.protocol = kwargs.get('protocol', None)
        self.host = kwargs.get('host', None)
        self.path = kwargs.get('path', None)
        self.interval = kwargs.get('interval', None)
        self.timeout = kwargs.get('timeout', None)
        self.unhealthy_threshold = kwargs.get('unhealthy_threshold', None)
        self.pick_host_name_from_backend_http_settings = kwargs.get('pick_host_name_from_backend_http_settings', None)
        self.min_servers = kwargs.get('min_servers', None)
        self.match = kwargs.get('match', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayProbeHealthResponseMatch(msrest.serialization.Model):
    """Application gateway probe health response match.

    :ivar body: Body that must be contained in the health response. Default value is empty.
    :vartype body: str
    :ivar status_codes: Allowed ranges of healthy status codes. Default range of healthy status
     codes is 200-399.
    :vartype status_codes: list[str]
    """

    _attribute_map = {
        'body': {'key': 'body', 'type': 'str'},
        'status_codes': {'key': 'statusCodes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword body: Body that must be contained in the health response. Default value is empty.
        :paramtype body: str
        :keyword status_codes: Allowed ranges of healthy status codes. Default range of healthy status
         codes is 200-399.
        :paramtype status_codes: list[str]
        """
        super(ApplicationGatewayProbeHealthResponseMatch, self).__init__(**kwargs)
        self.body = kwargs.get('body', None)
        self.status_codes = kwargs.get('status_codes', None)


class ApplicationGatewayRedirectConfiguration(SubResource):
    """Redirect configuration of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the redirect configuration that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar redirect_type: Supported http redirection types - Permanent, Temporary, Found, SeeOther.
     Possible values include: "Permanent", "Found", "SeeOther", "Temporary".
    :vartype redirect_type: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRedirectType
    :ivar target_listener: Reference to a listener to redirect the request to.
    :vartype target_listener: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar target_url: Url to redirect the request to.
    :vartype target_url: str
    :ivar include_path: Include path in the redirected url.
    :vartype include_path: bool
    :ivar include_query_string: Include query string in the redirected url.
    :vartype include_query_string: bool
    :ivar request_routing_rules: Request routing specifying redirect configuration.
    :vartype request_routing_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar url_path_maps: Url path maps specifying default redirect configuration.
    :vartype url_path_maps: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar path_rules: Path rules specifying redirect configuration.
    :vartype path_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'redirect_type': {'key': 'properties.redirectType', 'type': 'str'},
        'target_listener': {'key': 'properties.targetListener', 'type': 'SubResource'},
        'target_url': {'key': 'properties.targetUrl', 'type': 'str'},
        'include_path': {'key': 'properties.includePath', 'type': 'bool'},
        'include_query_string': {'key': 'properties.includeQueryString', 'type': 'bool'},
        'request_routing_rules': {'key': 'properties.requestRoutingRules', 'type': '[SubResource]'},
        'url_path_maps': {'key': 'properties.urlPathMaps', 'type': '[SubResource]'},
        'path_rules': {'key': 'properties.pathRules', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the redirect configuration that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword redirect_type: Supported http redirection types - Permanent, Temporary, Found,
         SeeOther. Possible values include: "Permanent", "Found", "SeeOther", "Temporary".
        :paramtype redirect_type: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRedirectType
        :keyword target_listener: Reference to a listener to redirect the request to.
        :paramtype target_listener: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword target_url: Url to redirect the request to.
        :paramtype target_url: str
        :keyword include_path: Include path in the redirected url.
        :paramtype include_path: bool
        :keyword include_query_string: Include query string in the redirected url.
        :paramtype include_query_string: bool
        :keyword request_routing_rules: Request routing specifying redirect configuration.
        :paramtype request_routing_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword url_path_maps: Url path maps specifying default redirect configuration.
        :paramtype url_path_maps: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword path_rules: Path rules specifying redirect configuration.
        :paramtype path_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        """
        super(ApplicationGatewayRedirectConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.redirect_type = kwargs.get('redirect_type', None)
        self.target_listener = kwargs.get('target_listener', None)
        self.target_url = kwargs.get('target_url', None)
        self.include_path = kwargs.get('include_path', None)
        self.include_query_string = kwargs.get('include_query_string', None)
        self.request_routing_rules = kwargs.get('request_routing_rules', None)
        self.url_path_maps = kwargs.get('url_path_maps', None)
        self.path_rules = kwargs.get('path_rules', None)


class ApplicationGatewayRequestRoutingRule(SubResource):
    """Request routing rule of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the request routing rule that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar rule_type: Rule type. Possible values include: "Basic", "PathBasedRouting".
    :vartype rule_type: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRequestRoutingRuleType
    :ivar backend_address_pool: Backend address pool resource of the application gateway.
    :vartype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar backend_http_settings: Backend http settings resource of the application gateway.
    :vartype backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar http_listener: Http listener resource of the application gateway.
    :vartype http_listener: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar url_path_map: URL path map resource of the application gateway.
    :vartype url_path_map: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar redirect_configuration: Redirect configuration resource of the application gateway.
    :vartype redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Provisioning state of the request routing rule resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'rule_type': {'key': 'properties.ruleType', 'type': 'str'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'backend_http_settings': {'key': 'properties.backendHttpSettings', 'type': 'SubResource'},
        'http_listener': {'key': 'properties.httpListener', 'type': 'SubResource'},
        'url_path_map': {'key': 'properties.urlPathMap', 'type': 'SubResource'},
        'redirect_configuration': {'key': 'properties.redirectConfiguration', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the request routing rule that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword rule_type: Rule type. Possible values include: "Basic", "PathBasedRouting".
        :paramtype rule_type: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayRequestRoutingRuleType
        :keyword backend_address_pool: Backend address pool resource of the application gateway.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword backend_http_settings: Backend http settings resource of the application gateway.
        :paramtype backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword http_listener: Http listener resource of the application gateway.
        :paramtype http_listener: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword url_path_map: URL path map resource of the application gateway.
        :paramtype url_path_map: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword redirect_configuration: Redirect configuration resource of the application gateway.
        :paramtype redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: Provisioning state of the request routing rule resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayRequestRoutingRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.rule_type = kwargs.get('rule_type', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.backend_http_settings = kwargs.get('backend_http_settings', None)
        self.http_listener = kwargs.get('http_listener', None)
        self.url_path_map = kwargs.get('url_path_map', None)
        self.redirect_configuration = kwargs.get('redirect_configuration', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewaySku(msrest.serialization.Model):
    """SKU of an application gateway.

    :ivar name: Name of an application gateway SKU. Possible values include: "Standard_Small",
     "Standard_Medium", "Standard_Large", "WAF_Medium", "WAF_Large", "Standard_v2", "WAF_v2".
    :vartype name: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySkuName
    :ivar tier: Tier of an application gateway. Possible values include: "Standard", "WAF",
     "Standard_v2", "WAF_v2".
    :vartype tier: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayTier
    :ivar capacity: Capacity (instance count) of an application gateway.
    :vartype capacity: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of an application gateway SKU. Possible values include: "Standard_Small",
         "Standard_Medium", "Standard_Large", "WAF_Medium", "WAF_Large", "Standard_v2", "WAF_v2".
        :paramtype name: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySkuName
        :keyword tier: Tier of an application gateway. Possible values include: "Standard", "WAF",
         "Standard_v2", "WAF_v2".
        :paramtype tier: str or ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayTier
        :keyword capacity: Capacity (instance count) of an application gateway.
        :paramtype capacity: int
        """
        super(ApplicationGatewaySku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.capacity = kwargs.get('capacity', None)


class ApplicationGatewaySslCertificate(SubResource):
    """SSL certificates of an application gateway.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the SSL certificate that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar data: Base-64 encoded pfx certificate. Only applicable in PUT Request.
    :vartype data: str
    :ivar password: Password for the pfx file specified in data. Only applicable in PUT request.
    :vartype password: str
    :ivar public_cert_data: Base-64 encoded Public cert data corresponding to pfx specified in
     data. Only applicable in GET request.
    :vartype public_cert_data: str
    :ivar provisioning_state: Provisioning state of the SSL certificate resource Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data': {'key': 'properties.data', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'public_cert_data': {'key': 'properties.publicCertData', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the SSL certificate that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword data: Base-64 encoded pfx certificate. Only applicable in PUT Request.
        :paramtype data: str
        :keyword password: Password for the pfx file specified in data. Only applicable in PUT request.
        :paramtype password: str
        :keyword public_cert_data: Base-64 encoded Public cert data corresponding to pfx specified in
         data. Only applicable in GET request.
        :paramtype public_cert_data: str
        :keyword provisioning_state: Provisioning state of the SSL certificate resource Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewaySslCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.data = kwargs.get('data', None)
        self.password = kwargs.get('password', None)
        self.public_cert_data = kwargs.get('public_cert_data', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewaySslPolicy(msrest.serialization.Model):
    """Application Gateway Ssl policy.

    :ivar disabled_ssl_protocols: Ssl protocols to be disabled on application gateway.
    :vartype disabled_ssl_protocols: list[str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol]
    :ivar policy_type: Type of Ssl Policy. Possible values include: "Predefined", "Custom".
    :vartype policy_type: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyType
    :ivar policy_name: Name of Ssl predefined policy. Possible values include:
     "AppGwSslPolicy20150501", "AppGwSslPolicy20170401", "AppGwSslPolicy20170401S".
    :vartype policy_name: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyName
    :ivar cipher_suites: Ssl cipher suites to be enabled in the specified order to application
     gateway.
    :vartype cipher_suites: list[str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
    :ivar min_protocol_version: Minimum version of Ssl protocol to be supported on application
     gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
    :vartype min_protocol_version: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol
    """

    _attribute_map = {
        'disabled_ssl_protocols': {'key': 'disabledSslProtocols', 'type': '[str]'},
        'policy_type': {'key': 'policyType', 'type': 'str'},
        'policy_name': {'key': 'policyName', 'type': 'str'},
        'cipher_suites': {'key': 'cipherSuites', 'type': '[str]'},
        'min_protocol_version': {'key': 'minProtocolVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword disabled_ssl_protocols: Ssl protocols to be disabled on application gateway.
        :paramtype disabled_ssl_protocols: list[str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol]
        :keyword policy_type: Type of Ssl Policy. Possible values include: "Predefined", "Custom".
        :paramtype policy_type: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyType
        :keyword policy_name: Name of Ssl predefined policy. Possible values include:
         "AppGwSslPolicy20150501", "AppGwSslPolicy20170401", "AppGwSslPolicy20170401S".
        :paramtype policy_name: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslPolicyName
        :keyword cipher_suites: Ssl cipher suites to be enabled in the specified order to application
         gateway.
        :paramtype cipher_suites: list[str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
        :keyword min_protocol_version: Minimum version of Ssl protocol to be supported on application
         gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
        :paramtype min_protocol_version: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol
        """
        super(ApplicationGatewaySslPolicy, self).__init__(**kwargs)
        self.disabled_ssl_protocols = kwargs.get('disabled_ssl_protocols', None)
        self.policy_type = kwargs.get('policy_type', None)
        self.policy_name = kwargs.get('policy_name', None)
        self.cipher_suites = kwargs.get('cipher_suites', None)
        self.min_protocol_version = kwargs.get('min_protocol_version', None)


class ApplicationGatewaySslPredefinedPolicy(SubResource):
    """An Ssl predefined policy.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the Ssl predefined policy.
    :vartype name: str
    :ivar cipher_suites: Ssl cipher suites to be enabled in the specified order for application
     gateway.
    :vartype cipher_suites: list[str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
    :ivar min_protocol_version: Minimum version of Ssl protocol to be supported on application
     gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
    :vartype min_protocol_version: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'cipher_suites': {'key': 'properties.cipherSuites', 'type': '[str]'},
        'min_protocol_version': {'key': 'properties.minProtocolVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the Ssl predefined policy.
        :paramtype name: str
        :keyword cipher_suites: Ssl cipher suites to be enabled in the specified order for application
         gateway.
        :paramtype cipher_suites: list[str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslCipherSuite]
        :keyword min_protocol_version: Minimum version of Ssl protocol to be supported on application
         gateway. Possible values include: "TLSv1_0", "TLSv1_1", "TLSv1_2".
        :paramtype min_protocol_version: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewaySslProtocol
        """
        super(ApplicationGatewaySslPredefinedPolicy, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.cipher_suites = kwargs.get('cipher_suites', None)
        self.min_protocol_version = kwargs.get('min_protocol_version', None)


class ApplicationGatewayUrlPathMap(SubResource):
    """UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the URL path map that is unique within an Application Gateway.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar default_backend_address_pool: Default backend address pool resource of URL path map.
    :vartype default_backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar default_backend_http_settings: Default backend http settings resource of URL path map.
    :vartype default_backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar default_redirect_configuration: Default redirect configuration resource of URL path map.
    :vartype default_redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar path_rules: Path rule of URL path map resource.
    :vartype path_rules: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayPathRule]
    :ivar provisioning_state: Provisioning state of the backend http settings resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'default_backend_address_pool': {'key': 'properties.defaultBackendAddressPool', 'type': 'SubResource'},
        'default_backend_http_settings': {'key': 'properties.defaultBackendHttpSettings', 'type': 'SubResource'},
        'default_redirect_configuration': {'key': 'properties.defaultRedirectConfiguration', 'type': 'SubResource'},
        'path_rules': {'key': 'properties.pathRules', 'type': '[ApplicationGatewayPathRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the URL path map that is unique within an Application Gateway.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword default_backend_address_pool: Default backend address pool resource of URL path map.
        :paramtype default_backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword default_backend_http_settings: Default backend http settings resource of URL path map.
        :paramtype default_backend_http_settings: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword default_redirect_configuration: Default redirect configuration resource of URL path
         map.
        :paramtype default_redirect_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword path_rules: Path rule of URL path map resource.
        :paramtype path_rules: list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayPathRule]
        :keyword provisioning_state: Provisioning state of the backend http settings resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ApplicationGatewayUrlPathMap, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.type = kwargs.get('type', None)
        self.default_backend_address_pool = kwargs.get('default_backend_address_pool', None)
        self.default_backend_http_settings = kwargs.get('default_backend_http_settings', None)
        self.default_redirect_configuration = kwargs.get('default_redirect_configuration', None)
        self.path_rules = kwargs.get('path_rules', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ApplicationGatewayWebApplicationFirewallConfiguration(msrest.serialization.Model):
    """Application gateway web application firewall configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Whether the web application firewall is enabled or not.
    :vartype enabled: bool
    :ivar firewall_mode: Required. Web application firewall mode. Possible values include:
     "Detection", "Prevention".
    :vartype firewall_mode: str or
     ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallMode
    :ivar rule_set_type: Required. The type of the web application firewall rule set. Possible
     values are: 'OWASP'.
    :vartype rule_set_type: str
    :ivar rule_set_version: Required. The version of the rule set type.
    :vartype rule_set_version: str
    :ivar disabled_rule_groups: The disabled rule groups.
    :vartype disabled_rule_groups:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallDisabledRuleGroup]
    :ivar request_body_check: Whether allow WAF to check request Body.
    :vartype request_body_check: bool
    :ivar max_request_body_size: Maximum request body size for WAF.
    :vartype max_request_body_size: int
    """

    _validation = {
        'enabled': {'required': True},
        'firewall_mode': {'required': True},
        'rule_set_type': {'required': True},
        'rule_set_version': {'required': True},
        'max_request_body_size': {'maximum': 128, 'minimum': 8},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'firewall_mode': {'key': 'firewallMode', 'type': 'str'},
        'rule_set_type': {'key': 'ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'ruleSetVersion', 'type': 'str'},
        'disabled_rule_groups': {'key': 'disabledRuleGroups', 'type': '[ApplicationGatewayFirewallDisabledRuleGroup]'},
        'request_body_check': {'key': 'requestBodyCheck', 'type': 'bool'},
        'max_request_body_size': {'key': 'maxRequestBodySize', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Required. Whether the web application firewall is enabled or not.
        :paramtype enabled: bool
        :keyword firewall_mode: Required. Web application firewall mode. Possible values include:
         "Detection", "Prevention".
        :paramtype firewall_mode: str or
         ~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallMode
        :keyword rule_set_type: Required. The type of the web application firewall rule set. Possible
         values are: 'OWASP'.
        :paramtype rule_set_type: str
        :keyword rule_set_version: Required. The version of the rule set type.
        :paramtype rule_set_version: str
        :keyword disabled_rule_groups: The disabled rule groups.
        :paramtype disabled_rule_groups:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayFirewallDisabledRuleGroup]
        :keyword request_body_check: Whether allow WAF to check request Body.
        :paramtype request_body_check: bool
        :keyword max_request_body_size: Maximum request body size for WAF.
        :paramtype max_request_body_size: int
        """
        super(ApplicationGatewayWebApplicationFirewallConfiguration, self).__init__(**kwargs)
        self.enabled = kwargs['enabled']
        self.firewall_mode = kwargs['firewall_mode']
        self.rule_set_type = kwargs['rule_set_type']
        self.rule_set_version = kwargs['rule_set_version']
        self.disabled_rule_groups = kwargs.get('disabled_rule_groups', None)
        self.request_body_check = kwargs.get('request_body_check', None)
        self.max_request_body_size = kwargs.get('max_request_body_size', None)


class ApplicationSecurityGroup(Resource):
    """An application security group in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the application security group resource. It
     uniquely identifies a resource, even if the user changes its name or migrate the resource
     across subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the application security group resource.
     Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ApplicationSecurityGroup, self).__init__(**kwargs)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None


class ApplicationSecurityGroupListResult(msrest.serialization.Model):
    """A list of application security groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of application security groups.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of application security groups.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
        """
        super(ApplicationSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AuthorizationListResult(msrest.serialization.Model):
    """Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.

    :ivar value: The authorizations in an ExpressRoute Circuit.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitAuthorization]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitAuthorization]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The authorizations in an ExpressRoute Circuit.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitAuthorization]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AuthorizationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class Availability(msrest.serialization.Model):
    """Availability of the metric.

    :ivar time_grain: The time grain of the availability.
    :vartype time_grain: str
    :ivar retention: The retention of the availability.
    :vartype retention: str
    :ivar blob_duration: Duration of the availability blob.
    :vartype blob_duration: str
    """

    _attribute_map = {
        'time_grain': {'key': 'timeGrain', 'type': 'str'},
        'retention': {'key': 'retention', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_grain: The time grain of the availability.
        :paramtype time_grain: str
        :keyword retention: The retention of the availability.
        :paramtype retention: str
        :keyword blob_duration: Duration of the availability blob.
        :paramtype blob_duration: str
        """
        super(Availability, self).__init__(**kwargs)
        self.time_grain = kwargs.get('time_grain', None)
        self.retention = kwargs.get('retention', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class AvailableProvidersList(msrest.serialization.Model):
    """List of available countries with details.

    All required parameters must be populated in order to send to Azure.

    :ivar countries: Required. List of available countries.
    :vartype countries: list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListCountry]
    """

    _validation = {
        'countries': {'required': True},
    }

    _attribute_map = {
        'countries': {'key': 'countries', 'type': '[AvailableProvidersListCountry]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword countries: Required. List of available countries.
        :paramtype countries:
         list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListCountry]
        """
        super(AvailableProvidersList, self).__init__(**kwargs)
        self.countries = kwargs['countries']


class AvailableProvidersListCity(msrest.serialization.Model):
    """City or town details.

    :ivar city_name: The city or town name.
    :vartype city_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    """

    _attribute_map = {
        'city_name': {'key': 'cityName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword city_name: The city or town name.
        :paramtype city_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        """
        super(AvailableProvidersListCity, self).__init__(**kwargs)
        self.city_name = kwargs.get('city_name', None)
        self.providers = kwargs.get('providers', None)


class AvailableProvidersListCountry(msrest.serialization.Model):
    """Country details.

    :ivar country_name: The country name.
    :vartype country_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    :ivar states: List of available states in the country.
    :vartype states: list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListState]
    """

    _attribute_map = {
        'country_name': {'key': 'countryName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'states': {'key': 'states', 'type': '[AvailableProvidersListState]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword country_name: The country name.
        :paramtype country_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        :keyword states: List of available states in the country.
        :paramtype states: list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListState]
        """
        super(AvailableProvidersListCountry, self).__init__(**kwargs)
        self.country_name = kwargs.get('country_name', None)
        self.providers = kwargs.get('providers', None)
        self.states = kwargs.get('states', None)


class AvailableProvidersListParameters(msrest.serialization.Model):
    """Constraints that determine the list of available Internet service providers.

    :ivar azure_locations: A list of Azure regions.
    :vartype azure_locations: list[str]
    :ivar country: The country for available providers list.
    :vartype country: str
    :ivar state: The state for available providers list.
    :vartype state: str
    :ivar city: The city or town for available providers list.
    :vartype city: str
    """

    _attribute_map = {
        'azure_locations': {'key': 'azureLocations', 'type': '[str]'},
        'country': {'key': 'country', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword azure_locations: A list of Azure regions.
        :paramtype azure_locations: list[str]
        :keyword country: The country for available providers list.
        :paramtype country: str
        :keyword state: The state for available providers list.
        :paramtype state: str
        :keyword city: The city or town for available providers list.
        :paramtype city: str
        """
        super(AvailableProvidersListParameters, self).__init__(**kwargs)
        self.azure_locations = kwargs.get('azure_locations', None)
        self.country = kwargs.get('country', None)
        self.state = kwargs.get('state', None)
        self.city = kwargs.get('city', None)


class AvailableProvidersListState(msrest.serialization.Model):
    """State details.

    :ivar state_name: The state name.
    :vartype state_name: str
    :ivar providers: A list of Internet service providers.
    :vartype providers: list[str]
    :ivar cities: List of available cities or towns in the state.
    :vartype cities: list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListCity]
    """

    _attribute_map = {
        'state_name': {'key': 'stateName', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'cities': {'key': 'cities', 'type': '[AvailableProvidersListCity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword state_name: The state name.
        :paramtype state_name: str
        :keyword providers: A list of Internet service providers.
        :paramtype providers: list[str]
        :keyword cities: List of available cities or towns in the state.
        :paramtype cities: list[~azure.mgmt.network.v2018_04_01.models.AvailableProvidersListCity]
        """
        super(AvailableProvidersListState, self).__init__(**kwargs)
        self.state_name = kwargs.get('state_name', None)
        self.providers = kwargs.get('providers', None)
        self.cities = kwargs.get('cities', None)


class AzureAsyncOperationResult(msrest.serialization.Model):
    """The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.

    :ivar status: Status of the Azure async operation. Possible values are: 'InProgress',
     'Succeeded', and 'Failed'. Possible values include: "InProgress", "Succeeded", "Failed".
    :vartype status: str or ~azure.mgmt.network.v2018_04_01.models.NetworkOperationStatus
    :ivar error:
    :vartype error: ~azure.mgmt.network.v2018_04_01.models.Error
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Status of the Azure async operation. Possible values are: 'InProgress',
         'Succeeded', and 'Failed'. Possible values include: "InProgress", "Succeeded", "Failed".
        :paramtype status: str or ~azure.mgmt.network.v2018_04_01.models.NetworkOperationStatus
        :keyword error:
        :paramtype error: ~azure.mgmt.network.v2018_04_01.models.Error
        """
        super(AzureAsyncOperationResult, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.error = kwargs.get('error', None)


class AzureFirewall(Resource):
    """Azure Firewall resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar application_rule_collections: Collection of application rule collections used by a Azure
     Firewall.
    :vartype application_rule_collections:
     list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleCollection]
    :ivar network_rule_collections: Collection of network rule collections used by a Azure
     Firewall.
    :vartype network_rule_collections:
     list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRuleCollection]
    :ivar ip_configurations: IP configuration of the Azure Firewall resource.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallIPConfiguration]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'application_rule_collections': {'key': 'properties.applicationRuleCollections', 'type': '[AzureFirewallApplicationRuleCollection]'},
        'network_rule_collections': {'key': 'properties.networkRuleCollections', 'type': '[AzureFirewallNetworkRuleCollection]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[AzureFirewallIPConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword application_rule_collections: Collection of application rule collections used by a
         Azure Firewall.
        :paramtype application_rule_collections:
         list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleCollection]
        :keyword network_rule_collections: Collection of network rule collections used by a Azure
         Firewall.
        :paramtype network_rule_collections:
         list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRuleCollection]
        :keyword ip_configurations: IP configuration of the Azure Firewall resource.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallIPConfiguration]
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(AzureFirewall, self).__init__(**kwargs)
        self.etag = None
        self.application_rule_collections = kwargs.get('application_rule_collections', None)
        self.network_rule_collections = kwargs.get('network_rule_collections', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class AzureFirewallApplicationRule(msrest.serialization.Model):
    """Properties of an application rule.

    :ivar name: Name of the application rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar protocols: Array of ApplicationRuleProtocols.
    :vartype protocols:
     list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleProtocol]
    :ivar target_urls: List of URLs for this rule.
    :vartype target_urls: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'protocols': {'key': 'protocols', 'type': '[AzureFirewallApplicationRuleProtocol]'},
        'target_urls': {'key': 'targetUrls', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the application rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword protocols: Array of ApplicationRuleProtocols.
        :paramtype protocols:
         list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleProtocol]
        :keyword target_urls: List of URLs for this rule.
        :paramtype target_urls: list[str]
        """
        super(AzureFirewallApplicationRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.protocols = kwargs.get('protocols', None)
        self.target_urls = kwargs.get('target_urls', None)


class AzureFirewallApplicationRuleCollection(SubResource):
    """Application rule collection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Priority of the application rule collection resource.
    :vartype priority: int
    :ivar action: The action type of a rule collection.
    :vartype action: ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCAction
    :ivar rules: Collection of rules used by a application rule collection.
    :vartype rules: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRule]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'action': {'key': 'properties.action', 'type': 'AzureFirewallRCAction'},
        'rules': {'key': 'properties.rules', 'type': '[AzureFirewallApplicationRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the application rule collection resource.
        :paramtype priority: int
        :keyword action: The action type of a rule collection.
        :paramtype action: ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCAction
        :keyword rules: Collection of rules used by a application rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRule]
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(AzureFirewallApplicationRuleCollection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs.get('priority', None)
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class AzureFirewallApplicationRuleProtocol(msrest.serialization.Model):
    """Properties of the application rule protocol.

    :ivar protocol_type: Protocol type. Possible values include: "Http", "Https".
    :vartype protocol_type: str or
     ~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleProtocolType
    :ivar port: Port number for the protocol, cannot be greater than 64000. This field is optional.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 64000, 'minimum': 0},
    }

    _attribute_map = {
        'protocol_type': {'key': 'protocolType', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol_type: Protocol type. Possible values include: "Http", "Https".
        :paramtype protocol_type: str or
         ~azure.mgmt.network.v2018_04_01.models.AzureFirewallApplicationRuleProtocolType
        :keyword port: Port number for the protocol, cannot be greater than 64000. This field is
         optional.
        :paramtype port: int
        """
        super(AzureFirewallApplicationRuleProtocol, self).__init__(**kwargs)
        self.protocol_type = kwargs.get('protocol_type', None)
        self.port = kwargs.get('port', None)


class AzureFirewallIPConfiguration(SubResource):
    """IP configuration of an Azure Firewall.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_ip_address: The Firewall Internal Load Balancer IP to be used as the next hop in
     User Defined Routes.
    :vartype private_ip_address: str
    :ivar subnet: Reference of the subnet resource. This resource must be named
     'AzureFirewallSubnet'.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar internal_public_ip_address: Reference of the PublicIP resource. This field is a mandatory
     input.
    :vartype internal_public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar public_ip_address: Reference of the PublicIP resource. This field is populated in the
     output.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'internal_public_ip_address': {'key': 'properties.internalPublicIpAddress', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword private_ip_address: The Firewall Internal Load Balancer IP to be used as the next hop
         in User Defined Routes.
        :paramtype private_ip_address: str
        :keyword subnet: Reference of the subnet resource. This resource must be named
         'AzureFirewallSubnet'.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword internal_public_ip_address: Reference of the PublicIP resource. This field is a
         mandatory input.
        :paramtype internal_public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword public_ip_address: Reference of the PublicIP resource. This field is populated in the
         output.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(AzureFirewallIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.subnet = kwargs.get('subnet', None)
        self.internal_public_ip_address = kwargs.get('internal_public_ip_address', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class AzureFirewallListResult(msrest.serialization.Model):
    """Response for ListAzureFirewalls API service call.

    :ivar value: List of a Azure Firewalls in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewall]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AzureFirewall]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of a Azure Firewalls in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewall]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(AzureFirewallListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class AzureFirewallNetworkRule(msrest.serialization.Model):
    """Properties of the network rule.

    :ivar name: Name of the network rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar protocols: Array of AzureFirewallNetworkRuleProtocols.
    :vartype protocols: list[str or
     ~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRuleProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the network rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword protocols: Array of AzureFirewallNetworkRuleProtocols.
        :paramtype protocols: list[str or
         ~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRuleProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        """
        super(AzureFirewallNetworkRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.protocols = kwargs.get('protocols', None)
        self.source_addresses = kwargs.get('source_addresses', None)
        self.destination_addresses = kwargs.get('destination_addresses', None)
        self.destination_ports = kwargs.get('destination_ports', None)


class AzureFirewallNetworkRuleCollection(SubResource):
    """Network rule collection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar priority: Priority of the network rule collection resource.
    :vartype priority: int
    :ivar action: The action type of a rule collection.
    :vartype action: ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCAction
    :ivar rules: Collection of rules used by a network rule collection.
    :vartype rules: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRule]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'action': {'key': 'properties.action', 'type': 'AzureFirewallRCAction'},
        'rules': {'key': 'properties.rules', 'type': '[AzureFirewallNetworkRule]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the network rule collection resource.
        :paramtype priority: int
        :keyword action: The action type of a rule collection.
        :paramtype action: ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCAction
        :keyword rules: Collection of rules used by a network rule collection.
        :paramtype rules: list[~azure.mgmt.network.v2018_04_01.models.AzureFirewallNetworkRule]
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(AzureFirewallNetworkRuleCollection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.priority = kwargs.get('priority', None)
        self.action = kwargs.get('action', None)
        self.rules = kwargs.get('rules', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class AzureFirewallRCAction(msrest.serialization.Model):
    """Properties of the AzureFirewallRCAction.

    :ivar type: The type of action. Possible values include: "Allow", "Deny".
    :vartype type: str or ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "Allow", "Deny".
        :paramtype type: str or ~azure.mgmt.network.v2018_04_01.models.AzureFirewallRCActionType
        """
        super(AzureFirewallRCAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class AzureReachabilityReport(msrest.serialization.Model):
    """Azure reachability report details.

    All required parameters must be populated in order to send to Azure.

    :ivar aggregation_level: Required. The aggregation level of Azure reachability report. Can be
     Country, State or City.
    :vartype aggregation_level: str
    :ivar provider_location: Required. Parameters that define a geographic location.
    :vartype provider_location:
     ~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLocation
    :ivar reachability_report: Required. List of Azure reachability report items.
    :vartype reachability_report:
     list[~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportItem]
    """

    _validation = {
        'aggregation_level': {'required': True},
        'provider_location': {'required': True},
        'reachability_report': {'required': True},
    }

    _attribute_map = {
        'aggregation_level': {'key': 'aggregationLevel', 'type': 'str'},
        'provider_location': {'key': 'providerLocation', 'type': 'AzureReachabilityReportLocation'},
        'reachability_report': {'key': 'reachabilityReport', 'type': '[AzureReachabilityReportItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword aggregation_level: Required. The aggregation level of Azure reachability report. Can
         be Country, State or City.
        :paramtype aggregation_level: str
        :keyword provider_location: Required. Parameters that define a geographic location.
        :paramtype provider_location:
         ~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLocation
        :keyword reachability_report: Required. List of Azure reachability report items.
        :paramtype reachability_report:
         list[~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportItem]
        """
        super(AzureReachabilityReport, self).__init__(**kwargs)
        self.aggregation_level = kwargs['aggregation_level']
        self.provider_location = kwargs['provider_location']
        self.reachability_report = kwargs['reachability_report']


class AzureReachabilityReportItem(msrest.serialization.Model):
    """Azure reachability report details for a given provider location.

    :ivar provider: The Internet service provider.
    :vartype provider: str
    :ivar azure_location: The Azure region.
    :vartype azure_location: str
    :ivar latencies: List of latency details for each of the time series.
    :vartype latencies:
     list[~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLatencyInfo]
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'azure_location': {'key': 'azureLocation', 'type': 'str'},
        'latencies': {'key': 'latencies', 'type': '[AzureReachabilityReportLatencyInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider: The Internet service provider.
        :paramtype provider: str
        :keyword azure_location: The Azure region.
        :paramtype azure_location: str
        :keyword latencies: List of latency details for each of the time series.
        :paramtype latencies:
         list[~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLatencyInfo]
        """
        super(AzureReachabilityReportItem, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.azure_location = kwargs.get('azure_location', None)
        self.latencies = kwargs.get('latencies', None)


class AzureReachabilityReportLatencyInfo(msrest.serialization.Model):
    """Details on latency for a time series.

    :ivar time_stamp: The time stamp.
    :vartype time_stamp: ~datetime.datetime
    :ivar score: The relative latency score between 1 and 100, higher values indicating a faster
     connection.
    :vartype score: int
    """

    _validation = {
        'score': {'maximum': 100, 'minimum': 1},
    }

    _attribute_map = {
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'score': {'key': 'score', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_stamp: The time stamp.
        :paramtype time_stamp: ~datetime.datetime
        :keyword score: The relative latency score between 1 and 100, higher values indicating a faster
         connection.
        :paramtype score: int
        """
        super(AzureReachabilityReportLatencyInfo, self).__init__(**kwargs)
        self.time_stamp = kwargs.get('time_stamp', None)
        self.score = kwargs.get('score', None)


class AzureReachabilityReportLocation(msrest.serialization.Model):
    """Parameters that define a geographic location.

    All required parameters must be populated in order to send to Azure.

    :ivar country: Required. The name of the country.
    :vartype country: str
    :ivar state: The name of the state.
    :vartype state: str
    :ivar city: The name of the city or town.
    :vartype city: str
    """

    _validation = {
        'country': {'required': True},
    }

    _attribute_map = {
        'country': {'key': 'country', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword country: Required. The name of the country.
        :paramtype country: str
        :keyword state: The name of the state.
        :paramtype state: str
        :keyword city: The name of the city or town.
        :paramtype city: str
        """
        super(AzureReachabilityReportLocation, self).__init__(**kwargs)
        self.country = kwargs['country']
        self.state = kwargs.get('state', None)
        self.city = kwargs.get('city', None)


class AzureReachabilityReportParameters(msrest.serialization.Model):
    """Geographic and time constraints for Azure reachability report.

    All required parameters must be populated in order to send to Azure.

    :ivar provider_location: Required. Parameters that define a geographic location.
    :vartype provider_location:
     ~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLocation
    :ivar providers: List of Internet service providers.
    :vartype providers: list[str]
    :ivar azure_locations: Optional Azure regions to scope the query to.
    :vartype azure_locations: list[str]
    :ivar start_time: Required. The start time for the Azure reachability report.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. The end time for the Azure reachability report.
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'provider_location': {'required': True},
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'provider_location': {'key': 'providerLocation', 'type': 'AzureReachabilityReportLocation'},
        'providers': {'key': 'providers', 'type': '[str]'},
        'azure_locations': {'key': 'azureLocations', 'type': '[str]'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider_location: Required. Parameters that define a geographic location.
        :paramtype provider_location:
         ~azure.mgmt.network.v2018_04_01.models.AzureReachabilityReportLocation
        :keyword providers: List of Internet service providers.
        :paramtype providers: list[str]
        :keyword azure_locations: Optional Azure regions to scope the query to.
        :paramtype azure_locations: list[str]
        :keyword start_time: Required. The start time for the Azure reachability report.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. The end time for the Azure reachability report.
        :paramtype end_time: ~datetime.datetime
        """
        super(AzureReachabilityReportParameters, self).__init__(**kwargs)
        self.provider_location = kwargs['provider_location']
        self.providers = kwargs.get('providers', None)
        self.azure_locations = kwargs.get('azure_locations', None)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']


class BackendAddressPool(SubResource):
    """Pool of backend IP addresses.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar backend_ip_configurations: Gets collection of references to IP addresses defined in
     network interfaces.
    :vartype backend_ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
    :ivar load_balancing_rules: Gets load balancing rules that use this backend address pool.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar outbound_nat_rule: Gets outbound rules that use this backend address pool.
    :vartype outbound_nat_rule: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Get provisioning state of the public IP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'backend_ip_configurations': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'outbound_nat_rule': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'outbound_nat_rule': {'key': 'properties.outboundNatRule', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword provisioning_state: Get provisioning state of the public IP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(BackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.backend_ip_configurations = None
        self.load_balancing_rules = None
        self.outbound_nat_rule = None
        self.provisioning_state = kwargs.get('provisioning_state', None)


class BGPCommunity(msrest.serialization.Model):
    """Contains bgp community information offered in Service Community resources.

    :ivar service_supported_region: The region which the service support. e.g. For O365, region is
     Global.
    :vartype service_supported_region: str
    :ivar community_name: The name of the bgp community. e.g. Skype.
    :vartype community_name: str
    :ivar community_value: The value of the bgp community. For more information:
     https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
    :vartype community_value: str
    :ivar community_prefixes: The prefixes that the bgp community contains.
    :vartype community_prefixes: list[str]
    :ivar is_authorized_to_use: Customer is authorized to use bgp community or not.
    :vartype is_authorized_to_use: bool
    :ivar service_group: The service group of the bgp community contains.
    :vartype service_group: str
    """

    _attribute_map = {
        'service_supported_region': {'key': 'serviceSupportedRegion', 'type': 'str'},
        'community_name': {'key': 'communityName', 'type': 'str'},
        'community_value': {'key': 'communityValue', 'type': 'str'},
        'community_prefixes': {'key': 'communityPrefixes', 'type': '[str]'},
        'is_authorized_to_use': {'key': 'isAuthorizedToUse', 'type': 'bool'},
        'service_group': {'key': 'serviceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_supported_region: The region which the service support. e.g. For O365, region
         is Global.
        :paramtype service_supported_region: str
        :keyword community_name: The name of the bgp community. e.g. Skype.
        :paramtype community_name: str
        :keyword community_value: The value of the bgp community. For more information:
         https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
        :paramtype community_value: str
        :keyword community_prefixes: The prefixes that the bgp community contains.
        :paramtype community_prefixes: list[str]
        :keyword is_authorized_to_use: Customer is authorized to use bgp community or not.
        :paramtype is_authorized_to_use: bool
        :keyword service_group: The service group of the bgp community contains.
        :paramtype service_group: str
        """
        super(BGPCommunity, self).__init__(**kwargs)
        self.service_supported_region = kwargs.get('service_supported_region', None)
        self.community_name = kwargs.get('community_name', None)
        self.community_value = kwargs.get('community_value', None)
        self.community_prefixes = kwargs.get('community_prefixes', None)
        self.is_authorized_to_use = kwargs.get('is_authorized_to_use', None)
        self.service_group = kwargs.get('service_group', None)


class BgpPeerStatus(msrest.serialization.Model):
    """BGP peer status details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The virtual network gateway's local address.
    :vartype local_address: str
    :ivar neighbor: The remote BGP peer.
    :vartype neighbor: str
    :ivar asn: The autonomous system number of the remote BGP peer.
    :vartype asn: int
    :ivar state: The BGP peer state. Possible values include: "Unknown", "Stopped", "Idle",
     "Connecting", "Connected".
    :vartype state: str or ~azure.mgmt.network.v2018_04_01.models.BgpPeerState
    :ivar connected_duration: For how long the peering has been up.
    :vartype connected_duration: str
    :ivar routes_received: The number of routes learned from this peer.
    :vartype routes_received: long
    :ivar messages_sent: The number of BGP messages sent.
    :vartype messages_sent: long
    :ivar messages_received: The number of BGP messages received.
    :vartype messages_received: long
    """

    _validation = {
        'local_address': {'readonly': True},
        'neighbor': {'readonly': True},
        'asn': {'readonly': True},
        'state': {'readonly': True},
        'connected_duration': {'readonly': True},
        'routes_received': {'readonly': True},
        'messages_sent': {'readonly': True},
        'messages_received': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'asn': {'key': 'asn', 'type': 'int'},
        'state': {'key': 'state', 'type': 'str'},
        'connected_duration': {'key': 'connectedDuration', 'type': 'str'},
        'routes_received': {'key': 'routesReceived', 'type': 'long'},
        'messages_sent': {'key': 'messagesSent', 'type': 'long'},
        'messages_received': {'key': 'messagesReceived', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BgpPeerStatus, self).__init__(**kwargs)
        self.local_address = None
        self.neighbor = None
        self.asn = None
        self.state = None
        self.connected_duration = None
        self.routes_received = None
        self.messages_sent = None
        self.messages_received = None


class BgpPeerStatusListResult(msrest.serialization.Model):
    """Response for list BGP peer status API service call.

    :ivar value: List of BGP peers.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.BgpPeerStatus]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpPeerStatus]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of BGP peers.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.BgpPeerStatus]
        """
        super(BgpPeerStatusListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class BgpServiceCommunity(Resource):
    """Service Community Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar service_name: The name of the bgp community. e.g. Skype.
    :vartype service_name: str
    :ivar bgp_communities: Get a list of bgp communities.
    :vartype bgp_communities: list[~azure.mgmt.network.v2018_04_01.models.BGPCommunity]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'service_name': {'key': 'properties.serviceName', 'type': 'str'},
        'bgp_communities': {'key': 'properties.bgpCommunities', 'type': '[BGPCommunity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword service_name: The name of the bgp community. e.g. Skype.
        :paramtype service_name: str
        :keyword bgp_communities: Get a list of bgp communities.
        :paramtype bgp_communities: list[~azure.mgmt.network.v2018_04_01.models.BGPCommunity]
        """
        super(BgpServiceCommunity, self).__init__(**kwargs)
        self.service_name = kwargs.get('service_name', None)
        self.bgp_communities = kwargs.get('bgp_communities', None)


class BgpServiceCommunityListResult(msrest.serialization.Model):
    """Response for the ListServiceCommunity API service call.

    :ivar value: A list of service community resources.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.BgpServiceCommunity]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpServiceCommunity]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of service community resources.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.BgpServiceCommunity]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(BgpServiceCommunityListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class BgpSettings(msrest.serialization.Model):
    """BGP settings details.

    :ivar asn: The BGP speaker's ASN.
    :vartype asn: long
    :ivar bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
    :vartype bgp_peering_address: str
    :ivar peer_weight: The weight added to routes learned from this BGP speaker.
    :vartype peer_weight: int
    """

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'long'},
        'bgp_peering_address': {'key': 'bgpPeeringAddress', 'type': 'str'},
        'peer_weight': {'key': 'peerWeight', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword asn: The BGP speaker's ASN.
        :paramtype asn: long
        :keyword bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
        :paramtype bgp_peering_address: str
        :keyword peer_weight: The weight added to routes learned from this BGP speaker.
        :paramtype peer_weight: int
        """
        super(BgpSettings, self).__init__(**kwargs)
        self.asn = kwargs.get('asn', None)
        self.bgp_peering_address = kwargs.get('bgp_peering_address', None)
        self.peer_weight = kwargs.get('peer_weight', None)


class ConnectionMonitor(msrest.serialization.Model):
    """Parameters that define the operation to create a connection monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Connection monitor location.
    :vartype location: str
    :ivar tags: A set of tags. Connection monitor tags.
    :vartype tags: dict[str, str]
    :ivar source: Required. Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
    :ivar destination: Required. Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    """

    _validation = {
        'source': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'source': {'key': 'properties.source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'properties.destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'properties.autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'properties.monitoringIntervalInSeconds', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Connection monitor location.
        :paramtype location: str
        :keyword tags: A set of tags. Connection monitor tags.
        :paramtype tags: dict[str, str]
        :keyword source: Required. Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
        :keyword destination: Required. Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        """
        super(ConnectionMonitor, self).__init__(**kwargs)
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.source = kwargs['source']
        self.destination = kwargs['destination']
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)


class ConnectionMonitorDestination(msrest.serialization.Model):
    """Describes the destination of connection monitor.

    :ivar resource_id: The ID of the resource used as the destination by connection monitor.
    :vartype resource_id: str
    :ivar address: Address of the connection monitor destination (IP or domain name).
    :vartype address: str
    :ivar port: The destination port used by connection monitor.
    :vartype port: int
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: The ID of the resource used as the destination by connection monitor.
        :paramtype resource_id: str
        :keyword address: Address of the connection monitor destination (IP or domain name).
        :paramtype address: str
        :keyword port: The destination port used by connection monitor.
        :paramtype port: int
        """
        super(ConnectionMonitorDestination, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.address = kwargs.get('address', None)
        self.port = kwargs.get('port', None)


class ConnectionMonitorListResult(msrest.serialization.Model):
    """List of connection monitors.

    :ivar value: Information about connection monitors.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorResult]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConnectionMonitorResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Information about connection monitors.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorResult]
        """
        super(ConnectionMonitorListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ConnectionMonitorParameters(msrest.serialization.Model):
    """Parameters that define the operation to create a connection monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar source: Required. Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
    :ivar destination: Required. Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    """

    _validation = {
        'source': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'monitoringIntervalInSeconds', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Required. Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
        :keyword destination: Required. Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        """
        super(ConnectionMonitorParameters, self).__init__(**kwargs)
        self.source = kwargs['source']
        self.destination = kwargs['destination']
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)


class ConnectionMonitorQueryResult(msrest.serialization.Model):
    """List of connection states snapshots.

    :ivar source_status: Status of connection monitor source. Possible values include: "Uknown",
     "Active", "Inactive".
    :vartype source_status: str or
     ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSourceStatus
    :ivar states: Information about connection states.
    :vartype states: list[~azure.mgmt.network.v2018_04_01.models.ConnectionStateSnapshot]
    """

    _attribute_map = {
        'source_status': {'key': 'sourceStatus', 'type': 'str'},
        'states': {'key': 'states', 'type': '[ConnectionStateSnapshot]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source_status: Status of connection monitor source. Possible values include: "Uknown",
         "Active", "Inactive".
        :paramtype source_status: str or
         ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSourceStatus
        :keyword states: Information about connection states.
        :paramtype states: list[~azure.mgmt.network.v2018_04_01.models.ConnectionStateSnapshot]
        """
        super(ConnectionMonitorQueryResult, self).__init__(**kwargs)
        self.source_status = kwargs.get('source_status', None)
        self.states = kwargs.get('states', None)


class ConnectionMonitorResult(msrest.serialization.Model):
    """Information about the connection monitor.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the connection monitor.
    :vartype name: str
    :ivar id: ID of the connection monitor.
    :vartype id: str
    :ivar etag:
    :vartype etag: str
    :ivar type: Connection monitor type.
    :vartype type: str
    :ivar location: Connection monitor location.
    :vartype location: str
    :ivar tags: A set of tags. Connection monitor tags.
    :vartype tags: dict[str, str]
    :ivar source: Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
    :ivar destination: Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar provisioning_state: The provisioning state of the connection monitor. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    :ivar start_time: The date and time when the connection monitor was started.
    :vartype start_time: ~datetime.datetime
    :ivar monitoring_status: The monitoring status of the connection monitor.
    :vartype monitoring_status: str
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'source': {'key': 'properties.source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'properties.destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'properties.autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'properties.monitoringIntervalInSeconds', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
        'monitoring_status': {'key': 'properties.monitoringStatus', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword etag:
        :paramtype etag: str
        :keyword location: Connection monitor location.
        :paramtype location: str
        :keyword tags: A set of tags. Connection monitor tags.
        :paramtype tags: dict[str, str]
        :keyword source: Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
        :keyword destination: Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword provisioning_state: The provisioning state of the connection monitor. Possible values
         include: "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        :keyword start_time: The date and time when the connection monitor was started.
        :paramtype start_time: ~datetime.datetime
        :keyword monitoring_status: The monitoring status of the connection monitor.
        :paramtype monitoring_status: str
        """
        super(ConnectionMonitorResult, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.etag = kwargs.get('etag', "A unique read-only string that changes whenever the resource is updated.")
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.source = kwargs.get('source', None)
        self.destination = kwargs.get('destination', None)
        self.auto_start = kwargs.get('auto_start', True)
        self.monitoring_interval_in_seconds = kwargs.get('monitoring_interval_in_seconds', 60)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.start_time = kwargs.get('start_time', None)
        self.monitoring_status = kwargs.get('monitoring_status', None)


class ConnectionMonitorResultProperties(ConnectionMonitorParameters):
    """Describes the properties of a connection monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar source: Required. Describes the source of connection monitor.
    :vartype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
    :ivar destination: Required. Describes the destination of connection monitor.
    :vartype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
    :ivar auto_start: Determines if the connection monitor will start automatically once created.
    :vartype auto_start: bool
    :ivar monitoring_interval_in_seconds: Monitoring interval in seconds.
    :vartype monitoring_interval_in_seconds: int
    :ivar provisioning_state: The provisioning state of the connection monitor. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    :ivar start_time: The date and time when the connection monitor was started.
    :vartype start_time: ~datetime.datetime
    :ivar monitoring_status: The monitoring status of the connection monitor.
    :vartype monitoring_status: str
    """

    _validation = {
        'source': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectionMonitorSource'},
        'destination': {'key': 'destination', 'type': 'ConnectionMonitorDestination'},
        'auto_start': {'key': 'autoStart', 'type': 'bool'},
        'monitoring_interval_in_seconds': {'key': 'monitoringIntervalInSeconds', 'type': 'int'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'monitoring_status': {'key': 'monitoringStatus', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Required. Describes the source of connection monitor.
        :paramtype source: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorSource
        :keyword destination: Required. Describes the destination of connection monitor.
        :paramtype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectionMonitorDestination
        :keyword auto_start: Determines if the connection monitor will start automatically once
         created.
        :paramtype auto_start: bool
        :keyword monitoring_interval_in_seconds: Monitoring interval in seconds.
        :paramtype monitoring_interval_in_seconds: int
        :keyword provisioning_state: The provisioning state of the connection monitor. Possible values
         include: "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        :keyword start_time: The date and time when the connection monitor was started.
        :paramtype start_time: ~datetime.datetime
        :keyword monitoring_status: The monitoring status of the connection monitor.
        :paramtype monitoring_status: str
        """
        super(ConnectionMonitorResultProperties, self).__init__(**kwargs)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.start_time = kwargs.get('start_time', None)
        self.monitoring_status = kwargs.get('monitoring_status', None)


class ConnectionMonitorSource(msrest.serialization.Model):
    """Describes the source of connection monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Required. The ID of the resource used as the source by connection monitor.
    :vartype resource_id: str
    :ivar port: The source port used by connection monitor.
    :vartype port: int
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: Required. The ID of the resource used as the source by connection
         monitor.
        :paramtype resource_id: str
        :keyword port: The source port used by connection monitor.
        :paramtype port: int
        """
        super(ConnectionMonitorSource, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.port = kwargs.get('port', None)


class ConnectionResetSharedKey(msrest.serialization.Model):
    """The virtual network connection reset shared key.

    All required parameters must be populated in order to send to Azure.

    :ivar key_length: Required. The virtual network connection reset shared key length, should
     between 1 and 128.
    :vartype key_length: int
    """

    _validation = {
        'key_length': {'required': True, 'maximum': 128, 'minimum': 1},
    }

    _attribute_map = {
        'key_length': {'key': 'keyLength', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key_length: Required. The virtual network connection reset shared key length, should
         between 1 and 128.
        :paramtype key_length: int
        """
        super(ConnectionResetSharedKey, self).__init__(**kwargs)
        self.key_length = kwargs['key_length']


class ConnectionSharedKey(SubResource):
    """Response for GetConnectionSharedKey API service call.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar value: Required. The virtual network connection shared key value.
    :vartype value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword value: Required. The virtual network connection shared key value.
        :paramtype value: str
        """
        super(ConnectionSharedKey, self).__init__(**kwargs)
        self.value = kwargs['value']


class ConnectionStateSnapshot(msrest.serialization.Model):
    """Connection state snapshot.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar connection_state: The connection state. Possible values include: "Reachable",
     "Unreachable", "Unknown".
    :vartype connection_state: str or ~azure.mgmt.network.v2018_04_01.models.ConnectionState
    :ivar start_time: The start time of the connection snapshot.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the connection snapshot.
    :vartype end_time: ~datetime.datetime
    :ivar evaluation_state: Connectivity analysis evaluation state. Possible values include:
     "NotStarted", "InProgress", "Completed".
    :vartype evaluation_state: str or ~azure.mgmt.network.v2018_04_01.models.EvaluationState
    :ivar hops: List of hops between the source and the destination.
    :vartype hops: list[~azure.mgmt.network.v2018_04_01.models.ConnectivityHop]
    """

    _validation = {
        'hops': {'readonly': True},
    }

    _attribute_map = {
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'evaluation_state': {'key': 'evaluationState', 'type': 'str'},
        'hops': {'key': 'hops', 'type': '[ConnectivityHop]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_state: The connection state. Possible values include: "Reachable",
         "Unreachable", "Unknown".
        :paramtype connection_state: str or ~azure.mgmt.network.v2018_04_01.models.ConnectionState
        :keyword start_time: The start time of the connection snapshot.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the connection snapshot.
        :paramtype end_time: ~datetime.datetime
        :keyword evaluation_state: Connectivity analysis evaluation state. Possible values include:
         "NotStarted", "InProgress", "Completed".
        :paramtype evaluation_state: str or ~azure.mgmt.network.v2018_04_01.models.EvaluationState
        """
        super(ConnectionStateSnapshot, self).__init__(**kwargs)
        self.connection_state = kwargs.get('connection_state', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.evaluation_state = kwargs.get('evaluation_state', None)
        self.hops = None


class ConnectivityDestination(msrest.serialization.Model):
    """Parameters that define destination of connection.

    :ivar resource_id: The ID of the resource to which a connection attempt will be made.
    :vartype resource_id: str
    :ivar address: The IP address or URI the resource to which a connection attempt will be made.
    :vartype address: str
    :ivar port: Port on which check connectivity will be performed.
    :vartype port: int
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: The ID of the resource to which a connection attempt will be made.
        :paramtype resource_id: str
        :keyword address: The IP address or URI the resource to which a connection attempt will be
         made.
        :paramtype address: str
        :keyword port: Port on which check connectivity will be performed.
        :paramtype port: int
        """
        super(ConnectivityDestination, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.address = kwargs.get('address', None)
        self.port = kwargs.get('port', None)


class ConnectivityHop(msrest.serialization.Model):
    """Information about a hop between the source and the destination.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The type of the hop.
    :vartype type: str
    :ivar id: The ID of the hop.
    :vartype id: str
    :ivar address: The IP address of the hop.
    :vartype address: str
    :ivar resource_id: The ID of the resource corresponding to this hop.
    :vartype resource_id: str
    :ivar next_hop_ids: List of next hop identifiers.
    :vartype next_hop_ids: list[str]
    :ivar issues: List of issues.
    :vartype issues: list[~azure.mgmt.network.v2018_04_01.models.ConnectivityIssue]
    """

    _validation = {
        'type': {'readonly': True},
        'id': {'readonly': True},
        'address': {'readonly': True},
        'resource_id': {'readonly': True},
        'next_hop_ids': {'readonly': True},
        'issues': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'next_hop_ids': {'key': 'nextHopIds', 'type': '[str]'},
        'issues': {'key': 'issues', 'type': '[ConnectivityIssue]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityHop, self).__init__(**kwargs)
        self.type = None
        self.id = None
        self.address = None
        self.resource_id = None
        self.next_hop_ids = None
        self.issues = None


class ConnectivityInformation(msrest.serialization.Model):
    """Information on the connectivity status.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar hops: List of hops between the source and the destination.
    :vartype hops: list[~azure.mgmt.network.v2018_04_01.models.ConnectivityHop]
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connected", "Disconnected", "Degraded".
    :vartype connection_status: str or ~azure.mgmt.network.v2018_04_01.models.ConnectionStatus
    :ivar avg_latency_in_ms: Average latency in milliseconds.
    :vartype avg_latency_in_ms: int
    :ivar min_latency_in_ms: Minimum latency in milliseconds.
    :vartype min_latency_in_ms: int
    :ivar max_latency_in_ms: Maximum latency in milliseconds.
    :vartype max_latency_in_ms: int
    :ivar probes_sent: Total number of probes sent.
    :vartype probes_sent: int
    :ivar probes_failed: Number of failed probes.
    :vartype probes_failed: int
    """

    _validation = {
        'hops': {'readonly': True},
        'connection_status': {'readonly': True},
        'avg_latency_in_ms': {'readonly': True},
        'min_latency_in_ms': {'readonly': True},
        'max_latency_in_ms': {'readonly': True},
        'probes_sent': {'readonly': True},
        'probes_failed': {'readonly': True},
    }

    _attribute_map = {
        'hops': {'key': 'hops', 'type': '[ConnectivityHop]'},
        'connection_status': {'key': 'connectionStatus', 'type': 'str'},
        'avg_latency_in_ms': {'key': 'avgLatencyInMs', 'type': 'int'},
        'min_latency_in_ms': {'key': 'minLatencyInMs', 'type': 'int'},
        'max_latency_in_ms': {'key': 'maxLatencyInMs', 'type': 'int'},
        'probes_sent': {'key': 'probesSent', 'type': 'int'},
        'probes_failed': {'key': 'probesFailed', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityInformation, self).__init__(**kwargs)
        self.hops = None
        self.connection_status = None
        self.avg_latency_in_ms = None
        self.min_latency_in_ms = None
        self.max_latency_in_ms = None
        self.probes_sent = None
        self.probes_failed = None


class ConnectivityIssue(msrest.serialization.Model):
    """Information about an issue encountered in the process of checking for connectivity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar origin: The origin of the issue. Possible values include: "Local", "Inbound", "Outbound".
    :vartype origin: str or ~azure.mgmt.network.v2018_04_01.models.Origin
    :ivar severity: The severity of the issue. Possible values include: "Error", "Warning".
    :vartype severity: str or ~azure.mgmt.network.v2018_04_01.models.Severity
    :ivar type: The type of issue. Possible values include: "Unknown", "AgentStopped",
     "GuestFirewall", "DnsResolution", "SocketBind", "NetworkSecurityRule", "UserDefinedRoute",
     "PortThrottled", "Platform".
    :vartype type: str or ~azure.mgmt.network.v2018_04_01.models.IssueType
    :ivar context: Provides additional context on the issue.
    :vartype context: list[dict[str, str]]
    """

    _validation = {
        'origin': {'readonly': True},
        'severity': {'readonly': True},
        'type': {'readonly': True},
        'context': {'readonly': True},
    }

    _attribute_map = {
        'origin': {'key': 'origin', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'context': {'key': 'context', 'type': '[{str}]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConnectivityIssue, self).__init__(**kwargs)
        self.origin = None
        self.severity = None
        self.type = None
        self.context = None


class ConnectivityParameters(msrest.serialization.Model):
    """Parameters that determine how the connectivity check will be performed.

    All required parameters must be populated in order to send to Azure.

    :ivar source: Required. Parameters that define the source of the connection.
    :vartype source: ~azure.mgmt.network.v2018_04_01.models.ConnectivitySource
    :ivar destination: Required. Parameters that define destination of connection.
    :vartype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectivityDestination
    :ivar protocol: Network protocol. Possible values include: "Tcp", "Http", "Https", "Icmp".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.Protocol
    :ivar protocol_configuration: Configuration of the protocol.
    :vartype protocol_configuration: ~azure.mgmt.network.v2018_04_01.models.ProtocolConfiguration
    """

    _validation = {
        'source': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'ConnectivitySource'},
        'destination': {'key': 'destination', 'type': 'ConnectivityDestination'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'protocol_configuration': {'key': 'protocolConfiguration', 'type': 'ProtocolConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword source: Required. Parameters that define the source of the connection.
        :paramtype source: ~azure.mgmt.network.v2018_04_01.models.ConnectivitySource
        :keyword destination: Required. Parameters that define destination of connection.
        :paramtype destination: ~azure.mgmt.network.v2018_04_01.models.ConnectivityDestination
        :keyword protocol: Network protocol. Possible values include: "Tcp", "Http", "Https", "Icmp".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.Protocol
        :keyword protocol_configuration: Configuration of the protocol.
        :paramtype protocol_configuration: ~azure.mgmt.network.v2018_04_01.models.ProtocolConfiguration
        """
        super(ConnectivityParameters, self).__init__(**kwargs)
        self.source = kwargs['source']
        self.destination = kwargs['destination']
        self.protocol = kwargs.get('protocol', None)
        self.protocol_configuration = kwargs.get('protocol_configuration', None)


class ConnectivitySource(msrest.serialization.Model):
    """Parameters that define the source of the connection.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Required. The ID of the resource from which a connectivity check will be
     initiated.
    :vartype resource_id: str
    :ivar port: The source port from which a connectivity check will be performed.
    :vartype port: int
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_id: Required. The ID of the resource from which a connectivity check will be
         initiated.
        :paramtype resource_id: str
        :keyword port: The source port from which a connectivity check will be performed.
        :paramtype port: int
        """
        super(ConnectivitySource, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.port = kwargs.get('port', None)


class DdosProtectionPlan(msrest.serialization.Model):
    """A DDoS protection plan in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the DDoS protection plan resource. It
     uniquely identifies the resource, even if the user changes its name or migrate the resource
     across subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the DDoS protection plan resource. Possible
     values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar virtual_networks: The list of virtual networks associated with the DDoS protection plan
     resource. This list is read-only.
    :vartype virtual_networks: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'virtual_networks': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'virtual_networks': {'key': 'properties.virtualNetworks', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(DdosProtectionPlan, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None
        self.virtual_networks = None


class DdosProtectionPlanListResult(msrest.serialization.Model):
    """A list of DDoS protection plans.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of DDoS protection plans.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.DdosProtectionPlan]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DdosProtectionPlan]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of DDoS protection plans.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.DdosProtectionPlan]
        """
        super(DdosProtectionPlanListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class DeviceProperties(msrest.serialization.Model):
    """List of properties of the device.

    :ivar device_vendor: Name of the device Vendor.
    :vartype device_vendor: str
    :ivar device_model: Model of the device.
    :vartype device_model: str
    :ivar link_speed_in_mbps: Link speed.
    :vartype link_speed_in_mbps: int
    """

    _attribute_map = {
        'device_vendor': {'key': 'deviceVendor', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'link_speed_in_mbps': {'key': 'linkSpeedInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword device_vendor: Name of the device Vendor.
        :paramtype device_vendor: str
        :keyword device_model: Model of the device.
        :paramtype device_model: str
        :keyword link_speed_in_mbps: Link speed.
        :paramtype link_speed_in_mbps: int
        """
        super(DeviceProperties, self).__init__(**kwargs)
        self.device_vendor = kwargs.get('device_vendor', None)
        self.device_model = kwargs.get('device_model', None)
        self.link_speed_in_mbps = kwargs.get('link_speed_in_mbps', None)


class DhcpOptions(msrest.serialization.Model):
    """DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.

    :ivar dns_servers: The list of DNS servers IP addresses.
    :vartype dns_servers: list[str]
    """

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dns_servers: The list of DNS servers IP addresses.
        :paramtype dns_servers: list[str]
        """
        super(DhcpOptions, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)


class Dimension(msrest.serialization.Model):
    """Dimension of the metric.

    :ivar name: The name of the dimension.
    :vartype name: str
    :ivar display_name: The display name of the dimension.
    :vartype display_name: str
    :ivar internal_name: The internal name of the dimension.
    :vartype internal_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'internal_name': {'key': 'internalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the dimension.
        :paramtype name: str
        :keyword display_name: The display name of the dimension.
        :paramtype display_name: str
        :keyword internal_name: The internal name of the dimension.
        :paramtype internal_name: str
        """
        super(Dimension, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.internal_name = kwargs.get('internal_name', None)


class DnsNameAvailabilityResult(msrest.serialization.Model):
    """Response for the CheckDnsNameAvailability API service call.

    :ivar available: Domain availability (True/False).
    :vartype available: bool
    """

    _attribute_map = {
        'available': {'key': 'available', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword available: Domain availability (True/False).
        :paramtype available: bool
        """
        super(DnsNameAvailabilityResult, self).__init__(**kwargs)
        self.available = kwargs.get('available', None)


class EffectiveNetworkSecurityGroup(msrest.serialization.Model):
    """Effective network security group.

    :ivar network_security_group: The ID of network security group that is applied.
    :vartype network_security_group: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar association: Associated resources.
    :vartype association:
     ~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityGroupAssociation
    :ivar effective_security_rules: A collection of effective security rules.
    :vartype effective_security_rules:
     list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityRule]
    :ivar tag_map: Mapping of tags to list of IP Addresses included within the tag.
    :vartype tag_map: str
    """

    _attribute_map = {
        'network_security_group': {'key': 'networkSecurityGroup', 'type': 'SubResource'},
        'association': {'key': 'association', 'type': 'EffectiveNetworkSecurityGroupAssociation'},
        'effective_security_rules': {'key': 'effectiveSecurityRules', 'type': '[EffectiveNetworkSecurityRule]'},
        'tag_map': {'key': 'tagMap', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_security_group: The ID of network security group that is applied.
        :paramtype network_security_group: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword association: Associated resources.
        :paramtype association:
         ~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityGroupAssociation
        :keyword effective_security_rules: A collection of effective security rules.
        :paramtype effective_security_rules:
         list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityRule]
        :keyword tag_map: Mapping of tags to list of IP Addresses included within the tag.
        :paramtype tag_map: str
        """
        super(EffectiveNetworkSecurityGroup, self).__init__(**kwargs)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.association = kwargs.get('association', None)
        self.effective_security_rules = kwargs.get('effective_security_rules', None)
        self.tag_map = kwargs.get('tag_map', None)


class EffectiveNetworkSecurityGroupAssociation(msrest.serialization.Model):
    """The effective network security group association.

    :ivar subnet: The ID of the subnet if assigned.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar network_interface: The ID of the network interface if assigned.
    :vartype network_interface: ~azure.mgmt.network.v2018_04_01.models.SubResource
    """

    _attribute_map = {
        'subnet': {'key': 'subnet', 'type': 'SubResource'},
        'network_interface': {'key': 'networkInterface', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword subnet: The ID of the subnet if assigned.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword network_interface: The ID of the network interface if assigned.
        :paramtype network_interface: ~azure.mgmt.network.v2018_04_01.models.SubResource
        """
        super(EffectiveNetworkSecurityGroupAssociation, self).__init__(**kwargs)
        self.subnet = kwargs.get('subnet', None)
        self.network_interface = kwargs.get('network_interface', None)


class EffectiveNetworkSecurityGroupListResult(msrest.serialization.Model):
    """Response for list effective network security groups API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of effective network security groups.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveNetworkSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of effective network security groups.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityGroup]
        """
        super(EffectiveNetworkSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EffectiveNetworkSecurityRule(msrest.serialization.Model):
    """Effective network security rules.

    :ivar name: The name of the security rule specified by the user (if created by the user).
    :vartype name: str
    :ivar protocol: The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp',
     and 'All'. Possible values include: "Tcp", "Udp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.EffectiveSecurityRuleProtocol
    :ivar source_port_range: The source port or range.
    :vartype source_port_range: str
    :ivar destination_port_range: The destination port or range.
    :vartype destination_port_range: str
    :ivar source_port_ranges: The source port ranges. Expected values include a single integer
     between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
    :vartype source_port_ranges: list[str]
    :ivar destination_port_ranges: The destination port ranges. Expected values include a single
     integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
    :vartype destination_port_ranges: list[str]
    :ivar source_address_prefix: The source address prefix.
    :vartype source_address_prefix: str
    :ivar destination_address_prefix: The destination address prefix.
    :vartype destination_address_prefix: str
    :ivar source_address_prefixes: The source address prefixes. Expected values include CIDR IP
     ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the
     asterisk (*).
    :vartype source_address_prefixes: list[str]
    :ivar destination_address_prefixes: The destination address prefixes. Expected values include
     CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and
     the asterisk (*).
    :vartype destination_address_prefixes: list[str]
    :ivar expanded_source_address_prefix: The expanded source address prefix.
    :vartype expanded_source_address_prefix: list[str]
    :ivar expanded_destination_address_prefix: Expanded destination address prefix.
    :vartype expanded_destination_address_prefix: list[str]
    :ivar access: Whether network traffic is allowed or denied. Possible values are: 'Allow' and
     'Deny'. Possible values include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAccess
    :ivar priority: The priority of the rule.
    :vartype priority: int
    :ivar direction: The direction of the rule. Possible values are: 'Inbound and Outbound'.
     Possible values include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleDirection
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_port_range': {'key': 'sourcePortRange', 'type': 'str'},
        'destination_port_range': {'key': 'destinationPortRange', 'type': 'str'},
        'source_port_ranges': {'key': 'sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'destinationPortRanges', 'type': '[str]'},
        'source_address_prefix': {'key': 'sourceAddressPrefix', 'type': 'str'},
        'destination_address_prefix': {'key': 'destinationAddressPrefix', 'type': 'str'},
        'source_address_prefixes': {'key': 'sourceAddressPrefixes', 'type': '[str]'},
        'destination_address_prefixes': {'key': 'destinationAddressPrefixes', 'type': '[str]'},
        'expanded_source_address_prefix': {'key': 'expandedSourceAddressPrefix', 'type': '[str]'},
        'expanded_destination_address_prefix': {'key': 'expandedDestinationAddressPrefix', 'type': '[str]'},
        'access': {'key': 'access', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'direction': {'key': 'direction', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the security rule specified by the user (if created by the user).
        :paramtype name: str
        :keyword protocol: The network protocol this rule applies to. Possible values are: 'Tcp',
         'Udp', and 'All'. Possible values include: "Tcp", "Udp", "All".
        :paramtype protocol: str or
         ~azure.mgmt.network.v2018_04_01.models.EffectiveSecurityRuleProtocol
        :keyword source_port_range: The source port or range.
        :paramtype source_port_range: str
        :keyword destination_port_range: The destination port or range.
        :paramtype destination_port_range: str
        :keyword source_port_ranges: The source port ranges. Expected values include a single integer
         between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        :paramtype source_port_ranges: list[str]
        :keyword destination_port_ranges: The destination port ranges. Expected values include a single
         integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        :paramtype destination_port_ranges: list[str]
        :keyword source_address_prefix: The source address prefix.
        :paramtype source_address_prefix: str
        :keyword destination_address_prefix: The destination address prefix.
        :paramtype destination_address_prefix: str
        :keyword source_address_prefixes: The source address prefixes. Expected values include CIDR IP
         ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the
         asterisk (*).
        :paramtype source_address_prefixes: list[str]
        :keyword destination_address_prefixes: The destination address prefixes. Expected values
         include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System
         Tags, and the asterisk (*).
        :paramtype destination_address_prefixes: list[str]
        :keyword expanded_source_address_prefix: The expanded source address prefix.
        :paramtype expanded_source_address_prefix: list[str]
        :keyword expanded_destination_address_prefix: Expanded destination address prefix.
        :paramtype expanded_destination_address_prefix: list[str]
        :keyword access: Whether network traffic is allowed or denied. Possible values are: 'Allow' and
         'Deny'. Possible values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAccess
        :keyword priority: The priority of the rule.
        :paramtype priority: int
        :keyword direction: The direction of the rule. Possible values are: 'Inbound and Outbound'.
         Possible values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleDirection
        """
        super(EffectiveNetworkSecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_port_range = kwargs.get('source_port_range', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.destination_address_prefix = kwargs.get('destination_address_prefix', None)
        self.source_address_prefixes = kwargs.get('source_address_prefixes', None)
        self.destination_address_prefixes = kwargs.get('destination_address_prefixes', None)
        self.expanded_source_address_prefix = kwargs.get('expanded_source_address_prefix', None)
        self.expanded_destination_address_prefix = kwargs.get('expanded_destination_address_prefix', None)
        self.access = kwargs.get('access', None)
        self.priority = kwargs.get('priority', None)
        self.direction = kwargs.get('direction', None)


class EffectiveRoute(msrest.serialization.Model):
    """Effective Route.

    :ivar name: The name of the user defined route. This is optional.
    :vartype name: str
    :ivar source: Who created the route. Possible values are: 'Unknown', 'User',
     'VirtualNetworkGateway', and 'Default'. Possible values include: "Unknown", "User",
     "VirtualNetworkGateway", "Default".
    :vartype source: str or ~azure.mgmt.network.v2018_04_01.models.EffectiveRouteSource
    :ivar state: The value of effective route. Possible values are: 'Active' and 'Invalid'.
     Possible values include: "Active", "Invalid".
    :vartype state: str or ~azure.mgmt.network.v2018_04_01.models.EffectiveRouteState
    :ivar address_prefix: The address prefixes of the effective routes in CIDR notation.
    :vartype address_prefix: list[str]
    :ivar next_hop_ip_address: The IP address of the next hop of the effective route.
    :vartype next_hop_ip_address: list[str]
    :ivar next_hop_type: The type of Azure hop the packet should be sent to. Possible values are:
     'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
     values include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.RouteNextHopType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'address_prefix': {'key': 'addressPrefix', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the user defined route. This is optional.
        :paramtype name: str
        :keyword source: Who created the route. Possible values are: 'Unknown', 'User',
         'VirtualNetworkGateway', and 'Default'. Possible values include: "Unknown", "User",
         "VirtualNetworkGateway", "Default".
        :paramtype source: str or ~azure.mgmt.network.v2018_04_01.models.EffectiveRouteSource
        :keyword state: The value of effective route. Possible values are: 'Active' and 'Invalid'.
         Possible values include: "Active", "Invalid".
        :paramtype state: str or ~azure.mgmt.network.v2018_04_01.models.EffectiveRouteState
        :keyword address_prefix: The address prefixes of the effective routes in CIDR notation.
        :paramtype address_prefix: list[str]
        :keyword next_hop_ip_address: The IP address of the next hop of the effective route.
        :paramtype next_hop_ip_address: list[str]
        :keyword next_hop_type: The type of Azure hop the packet should be sent to. Possible values
         are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
         values include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.RouteNextHopType
        """
        super(EffectiveRoute, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.source = kwargs.get('source', None)
        self.state = kwargs.get('state', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)


class EffectiveRouteListResult(msrest.serialization.Model):
    """Response for list effective route API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of effective routes.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.EffectiveRoute]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveRoute]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of effective routes.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.EffectiveRoute]
        """
        super(EffectiveRouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EndpointServiceResult(SubResource):
    """Endpoint service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the endpoint service.
    :vartype name: str
    :ivar type: Type of the endpoint service.
    :vartype type: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(EndpointServiceResult, self).__init__(**kwargs)
        self.name = None
        self.type = None


class EndpointServicesListResult(msrest.serialization.Model):
    """Response for the ListAvailableEndpointServices API service call.

    :ivar value: List of available endpoint services in a region.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.EndpointServiceResult]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EndpointServiceResult]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of available endpoint services in a region.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.EndpointServiceResult]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(EndpointServicesListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class Error(msrest.serialization.Model):
    """Error.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    :ivar target:
    :vartype target: str
    :ivar details:
    :vartype details: list[~azure.mgmt.network.v2018_04_01.models.ErrorDetails]
    :ivar inner_error:
    :vartype inner_error: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        :keyword target:
        :paramtype target: str
        :keyword details:
        :paramtype details: list[~azure.mgmt.network.v2018_04_01.models.ErrorDetails]
        :keyword inner_error:
        :paramtype inner_error: str
        """
        super(Error, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.inner_error = kwargs.get('inner_error', None)


class ErrorDetails(msrest.serialization.Model):
    """ErrorDetails.

    :ivar code:
    :vartype code: str
    :ivar target:
    :vartype target: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: str
        :keyword target:
        :paramtype target: str
        :keyword message:
        :paramtype message: str
        """
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.target = kwargs.get('target', None)
        self.message = kwargs.get('message', None)


class ExpressRouteCircuit(Resource):
    """ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The SKU.
    :vartype sku: ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSku
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar allow_classic_operations: Allow classic operations.
    :vartype allow_classic_operations: bool
    :ivar circuit_provisioning_state: The CircuitProvisioningState state of the resource.
    :vartype circuit_provisioning_state: str
    :ivar service_provider_provisioning_state: The ServiceProviderProvisioningState state of the
     resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and
     'Deprovisioning'. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
     "Deprovisioning".
    :vartype service_provider_provisioning_state: str or
     ~azure.mgmt.network.v2018_04_01.models.ServiceProviderProvisioningState
    :ivar authorizations: The list of authorizations.
    :vartype authorizations:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitAuthorization]
    :ivar peerings: The list of peerings.
    :vartype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
    :ivar service_key: The ServiceKey.
    :vartype service_key: str
    :ivar service_provider_notes: The ServiceProviderNotes.
    :vartype service_provider_notes: str
    :ivar service_provider_properties: The ServiceProviderProperties.
    :vartype service_provider_properties:
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitServiceProviderProperties
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'ExpressRouteCircuitSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'allow_classic_operations': {'key': 'properties.allowClassicOperations', 'type': 'bool'},
        'circuit_provisioning_state': {'key': 'properties.circuitProvisioningState', 'type': 'str'},
        'service_provider_provisioning_state': {'key': 'properties.serviceProviderProvisioningState', 'type': 'str'},
        'authorizations': {'key': 'properties.authorizations', 'type': '[ExpressRouteCircuitAuthorization]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'service_key': {'key': 'properties.serviceKey', 'type': 'str'},
        'service_provider_notes': {'key': 'properties.serviceProviderNotes', 'type': 'str'},
        'service_provider_properties': {'key': 'properties.serviceProviderProperties', 'type': 'ExpressRouteCircuitServiceProviderProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The SKU.
        :paramtype sku: ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSku
        :keyword allow_classic_operations: Allow classic operations.
        :paramtype allow_classic_operations: bool
        :keyword circuit_provisioning_state: The CircuitProvisioningState state of the resource.
        :paramtype circuit_provisioning_state: str
        :keyword service_provider_provisioning_state: The ServiceProviderProvisioningState state of the
         resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and
         'Deprovisioning'. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
         "Deprovisioning".
        :paramtype service_provider_provisioning_state: str or
         ~azure.mgmt.network.v2018_04_01.models.ServiceProviderProvisioningState
        :keyword authorizations: The list of authorizations.
        :paramtype authorizations:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitAuthorization]
        :keyword peerings: The list of peerings.
        :paramtype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
        :keyword service_key: The ServiceKey.
        :paramtype service_key: str
        :keyword service_provider_notes: The ServiceProviderNotes.
        :paramtype service_provider_notes: str
        :keyword service_provider_properties: The ServiceProviderProperties.
        :paramtype service_provider_properties:
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitServiceProviderProperties
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        """
        super(ExpressRouteCircuit, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.allow_classic_operations = kwargs.get('allow_classic_operations', None)
        self.circuit_provisioning_state = kwargs.get('circuit_provisioning_state', None)
        self.service_provider_provisioning_state = kwargs.get('service_provider_provisioning_state', None)
        self.authorizations = kwargs.get('authorizations', None)
        self.peerings = kwargs.get('peerings', None)
        self.service_key = kwargs.get('service_key', None)
        self.service_provider_notes = kwargs.get('service_provider_notes', None)
        self.service_provider_properties = kwargs.get('service_provider_properties', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)


class ExpressRouteCircuitArpTable(msrest.serialization.Model):
    """The ARP table associated with the ExpressRouteCircuit.

    :ivar age: Entry age in minutes.
    :vartype age: int
    :ivar interface: Interface address.
    :vartype interface: str
    :ivar ip_address: The IP address.
    :vartype ip_address: str
    :ivar mac_address: The MAC address.
    :vartype mac_address: str
    """

    _attribute_map = {
        'age': {'key': 'age', 'type': 'int'},
        'interface': {'key': 'interface', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword age: Entry age in minutes.
        :paramtype age: int
        :keyword interface: Interface address.
        :paramtype interface: str
        :keyword ip_address: The IP address.
        :paramtype ip_address: str
        :keyword mac_address: The MAC address.
        :paramtype mac_address: str
        """
        super(ExpressRouteCircuitArpTable, self).__init__(**kwargs)
        self.age = kwargs.get('age', None)
        self.interface = kwargs.get('interface', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.mac_address = kwargs.get('mac_address', None)


class ExpressRouteCircuitAuthorization(SubResource):
    """Authorization in an ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar authorization_key: The authorization key.
    :vartype authorization_key: str
    :ivar authorization_use_status: AuthorizationUseStatus. Possible values are: 'Available' and
     'InUse'. Possible values include: "Available", "InUse".
    :vartype authorization_use_status: str or
     ~azure.mgmt.network.v2018_04_01.models.AuthorizationUseStatus
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'authorization_use_status': {'key': 'properties.authorizationUseStatus', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword authorization_key: The authorization key.
        :paramtype authorization_key: str
        :keyword authorization_use_status: AuthorizationUseStatus. Possible values are: 'Available' and
         'InUse'. Possible values include: "Available", "InUse".
        :paramtype authorization_use_status: str or
         ~azure.mgmt.network.v2018_04_01.models.AuthorizationUseStatus
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(ExpressRouteCircuitAuthorization, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.authorization_key = kwargs.get('authorization_key', None)
        self.authorization_use_status = kwargs.get('authorization_use_status', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ExpressRouteCircuitConnection(SubResource):
    """Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the circuit initiating connection.
    :vartype express_route_circuit_peering: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
     Resource of the peered circuit.
    :vartype peer_express_route_circuit_peering: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
    :vartype address_prefix: str
    :ivar authorization_key: The authorization key.
    :vartype authorization_key: str
    :ivar circuit_connection_status: Express Route Circuit Connection State. Possible values are:
     'Connected' and 'Disconnected'. Possible values include: "Connected", "Connecting",
     "Disconnected".
    :vartype circuit_connection_status: str or
     ~azure.mgmt.network.v2018_04_01.models.CircuitConnectionStatus
    :ivar provisioning_state: Provisioning state of the circuit connection resource. Possible
     values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'etag': {'readonly': True},
        'circuit_connection_status': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'express_route_circuit_peering': {'key': 'properties.expressRouteCircuitPeering', 'type': 'SubResource'},
        'peer_express_route_circuit_peering': {'key': 'properties.peerExpressRouteCircuitPeering', 'type': 'SubResource'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'circuit_connection_status': {'key': 'properties.circuitConnectionStatus', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the circuit initiating connection.
        :paramtype express_route_circuit_peering: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword peer_express_route_circuit_peering: Reference to Express Route Circuit Private Peering
         Resource of the peered circuit.
        :paramtype peer_express_route_circuit_peering:
         ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword address_prefix: /29 IP address space to carve out Customer addresses for tunnels.
        :paramtype address_prefix: str
        :keyword authorization_key: The authorization key.
        :paramtype authorization_key: str
        """
        super(ExpressRouteCircuitConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.express_route_circuit_peering = kwargs.get('express_route_circuit_peering', None)
        self.peer_express_route_circuit_peering = kwargs.get('peer_express_route_circuit_peering', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.circuit_connection_status = None
        self.provisioning_state = None


class ExpressRouteCircuitListResult(msrest.serialization.Model):
    """Response for ListExpressRouteCircuit API service call.

    :ivar value: A list of ExpressRouteCircuits in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuit]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuit]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteCircuits in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuit]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitPeering(SubResource):
    """Peering in an ExpressRouteCircuit resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar peering_type: The peering type. Possible values include: "AzurePublicPeering",
     "AzurePrivatePeering", "MicrosoftPeering".
    :vartype peering_type: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringType
    :ivar state: The peering state. Possible values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringState
    :ivar azure_asn: The Azure ASN.
    :vartype azure_asn: int
    :ivar peer_asn: The peer ASN.
    :vartype peer_asn: long
    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar primary_azure_port: The primary port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The secondary port.
    :vartype secondary_azure_port: str
    :ivar shared_key: The shared key.
    :vartype shared_key: str
    :ivar vlan_id: The VLAN ID.
    :vartype vlan_id: int
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
    :ivar stats: Gets peering stats.
    :vartype stats: ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitStats
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    :ivar last_modified_by: Gets whether the provider or the customer last modified the peering.
    :vartype last_modified_by: str
    :ivar route_filter: The reference of the RouteFilter resource.
    :vartype route_filter: ~azure.mgmt.network.v2018_04_01.models.RouteFilter
    :ivar ipv6_peering_config: The IPv6 peering configuration.
    :vartype ipv6_peering_config:
     ~azure.mgmt.network.v2018_04_01.models.Ipv6ExpressRouteCircuitPeeringConfig
    :ivar connections: The list of circuit connections associated with Azure Private Peering for
     this circuit.
    :vartype connections:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitConnection]
    """

    _validation = {
        'etag': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'peering_type': {'key': 'properties.peeringType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'azure_asn': {'key': 'properties.azureASN', 'type': 'int'},
        'peer_asn': {'key': 'properties.peerASN', 'type': 'long'},
        'primary_peer_address_prefix': {'key': 'properties.primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'properties.secondaryPeerAddressPrefix', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'vlan_id': {'key': 'properties.vlanId', 'type': 'int'},
        'microsoft_peering_config': {'key': 'properties.microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'stats': {'key': 'properties.stats', 'type': 'ExpressRouteCircuitStats'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'route_filter': {'key': 'properties.routeFilter', 'type': 'RouteFilter'},
        'ipv6_peering_config': {'key': 'properties.ipv6PeeringConfig', 'type': 'Ipv6ExpressRouteCircuitPeeringConfig'},
        'connections': {'key': 'properties.connections', 'type': '[ExpressRouteCircuitConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword peering_type: The peering type. Possible values include: "AzurePublicPeering",
         "AzurePrivatePeering", "MicrosoftPeering".
        :paramtype peering_type: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringType
        :keyword state: The peering state. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringState
        :keyword azure_asn: The Azure ASN.
        :paramtype azure_asn: int
        :keyword peer_asn: The peer ASN.
        :paramtype peer_asn: long
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword primary_azure_port: The primary port.
        :paramtype primary_azure_port: str
        :keyword secondary_azure_port: The secondary port.
        :paramtype secondary_azure_port: str
        :keyword shared_key: The shared key.
        :paramtype shared_key: str
        :keyword vlan_id: The VLAN ID.
        :paramtype vlan_id: int
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
        :keyword stats: Gets peering stats.
        :paramtype stats: ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitStats
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        :keyword last_modified_by: Gets whether the provider or the customer last modified the peering.
        :paramtype last_modified_by: str
        :keyword route_filter: The reference of the RouteFilter resource.
        :paramtype route_filter: ~azure.mgmt.network.v2018_04_01.models.RouteFilter
        :keyword ipv6_peering_config: The IPv6 peering configuration.
        :paramtype ipv6_peering_config:
         ~azure.mgmt.network.v2018_04_01.models.Ipv6ExpressRouteCircuitPeeringConfig
        :keyword connections: The list of circuit connections associated with Azure Private Peering for
         this circuit.
        :paramtype connections:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitConnection]
        """
        super(ExpressRouteCircuitPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.peering_type = kwargs.get('peering_type', None)
        self.state = kwargs.get('state', None)
        self.azure_asn = kwargs.get('azure_asn', None)
        self.peer_asn = kwargs.get('peer_asn', None)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.primary_azure_port = kwargs.get('primary_azure_port', None)
        self.secondary_azure_port = kwargs.get('secondary_azure_port', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.vlan_id = kwargs.get('vlan_id', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.stats = kwargs.get('stats', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.route_filter = kwargs.get('route_filter', None)
        self.ipv6_peering_config = kwargs.get('ipv6_peering_config', None)
        self.connections = kwargs.get('connections', None)


class ExpressRouteCircuitPeeringConfig(msrest.serialization.Model):
    """Specifies the peering configuration.

    :ivar advertised_public_prefixes: The reference of AdvertisedPublicPrefixes.
    :vartype advertised_public_prefixes: list[str]
    :ivar advertised_communities: The communities of bgp peering. Specified for microsoft peering.
    :vartype advertised_communities: list[str]
    :ivar advertised_public_prefixes_state: AdvertisedPublicPrefixState of the Peering resource.
     Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
     Possible values include: "NotConfigured", "Configuring", "Configured", "ValidationNeeded".
    :vartype advertised_public_prefixes_state: str or
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState
    :ivar legacy_mode: The legacy mode of the peering.
    :vartype legacy_mode: int
    :ivar customer_asn: The CustomerASN of the peering.
    :vartype customer_asn: int
    :ivar routing_registry_name: The RoutingRegistryName of the configuration.
    :vartype routing_registry_name: str
    """

    _attribute_map = {
        'advertised_public_prefixes': {'key': 'advertisedPublicPrefixes', 'type': '[str]'},
        'advertised_communities': {'key': 'advertisedCommunities', 'type': '[str]'},
        'advertised_public_prefixes_state': {'key': 'advertisedPublicPrefixesState', 'type': 'str'},
        'legacy_mode': {'key': 'legacyMode', 'type': 'int'},
        'customer_asn': {'key': 'customerASN', 'type': 'int'},
        'routing_registry_name': {'key': 'routingRegistryName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword advertised_public_prefixes: The reference of AdvertisedPublicPrefixes.
        :paramtype advertised_public_prefixes: list[str]
        :keyword advertised_communities: The communities of bgp peering. Specified for microsoft
         peering.
        :paramtype advertised_communities: list[str]
        :keyword advertised_public_prefixes_state: AdvertisedPublicPrefixState of the Peering resource.
         Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
         Possible values include: "NotConfigured", "Configuring", "Configured", "ValidationNeeded".
        :paramtype advertised_public_prefixes_state: str or
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState
        :keyword legacy_mode: The legacy mode of the peering.
        :paramtype legacy_mode: int
        :keyword customer_asn: The CustomerASN of the peering.
        :paramtype customer_asn: int
        :keyword routing_registry_name: The RoutingRegistryName of the configuration.
        :paramtype routing_registry_name: str
        """
        super(ExpressRouteCircuitPeeringConfig, self).__init__(**kwargs)
        self.advertised_public_prefixes = kwargs.get('advertised_public_prefixes', None)
        self.advertised_communities = kwargs.get('advertised_communities', None)
        self.advertised_public_prefixes_state = kwargs.get('advertised_public_prefixes_state', None)
        self.legacy_mode = kwargs.get('legacy_mode', None)
        self.customer_asn = kwargs.get('customer_asn', None)
        self.routing_registry_name = kwargs.get('routing_registry_name', None)


class ExpressRouteCircuitPeeringListResult(msrest.serialization.Model):
    """Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.

    :ivar value: The peerings in an express route circuit.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in an express route circuit.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitPeeringListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitReference(msrest.serialization.Model):
    """ExpressRouteCircuitReference.

    :ivar id: Corresponding Express Route Circuit Id.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Corresponding Express Route Circuit Id.
        :paramtype id: str
        """
        super(ExpressRouteCircuitReference, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ExpressRouteCircuitRoutesTable(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar network: IP address of a network entity.
    :vartype network: str
    :ivar next_hop: NextHop address.
    :vartype next_hop: str
    :ivar loc_prf: Local preference value as set with the set local-preference route-map
     configuration command.
    :vartype loc_prf: str
    :ivar weight: Route Weight.
    :vartype weight: int
    :ivar path: Autonomous system paths to the destination network.
    :vartype path: str
    """

    _attribute_map = {
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'loc_prf': {'key': 'locPrf', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network: IP address of a network entity.
        :paramtype network: str
        :keyword next_hop: NextHop address.
        :paramtype next_hop: str
        :keyword loc_prf: Local preference value as set with the set local-preference route-map
         configuration command.
        :paramtype loc_prf: str
        :keyword weight: Route Weight.
        :paramtype weight: int
        :keyword path: Autonomous system paths to the destination network.
        :paramtype path: str
        """
        super(ExpressRouteCircuitRoutesTable, self).__init__(**kwargs)
        self.network = kwargs.get('network', None)
        self.next_hop = kwargs.get('next_hop', None)
        self.loc_prf = kwargs.get('loc_prf', None)
        self.weight = kwargs.get('weight', None)
        self.path = kwargs.get('path', None)


class ExpressRouteCircuitRoutesTableSummary(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar neighbor: IP address of the neighbor.
    :vartype neighbor: str
    :ivar v: BGP version number spoken to the neighbor.
    :vartype v: int
    :ivar as_property: Autonomous system number.
    :vartype as_property: int
    :ivar up_down: The length of time that the BGP session has been in the Established state, or
     the current status if not in the Established state.
    :vartype up_down: str
    :ivar state_pfx_rcd: Current state of the BGP session, and the number of prefixes that have
     been received from a neighbor or peer group.
    :vartype state_pfx_rcd: str
    """

    _attribute_map = {
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'v': {'key': 'v', 'type': 'int'},
        'as_property': {'key': 'as', 'type': 'int'},
        'up_down': {'key': 'upDown', 'type': 'str'},
        'state_pfx_rcd': {'key': 'statePfxRcd', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword neighbor: IP address of the neighbor.
        :paramtype neighbor: str
        :keyword v: BGP version number spoken to the neighbor.
        :paramtype v: int
        :keyword as_property: Autonomous system number.
        :paramtype as_property: int
        :keyword up_down: The length of time that the BGP session has been in the Established state, or
         the current status if not in the Established state.
        :paramtype up_down: str
        :keyword state_pfx_rcd: Current state of the BGP session, and the number of prefixes that have
         been received from a neighbor or peer group.
        :paramtype state_pfx_rcd: str
        """
        super(ExpressRouteCircuitRoutesTableSummary, self).__init__(**kwargs)
        self.neighbor = kwargs.get('neighbor', None)
        self.v = kwargs.get('v', None)
        self.as_property = kwargs.get('as_property', None)
        self.up_down = kwargs.get('up_down', None)
        self.state_pfx_rcd = kwargs.get('state_pfx_rcd', None)


class ExpressRouteCircuitsArpTableListResult(msrest.serialization.Model):
    """Response for ListArpTable associated with the Express Route Circuits API.

    :ivar value: Gets list of the ARP table.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitArpTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitArpTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets list of the ARP table.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitArpTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsArpTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitServiceProviderProperties(msrest.serialization.Model):
    """Contains ServiceProviderProperties in an ExpressRouteCircuit.

    :ivar service_provider_name: The serviceProviderName.
    :vartype service_provider_name: str
    :ivar peering_location: The peering location.
    :vartype peering_location: str
    :ivar bandwidth_in_mbps: The BandwidthInMbps.
    :vartype bandwidth_in_mbps: int
    """

    _attribute_map = {
        'service_provider_name': {'key': 'serviceProviderName', 'type': 'str'},
        'peering_location': {'key': 'peeringLocation', 'type': 'str'},
        'bandwidth_in_mbps': {'key': 'bandwidthInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_provider_name: The serviceProviderName.
        :paramtype service_provider_name: str
        :keyword peering_location: The peering location.
        :paramtype peering_location: str
        :keyword bandwidth_in_mbps: The BandwidthInMbps.
        :paramtype bandwidth_in_mbps: int
        """
        super(ExpressRouteCircuitServiceProviderProperties, self).__init__(**kwargs)
        self.service_provider_name = kwargs.get('service_provider_name', None)
        self.peering_location = kwargs.get('peering_location', None)
        self.bandwidth_in_mbps = kwargs.get('bandwidth_in_mbps', None)


class ExpressRouteCircuitSku(msrest.serialization.Model):
    """Contains SKU in an ExpressRouteCircuit.

    :ivar name: The name of the SKU.
    :vartype name: str
    :ivar tier: The tier of the SKU. Possible values are 'Standard' and 'Premium'. Possible values
     include: "Standard", "Premium".
    :vartype tier: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSkuTier
    :ivar family: The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.
     Possible values include: "UnlimitedData", "MeteredData".
    :vartype family: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSkuFamily
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the SKU.
        :paramtype name: str
        :keyword tier: The tier of the SKU. Possible values are 'Standard' and 'Premium'. Possible
         values include: "Standard", "Premium".
        :paramtype tier: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSkuTier
        :keyword family: The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.
         Possible values include: "UnlimitedData", "MeteredData".
        :paramtype family: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitSkuFamily
        """
        super(ExpressRouteCircuitSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.family = kwargs.get('family', None)


class ExpressRouteCircuitsRoutesTableListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Circuits API.

    :ivar value: The list of routes table.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitRoutesTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitRoutesTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of routes table.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitRoutesTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsRoutesTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitsRoutesTableSummaryListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Circuits API.

    :ivar value: A list of the routes table.
    :vartype value:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitRoutesTableSummary]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCircuitRoutesTableSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of the routes table.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitRoutesTableSummary]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteCircuitsRoutesTableSummaryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ExpressRouteCircuitStats(msrest.serialization.Model):
    """Contains stats associated with the peering.

    :ivar primarybytes_in: Gets BytesIn of the peering.
    :vartype primarybytes_in: long
    :ivar primarybytes_out: Gets BytesOut of the peering.
    :vartype primarybytes_out: long
    :ivar secondarybytes_in: Gets BytesIn of the peering.
    :vartype secondarybytes_in: long
    :ivar secondarybytes_out: Gets BytesOut of the peering.
    :vartype secondarybytes_out: long
    """

    _attribute_map = {
        'primarybytes_in': {'key': 'primarybytesIn', 'type': 'long'},
        'primarybytes_out': {'key': 'primarybytesOut', 'type': 'long'},
        'secondarybytes_in': {'key': 'secondarybytesIn', 'type': 'long'},
        'secondarybytes_out': {'key': 'secondarybytesOut', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword primarybytes_in: Gets BytesIn of the peering.
        :paramtype primarybytes_in: long
        :keyword primarybytes_out: Gets BytesOut of the peering.
        :paramtype primarybytes_out: long
        :keyword secondarybytes_in: Gets BytesIn of the peering.
        :paramtype secondarybytes_in: long
        :keyword secondarybytes_out: Gets BytesOut of the peering.
        :paramtype secondarybytes_out: long
        """
        super(ExpressRouteCircuitStats, self).__init__(**kwargs)
        self.primarybytes_in = kwargs.get('primarybytes_in', None)
        self.primarybytes_out = kwargs.get('primarybytes_out', None)
        self.secondarybytes_in = kwargs.get('secondarybytes_in', None)
        self.secondarybytes_out = kwargs.get('secondarybytes_out', None)


class ExpressRouteCrossConnection(Resource):
    """ExpressRouteCrossConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar primary_azure_port: The name of the primary  port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The name of the secondary  port.
    :vartype secondary_azure_port: str
    :ivar s_tag: The identifier of the circuit traffic.
    :vartype s_tag: int
    :ivar peering_location: The peering location of the ExpressRoute circuit.
    :vartype peering_location: str
    :ivar bandwidth_in_mbps: The circuit bandwidth In Mbps.
    :vartype bandwidth_in_mbps: int
    :ivar express_route_circuit: The ExpressRouteCircuit.
    :vartype express_route_circuit:
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitReference
    :ivar service_provider_provisioning_state: The provisioning state of the circuit in the
     connectivity provider system. Possible values are 'NotProvisioned', 'Provisioning',
     'Provisioned'. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
     "Deprovisioning".
    :vartype service_provider_provisioning_state: str or
     ~azure.mgmt.network.v2018_04_01.models.ServiceProviderProvisioningState
    :ivar service_provider_notes: Additional read only notes set by the connectivity provider.
    :vartype service_provider_notes: str
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar peerings: The list of peerings.
    :vartype peerings:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionPeering]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'primary_azure_port': {'readonly': True},
        'secondary_azure_port': {'readonly': True},
        's_tag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        's_tag': {'key': 'properties.sTag', 'type': 'int'},
        'peering_location': {'key': 'properties.peeringLocation', 'type': 'str'},
        'bandwidth_in_mbps': {'key': 'properties.bandwidthInMbps', 'type': 'int'},
        'express_route_circuit': {'key': 'properties.expressRouteCircuit', 'type': 'ExpressRouteCircuitReference'},
        'service_provider_provisioning_state': {'key': 'properties.serviceProviderProvisioningState', 'type': 'str'},
        'service_provider_notes': {'key': 'properties.serviceProviderNotes', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCrossConnectionPeering]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword peering_location: The peering location of the ExpressRoute circuit.
        :paramtype peering_location: str
        :keyword bandwidth_in_mbps: The circuit bandwidth In Mbps.
        :paramtype bandwidth_in_mbps: int
        :keyword express_route_circuit: The ExpressRouteCircuit.
        :paramtype express_route_circuit:
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitReference
        :keyword service_provider_provisioning_state: The provisioning state of the circuit in the
         connectivity provider system. Possible values are 'NotProvisioned', 'Provisioning',
         'Provisioned'. Possible values include: "NotProvisioned", "Provisioning", "Provisioned",
         "Deprovisioning".
        :paramtype service_provider_provisioning_state: str or
         ~azure.mgmt.network.v2018_04_01.models.ServiceProviderProvisioningState
        :keyword service_provider_notes: Additional read only notes set by the connectivity provider.
        :paramtype service_provider_notes: str
        :keyword peerings: The list of peerings.
        :paramtype peerings:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionPeering]
        """
        super(ExpressRouteCrossConnection, self).__init__(**kwargs)
        self.etag = None
        self.primary_azure_port = None
        self.secondary_azure_port = None
        self.s_tag = None
        self.peering_location = kwargs.get('peering_location', None)
        self.bandwidth_in_mbps = kwargs.get('bandwidth_in_mbps', None)
        self.express_route_circuit = kwargs.get('express_route_circuit', None)
        self.service_provider_provisioning_state = kwargs.get('service_provider_provisioning_state', None)
        self.service_provider_notes = kwargs.get('service_provider_notes', None)
        self.provisioning_state = None
        self.peerings = kwargs.get('peerings', None)


class ExpressRouteCrossConnectionListResult(msrest.serialization.Model):
    """Response for ListExpressRouteCrossConnection API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of ExpressRouteCrossConnection resources.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteCrossConnection resources.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnection]
        """
        super(ExpressRouteCrossConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteCrossConnectionPeering(SubResource):
    """Peering in an ExpressRoute Cross Connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar peering_type: The peering type. Possible values include: "AzurePublicPeering",
     "AzurePrivatePeering", "MicrosoftPeering".
    :vartype peering_type: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringType
    :ivar state: The peering state. Possible values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringState
    :ivar azure_asn: The Azure ASN.
    :vartype azure_asn: int
    :ivar peer_asn: The peer ASN.
    :vartype peer_asn: long
    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar primary_azure_port: The primary port.
    :vartype primary_azure_port: str
    :ivar secondary_azure_port: The secondary port.
    :vartype secondary_azure_port: str
    :ivar shared_key: The shared key.
    :vartype shared_key: str
    :ivar vlan_id: The VLAN ID.
    :vartype vlan_id: int
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar gateway_manager_etag: The GatewayManager Etag.
    :vartype gateway_manager_etag: str
    :ivar last_modified_by: Gets whether the provider or the customer last modified the peering.
    :vartype last_modified_by: str
    :ivar ipv6_peering_config: The IPv6 peering configuration.
    :vartype ipv6_peering_config:
     ~azure.mgmt.network.v2018_04_01.models.Ipv6ExpressRouteCircuitPeeringConfig
    """

    _validation = {
        'etag': {'readonly': True},
        'azure_asn': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 1},
        'primary_azure_port': {'readonly': True},
        'secondary_azure_port': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'peering_type': {'key': 'properties.peeringType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'azure_asn': {'key': 'properties.azureASN', 'type': 'int'},
        'peer_asn': {'key': 'properties.peerASN', 'type': 'long'},
        'primary_peer_address_prefix': {'key': 'properties.primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'properties.secondaryPeerAddressPrefix', 'type': 'str'},
        'primary_azure_port': {'key': 'properties.primaryAzurePort', 'type': 'str'},
        'secondary_azure_port': {'key': 'properties.secondaryAzurePort', 'type': 'str'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'vlan_id': {'key': 'properties.vlanId', 'type': 'int'},
        'microsoft_peering_config': {'key': 'properties.microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gateway_manager_etag': {'key': 'properties.gatewayManagerEtag', 'type': 'str'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'ipv6_peering_config': {'key': 'properties.ipv6PeeringConfig', 'type': 'Ipv6ExpressRouteCircuitPeeringConfig'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword peering_type: The peering type. Possible values include: "AzurePublicPeering",
         "AzurePrivatePeering", "MicrosoftPeering".
        :paramtype peering_type: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringType
        :keyword state: The peering state. Possible values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRoutePeeringState
        :keyword peer_asn: The peer ASN.
        :paramtype peer_asn: long
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword shared_key: The shared key.
        :paramtype shared_key: str
        :keyword vlan_id: The VLAN ID.
        :paramtype vlan_id: int
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
        :keyword gateway_manager_etag: The GatewayManager Etag.
        :paramtype gateway_manager_etag: str
        :keyword last_modified_by: Gets whether the provider or the customer last modified the peering.
        :paramtype last_modified_by: str
        :keyword ipv6_peering_config: The IPv6 peering configuration.
        :paramtype ipv6_peering_config:
         ~azure.mgmt.network.v2018_04_01.models.Ipv6ExpressRouteCircuitPeeringConfig
        """
        super(ExpressRouteCrossConnectionPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.peering_type = kwargs.get('peering_type', None)
        self.state = kwargs.get('state', None)
        self.azure_asn = None
        self.peer_asn = kwargs.get('peer_asn', None)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.primary_azure_port = None
        self.secondary_azure_port = None
        self.shared_key = kwargs.get('shared_key', None)
        self.vlan_id = kwargs.get('vlan_id', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.provisioning_state = None
        self.gateway_manager_etag = kwargs.get('gateway_manager_etag', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.ipv6_peering_config = kwargs.get('ipv6_peering_config', None)


class ExpressRouteCrossConnectionPeeringList(msrest.serialization.Model):
    """Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The peerings in an express route cross connection.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnectionPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in an express route cross connection.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionPeering]
        """
        super(ExpressRouteCrossConnectionPeeringList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteCrossConnectionRoutesTableSummary(msrest.serialization.Model):
    """The routes table associated with the ExpressRouteCircuit.

    :ivar neighbor: IP address of Neighbor router.
    :vartype neighbor: str
    :ivar asn: Autonomous system number.
    :vartype asn: int
    :ivar up_down: The length of time that the BGP session has been in the Established state, or
     the current status if not in the Established state.
    :vartype up_down: str
    :ivar state_or_prefixes_received: Current state of the BGP session, and the number of prefixes
     that have been received from a neighbor or peer group.
    :vartype state_or_prefixes_received: str
    """

    _attribute_map = {
        'neighbor': {'key': 'neighbor', 'type': 'str'},
        'asn': {'key': 'asn', 'type': 'int'},
        'up_down': {'key': 'upDown', 'type': 'str'},
        'state_or_prefixes_received': {'key': 'stateOrPrefixesReceived', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword neighbor: IP address of Neighbor router.
        :paramtype neighbor: str
        :keyword asn: Autonomous system number.
        :paramtype asn: int
        :keyword up_down: The length of time that the BGP session has been in the Established state, or
         the current status if not in the Established state.
        :paramtype up_down: str
        :keyword state_or_prefixes_received: Current state of the BGP session, and the number of
         prefixes that have been received from a neighbor or peer group.
        :paramtype state_or_prefixes_received: str
        """
        super(ExpressRouteCrossConnectionRoutesTableSummary, self).__init__(**kwargs)
        self.neighbor = kwargs.get('neighbor', None)
        self.asn = kwargs.get('asn', None)
        self.up_down = kwargs.get('up_down', None)
        self.state_or_prefixes_received = kwargs.get('state_or_prefixes_received', None)


class ExpressRouteCrossConnectionsRoutesTableSummaryListResult(msrest.serialization.Model):
    """Response for ListRoutesTable associated with the Express Route Cross Connections.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of the routes table.
    :vartype value:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionRoutesTableSummary]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteCrossConnectionRoutesTableSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of the routes table.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCrossConnectionRoutesTableSummary]
        """
        super(ExpressRouteCrossConnectionsRoutesTableSummaryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ExpressRouteServiceProvider(Resource):
    """A ExpressRouteResourceProvider object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar peering_locations: Get a list of peering locations.
    :vartype peering_locations: list[str]
    :ivar bandwidths_offered: Gets bandwidths offered.
    :vartype bandwidths_offered:
     list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteServiceProviderBandwidthsOffered]
    :ivar provisioning_state: Gets the provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'peering_locations': {'key': 'properties.peeringLocations', 'type': '[str]'},
        'bandwidths_offered': {'key': 'properties.bandwidthsOffered', 'type': '[ExpressRouteServiceProviderBandwidthsOffered]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword peering_locations: Get a list of peering locations.
        :paramtype peering_locations: list[str]
        :keyword bandwidths_offered: Gets bandwidths offered.
        :paramtype bandwidths_offered:
         list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteServiceProviderBandwidthsOffered]
        :keyword provisioning_state: Gets the provisioning state of the resource.
        :paramtype provisioning_state: str
        """
        super(ExpressRouteServiceProvider, self).__init__(**kwargs)
        self.peering_locations = kwargs.get('peering_locations', None)
        self.bandwidths_offered = kwargs.get('bandwidths_offered', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ExpressRouteServiceProviderBandwidthsOffered(msrest.serialization.Model):
    """Contains bandwidths offered in ExpressRouteServiceProvider resources.

    :ivar offer_name: The OfferName.
    :vartype offer_name: str
    :ivar value_in_mbps: The ValueInMbps.
    :vartype value_in_mbps: int
    """

    _attribute_map = {
        'offer_name': {'key': 'offerName', 'type': 'str'},
        'value_in_mbps': {'key': 'valueInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword offer_name: The OfferName.
        :paramtype offer_name: str
        :keyword value_in_mbps: The ValueInMbps.
        :paramtype value_in_mbps: int
        """
        super(ExpressRouteServiceProviderBandwidthsOffered, self).__init__(**kwargs)
        self.offer_name = kwargs.get('offer_name', None)
        self.value_in_mbps = kwargs.get('value_in_mbps', None)


class ExpressRouteServiceProviderListResult(msrest.serialization.Model):
    """Response for the ListExpressRouteServiceProvider API service call.

    :ivar value: A list of ExpressRouteResourceProvider resources.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteServiceProvider]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteServiceProvider]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ExpressRouteResourceProvider resources.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteServiceProvider]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(ExpressRouteServiceProviderListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class FlowLogInformation(msrest.serialization.Model):
    """Information on the configuration of flow log and traffic analytics (optional) .

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The ID of the resource to configure for flow log and
     traffic analytics (optional) .
    :vartype target_resource_id: str
    :ivar flow_analytics_configuration: Parameters that define the configuration of traffic
     analytics.
    :vartype flow_analytics_configuration:
     ~azure.mgmt.network.v2018_04_01.models.TrafficAnalyticsProperties
    :ivar storage_id: Required. ID of the storage account which is used to store the flow log.
    :vartype storage_id: str
    :ivar enabled: Required. Flag to enable/disable flow logging.
    :vartype enabled: bool
    :ivar retention_policy: Parameters that define the retention policy for flow log.
    :vartype retention_policy: ~azure.mgmt.network.v2018_04_01.models.RetentionPolicyParameters
    """

    _validation = {
        'target_resource_id': {'required': True},
        'storage_id': {'required': True},
        'enabled': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'flow_analytics_configuration': {'key': 'flowAnalyticsConfiguration', 'type': 'TrafficAnalyticsProperties'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'retention_policy': {'key': 'properties.retentionPolicy', 'type': 'RetentionPolicyParameters'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The ID of the resource to configure for flow log and
         traffic analytics (optional) .
        :paramtype target_resource_id: str
        :keyword flow_analytics_configuration: Parameters that define the configuration of traffic
         analytics.
        :paramtype flow_analytics_configuration:
         ~azure.mgmt.network.v2018_04_01.models.TrafficAnalyticsProperties
        :keyword storage_id: Required. ID of the storage account which is used to store the flow log.
        :paramtype storage_id: str
        :keyword enabled: Required. Flag to enable/disable flow logging.
        :paramtype enabled: bool
        :keyword retention_policy: Parameters that define the retention policy for flow log.
        :paramtype retention_policy: ~azure.mgmt.network.v2018_04_01.models.RetentionPolicyParameters
        """
        super(FlowLogInformation, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.flow_analytics_configuration = kwargs.get('flow_analytics_configuration', None)
        self.storage_id = kwargs['storage_id']
        self.enabled = kwargs['enabled']
        self.retention_policy = kwargs.get('retention_policy', None)


class FlowLogStatusParameters(msrest.serialization.Model):
    """Parameters that define a resource to query flow log and traffic analytics (optional) status.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource where getting the flow log and traffic
     analytics (optional) status.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource where getting the flow log and
         traffic analytics (optional) status.
        :paramtype target_resource_id: str
        """
        super(FlowLogStatusParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class FrontendIPConfiguration(SubResource):
    """Frontend IP address of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar inbound_nat_rules: Read only. Inbound rules URIs that use this frontend IP.
    :vartype inbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar inbound_nat_pools: Read only. Inbound pools URIs that use this frontend IP.
    :vartype inbound_nat_pools: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar outbound_nat_rules: Read only. Outbound rules URIs that use this frontend IP.
    :vartype outbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar load_balancing_rules: Gets load balancing rules URIs that use this frontend IP.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The Private IP allocation method. Possible values are:
     'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar subnet: The reference of the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
    :ivar public_ip_address: The reference of the Public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'inbound_nat_rules': {'readonly': True},
        'inbound_nat_pools': {'readonly': True},
        'outbound_nat_rules': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'inbound_nat_rules': {'key': 'properties.inboundNatRules', 'type': '[SubResource]'},
        'inbound_nat_pools': {'key': 'properties.inboundNatPools', 'type': '[SubResource]'},
        'outbound_nat_rules': {'key': 'properties.outboundNatRules', 'type': '[SubResource]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The Private IP allocation method. Possible values are:
         'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword subnet: The reference of the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
        :keyword public_ip_address: The reference of the Public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(FrontendIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.zones = kwargs.get('zones', None)
        self.inbound_nat_rules = None
        self.inbound_nat_pools = None
        self.outbound_nat_rules = None
        self.load_balancing_rules = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class GatewayRoute(msrest.serialization.Model):
    """Gateway routing details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The gateway's local address.
    :vartype local_address: str
    :ivar network: The route's network prefix.
    :vartype network: str
    :ivar next_hop: The route's next hop.
    :vartype next_hop: str
    :ivar source_peer: The peer this route was learned from.
    :vartype source_peer: str
    :ivar origin: The source this route was learned from.
    :vartype origin: str
    :ivar as_path: The route's AS path sequence.
    :vartype as_path: str
    :ivar weight: The route's weight.
    :vartype weight: int
    """

    _validation = {
        'local_address': {'readonly': True},
        'network': {'readonly': True},
        'next_hop': {'readonly': True},
        'source_peer': {'readonly': True},
        'origin': {'readonly': True},
        'as_path': {'readonly': True},
        'weight': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'source_peer': {'key': 'sourcePeer', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(GatewayRoute, self).__init__(**kwargs)
        self.local_address = None
        self.network = None
        self.next_hop = None
        self.source_peer = None
        self.origin = None
        self.as_path = None
        self.weight = None


class GatewayRouteListResult(msrest.serialization.Model):
    """List of virtual network gateway routes.

    :ivar value: List of gateway routes.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.GatewayRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GatewayRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of gateway routes.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.GatewayRoute]
        """
        super(GatewayRouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class GetVpnSitesConfigurationRequest(msrest.serialization.Model):
    """List of Vpn-Sites.

    :ivar vpn_sites: List of resource-ids of the vpn-sites for which config is to be downloaded.
    :vartype vpn_sites: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar output_blob_sas_url: The sas-url to download the configurations for vpn-sites.
    :vartype output_blob_sas_url: str
    """

    _attribute_map = {
        'vpn_sites': {'key': 'vpnSites', 'type': '[SubResource]'},
        'output_blob_sas_url': {'key': 'outputBlobSasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_sites: List of resource-ids of the vpn-sites for which config is to be downloaded.
        :paramtype vpn_sites: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword output_blob_sas_url: The sas-url to download the configurations for vpn-sites.
        :paramtype output_blob_sas_url: str
        """
        super(GetVpnSitesConfigurationRequest, self).__init__(**kwargs)
        self.vpn_sites = kwargs.get('vpn_sites', None)
        self.output_blob_sas_url = kwargs.get('output_blob_sas_url', None)


class HTTPConfiguration(msrest.serialization.Model):
    """HTTP configuration of the connectivity check.

    :ivar method: HTTP method. Possible values include: "Get".
    :vartype method: str or ~azure.mgmt.network.v2018_04_01.models.HTTPMethod
    :ivar headers: List of HTTP headers.
    :vartype headers: list[~azure.mgmt.network.v2018_04_01.models.HTTPHeader]
    :ivar valid_status_codes: Valid status codes.
    :vartype valid_status_codes: list[int]
    """

    _attribute_map = {
        'method': {'key': 'method', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '[HTTPHeader]'},
        'valid_status_codes': {'key': 'validStatusCodes', 'type': '[int]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword method: HTTP method. Possible values include: "Get".
        :paramtype method: str or ~azure.mgmt.network.v2018_04_01.models.HTTPMethod
        :keyword headers: List of HTTP headers.
        :paramtype headers: list[~azure.mgmt.network.v2018_04_01.models.HTTPHeader]
        :keyword valid_status_codes: Valid status codes.
        :paramtype valid_status_codes: list[int]
        """
        super(HTTPConfiguration, self).__init__(**kwargs)
        self.method = kwargs.get('method', None)
        self.headers = kwargs.get('headers', None)
        self.valid_status_codes = kwargs.get('valid_status_codes', None)


class HTTPHeader(msrest.serialization.Model):
    """Describes the HTTP header.

    :ivar name: The name in HTTP header.
    :vartype name: str
    :ivar value: The value in HTTP header.
    :vartype value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name in HTTP header.
        :paramtype name: str
        :keyword value: The value in HTTP header.
        :paramtype value: str
        """
        super(HTTPHeader, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class HubVirtualNetworkConnection(Resource):
    """HubVirtualNetworkConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar remote_virtual_network: Reference to the remote virtual network.
    :vartype remote_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar allow_hub_to_remote_vnet_transit: VirtualHub to RemoteVnet transit to enabled or not.
    :vartype allow_hub_to_remote_vnet_transit: bool
    :ivar allow_remote_vnet_to_use_hub_vnet_gateways: Allow RemoteVnet to use Virtual Hub's
     gateways.
    :vartype allow_remote_vnet_to_use_hub_vnet_gateways: bool
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_virtual_network': {'key': 'properties.remoteVirtualNetwork', 'type': 'SubResource'},
        'allow_hub_to_remote_vnet_transit': {'key': 'properties.allowHubToRemoteVnetTransit', 'type': 'bool'},
        'allow_remote_vnet_to_use_hub_vnet_gateways': {'key': 'properties.allowRemoteVnetToUseHubVnetGateways', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword remote_virtual_network: Reference to the remote virtual network.
        :paramtype remote_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword allow_hub_to_remote_vnet_transit: VirtualHub to RemoteVnet transit to enabled or not.
        :paramtype allow_hub_to_remote_vnet_transit: bool
        :keyword allow_remote_vnet_to_use_hub_vnet_gateways: Allow RemoteVnet to use Virtual Hub's
         gateways.
        :paramtype allow_remote_vnet_to_use_hub_vnet_gateways: bool
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(HubVirtualNetworkConnection, self).__init__(**kwargs)
        self.etag = None
        self.remote_virtual_network = kwargs.get('remote_virtual_network', None)
        self.allow_hub_to_remote_vnet_transit = kwargs.get('allow_hub_to_remote_vnet_transit', None)
        self.allow_remote_vnet_to_use_hub_vnet_gateways = kwargs.get('allow_remote_vnet_to_use_hub_vnet_gateways', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class InboundNatPool(SubResource):
    """Inbound NAT pool of the load balancer.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or
     'All'. Possible values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
    :ivar frontend_port_range_start: The first port number in the range of external ports that will
     be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
     between 1 and 65534.
    :vartype frontend_port_range_start: int
    :ivar frontend_port_range_end: The last port number in the range of external ports that will be
     used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
     between 1 and 65535.
    :vartype frontend_port_range_end: int
    :ivar backend_port: The port used for internal connections on the endpoint. Acceptable values
     are between 1 and 65535.
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar provisioning_state: Gets the provisioning state of the PublicIP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'frontend_port_range_start': {'key': 'properties.frontendPortRangeStart', 'type': 'int'},
        'frontend_port_range_end': {'key': 'properties.frontendPortRangeEnd', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp'
         or 'All'. Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
        :keyword frontend_port_range_start: The first port number in the range of external ports that
         will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values
         range between 1 and 65534.
        :paramtype frontend_port_range_start: int
        :keyword frontend_port_range_end: The last port number in the range of external ports that will
         be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range
         between 1 and 65535.
        :paramtype frontend_port_range_end: int
        :keyword backend_port: The port used for internal connections on the endpoint. Acceptable
         values are between 1 and 65535.
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword provisioning_state: Gets the provisioning state of the PublicIP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(InboundNatPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.protocol = kwargs.get('protocol', None)
        self.frontend_port_range_start = kwargs.get('frontend_port_range_start', None)
        self.frontend_port_range_end = kwargs.get('frontend_port_range_end', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class InboundNatRule(SubResource):
    """Inbound NAT rule of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar backend_ip_configuration: A reference to a private IP address defined on a network
     interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations
     is forwarded to the backend IP.
    :vartype backend_ip_configuration:
     ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration
    :ivar protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or
     'All'. Possible values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
    :ivar frontend_port: The port for the external endpoint. Port numbers for each rule must be
     unique within the Load Balancer. Acceptable values range from 1 to 65534.
    :vartype frontend_port: int
    :ivar backend_port: The port used for the internal endpoint. Acceptable values range from 1 to
     65535.
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'backend_ip_configuration': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'backend_ip_configuration': {'key': 'properties.backendIPConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp'
         or 'All'. Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
        :keyword frontend_port: The port for the external endpoint. Port numbers for each rule must be
         unique within the Load Balancer. Acceptable values range from 1 to 65534.
        :paramtype frontend_port: int
        :keyword backend_port: The port used for the internal endpoint. Acceptable values range from 1
         to 65535.
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(InboundNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.backend_ip_configuration = None
        self.protocol = kwargs.get('protocol', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class InboundNatRuleListResult(msrest.serialization.Model):
    """Response for ListInboundNatRule API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of inbound nat rules in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[InboundNatRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of inbound nat rules in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
        """
        super(InboundNatRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class IPAddressAvailabilityResult(msrest.serialization.Model):
    """Response for CheckIPAddressAvailability API service call.

    :ivar available: Private IP address availability.
    :vartype available: bool
    :ivar available_ip_addresses: Contains other available private IP addresses if the asked for
     address is taken.
    :vartype available_ip_addresses: list[str]
    """

    _attribute_map = {
        'available': {'key': 'available', 'type': 'bool'},
        'available_ip_addresses': {'key': 'availableIPAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword available: Private IP address availability.
        :paramtype available: bool
        :keyword available_ip_addresses: Contains other available private IP addresses if the asked for
         address is taken.
        :paramtype available_ip_addresses: list[str]
        """
        super(IPAddressAvailabilityResult, self).__init__(**kwargs)
        self.available = kwargs.get('available', None)
        self.available_ip_addresses = kwargs.get('available_ip_addresses', None)


class IPConfiguration(SubResource):
    """IP configuration.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_ip_address: The private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: The private IP allocation method. Possible values are
     'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar subnet: The reference of the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
    :ivar public_ip_address: The reference of the public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword private_ip_address: The private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: The private IP allocation method. Possible values are
         'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword subnet: The reference of the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
        :keyword public_ip_address: The reference of the public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(IPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class IpsecPolicy(msrest.serialization.Model):
    """An IPSec Policy configuration for a virtual network gateway connection.

    All required parameters must be populated in order to send to Azure.

    :ivar sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode or
     Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
    :vartype sa_life_time_seconds: int
    :ivar sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
    :vartype sa_data_size_kilobytes: int
    :ivar ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible values
     include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
     "GCMAES256".
    :vartype ipsec_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IpsecEncryption
    :ivar ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible values
     include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
    :vartype ipsec_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IpsecIntegrity
    :ivar ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
     include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
    :vartype ike_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IkeEncryption
    :ivar ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
     include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
    :vartype ike_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IkeIntegrity
    :ivar dh_group: Required. The DH Groups used in IKE Phase 1 for initial SA. Possible values
     include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
     "DHGroup24".
    :vartype dh_group: str or ~azure.mgmt.network.v2018_04_01.models.DhGroup
    :ivar pfs_group: Required. The Pfs Groups used in IKE Phase 2 for new child SA. Possible values
     include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM".
    :vartype pfs_group: str or ~azure.mgmt.network.v2018_04_01.models.PfsGroup
    """

    _validation = {
        'sa_life_time_seconds': {'required': True},
        'sa_data_size_kilobytes': {'required': True},
        'ipsec_encryption': {'required': True},
        'ipsec_integrity': {'required': True},
        'ike_encryption': {'required': True},
        'ike_integrity': {'required': True},
        'dh_group': {'required': True},
        'pfs_group': {'required': True},
    }

    _attribute_map = {
        'sa_life_time_seconds': {'key': 'saLifeTimeSeconds', 'type': 'int'},
        'sa_data_size_kilobytes': {'key': 'saDataSizeKilobytes', 'type': 'int'},
        'ipsec_encryption': {'key': 'ipsecEncryption', 'type': 'str'},
        'ipsec_integrity': {'key': 'ipsecIntegrity', 'type': 'str'},
        'ike_encryption': {'key': 'ikeEncryption', 'type': 'str'},
        'ike_integrity': {'key': 'ikeIntegrity', 'type': 'str'},
        'dh_group': {'key': 'dhGroup', 'type': 'str'},
        'pfs_group': {'key': 'pfsGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode
         or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
        :paramtype sa_life_time_seconds: int
        :keyword sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick
         Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
        :paramtype sa_data_size_kilobytes: int
        :keyword ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible
         values include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
         "GCMAES256".
        :paramtype ipsec_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IpsecEncryption
        :keyword ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible
         values include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
        :paramtype ipsec_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IpsecIntegrity
        :keyword ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
         include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
        :paramtype ike_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IkeEncryption
        :keyword ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
         include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
        :paramtype ike_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IkeIntegrity
        :keyword dh_group: Required. The DH Groups used in IKE Phase 1 for initial SA. Possible values
         include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
         "DHGroup24".
        :paramtype dh_group: str or ~azure.mgmt.network.v2018_04_01.models.DhGroup
        :keyword pfs_group: Required. The Pfs Groups used in IKE Phase 2 for new child SA. Possible
         values include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14",
         "PFSMM".
        :paramtype pfs_group: str or ~azure.mgmt.network.v2018_04_01.models.PfsGroup
        """
        super(IpsecPolicy, self).__init__(**kwargs)
        self.sa_life_time_seconds = kwargs['sa_life_time_seconds']
        self.sa_data_size_kilobytes = kwargs['sa_data_size_kilobytes']
        self.ipsec_encryption = kwargs['ipsec_encryption']
        self.ipsec_integrity = kwargs['ipsec_integrity']
        self.ike_encryption = kwargs['ike_encryption']
        self.ike_integrity = kwargs['ike_integrity']
        self.dh_group = kwargs['dh_group']
        self.pfs_group = kwargs['pfs_group']


class IpTag(msrest.serialization.Model):
    """Contains the IpTag associated with the public IP address.

    :ivar ip_tag_type: Gets or sets the ipTag type: Example FirstPartyUsage.
    :vartype ip_tag_type: str
    :ivar tag: Gets or sets value of the IpTag associated with the public IP. Example SQL, Storage
     etc.
    :vartype tag: str
    """

    _attribute_map = {
        'ip_tag_type': {'key': 'ipTagType', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ip_tag_type: Gets or sets the ipTag type: Example FirstPartyUsage.
        :paramtype ip_tag_type: str
        :keyword tag: Gets or sets value of the IpTag associated with the public IP. Example SQL,
         Storage etc.
        :paramtype tag: str
        """
        super(IpTag, self).__init__(**kwargs)
        self.ip_tag_type = kwargs.get('ip_tag_type', None)
        self.tag = kwargs.get('tag', None)


class Ipv6ExpressRouteCircuitPeeringConfig(msrest.serialization.Model):
    """Contains IPv6 peering config.

    :ivar primary_peer_address_prefix: The primary address prefix.
    :vartype primary_peer_address_prefix: str
    :ivar secondary_peer_address_prefix: The secondary address prefix.
    :vartype secondary_peer_address_prefix: str
    :ivar microsoft_peering_config: The Microsoft peering configuration.
    :vartype microsoft_peering_config:
     ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
    :ivar route_filter: The reference of the RouteFilter resource.
    :vartype route_filter: ~azure.mgmt.network.v2018_04_01.models.RouteFilter
    :ivar state: The state of peering. Possible values are: 'Disabled' and 'Enabled'. Possible
     values include: "Disabled", "Enabled".
    :vartype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringState
    """

    _attribute_map = {
        'primary_peer_address_prefix': {'key': 'primaryPeerAddressPrefix', 'type': 'str'},
        'secondary_peer_address_prefix': {'key': 'secondaryPeerAddressPrefix', 'type': 'str'},
        'microsoft_peering_config': {'key': 'microsoftPeeringConfig', 'type': 'ExpressRouteCircuitPeeringConfig'},
        'route_filter': {'key': 'routeFilter', 'type': 'RouteFilter'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword primary_peer_address_prefix: The primary address prefix.
        :paramtype primary_peer_address_prefix: str
        :keyword secondary_peer_address_prefix: The secondary address prefix.
        :paramtype secondary_peer_address_prefix: str
        :keyword microsoft_peering_config: The Microsoft peering configuration.
        :paramtype microsoft_peering_config:
         ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringConfig
        :keyword route_filter: The reference of the RouteFilter resource.
        :paramtype route_filter: ~azure.mgmt.network.v2018_04_01.models.RouteFilter
        :keyword state: The state of peering. Possible values are: 'Disabled' and 'Enabled'. Possible
         values include: "Disabled", "Enabled".
        :paramtype state: str or ~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeeringState
        """
        super(Ipv6ExpressRouteCircuitPeeringConfig, self).__init__(**kwargs)
        self.primary_peer_address_prefix = kwargs.get('primary_peer_address_prefix', None)
        self.secondary_peer_address_prefix = kwargs.get('secondary_peer_address_prefix', None)
        self.microsoft_peering_config = kwargs.get('microsoft_peering_config', None)
        self.route_filter = kwargs.get('route_filter', None)
        self.state = kwargs.get('state', None)


class ListHubVirtualNetworkConnectionsResult(msrest.serialization.Model):
    """List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.

    :ivar value: List of HubVirtualNetworkConnections.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.HubVirtualNetworkConnection]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubVirtualNetworkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of HubVirtualNetworkConnections.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.HubVirtualNetworkConnection]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListHubVirtualNetworkConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubsResult(msrest.serialization.Model):
    """Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.

    :ivar value: List of VirtualHubs.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualHub]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHub]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualHubs.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualHub]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualHubsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualWANsResult(msrest.serialization.Model):
    """Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.

    :ivar value: List of VirtualWANs.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualWAN]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualWAN]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualWANs.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualWAN]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVirtualWANsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnConnectionsResult(msrest.serialization.Model):
    """Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.

    :ivar value: List of Vpn Connections.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VpnConnection]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Vpn Connections.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VpnConnection]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnGatewaysResult(msrest.serialization.Model):
    """Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.

    :ivar value: List of VpnGateways.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VpnGateway]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnGateways.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VpnGateway]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnGatewaysResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSitesResult(msrest.serialization.Model):
    """Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.

    :ivar value: List of VpnSites.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VpnSite]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSite]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VpnSites.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VpnSite]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(ListVpnSitesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class LoadBalancer(Resource):
    """LoadBalancer resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The load balancer SKU.
    :vartype sku: ~azure.mgmt.network.v2018_04_01.models.LoadBalancerSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar frontend_ip_configurations: Object representing the frontend IPs to be used for the load
     balancer.
    :vartype frontend_ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.FrontendIPConfiguration]
    :ivar backend_address_pools: Collection of backend address pools used by a load balancer.
    :vartype backend_address_pools: list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
    :ivar load_balancing_rules: Object collection representing the load balancing rules Gets the
     provisioning.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancingRule]
    :ivar probes: Collection of probe objects used in the load balancer.
    :vartype probes: list[~azure.mgmt.network.v2018_04_01.models.Probe]
    :ivar inbound_nat_rules: Collection of inbound NAT Rules used by a load balancer. Defining
     inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT
     pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are
     associated with individual virtual machines cannot reference an Inbound NAT pool. They have to
     reference individual inbound NAT rules.
    :vartype inbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
    :ivar inbound_nat_pools: Defines an external port range for inbound NAT to a single backend
     port on NICs associated with a load balancer. Inbound NAT rules are created automatically for
     each NIC associated with the Load Balancer using an external port from this range. Defining an
     Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules.
     Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with
     individual virtual machines cannot reference an inbound NAT pool. They have to reference
     individual inbound NAT rules.
    :vartype inbound_nat_pools: list[~azure.mgmt.network.v2018_04_01.models.InboundNatPool]
    :ivar outbound_nat_rules: The outbound NAT rules.
    :vartype outbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.OutboundNatRule]
    :ivar resource_guid: The resource GUID property of the load balancer resource.
    :vartype resource_guid: str
    :ivar provisioning_state: Gets the provisioning state of the PublicIP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'LoadBalancerSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[FrontendIPConfiguration]'},
        'backend_address_pools': {'key': 'properties.backendAddressPools', 'type': '[BackendAddressPool]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[LoadBalancingRule]'},
        'probes': {'key': 'properties.probes', 'type': '[Probe]'},
        'inbound_nat_rules': {'key': 'properties.inboundNatRules', 'type': '[InboundNatRule]'},
        'inbound_nat_pools': {'key': 'properties.inboundNatPools', 'type': '[InboundNatPool]'},
        'outbound_nat_rules': {'key': 'properties.outboundNatRules', 'type': '[OutboundNatRule]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The load balancer SKU.
        :paramtype sku: ~azure.mgmt.network.v2018_04_01.models.LoadBalancerSku
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword frontend_ip_configurations: Object representing the frontend IPs to be used for the
         load balancer.
        :paramtype frontend_ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.FrontendIPConfiguration]
        :keyword backend_address_pools: Collection of backend address pools used by a load balancer.
        :paramtype backend_address_pools:
         list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
        :keyword load_balancing_rules: Object collection representing the load balancing rules Gets the
         provisioning.
        :paramtype load_balancing_rules: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancingRule]
        :keyword probes: Collection of probe objects used in the load balancer.
        :paramtype probes: list[~azure.mgmt.network.v2018_04_01.models.Probe]
        :keyword inbound_nat_rules: Collection of inbound NAT Rules used by a load balancer. Defining
         inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT
         pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are
         associated with individual virtual machines cannot reference an Inbound NAT pool. They have to
         reference individual inbound NAT rules.
        :paramtype inbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
        :keyword inbound_nat_pools: Defines an external port range for inbound NAT to a single backend
         port on NICs associated with a load balancer. Inbound NAT rules are created automatically for
         each NIC associated with the Load Balancer using an external port from this range. Defining an
         Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules.
         Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with
         individual virtual machines cannot reference an inbound NAT pool. They have to reference
         individual inbound NAT rules.
        :paramtype inbound_nat_pools: list[~azure.mgmt.network.v2018_04_01.models.InboundNatPool]
        :keyword outbound_nat_rules: The outbound NAT rules.
        :paramtype outbound_nat_rules: list[~azure.mgmt.network.v2018_04_01.models.OutboundNatRule]
        :keyword resource_guid: The resource GUID property of the load balancer resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: Gets the provisioning state of the PublicIP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(LoadBalancer, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.etag = kwargs.get('etag', None)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.backend_address_pools = kwargs.get('backend_address_pools', None)
        self.load_balancing_rules = kwargs.get('load_balancing_rules', None)
        self.probes = kwargs.get('probes', None)
        self.inbound_nat_rules = kwargs.get('inbound_nat_rules', None)
        self.inbound_nat_pools = kwargs.get('inbound_nat_pools', None)
        self.outbound_nat_rules = kwargs.get('outbound_nat_rules', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class LoadBalancerBackendAddressPoolListResult(msrest.serialization.Model):
    """Response for ListBackendAddressPool API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of backend address pools in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BackendAddressPool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of backend address pools in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
        """
        super(LoadBalancerBackendAddressPoolListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerFrontendIPConfigurationListResult(msrest.serialization.Model):
    """Response for ListFrontendIPConfiguration API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of frontend IP configurations in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.FrontendIPConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FrontendIPConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of frontend IP configurations in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.FrontendIPConfiguration]
        """
        super(LoadBalancerFrontendIPConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerListResult(msrest.serialization.Model):
    """Response for ListLoadBalancers API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancers in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancer]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancers in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancer]
        """
        super(LoadBalancerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerLoadBalancingRuleListResult(msrest.serialization.Model):
    """Response for ListLoadBalancingRule API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancing rules in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancingRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancingRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancing rules in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancingRule]
        """
        super(LoadBalancerLoadBalancingRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerProbeListResult(msrest.serialization.Model):
    """Response for ListProbe API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of probes in a load balancer.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.Probe]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Probe]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of probes in a load balancer.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.Probe]
        """
        super(LoadBalancerProbeListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LoadBalancerSku(msrest.serialization.Model):
    """SKU of a load balancer.

    :ivar name: Name of a load balancer SKU. Possible values include: "Basic", "Standard".
    :vartype name: str or ~azure.mgmt.network.v2018_04_01.models.LoadBalancerSkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of a load balancer SKU. Possible values include: "Basic", "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2018_04_01.models.LoadBalancerSkuName
        """
        super(LoadBalancerSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class LoadBalancingRule(SubResource):
    """A load balancing rule for a load balancer.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar frontend_ip_configuration: A reference to frontend IP addresses.
    :vartype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar backend_address_pool: A reference to a pool of DIPs. Inbound traffic is randomly load
     balanced across IPs in the backend IPs.
    :vartype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar probe: The reference of the load balancer probe used by the load balancing rule.
    :vartype probe: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or
     'All'. Possible values include: "Udp", "Tcp", "All".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
    :ivar load_distribution: The load distribution policy for this rule. Possible values are
     'Default', 'SourceIP', and 'SourceIPProtocol'. Possible values include: "Default", "SourceIP",
     "SourceIPProtocol".
    :vartype load_distribution: str or ~azure.mgmt.network.v2018_04_01.models.LoadDistribution
    :ivar frontend_port: The port for the external endpoint. Port numbers for each rule must be
     unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0
     enables "Any Port".
    :vartype frontend_port: int
    :ivar backend_port: The port used for internal connections on the endpoint. Acceptable values
     are between 0 and 65535. Note that value 0 enables "Any Port".
    :vartype backend_port: int
    :ivar idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :vartype idle_timeout_in_minutes: int
    :ivar enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :vartype enable_floating_ip: bool
    :ivar disable_outbound_snat: Configures SNAT for the VMs in the backend pool to use the
     publicIP address specified in the frontend of the load balancing rule.
    :vartype disable_outbound_snat: bool
    :ivar provisioning_state: Gets the provisioning state of the PublicIP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'probe': {'key': 'properties.probe', 'type': 'SubResource'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'load_distribution': {'key': 'properties.loadDistribution', 'type': 'str'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'disable_outbound_snat': {'key': 'properties.disableOutboundSnat', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword frontend_ip_configuration: A reference to frontend IP addresses.
        :paramtype frontend_ip_configuration: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword backend_address_pool: A reference to a pool of DIPs. Inbound traffic is randomly load
         balanced across IPs in the backend IPs.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword probe: The reference of the load balancer probe used by the load balancing rule.
        :paramtype probe: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword protocol: The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp'
         or 'All'. Possible values include: "Udp", "Tcp", "All".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.TransportProtocol
        :keyword load_distribution: The load distribution policy for this rule. Possible values are
         'Default', 'SourceIP', and 'SourceIPProtocol'. Possible values include: "Default", "SourceIP",
         "SourceIPProtocol".
        :paramtype load_distribution: str or ~azure.mgmt.network.v2018_04_01.models.LoadDistribution
        :keyword frontend_port: The port for the external endpoint. Port numbers for each rule must be
         unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0
         enables "Any Port".
        :paramtype frontend_port: int
        :keyword backend_port: The port used for internal connections on the endpoint. Acceptable
         values are between 0 and 65535. Note that value 0 enables "Any Port".
        :paramtype backend_port: int
        :keyword idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
         between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
         protocol is set to TCP.
        :paramtype idle_timeout_in_minutes: int
        :keyword enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
         capability required to configure a SQL AlwaysOn Availability Group. This setting is required
         when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
         after you create the endpoint.
        :paramtype enable_floating_ip: bool
        :keyword disable_outbound_snat: Configures SNAT for the VMs in the backend pool to use the
         publicIP address specified in the frontend of the load balancing rule.
        :paramtype disable_outbound_snat: bool
        :keyword provisioning_state: Gets the provisioning state of the PublicIP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(LoadBalancingRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.probe = kwargs.get('probe', None)
        self.protocol = kwargs.get('protocol', None)
        self.load_distribution = kwargs.get('load_distribution', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.disable_outbound_snat = kwargs.get('disable_outbound_snat', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class LocalNetworkGateway(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar local_network_address_space: Local network site address space.
    :vartype local_network_address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
    :ivar gateway_ip_address: IP address of local network gateway.
    :vartype gateway_ip_address: str
    :ivar bgp_settings: Local network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
    :ivar resource_guid: The resource GUID property of the LocalNetworkGateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the LocalNetworkGateway resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'local_network_address_space': {'key': 'properties.localNetworkAddressSpace', 'type': 'AddressSpace'},
        'gateway_ip_address': {'key': 'properties.gatewayIpAddress', 'type': 'str'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword local_network_address_space: Local network site address space.
        :paramtype local_network_address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
        :keyword gateway_ip_address: IP address of local network gateway.
        :paramtype gateway_ip_address: str
        :keyword bgp_settings: Local network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
        :keyword resource_guid: The resource GUID property of the LocalNetworkGateway resource.
        :paramtype resource_guid: str
        """
        super(LocalNetworkGateway, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.local_network_address_space = kwargs.get('local_network_address_space', None)
        self.gateway_ip_address = kwargs.get('gateway_ip_address', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = None


class LocalNetworkGatewayListResult(msrest.serialization.Model):
    """Response for ListLocalNetworkGateways API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of local network gateways that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.LocalNetworkGateway]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LocalNetworkGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of local network gateways that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.LocalNetworkGateway]
        """
        super(LocalNetworkGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class LogSpecification(msrest.serialization.Model):
    """Description of logging specification.

    :ivar name: The name of the specification.
    :vartype name: str
    :ivar display_name: The display name of the specification.
    :vartype display_name: str
    :ivar blob_duration: Duration of the blob.
    :vartype blob_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the specification.
        :paramtype name: str
        :keyword display_name: The display name of the specification.
        :paramtype display_name: str
        :keyword blob_duration: Duration of the blob.
        :paramtype blob_duration: str
        """
        super(LogSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class MetricSpecification(msrest.serialization.Model):
    """Description of metrics specification.

    :ivar name: The name of the metric.
    :vartype name: str
    :ivar display_name: The display name of the metric.
    :vartype display_name: str
    :ivar display_description: The description of the metric.
    :vartype display_description: str
    :ivar unit: Units the metric to be displayed in.
    :vartype unit: str
    :ivar aggregation_type: The aggregation type.
    :vartype aggregation_type: str
    :ivar availabilities: List of availability.
    :vartype availabilities: list[~azure.mgmt.network.v2018_04_01.models.Availability]
    :ivar enable_regional_mdm_account: Whether regional MDM account enabled.
    :vartype enable_regional_mdm_account: bool
    :ivar fill_gap_with_zero: Whether gaps would be filled with zeros.
    :vartype fill_gap_with_zero: bool
    :ivar metric_filter_pattern: Pattern for the filter of the metric.
    :vartype metric_filter_pattern: str
    :ivar dimensions: List of dimensions.
    :vartype dimensions: list[~azure.mgmt.network.v2018_04_01.models.Dimension]
    :ivar is_internal: Whether the metric is internal.
    :vartype is_internal: bool
    :ivar source_mdm_account: The source MDM account.
    :vartype source_mdm_account: str
    :ivar source_mdm_namespace: The source MDM namespace.
    :vartype source_mdm_namespace: str
    :ivar resource_id_dimension_name_override: The resource Id dimension name override.
    :vartype resource_id_dimension_name_override: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'availabilities': {'key': 'availabilities', 'type': '[Availability]'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'bool'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'bool'},
        'metric_filter_pattern': {'key': 'metricFilterPattern', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[Dimension]'},
        'is_internal': {'key': 'isInternal', 'type': 'bool'},
        'source_mdm_account': {'key': 'sourceMdmAccount', 'type': 'str'},
        'source_mdm_namespace': {'key': 'sourceMdmNamespace', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the metric.
        :paramtype name: str
        :keyword display_name: The display name of the metric.
        :paramtype display_name: str
        :keyword display_description: The description of the metric.
        :paramtype display_description: str
        :keyword unit: Units the metric to be displayed in.
        :paramtype unit: str
        :keyword aggregation_type: The aggregation type.
        :paramtype aggregation_type: str
        :keyword availabilities: List of availability.
        :paramtype availabilities: list[~azure.mgmt.network.v2018_04_01.models.Availability]
        :keyword enable_regional_mdm_account: Whether regional MDM account enabled.
        :paramtype enable_regional_mdm_account: bool
        :keyword fill_gap_with_zero: Whether gaps would be filled with zeros.
        :paramtype fill_gap_with_zero: bool
        :keyword metric_filter_pattern: Pattern for the filter of the metric.
        :paramtype metric_filter_pattern: str
        :keyword dimensions: List of dimensions.
        :paramtype dimensions: list[~azure.mgmt.network.v2018_04_01.models.Dimension]
        :keyword is_internal: Whether the metric is internal.
        :paramtype is_internal: bool
        :keyword source_mdm_account: The source MDM account.
        :paramtype source_mdm_account: str
        :keyword source_mdm_namespace: The source MDM namespace.
        :paramtype source_mdm_namespace: str
        :keyword resource_id_dimension_name_override: The resource Id dimension name override.
        :paramtype resource_id_dimension_name_override: str
        """
        super(MetricSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.display_description = kwargs.get('display_description', None)
        self.unit = kwargs.get('unit', None)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.availabilities = kwargs.get('availabilities', None)
        self.enable_regional_mdm_account = kwargs.get('enable_regional_mdm_account', None)
        self.fill_gap_with_zero = kwargs.get('fill_gap_with_zero', None)
        self.metric_filter_pattern = kwargs.get('metric_filter_pattern', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.is_internal = kwargs.get('is_internal', None)
        self.source_mdm_account = kwargs.get('source_mdm_account', None)
        self.source_mdm_namespace = kwargs.get('source_mdm_namespace', None)
        self.resource_id_dimension_name_override = kwargs.get('resource_id_dimension_name_override', None)


class NetworkInterface(Resource):
    """A network interface in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_machine: The reference of a virtual machine.
    :vartype virtual_machine: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar network_security_group: The reference of the NetworkSecurityGroup resource.
    :vartype network_security_group: ~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup
    :ivar ip_configurations: A list of IPConfigurations of the network interface.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
    :ivar dns_settings: The DNS settings in network interface.
    :vartype dns_settings: ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceDnsSettings
    :ivar mac_address: The MAC address of the network interface.
    :vartype mac_address: str
    :ivar primary: Gets whether this is a primary network interface on a virtual machine.
    :vartype primary: bool
    :ivar enable_accelerated_networking: If the network interface is accelerated networking
     enabled.
    :vartype enable_accelerated_networking: bool
    :ivar enable_ip_forwarding: Indicates whether IP forwarding is enabled on this network
     interface.
    :vartype enable_ip_forwarding: bool
    :ivar resource_guid: The resource GUID property of the network interface resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the public IP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_machine': {'key': 'properties.virtualMachine', 'type': 'SubResource'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'NetworkInterfaceDnsSettings'},
        'mac_address': {'key': 'properties.macAddress', 'type': 'str'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'enable_accelerated_networking': {'key': 'properties.enableAcceleratedNetworking', 'type': 'bool'},
        'enable_ip_forwarding': {'key': 'properties.enableIPForwarding', 'type': 'bool'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword virtual_machine: The reference of a virtual machine.
        :paramtype virtual_machine: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword network_security_group: The reference of the NetworkSecurityGroup resource.
        :paramtype network_security_group: ~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup
        :keyword ip_configurations: A list of IPConfigurations of the network interface.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
        :keyword dns_settings: The DNS settings in network interface.
        :paramtype dns_settings: ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceDnsSettings
        :keyword mac_address: The MAC address of the network interface.
        :paramtype mac_address: str
        :keyword primary: Gets whether this is a primary network interface on a virtual machine.
        :paramtype primary: bool
        :keyword enable_accelerated_networking: If the network interface is accelerated networking
         enabled.
        :paramtype enable_accelerated_networking: bool
        :keyword enable_ip_forwarding: Indicates whether IP forwarding is enabled on this network
         interface.
        :paramtype enable_ip_forwarding: bool
        :keyword resource_guid: The resource GUID property of the network interface resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: The provisioning state of the public IP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(NetworkInterface, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.virtual_machine = kwargs.get('virtual_machine', None)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.dns_settings = kwargs.get('dns_settings', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.primary = kwargs.get('primary', None)
        self.enable_accelerated_networking = kwargs.get('enable_accelerated_networking', None)
        self.enable_ip_forwarding = kwargs.get('enable_ip_forwarding', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class NetworkInterfaceAssociation(msrest.serialization.Model):
    """Network interface and its custom security rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Network interface ID.
    :vartype id: str
    :ivar security_rules: Collection of custom security rules.
    :vartype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rules': {'key': 'securityRules', 'type': '[SecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword security_rules: Collection of custom security rules.
        :paramtype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        """
        super(NetworkInterfaceAssociation, self).__init__(**kwargs)
        self.id = None
        self.security_rules = kwargs.get('security_rules', None)


class NetworkInterfaceDnsSettings(msrest.serialization.Model):
    """DNS settings of a network interface.

    :ivar dns_servers: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure
     provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be
     the only value in dnsServers collection.
    :vartype dns_servers: list[str]
    :ivar applied_dns_servers: If the VM that uses this NIC is part of an Availability Set, then
     this list will have the union of all DNS servers from all NICs that are part of the
     Availability Set. This property is what is configured on each of those VMs.
    :vartype applied_dns_servers: list[str]
    :ivar internal_dns_name_label: Relative DNS name for this NIC used for internal communications
     between VMs in the same virtual network.
    :vartype internal_dns_name_label: str
    :ivar internal_fqdn: Fully qualified DNS name supporting internal communications between VMs in
     the same virtual network.
    :vartype internal_fqdn: str
    :ivar internal_domain_name_suffix: Even if internalDnsNameLabel is not specified, a DNS entry
     is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the
     VM name with the value of internalDomainNameSuffix.
    :vartype internal_domain_name_suffix: str
    """

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'applied_dns_servers': {'key': 'appliedDnsServers', 'type': '[str]'},
        'internal_dns_name_label': {'key': 'internalDnsNameLabel', 'type': 'str'},
        'internal_fqdn': {'key': 'internalFqdn', 'type': 'str'},
        'internal_domain_name_suffix': {'key': 'internalDomainNameSuffix', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dns_servers: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to
         azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it
         must be the only value in dnsServers collection.
        :paramtype dns_servers: list[str]
        :keyword applied_dns_servers: If the VM that uses this NIC is part of an Availability Set, then
         this list will have the union of all DNS servers from all NICs that are part of the
         Availability Set. This property is what is configured on each of those VMs.
        :paramtype applied_dns_servers: list[str]
        :keyword internal_dns_name_label: Relative DNS name for this NIC used for internal
         communications between VMs in the same virtual network.
        :paramtype internal_dns_name_label: str
        :keyword internal_fqdn: Fully qualified DNS name supporting internal communications between VMs
         in the same virtual network.
        :paramtype internal_fqdn: str
        :keyword internal_domain_name_suffix: Even if internalDnsNameLabel is not specified, a DNS
         entry is created for the primary NIC of the VM. This DNS name can be constructed by
         concatenating the VM name with the value of internalDomainNameSuffix.
        :paramtype internal_domain_name_suffix: str
        """
        super(NetworkInterfaceDnsSettings, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)
        self.applied_dns_servers = kwargs.get('applied_dns_servers', None)
        self.internal_dns_name_label = kwargs.get('internal_dns_name_label', None)
        self.internal_fqdn = kwargs.get('internal_fqdn', None)
        self.internal_domain_name_suffix = kwargs.get('internal_domain_name_suffix', None)


class NetworkInterfaceIPConfiguration(SubResource):
    """IPConfiguration in a network interface.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar application_gateway_backend_address_pools: The reference of
     ApplicationGatewayBackendAddressPool resource.
    :vartype application_gateway_backend_address_pools:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool]
    :ivar load_balancer_backend_address_pools: The reference of LoadBalancerBackendAddressPool
     resource.
    :vartype load_balancer_backend_address_pools:
     list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
    :ivar load_balancer_inbound_nat_rules: A list of references of LoadBalancerInboundNatRules.
    :vartype load_balancer_inbound_nat_rules:
     list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
    :ivar private_ip_address: Private IP address of the IP configuration.
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: Defines how a private IP address is assigned. Possible
     values are: 'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar private_ip_address_version: Available from Api-Version 2016-03-30 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible
     values are: 'IPv4' and 'IPv6'. Possible values include: "IPv4", "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.network.v2018_04_01.models.IPVersion
    :ivar subnet: Subnet bound to the IP configuration.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
    :ivar primary: Gets whether this is a primary customer address on the network interface.
    :vartype primary: bool
    :ivar public_ip_address: Public IP address bound to the IP configuration.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
    :ivar application_security_groups: Application security groups in which the IP configuration is
     included.
    :vartype application_security_groups:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
    :ivar provisioning_state: The provisioning state of the network interface IP configuration.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'application_gateway_backend_address_pools': {'key': 'properties.applicationGatewayBackendAddressPools', 'type': '[ApplicationGatewayBackendAddressPool]'},
        'load_balancer_backend_address_pools': {'key': 'properties.loadBalancerBackendAddressPools', 'type': '[BackendAddressPool]'},
        'load_balancer_inbound_nat_rules': {'key': 'properties.loadBalancerInboundNatRules', 'type': '[InboundNatRule]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'application_security_groups': {'key': 'properties.applicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword application_gateway_backend_address_pools: The reference of
         ApplicationGatewayBackendAddressPool resource.
        :paramtype application_gateway_backend_address_pools:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationGatewayBackendAddressPool]
        :keyword load_balancer_backend_address_pools: The reference of LoadBalancerBackendAddressPool
         resource.
        :paramtype load_balancer_backend_address_pools:
         list[~azure.mgmt.network.v2018_04_01.models.BackendAddressPool]
        :keyword load_balancer_inbound_nat_rules: A list of references of LoadBalancerInboundNatRules.
        :paramtype load_balancer_inbound_nat_rules:
         list[~azure.mgmt.network.v2018_04_01.models.InboundNatRule]
        :keyword private_ip_address: Private IP address of the IP configuration.
        :paramtype private_ip_address: str
        :keyword private_ip_allocation_method: Defines how a private IP address is assigned. Possible
         values are: 'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword private_ip_address_version: Available from Api-Version 2016-03-30 onwards, it
         represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
         Possible values are: 'IPv4' and 'IPv6'. Possible values include: "IPv4", "IPv6".
        :paramtype private_ip_address_version: str or ~azure.mgmt.network.v2018_04_01.models.IPVersion
        :keyword subnet: Subnet bound to the IP configuration.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.Subnet
        :keyword primary: Gets whether this is a primary customer address on the network interface.
        :paramtype primary: bool
        :keyword public_ip_address: Public IP address bound to the IP configuration.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddress
        :keyword application_security_groups: Application security groups in which the IP configuration
         is included.
        :paramtype application_security_groups:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
        :keyword provisioning_state: The provisioning state of the network interface IP configuration.
         Possible values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(NetworkInterfaceIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.application_gateway_backend_address_pools = kwargs.get('application_gateway_backend_address_pools', None)
        self.load_balancer_backend_address_pools = kwargs.get('load_balancer_backend_address_pools', None)
        self.load_balancer_inbound_nat_rules = kwargs.get('load_balancer_inbound_nat_rules', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)
        self.subnet = kwargs.get('subnet', None)
        self.primary = kwargs.get('primary', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.application_security_groups = kwargs.get('application_security_groups', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class NetworkInterfaceIPConfigurationListResult(msrest.serialization.Model):
    """Response for list ip configurations API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of ip configurations.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkInterfaceIPConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of ip configurations.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceIPConfiguration]
        """
        super(NetworkInterfaceIPConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkInterfaceListResult(msrest.serialization.Model):
    """Response for the ListNetworkInterface API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of network interfaces in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkInterface]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkInterface]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of network interfaces in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkInterface]
        """
        super(NetworkInterfaceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkInterfaceLoadBalancerListResult(msrest.serialization.Model):
    """Response for list ip configurations API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of load balancers.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancer]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoadBalancer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of load balancers.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.LoadBalancer]
        """
        super(NetworkInterfaceLoadBalancerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class NetworkSecurityGroup(Resource):
    """NetworkSecurityGroup resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar security_rules: A collection of security rules of the network security group.
    :vartype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    :ivar default_security_rules: The default security rules of network security group.
    :vartype default_security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    :ivar network_interfaces: A collection of references to network interfaces.
    :vartype network_interfaces: list[~azure.mgmt.network.v2018_04_01.models.NetworkInterface]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
    :ivar resource_guid: The resource GUID property of the network security group resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the public IP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'subnets': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'security_rules': {'key': 'properties.securityRules', 'type': '[SecurityRule]'},
        'default_security_rules': {'key': 'properties.defaultSecurityRules', 'type': '[SecurityRule]'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword security_rules: A collection of security rules of the network security group.
        :paramtype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        :keyword default_security_rules: The default security rules of network security group.
        :paramtype default_security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        :keyword resource_guid: The resource GUID property of the network security group resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: The provisioning state of the public IP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(NetworkSecurityGroup, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.security_rules = kwargs.get('security_rules', None)
        self.default_security_rules = kwargs.get('default_security_rules', None)
        self.network_interfaces = None
        self.subnets = None
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class NetworkSecurityGroupListResult(msrest.serialization.Model):
    """Response for ListNetworkSecurityGroups API service call.

    :ivar value: A list of NetworkSecurityGroup resources.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkSecurityGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of NetworkSecurityGroup resources.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(NetworkSecurityGroupListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class NetworkWatcher(Resource):
    """Network watcher in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        """
        super(NetworkWatcher, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.provisioning_state = None


class NetworkWatcherListResult(msrest.serialization.Model):
    """List of network watcher resources.

    :ivar value:
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkWatcher]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkWatcher]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.NetworkWatcher]
        """
        super(NetworkWatcherListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class NextHopParameters(msrest.serialization.Model):
    """Parameters that define the source and destination endpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The resource identifier of the target resource against
     which the action is to be performed.
    :vartype target_resource_id: str
    :ivar source_ip_address: Required. The source IP address.
    :vartype source_ip_address: str
    :ivar destination_ip_address: Required. The destination IP address.
    :vartype destination_ip_address: str
    :ivar target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled
     on any of the nics, then this parameter must be specified. Otherwise optional).
    :vartype target_nic_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'source_ip_address': {'required': True},
        'destination_ip_address': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'source_ip_address': {'key': 'sourceIPAddress', 'type': 'str'},
        'destination_ip_address': {'key': 'destinationIPAddress', 'type': 'str'},
        'target_nic_resource_id': {'key': 'targetNicResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The resource identifier of the target resource against
         which the action is to be performed.
        :paramtype target_resource_id: str
        :keyword source_ip_address: Required. The source IP address.
        :paramtype source_ip_address: str
        :keyword destination_ip_address: Required. The destination IP address.
        :paramtype destination_ip_address: str
        :keyword target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is
         enabled on any of the nics, then this parameter must be specified. Otherwise optional).
        :paramtype target_nic_resource_id: str
        """
        super(NextHopParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.source_ip_address = kwargs['source_ip_address']
        self.destination_ip_address = kwargs['destination_ip_address']
        self.target_nic_resource_id = kwargs.get('target_nic_resource_id', None)


class NextHopResult(msrest.serialization.Model):
    """The information about next hop from the specified VM.

    :ivar next_hop_type: Next hop type. Possible values include: "Internet", "VirtualAppliance",
     "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.NextHopType
    :ivar next_hop_ip_address: Next hop IP Address.
    :vartype next_hop_ip_address: str
    :ivar route_table_id: The resource identifier for the route table associated with the route
     being returned. If the route being returned does not correspond to any user created routes then
     this field will be the string 'System Route'.
    :vartype route_table_id: str
    """

    _attribute_map = {
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
        'route_table_id': {'key': 'routeTableId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword next_hop_type: Next hop type. Possible values include: "Internet", "VirtualAppliance",
         "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.NextHopType
        :keyword next_hop_ip_address: Next hop IP Address.
        :paramtype next_hop_ip_address: str
        :keyword route_table_id: The resource identifier for the route table associated with the route
         being returned. If the route being returned does not correspond to any user created routes then
         this field will be the string 'System Route'.
        :paramtype route_table_id: str
        """
        super(NextHopResult, self).__init__(**kwargs)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.route_table_id = kwargs.get('route_table_id', None)


class Operation(msrest.serialization.Model):
    """Network REST API operation definition.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: Display metadata associated with the operation.
    :vartype display: ~azure.mgmt.network.v2018_04_01.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar service_specification: Specification of the service.
    :vartype service_specification:
     ~azure.mgmt.network.v2018_04_01.models.OperationPropertiesFormatServiceSpecification
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'OperationPropertiesFormatServiceSpecification'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: Display metadata associated with the operation.
        :paramtype display: ~azure.mgmt.network.v2018_04_01.models.OperationDisplay
        :keyword origin: Origin of the operation.
        :paramtype origin: str
        :keyword service_specification: Specification of the service.
        :paramtype service_specification:
         ~azure.mgmt.network.v2018_04_01.models.OperationPropertiesFormatServiceSpecification
        """
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.service_specification = kwargs.get('service_specification', None)


class OperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    :ivar provider: Service provider: Microsoft Network.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    :ivar operation: Type of the operation: get, read, delete, etc.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider: Service provider: Microsoft Network.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed.
        :paramtype resource: str
        :keyword operation: Type of the operation: get, read, delete, etc.
        :paramtype operation: str
        :keyword description: Description of the operation.
        :paramtype description: str
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.

    :ivar value: List of Network operations supported by the Network resource provider.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Network operations supported by the Network resource provider.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.Operation]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class OperationPropertiesFormatServiceSpecification(msrest.serialization.Model):
    """Specification of the service.

    :ivar metric_specifications: Operation service specification.
    :vartype metric_specifications:
     list[~azure.mgmt.network.v2018_04_01.models.MetricSpecification]
    :ivar log_specifications: Operation log specification.
    :vartype log_specifications: list[~azure.mgmt.network.v2018_04_01.models.LogSpecification]
    """

    _attribute_map = {
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[MetricSpecification]'},
        'log_specifications': {'key': 'logSpecifications', 'type': '[LogSpecification]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_specifications: Operation service specification.
        :paramtype metric_specifications:
         list[~azure.mgmt.network.v2018_04_01.models.MetricSpecification]
        :keyword log_specifications: Operation log specification.
        :paramtype log_specifications: list[~azure.mgmt.network.v2018_04_01.models.LogSpecification]
        """
        super(OperationPropertiesFormatServiceSpecification, self).__init__(**kwargs)
        self.metric_specifications = kwargs.get('metric_specifications', None)
        self.log_specifications = kwargs.get('log_specifications', None)


class OutboundNatRule(SubResource):
    """Outbound NAT pool of the load balancer.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar allocated_outbound_ports: The number of outbound ports to be used for NAT.
    :vartype allocated_outbound_ports: int
    :ivar frontend_ip_configurations: The Frontend IP addresses of the load balancer.
    :vartype frontend_ip_configurations: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar backend_address_pool: A reference to a pool of DIPs. Outbound traffic is randomly load
     balanced across IPs in the backend IPs.
    :vartype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: Gets the provisioning state of the PublicIP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'allocated_outbound_ports': {'key': 'properties.allocatedOutboundPorts', 'type': 'int'},
        'frontend_ip_configurations': {'key': 'properties.frontendIPConfigurations', 'type': '[SubResource]'},
        'backend_address_pool': {'key': 'properties.backendAddressPool', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword allocated_outbound_ports: The number of outbound ports to be used for NAT.
        :paramtype allocated_outbound_ports: int
        :keyword frontend_ip_configurations: The Frontend IP addresses of the load balancer.
        :paramtype frontend_ip_configurations: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
        :keyword backend_address_pool: A reference to a pool of DIPs. Outbound traffic is randomly load
         balanced across IPs in the backend IPs.
        :paramtype backend_address_pool: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword provisioning_state: Gets the provisioning state of the PublicIP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(OutboundNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.allocated_outbound_ports = kwargs.get('allocated_outbound_ports', None)
        self.frontend_ip_configurations = kwargs.get('frontend_ip_configurations', None)
        self.backend_address_pool = kwargs.get('backend_address_pool', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PacketCapture(msrest.serialization.Model):
    """Parameters that define the create packet capture operation.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: int
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: int
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. Describes the storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
    :ivar filters:
    :vartype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
    """

    _validation = {
        'target': {'required': True},
        'storage_location': {'required': True},
    }

    _attribute_map = {
        'target': {'key': 'properties.target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'properties.bytesToCapturePerPacket', 'type': 'int'},
        'total_bytes_per_session': {'key': 'properties.totalBytesPerSession', 'type': 'int'},
        'time_limit_in_seconds': {'key': 'properties.timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'properties.storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'properties.filters', 'type': '[PacketCaptureFilter]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: int
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: int
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. Describes the storage location for a packet capture
         session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
        :keyword filters:
        :paramtype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
        """
        super(PacketCapture, self).__init__(**kwargs)
        self.target = kwargs['target']
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs['storage_location']
        self.filters = kwargs.get('filters', None)


class PacketCaptureFilter(msrest.serialization.Model):
    """Filter that is applied to packet capture request. Multiple filters can be applied.

    :ivar protocol: Protocol to be filtered on. Possible values include: "TCP", "UDP", "Any".
     Default value: "Any".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.PcProtocol
    :ivar local_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
     address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries.
     Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
     supported. Default = null.
    :vartype local_ip_address: str
    :ivar remote_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
     address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries.
     Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
     supported. Default = null.
    :vartype remote_ip_address: str
    :ivar local_port: Local port to be filtered on. Notation: "80" for single port entry."80-85"
     for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
     ranges with multiple entries not currently supported. Default = null.
    :vartype local_port: str
    :ivar remote_port: Remote port to be filtered on. Notation: "80" for single port entry."80-85"
     for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
     ranges with multiple entries not currently supported. Default = null.
    :vartype remote_port: str
    """

    _attribute_map = {
        'protocol': {'key': 'protocol', 'type': 'str'},
        'local_ip_address': {'key': 'localIPAddress', 'type': 'str'},
        'remote_ip_address': {'key': 'remoteIPAddress', 'type': 'str'},
        'local_port': {'key': 'localPort', 'type': 'str'},
        'remote_port': {'key': 'remotePort', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword protocol: Protocol to be filtered on. Possible values include: "TCP", "UDP", "Any".
         Default value: "Any".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.PcProtocol
        :keyword local_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for single
         address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries.
         Multiple ranges not currently supported. Mixing ranges with multiple entries not currently
         supported. Default = null.
        :paramtype local_ip_address: str
        :keyword remote_ip_address: Local IP Address to be filtered on. Notation: "127.0.0.1" for
         single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple
         entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not
         currently supported. Default = null.
        :paramtype remote_ip_address: str
        :keyword local_port: Local port to be filtered on. Notation: "80" for single port entry."80-85"
         for range. "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing
         ranges with multiple entries not currently supported. Default = null.
        :paramtype local_port: str
        :keyword remote_port: Remote port to be filtered on. Notation: "80" for single port
         entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently
         supported. Mixing ranges with multiple entries not currently supported. Default = null.
        :paramtype remote_port: str
        """
        super(PacketCaptureFilter, self).__init__(**kwargs)
        self.protocol = kwargs.get('protocol', "Any")
        self.local_ip_address = kwargs.get('local_ip_address', None)
        self.remote_ip_address = kwargs.get('remote_ip_address', None)
        self.local_port = kwargs.get('local_port', None)
        self.remote_port = kwargs.get('remote_port', None)


class PacketCaptureListResult(msrest.serialization.Model):
    """List of packet capture sessions.

    :ivar value: Information about packet capture sessions.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureResult]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PacketCaptureResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Information about packet capture sessions.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureResult]
        """
        super(PacketCaptureListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PacketCaptureParameters(msrest.serialization.Model):
    """Parameters that define the create packet capture operation.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: int
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: int
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. Describes the storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
    :ivar filters:
    :vartype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
    """

    _validation = {
        'target': {'required': True},
        'storage_location': {'required': True},
    }

    _attribute_map = {
        'target': {'key': 'target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'bytesToCapturePerPacket', 'type': 'int'},
        'total_bytes_per_session': {'key': 'totalBytesPerSession', 'type': 'int'},
        'time_limit_in_seconds': {'key': 'timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'filters', 'type': '[PacketCaptureFilter]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: int
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: int
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. Describes the storage location for a packet capture
         session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
        :keyword filters:
        :paramtype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
        """
        super(PacketCaptureParameters, self).__init__(**kwargs)
        self.target = kwargs['target']
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs['storage_location']
        self.filters = kwargs.get('filters', None)


class PacketCaptureQueryStatusResult(msrest.serialization.Model):
    """Status of packet capture session.

    :ivar name: The name of the packet capture resource.
    :vartype name: str
    :ivar id: The ID of the packet capture resource.
    :vartype id: str
    :ivar capture_start_time: The start time of the packet capture session.
    :vartype capture_start_time: ~datetime.datetime
    :ivar packet_capture_status: The status of the packet capture session. Possible values include:
     "NotStarted", "Running", "Stopped", "Error", "Unknown".
    :vartype packet_capture_status: str or ~azure.mgmt.network.v2018_04_01.models.PcStatus
    :ivar stop_reason: The reason the current packet capture session was stopped.
    :vartype stop_reason: str
    :ivar packet_capture_error: List of errors of packet capture session.
    :vartype packet_capture_error: list[str or ~azure.mgmt.network.v2018_04_01.models.PcError]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'capture_start_time': {'key': 'captureStartTime', 'type': 'iso-8601'},
        'packet_capture_status': {'key': 'packetCaptureStatus', 'type': 'str'},
        'stop_reason': {'key': 'stopReason', 'type': 'str'},
        'packet_capture_error': {'key': 'packetCaptureError', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the packet capture resource.
        :paramtype name: str
        :keyword id: The ID of the packet capture resource.
        :paramtype id: str
        :keyword capture_start_time: The start time of the packet capture session.
        :paramtype capture_start_time: ~datetime.datetime
        :keyword packet_capture_status: The status of the packet capture session. Possible values
         include: "NotStarted", "Running", "Stopped", "Error", "Unknown".
        :paramtype packet_capture_status: str or ~azure.mgmt.network.v2018_04_01.models.PcStatus
        :keyword stop_reason: The reason the current packet capture session was stopped.
        :paramtype stop_reason: str
        :keyword packet_capture_error: List of errors of packet capture session.
        :paramtype packet_capture_error: list[str or ~azure.mgmt.network.v2018_04_01.models.PcError]
        """
        super(PacketCaptureQueryStatusResult, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.capture_start_time = kwargs.get('capture_start_time', None)
        self.packet_capture_status = kwargs.get('packet_capture_status', None)
        self.stop_reason = kwargs.get('stop_reason', None)
        self.packet_capture_error = kwargs.get('packet_capture_error', None)


class PacketCaptureResult(msrest.serialization.Model):
    """Information about packet capture session.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the packet capture session.
    :vartype name: str
    :ivar id: ID of the packet capture operation.
    :vartype id: str
    :ivar etag:
    :vartype etag: str
    :ivar target: The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: int
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: int
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Describes the storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
    :ivar filters:
    :vartype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
    :ivar provisioning_state: The provisioning state of the packet capture session. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'target': {'key': 'properties.target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'properties.bytesToCapturePerPacket', 'type': 'int'},
        'total_bytes_per_session': {'key': 'properties.totalBytesPerSession', 'type': 'int'},
        'time_limit_in_seconds': {'key': 'properties.timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'properties.storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'properties.filters', 'type': '[PacketCaptureFilter]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword etag:
        :paramtype etag: str
        :keyword target: The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: int
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: int
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Describes the storage location for a packet capture session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
        :keyword filters:
        :paramtype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
        :keyword provisioning_state: The provisioning state of the packet capture session. Possible
         values include: "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(PacketCaptureResult, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.etag = kwargs.get('etag', "A unique read-only string that changes whenever the resource is updated.")
        self.target = kwargs.get('target', None)
        self.bytes_to_capture_per_packet = kwargs.get('bytes_to_capture_per_packet', 0)
        self.total_bytes_per_session = kwargs.get('total_bytes_per_session', 1073741824)
        self.time_limit_in_seconds = kwargs.get('time_limit_in_seconds', 18000)
        self.storage_location = kwargs.get('storage_location', None)
        self.filters = kwargs.get('filters', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PacketCaptureResultProperties(PacketCaptureParameters):
    """Describes the properties of a packet capture session.

    All required parameters must be populated in order to send to Azure.

    :ivar target: Required. The ID of the targeted resource, only VM is currently supported.
    :vartype target: str
    :ivar bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes are
     truncated.
    :vartype bytes_to_capture_per_packet: int
    :ivar total_bytes_per_session: Maximum size of the capture output.
    :vartype total_bytes_per_session: int
    :ivar time_limit_in_seconds: Maximum duration of the capture session in seconds.
    :vartype time_limit_in_seconds: int
    :ivar storage_location: Required. Describes the storage location for a packet capture session.
    :vartype storage_location: ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
    :ivar filters:
    :vartype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
    :ivar provisioning_state: The provisioning state of the packet capture session. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'target': {'required': True},
        'storage_location': {'required': True},
    }

    _attribute_map = {
        'target': {'key': 'target', 'type': 'str'},
        'bytes_to_capture_per_packet': {'key': 'bytesToCapturePerPacket', 'type': 'int'},
        'total_bytes_per_session': {'key': 'totalBytesPerSession', 'type': 'int'},
        'time_limit_in_seconds': {'key': 'timeLimitInSeconds', 'type': 'int'},
        'storage_location': {'key': 'storageLocation', 'type': 'PacketCaptureStorageLocation'},
        'filters': {'key': 'filters', 'type': '[PacketCaptureFilter]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target: Required. The ID of the targeted resource, only VM is currently supported.
        :paramtype target: str
        :keyword bytes_to_capture_per_packet: Number of bytes captured per packet, the remaining bytes
         are truncated.
        :paramtype bytes_to_capture_per_packet: int
        :keyword total_bytes_per_session: Maximum size of the capture output.
        :paramtype total_bytes_per_session: int
        :keyword time_limit_in_seconds: Maximum duration of the capture session in seconds.
        :paramtype time_limit_in_seconds: int
        :keyword storage_location: Required. Describes the storage location for a packet capture
         session.
        :paramtype storage_location:
         ~azure.mgmt.network.v2018_04_01.models.PacketCaptureStorageLocation
        :keyword filters:
        :paramtype filters: list[~azure.mgmt.network.v2018_04_01.models.PacketCaptureFilter]
        :keyword provisioning_state: The provisioning state of the packet capture session. Possible
         values include: "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(PacketCaptureResultProperties, self).__init__(**kwargs)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PacketCaptureStorageLocation(msrest.serialization.Model):
    """Describes the storage location for a packet capture session.

    :ivar storage_id: The ID of the storage account to save the packet capture session. Required if
     no local file path is provided.
    :vartype storage_id: str
    :ivar storage_path: The URI of the storage path to save the packet capture. Must be a
     well-formed URI describing the location to save the packet capture.
    :vartype storage_path: str
    :ivar file_path: A valid local path on the targeting VM. Must include the name of the capture
     file (*.cap). For linux virtual machine it must start with /var/captures. Required if no
     storage ID is provided, otherwise optional.
    :vartype file_path: str
    """

    _attribute_map = {
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'storage_path': {'key': 'storagePath', 'type': 'str'},
        'file_path': {'key': 'filePath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_id: The ID of the storage account to save the packet capture session. Required
         if no local file path is provided.
        :paramtype storage_id: str
        :keyword storage_path: The URI of the storage path to save the packet capture. Must be a
         well-formed URI describing the location to save the packet capture.
        :paramtype storage_path: str
        :keyword file_path: A valid local path on the targeting VM. Must include the name of the
         capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if
         no storage ID is provided, otherwise optional.
        :paramtype file_path: str
        """
        super(PacketCaptureStorageLocation, self).__init__(**kwargs)
        self.storage_id = kwargs.get('storage_id', None)
        self.storage_path = kwargs.get('storage_path', None)
        self.file_path = kwargs.get('file_path', None)


class PatchRouteFilter(SubResource):
    """Route Filter Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar rules: Collection of RouteFilterRules contained within a route filter.
    :vartype rules: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
    :ivar peerings: A collection of references to express route circuit peerings.
    :vartype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', 'Succeeded' and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'rules': {'key': 'properties.rules', 'type': '[RouteFilterRule]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword rules: Collection of RouteFilterRules contained within a route filter.
        :paramtype rules: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
        :keyword peerings: A collection of references to express route circuit peerings.
        :paramtype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
        """
        super(PatchRouteFilter, self).__init__(**kwargs)
        self.name = None
        self.etag = None
        self.type = None
        self.tags = kwargs.get('tags', None)
        self.rules = kwargs.get('rules', None)
        self.peerings = kwargs.get('peerings', None)
        self.provisioning_state = None


class PatchRouteFilterRule(SubResource):
    """Route Filter Rule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar access: The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible values
     include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
    :ivar route_filter_rule_type: The rule type of the rule. Valid value is: 'Community'. Possible
     values include: "Community".
    :vartype route_filter_rule_type: str or
     ~azure.mgmt.network.v2018_04_01.models.RouteFilterRuleType
    :ivar communities: The collection for bgp community values to filter on. e.g.
     ['12076:5010','12076:5020'].
    :vartype communities: list[str]
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', 'Succeeded' and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'route_filter_rule_type': {'key': 'properties.routeFilterRuleType', 'type': 'str'},
        'communities': {'key': 'properties.communities', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword access: The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible
         values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
        :keyword route_filter_rule_type: The rule type of the rule. Valid value is: 'Community'.
         Possible values include: "Community".
        :paramtype route_filter_rule_type: str or
         ~azure.mgmt.network.v2018_04_01.models.RouteFilterRuleType
        :keyword communities: The collection for bgp community values to filter on. e.g.
         ['12076:5010','12076:5020'].
        :paramtype communities: list[str]
        """
        super(PatchRouteFilterRule, self).__init__(**kwargs)
        self.name = None
        self.etag = None
        self.access = kwargs.get('access', None)
        self.route_filter_rule_type = kwargs.get('route_filter_rule_type', None)
        self.communities = kwargs.get('communities', None)
        self.provisioning_state = None


class Policies(msrest.serialization.Model):
    """Policies for vpn gateway.

    :ivar allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
    :vartype allow_branch_to_branch_traffic: bool
    :ivar allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
    :vartype allow_vnet_to_vnet_traffic: bool
    """

    _attribute_map = {
        'allow_branch_to_branch_traffic': {'key': 'allowBranchToBranchTraffic', 'type': 'bool'},
        'allow_vnet_to_vnet_traffic': {'key': 'allowVnetToVnetTraffic', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
        :paramtype allow_branch_to_branch_traffic: bool
        :keyword allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
        :paramtype allow_vnet_to_vnet_traffic: bool
        """
        super(Policies, self).__init__(**kwargs)
        self.allow_branch_to_branch_traffic = kwargs.get('allow_branch_to_branch_traffic', None)
        self.allow_vnet_to_vnet_traffic = kwargs.get('allow_vnet_to_vnet_traffic', None)


class Probe(SubResource):
    """A load balancer probe.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Gets name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar load_balancing_rules: The load balancer rules that use this probe.
    :vartype load_balancing_rules: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar protocol: The protocol of the end point. Possible values are: 'Http', 'Tcp', or 'Https'.
     If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or
     'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be
     successful. Possible values include: "Http", "Tcp", "Https".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ProbeProtocol
    :ivar port: The port for communicating the probe. Possible values range from 1 to 65535,
     inclusive.
    :vartype port: int
    :ivar interval_in_seconds: The interval, in seconds, for how frequently to probe the endpoint
     for health status. Typically, the interval is slightly less than half the allocated timeout
     period (in seconds) which allows two full probes before taking the instance out of rotation.
     The default value is 15, the minimum value is 5.
    :vartype interval_in_seconds: int
    :ivar number_of_probes: The number of probes where if no response, will result in stopping
     further traffic from being delivered to the endpoint. This values allows endpoints to be taken
     out of rotation faster or slower than the typical times used in Azure.
    :vartype number_of_probes: int
    :ivar request_path: The URI used for requesting health status from the VM. Path is required if
     a protocol is set to http. Otherwise, it is not allowed. There is no default value.
    :vartype request_path: str
    :ivar provisioning_state: Gets the provisioning state of the public IP resource. Possible
     values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'load_balancing_rules': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'interval_in_seconds': {'key': 'properties.intervalInSeconds', 'type': 'int'},
        'number_of_probes': {'key': 'properties.numberOfProbes', 'type': 'int'},
        'request_path': {'key': 'properties.requestPath', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Gets name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword protocol: The protocol of the end point. Possible values are: 'Http', 'Tcp', or
         'Https'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If
         'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the
         probe to be successful. Possible values include: "Http", "Tcp", "Https".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.ProbeProtocol
        :keyword port: The port for communicating the probe. Possible values range from 1 to 65535,
         inclusive.
        :paramtype port: int
        :keyword interval_in_seconds: The interval, in seconds, for how frequently to probe the
         endpoint for health status. Typically, the interval is slightly less than half the allocated
         timeout period (in seconds) which allows two full probes before taking the instance out of
         rotation. The default value is 15, the minimum value is 5.
        :paramtype interval_in_seconds: int
        :keyword number_of_probes: The number of probes where if no response, will result in stopping
         further traffic from being delivered to the endpoint. This values allows endpoints to be taken
         out of rotation faster or slower than the typical times used in Azure.
        :paramtype number_of_probes: int
        :keyword request_path: The URI used for requesting health status from the VM. Path is required
         if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
        :paramtype request_path: str
        :keyword provisioning_state: Gets the provisioning state of the public IP resource. Possible
         values are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(Probe, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.load_balancing_rules = None
        self.protocol = kwargs.get('protocol', None)
        self.port = kwargs.get('port', None)
        self.interval_in_seconds = kwargs.get('interval_in_seconds', None)
        self.number_of_probes = kwargs.get('number_of_probes', None)
        self.request_path = kwargs.get('request_path', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class ProtocolConfiguration(msrest.serialization.Model):
    """Configuration of the protocol.

    :ivar http_configuration: HTTP configuration of the connectivity check.
    :vartype http_configuration: ~azure.mgmt.network.v2018_04_01.models.HTTPConfiguration
    """

    _attribute_map = {
        'http_configuration': {'key': 'HTTPConfiguration', 'type': 'HTTPConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword http_configuration: HTTP configuration of the connectivity check.
        :paramtype http_configuration: ~azure.mgmt.network.v2018_04_01.models.HTTPConfiguration
        """
        super(ProtocolConfiguration, self).__init__(**kwargs)
        self.http_configuration = kwargs.get('http_configuration', None)


class PublicIPAddress(Resource):
    """Public IP address resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The public IP address SKU.
    :vartype sku: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :vartype zones: list[str]
    :ivar public_ip_allocation_method: The public IP allocation method. Possible values are:
     'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
    :vartype public_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar public_ip_address_version: The public IP address version. Possible values are: 'IPv4' and
     'IPv6'. Possible values include: "IPv4", "IPv6".
    :vartype public_ip_address_version: str or ~azure.mgmt.network.v2018_04_01.models.IPVersion
    :ivar ip_configuration: The IP configuration associated with the public IP address.
    :vartype ip_configuration: ~azure.mgmt.network.v2018_04_01.models.IPConfiguration
    :ivar dns_settings: The FQDN of the DNS record associated with the public IP address.
    :vartype dns_settings: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressDnsSettings
    :ivar ip_tags: The list of tags associated with the public IP address.
    :vartype ip_tags: list[~azure.mgmt.network.v2018_04_01.models.IpTag]
    :ivar ip_address: The IP address associated with the public IP address resource.
    :vartype ip_address: str
    :ivar idle_timeout_in_minutes: The idle timeout of the public IP address.
    :vartype idle_timeout_in_minutes: int
    :ivar resource_guid: The resource GUID property of the public IP resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the PublicIP resource. Possible values are:
     'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'ip_configuration': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'PublicIPAddressSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'public_ip_allocation_method': {'key': 'properties.publicIPAllocationMethod', 'type': 'str'},
        'public_ip_address_version': {'key': 'properties.publicIPAddressVersion', 'type': 'str'},
        'ip_configuration': {'key': 'properties.ipConfiguration', 'type': 'IPConfiguration'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'PublicIPAddressDnsSettings'},
        'ip_tags': {'key': 'properties.ipTags', 'type': '[IpTag]'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: The public IP address SKU.
        :paramtype sku: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressSku
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword zones: A list of availability zones denoting the IP allocated for the resource needs
         to come from.
        :paramtype zones: list[str]
        :keyword public_ip_allocation_method: The public IP allocation method. Possible values are:
         'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
        :paramtype public_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword public_ip_address_version: The public IP address version. Possible values are: 'IPv4'
         and 'IPv6'. Possible values include: "IPv4", "IPv6".
        :paramtype public_ip_address_version: str or ~azure.mgmt.network.v2018_04_01.models.IPVersion
        :keyword dns_settings: The FQDN of the DNS record associated with the public IP address.
        :paramtype dns_settings: ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressDnsSettings
        :keyword ip_tags: The list of tags associated with the public IP address.
        :paramtype ip_tags: list[~azure.mgmt.network.v2018_04_01.models.IpTag]
        :keyword ip_address: The IP address associated with the public IP address resource.
        :paramtype ip_address: str
        :keyword idle_timeout_in_minutes: The idle timeout of the public IP address.
        :paramtype idle_timeout_in_minutes: int
        :keyword resource_guid: The resource GUID property of the public IP resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: The provisioning state of the PublicIP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(PublicIPAddress, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.etag = kwargs.get('etag', None)
        self.zones = kwargs.get('zones', None)
        self.public_ip_allocation_method = kwargs.get('public_ip_allocation_method', None)
        self.public_ip_address_version = kwargs.get('public_ip_address_version', None)
        self.ip_configuration = None
        self.dns_settings = kwargs.get('dns_settings', None)
        self.ip_tags = kwargs.get('ip_tags', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PublicIPAddressDnsSettings(msrest.serialization.Model):
    """Contains FQDN of the DNS record associated with the public IP address.

    :ivar domain_name_label: Gets or sets the Domain name label.The concatenation of the domain
     name label and the regionalized DNS zone make up the fully qualified domain name associated
     with the public IP address. If a domain name label is specified, an A DNS record is created for
     the public IP in the Microsoft Azure DNS system.
    :vartype domain_name_label: str
    :ivar fqdn: Gets the FQDN, Fully qualified domain name of the A DNS record associated with the
     public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
    :vartype fqdn: str
    :ivar reverse_fqdn: Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name
     that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record
     is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
    :vartype reverse_fqdn: str
    """

    _attribute_map = {
        'domain_name_label': {'key': 'domainNameLabel', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'reverse_fqdn': {'key': 'reverseFqdn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword domain_name_label: Gets or sets the Domain name label.The concatenation of the domain
         name label and the regionalized DNS zone make up the fully qualified domain name associated
         with the public IP address. If a domain name label is specified, an A DNS record is created for
         the public IP in the Microsoft Azure DNS system.
        :paramtype domain_name_label: str
        :keyword fqdn: Gets the FQDN, Fully qualified domain name of the A DNS record associated with
         the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
        :paramtype fqdn: str
        :keyword reverse_fqdn: Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain
         name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS
         record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
        :paramtype reverse_fqdn: str
        """
        super(PublicIPAddressDnsSettings, self).__init__(**kwargs)
        self.domain_name_label = kwargs.get('domain_name_label', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.reverse_fqdn = kwargs.get('reverse_fqdn', None)


class PublicIPAddressListResult(msrest.serialization.Model):
    """Response for ListPublicIpAddresses API service call.

    :ivar value: A list of public IP addresses that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.PublicIPAddress]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PublicIPAddress]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A list of public IP addresses that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.PublicIPAddress]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(PublicIPAddressListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class PublicIPAddressSku(msrest.serialization.Model):
    """SKU of a public IP address.

    :ivar name: Name of a public IP address SKU. Possible values include: "Basic", "Standard".
    :vartype name: str or ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressSkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of a public IP address SKU. Possible values include: "Basic", "Standard".
        :paramtype name: str or ~azure.mgmt.network.v2018_04_01.models.PublicIPAddressSkuName
        """
        super(PublicIPAddressSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class QueryTroubleshootingParameters(msrest.serialization.Model):
    """Parameters that define the resource to query the troubleshooting result.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource ID to query the troubleshooting result.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource ID to query the troubleshooting
         result.
        :paramtype target_resource_id: str
        """
        super(QueryTroubleshootingParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class ResourceNavigationLink(SubResource):
    """ResourceNavigationLink resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar linked_resource_type: Resource type of the linked resource.
    :vartype linked_resource_type: str
    :ivar link: Link to the external resource.
    :vartype link: str
    :ivar provisioning_state: Provisioning state of the ResourceNavigationLink resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'linked_resource_type': {'key': 'properties.linkedResourceType', 'type': 'str'},
        'link': {'key': 'properties.link', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: Name of the resource that is unique within a resource group. This name can be
         used to access the resource.
        :paramtype name: str
        :keyword linked_resource_type: Resource type of the linked resource.
        :paramtype linked_resource_type: str
        :keyword link: Link to the external resource.
        :paramtype link: str
        """
        super(ResourceNavigationLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.linked_resource_type = kwargs.get('linked_resource_type', None)
        self.link = kwargs.get('link', None)
        self.provisioning_state = None


class RetentionPolicyParameters(msrest.serialization.Model):
    """Parameters that define the retention policy for flow log.

    :ivar days: Number of days to retain flow log records.
    :vartype days: int
    :ivar enabled: Flag to enable/disable retention.
    :vartype enabled: bool
    """

    _attribute_map = {
        'days': {'key': 'days', 'type': 'int'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword days: Number of days to retain flow log records.
        :paramtype days: int
        :keyword enabled: Flag to enable/disable retention.
        :paramtype enabled: bool
        """
        super(RetentionPolicyParameters, self).__init__(**kwargs)
        self.days = kwargs.get('days', 0)
        self.enabled = kwargs.get('enabled', False)


class Route(SubResource):
    """Route resource.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar address_prefix: The destination CIDR to which the route applies.
    :vartype address_prefix: str
    :ivar next_hop_type: The type of Azure hop the packet should be sent to. Possible values are:
     'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
     values include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
    :vartype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.RouteNextHopType
    :ivar next_hop_ip_address: The IP address packets should be forwarded to. Next hop values are
     only allowed in routes where the next hop type is VirtualAppliance.
    :vartype next_hop_ip_address: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'next_hop_type': {'key': 'properties.nextHopType', 'type': 'str'},
        'next_hop_ip_address': {'key': 'properties.nextHopIpAddress', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword address_prefix: The destination CIDR to which the route applies.
        :paramtype address_prefix: str
        :keyword next_hop_type: The type of Azure hop the packet should be sent to. Possible values
         are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
         values include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
        :paramtype next_hop_type: str or ~azure.mgmt.network.v2018_04_01.models.RouteNextHopType
        :keyword next_hop_ip_address: The IP address packets should be forwarded to. Next hop values
         are only allowed in routes where the next hop type is VirtualAppliance.
        :paramtype next_hop_ip_address: str
        :keyword provisioning_state: The provisioning state of the resource. Possible values are:
         'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(Route, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class RouteFilter(Resource):
    """Route Filter Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar rules: Collection of RouteFilterRules contained within a route filter.
    :vartype rules: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
    :ivar peerings: A collection of references to express route circuit peerings.
    :vartype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', 'Succeeded' and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'rules': {'key': 'properties.rules', 'type': '[RouteFilterRule]'},
        'peerings': {'key': 'properties.peerings', 'type': '[ExpressRouteCircuitPeering]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword rules: Collection of RouteFilterRules contained within a route filter.
        :paramtype rules: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
        :keyword peerings: A collection of references to express route circuit peerings.
        :paramtype peerings: list[~azure.mgmt.network.v2018_04_01.models.ExpressRouteCircuitPeering]
        """
        super(RouteFilter, self).__init__(**kwargs)
        self.etag = None
        self.rules = kwargs.get('rules', None)
        self.peerings = kwargs.get('peerings', None)
        self.provisioning_state = None


class RouteFilterListResult(msrest.serialization.Model):
    """Response for the ListRouteFilters API service call.

    :ivar value: Gets a list of route filters in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.RouteFilter]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteFilter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of route filters in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.RouteFilter]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteFilterListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteFilterRule(SubResource):
    """Route Filter Rule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar access: The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible values
     include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
    :ivar route_filter_rule_type: The rule type of the rule. Valid value is: 'Community'. Possible
     values include: "Community".
    :vartype route_filter_rule_type: str or
     ~azure.mgmt.network.v2018_04_01.models.RouteFilterRuleType
    :ivar communities: The collection for bgp community values to filter on. e.g.
     ['12076:5010','12076:5020'].
    :vartype communities: list[str]
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', 'Succeeded' and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'route_filter_rule_type': {'key': 'properties.routeFilterRuleType', 'type': 'str'},
        'communities': {'key': 'properties.communities', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword access: The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible
         values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
        :keyword route_filter_rule_type: The rule type of the rule. Valid value is: 'Community'.
         Possible values include: "Community".
        :paramtype route_filter_rule_type: str or
         ~azure.mgmt.network.v2018_04_01.models.RouteFilterRuleType
        :keyword communities: The collection for bgp community values to filter on. e.g.
         ['12076:5010','12076:5020'].
        :paramtype communities: list[str]
        """
        super(RouteFilterRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.location = kwargs.get('location', None)
        self.etag = None
        self.access = kwargs.get('access', None)
        self.route_filter_rule_type = kwargs.get('route_filter_rule_type', None)
        self.communities = kwargs.get('communities', None)
        self.provisioning_state = None


class RouteFilterRuleListResult(msrest.serialization.Model):
    """Response for the ListRouteFilterRules API service call.

    :ivar value: Gets a list of RouteFilterRules in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteFilterRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of RouteFilterRules in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.RouteFilterRule]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteFilterRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteListResult(msrest.serialization.Model):
    """Response for the ListRoute API service call.

    :ivar value: Gets a list of routes in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.Route]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Route]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of routes in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.Route]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RouteTable(Resource):
    """Route table resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar routes: Collection of routes contained within a route table.
    :vartype routes: list[~azure.mgmt.network.v2018_04_01.models.Route]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
    :ivar disable_bgp_route_propagation: Gets or sets whether to disable the routes learned by BGP
     on that route table. True means disable.
    :vartype disable_bgp_route_propagation: bool
    :ivar provisioning_state: The provisioning state of the resource. Possible values are:
     'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'subnets': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[Route]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'disable_bgp_route_propagation': {'key': 'properties.disableBgpRoutePropagation', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword routes: Collection of routes contained within a route table.
        :paramtype routes: list[~azure.mgmt.network.v2018_04_01.models.Route]
        :keyword disable_bgp_route_propagation: Gets or sets whether to disable the routes learned by
         BGP on that route table. True means disable.
        :paramtype disable_bgp_route_propagation: bool
        :keyword provisioning_state: The provisioning state of the resource. Possible values are:
         'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(RouteTable, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.routes = kwargs.get('routes', None)
        self.subnets = None
        self.disable_bgp_route_propagation = kwargs.get('disable_bgp_route_propagation', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class RouteTableListResult(msrest.serialization.Model):
    """Response for the ListRouteTable API service call.

    :ivar value: Gets a list of route tables in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.RouteTable]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RouteTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of route tables in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.RouteTable]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(RouteTableListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class SecurityGroupNetworkInterface(msrest.serialization.Model):
    """Network interface and all its associated security rules.

    :ivar id: ID of the network interface.
    :vartype id: str
    :ivar security_rule_associations: All security rules associated with the network interface.
    :vartype security_rule_associations:
     ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAssociations
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rule_associations': {'key': 'securityRuleAssociations', 'type': 'SecurityRuleAssociations'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: ID of the network interface.
        :paramtype id: str
        :keyword security_rule_associations: All security rules associated with the network interface.
        :paramtype security_rule_associations:
         ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAssociations
        """
        super(SecurityGroupNetworkInterface, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.security_rule_associations = kwargs.get('security_rule_associations', None)


class SecurityGroupViewParameters(msrest.serialization.Model):
    """Parameters that define the VM to check security groups for.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. ID of the target VM.
    :vartype target_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. ID of the target VM.
        :paramtype target_resource_id: str
        """
        super(SecurityGroupViewParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']


class SecurityGroupViewResult(msrest.serialization.Model):
    """The information about security rules applied to the specified VM.

    :ivar network_interfaces: List of network interfaces on the specified VM.
    :vartype network_interfaces:
     list[~azure.mgmt.network.v2018_04_01.models.SecurityGroupNetworkInterface]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[SecurityGroupNetworkInterface]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interfaces: List of network interfaces on the specified VM.
        :paramtype network_interfaces:
         list[~azure.mgmt.network.v2018_04_01.models.SecurityGroupNetworkInterface]
        """
        super(SecurityGroupViewResult, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class SecurityRule(SubResource):
    """Network security rule.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar description: A description for this rule. Restricted to 140 chars.
    :vartype description: str
    :ivar protocol: Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and
     '*'. Possible values include: "Tcp", "Udp", "*".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleProtocol
    :ivar source_port_range: The source port or range. Integer or range between 0 and 65535.
     Asterisk '*' can also be used to match all ports.
    :vartype source_port_range: str
    :ivar destination_port_range: The destination port or range. Integer or range between 0 and
     65535. Asterisk '*' can also be used to match all ports.
    :vartype destination_port_range: str
    :ivar source_address_prefix: The CIDR or source IP range. Asterisk '*' can also be used to
     match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     can also be used. If this is an ingress rule, specifies where network traffic originates from.
    :vartype source_address_prefix: str
    :ivar source_address_prefixes: The CIDR or source IP ranges.
    :vartype source_address_prefixes: list[str]
    :ivar source_application_security_groups: The application security group specified as source.
    :vartype source_application_security_groups:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
    :ivar destination_address_prefix: The destination address prefix. CIDR or destination IP range.
     Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork',
     'AzureLoadBalancer' and 'Internet' can also be used.
    :vartype destination_address_prefix: str
    :ivar destination_address_prefixes: The destination address prefixes. CIDR or destination IP
     ranges.
    :vartype destination_address_prefixes: list[str]
    :ivar destination_application_security_groups: The application security group specified as
     destination.
    :vartype destination_application_security_groups:
     list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
    :ivar source_port_ranges: The source port ranges.
    :vartype source_port_ranges: list[str]
    :ivar destination_port_ranges: The destination port ranges.
    :vartype destination_port_ranges: list[str]
    :ivar access: The network traffic is allowed or denied. Possible values are: 'Allow' and
     'Deny'. Possible values include: "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAccess
    :ivar priority: The priority of the rule. The value can be between 100 and 4096. The priority
     number must be unique for each rule in the collection. The lower the priority number, the
     higher the priority of the rule.
    :vartype priority: int
    :ivar direction: The direction of the rule. The direction specifies if rule will be evaluated
     on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
     include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleDirection
    :ivar provisioning_state: The provisioning state of the public IP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'source_port_range': {'key': 'properties.sourcePortRange', 'type': 'str'},
        'destination_port_range': {'key': 'properties.destinationPortRange', 'type': 'str'},
        'source_address_prefix': {'key': 'properties.sourceAddressPrefix', 'type': 'str'},
        'source_address_prefixes': {'key': 'properties.sourceAddressPrefixes', 'type': '[str]'},
        'source_application_security_groups': {'key': 'properties.sourceApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'destination_address_prefix': {'key': 'properties.destinationAddressPrefix', 'type': 'str'},
        'destination_address_prefixes': {'key': 'properties.destinationAddressPrefixes', 'type': '[str]'},
        'destination_application_security_groups': {'key': 'properties.destinationApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[str]'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'direction': {'key': 'properties.direction', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword description: A description for this rule. Restricted to 140 chars.
        :paramtype description: str
        :keyword protocol: Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and
         '*'. Possible values include: "Tcp", "Udp", "*".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleProtocol
        :keyword source_port_range: The source port or range. Integer or range between 0 and 65535.
         Asterisk '*' can also be used to match all ports.
        :paramtype source_port_range: str
        :keyword destination_port_range: The destination port or range. Integer or range between 0 and
         65535. Asterisk '*' can also be used to match all ports.
        :paramtype destination_port_range: str
        :keyword source_address_prefix: The CIDR or source IP range. Asterisk '*' can also be used to
         match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
         can also be used. If this is an ingress rule, specifies where network traffic originates from.
        :paramtype source_address_prefix: str
        :keyword source_address_prefixes: The CIDR or source IP ranges.
        :paramtype source_address_prefixes: list[str]
        :keyword source_application_security_groups: The application security group specified as
         source.
        :paramtype source_application_security_groups:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
        :keyword destination_address_prefix: The destination address prefix. CIDR or destination IP
         range. Asterisk '*' can also be used to match all source IPs. Default tags such as
         'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
        :paramtype destination_address_prefix: str
        :keyword destination_address_prefixes: The destination address prefixes. CIDR or destination IP
         ranges.
        :paramtype destination_address_prefixes: list[str]
        :keyword destination_application_security_groups: The application security group specified as
         destination.
        :paramtype destination_application_security_groups:
         list[~azure.mgmt.network.v2018_04_01.models.ApplicationSecurityGroup]
        :keyword source_port_ranges: The source port ranges.
        :paramtype source_port_ranges: list[str]
        :keyword destination_port_ranges: The destination port ranges.
        :paramtype destination_port_ranges: list[str]
        :keyword access: The network traffic is allowed or denied. Possible values are: 'Allow' and
         'Deny'. Possible values include: "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleAccess
        :keyword priority: The priority of the rule. The value can be between 100 and 4096. The
         priority number must be unique for each rule in the collection. The lower the priority number,
         the higher the priority of the rule.
        :paramtype priority: int
        :keyword direction: The direction of the rule. The direction specifies if rule will be
         evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.
         Possible values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2018_04_01.models.SecurityRuleDirection
        :keyword provisioning_state: The provisioning state of the public IP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        """
        super(SecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.description = kwargs.get('description', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_port_range = kwargs.get('source_port_range', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.source_address_prefixes = kwargs.get('source_address_prefixes', None)
        self.source_application_security_groups = kwargs.get('source_application_security_groups', None)
        self.destination_address_prefix = kwargs.get('destination_address_prefix', None)
        self.destination_address_prefixes = kwargs.get('destination_address_prefixes', None)
        self.destination_application_security_groups = kwargs.get('destination_application_security_groups', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.access = kwargs.get('access', None)
        self.priority = kwargs.get('priority', None)
        self.direction = kwargs.get('direction', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class SecurityRuleAssociations(msrest.serialization.Model):
    """All security rules associated with the network interface.

    :ivar network_interface_association: Network interface and its custom security rules.
    :vartype network_interface_association:
     ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceAssociation
    :ivar subnet_association: Network interface and its custom security rules.
    :vartype subnet_association: ~azure.mgmt.network.v2018_04_01.models.SubnetAssociation
    :ivar default_security_rules: Collection of default security rules of the network security
     group.
    :vartype default_security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    :ivar effective_security_rules: Collection of effective security rules.
    :vartype effective_security_rules:
     list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityRule]
    """

    _attribute_map = {
        'network_interface_association': {'key': 'networkInterfaceAssociation', 'type': 'NetworkInterfaceAssociation'},
        'subnet_association': {'key': 'subnetAssociation', 'type': 'SubnetAssociation'},
        'default_security_rules': {'key': 'defaultSecurityRules', 'type': '[SecurityRule]'},
        'effective_security_rules': {'key': 'effectiveSecurityRules', 'type': '[EffectiveNetworkSecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interface_association: Network interface and its custom security rules.
        :paramtype network_interface_association:
         ~azure.mgmt.network.v2018_04_01.models.NetworkInterfaceAssociation
        :keyword subnet_association: Network interface and its custom security rules.
        :paramtype subnet_association: ~azure.mgmt.network.v2018_04_01.models.SubnetAssociation
        :keyword default_security_rules: Collection of default security rules of the network security
         group.
        :paramtype default_security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        :keyword effective_security_rules: Collection of effective security rules.
        :paramtype effective_security_rules:
         list[~azure.mgmt.network.v2018_04_01.models.EffectiveNetworkSecurityRule]
        """
        super(SecurityRuleAssociations, self).__init__(**kwargs)
        self.network_interface_association = kwargs.get('network_interface_association', None)
        self.subnet_association = kwargs.get('subnet_association', None)
        self.default_security_rules = kwargs.get('default_security_rules', None)
        self.effective_security_rules = kwargs.get('effective_security_rules', None)


class SecurityRuleListResult(msrest.serialization.Model):
    """Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.

    :ivar value: The security rules in a network security group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The security rules in a network security group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(SecurityRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ServiceEndpointPropertiesFormat(msrest.serialization.Model):
    """The service endpoint properties.

    :ivar service: The type of the endpoint service.
    :vartype service: str
    :ivar locations: A list of locations.
    :vartype locations: list[str]
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'service': {'key': 'service', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service: The type of the endpoint service.
        :paramtype service: str
        :keyword locations: A list of locations.
        :paramtype locations: list[str]
        :keyword provisioning_state: The provisioning state of the resource.
        :paramtype provisioning_state: str
        """
        super(ServiceEndpointPropertiesFormat, self).__init__(**kwargs)
        self.service = kwargs.get('service', None)
        self.locations = kwargs.get('locations', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class Subnet(SubResource):
    """Subnet in a virtual network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar address_prefix: The address prefix for the subnet.
    :vartype address_prefix: str
    :ivar network_security_group: The reference of the NetworkSecurityGroup resource.
    :vartype network_security_group: ~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup
    :ivar route_table: The reference of the RouteTable resource.
    :vartype route_table: ~azure.mgmt.network.v2018_04_01.models.RouteTable
    :ivar service_endpoints: An array of service endpoints.
    :vartype service_endpoints:
     list[~azure.mgmt.network.v2018_04_01.models.ServiceEndpointPropertiesFormat]
    :ivar ip_configurations: Gets an array of references to the network interface IP configurations
     using subnet.
    :vartype ip_configurations: list[~azure.mgmt.network.v2018_04_01.models.IPConfiguration]
    :ivar resource_navigation_links: Gets an array of references to the external resources using
     subnet.
    :vartype resource_navigation_links:
     list[~azure.mgmt.network.v2018_04_01.models.ResourceNavigationLink]
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'ip_configurations': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'route_table': {'key': 'properties.routeTable', 'type': 'RouteTable'},
        'service_endpoints': {'key': 'properties.serviceEndpoints', 'type': '[ServiceEndpointPropertiesFormat]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[IPConfiguration]'},
        'resource_navigation_links': {'key': 'properties.resourceNavigationLinks', 'type': '[ResourceNavigationLink]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword address_prefix: The address prefix for the subnet.
        :paramtype address_prefix: str
        :keyword network_security_group: The reference of the NetworkSecurityGroup resource.
        :paramtype network_security_group: ~azure.mgmt.network.v2018_04_01.models.NetworkSecurityGroup
        :keyword route_table: The reference of the RouteTable resource.
        :paramtype route_table: ~azure.mgmt.network.v2018_04_01.models.RouteTable
        :keyword service_endpoints: An array of service endpoints.
        :paramtype service_endpoints:
         list[~azure.mgmt.network.v2018_04_01.models.ServiceEndpointPropertiesFormat]
        :keyword resource_navigation_links: Gets an array of references to the external resources using
         subnet.
        :paramtype resource_navigation_links:
         list[~azure.mgmt.network.v2018_04_01.models.ResourceNavigationLink]
        :keyword provisioning_state: The provisioning state of the resource.
        :paramtype provisioning_state: str
        """
        super(Subnet, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.route_table = kwargs.get('route_table', None)
        self.service_endpoints = kwargs.get('service_endpoints', None)
        self.ip_configurations = None
        self.resource_navigation_links = kwargs.get('resource_navigation_links', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class SubnetAssociation(msrest.serialization.Model):
    """Network interface and its custom security rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Subnet ID.
    :vartype id: str
    :ivar security_rules: Collection of custom security rules.
    :vartype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'security_rules': {'key': 'securityRules', 'type': '[SecurityRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword security_rules: Collection of custom security rules.
        :paramtype security_rules: list[~azure.mgmt.network.v2018_04_01.models.SecurityRule]
        """
        super(SubnetAssociation, self).__init__(**kwargs)
        self.id = None
        self.security_rules = kwargs.get('security_rules', None)


class SubnetListResult(msrest.serialization.Model):
    """Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.

    :ivar value: The subnets in a virtual network.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Subnet]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The subnets in a virtual network.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(SubnetListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class TagsObject(msrest.serialization.Model):
    """Tags object for patch operations.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(TagsObject, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class Topology(msrest.serialization.Model):
    """Topology of the specified resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: GUID representing the operation id.
    :vartype id: str
    :ivar created_date_time: The datetime when the topology was initially created for the resource
     group.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_modified: The datetime when the topology was last modified.
    :vartype last_modified: ~datetime.datetime
    :ivar resources:
    :vartype resources: list[~azure.mgmt.network.v2018_04_01.models.TopologyResource]
    """

    _validation = {
        'id': {'readonly': True},
        'created_date_time': {'readonly': True},
        'last_modified': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
        'resources': {'key': 'resources', 'type': '[TopologyResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resources:
        :paramtype resources: list[~azure.mgmt.network.v2018_04_01.models.TopologyResource]
        """
        super(Topology, self).__init__(**kwargs)
        self.id = None
        self.created_date_time = None
        self.last_modified = None
        self.resources = kwargs.get('resources', None)


class TopologyAssociation(msrest.serialization.Model):
    """Resources that have an association with the parent resource.

    :ivar name: The name of the resource that is associated with the parent resource.
    :vartype name: str
    :ivar resource_id: The ID of the resource that is associated with the parent resource.
    :vartype resource_id: str
    :ivar association_type: The association type of the child resource to the parent resource.
     Possible values include: "Associated", "Contains".
    :vartype association_type: str or ~azure.mgmt.network.v2018_04_01.models.AssociationType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'association_type': {'key': 'associationType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the resource that is associated with the parent resource.
        :paramtype name: str
        :keyword resource_id: The ID of the resource that is associated with the parent resource.
        :paramtype resource_id: str
        :keyword association_type: The association type of the child resource to the parent resource.
         Possible values include: "Associated", "Contains".
        :paramtype association_type: str or ~azure.mgmt.network.v2018_04_01.models.AssociationType
        """
        super(TopologyAssociation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.association_type = kwargs.get('association_type', None)


class TopologyParameters(msrest.serialization.Model):
    """Parameters that define the representation of topology.

    :ivar target_resource_group_name: The name of the target resource group to perform topology on.
    :vartype target_resource_group_name: str
    :ivar target_virtual_network: The reference of the Virtual Network resource.
    :vartype target_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar target_subnet: The reference of the Subnet resource.
    :vartype target_subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    """

    _attribute_map = {
        'target_resource_group_name': {'key': 'targetResourceGroupName', 'type': 'str'},
        'target_virtual_network': {'key': 'targetVirtualNetwork', 'type': 'SubResource'},
        'target_subnet': {'key': 'targetSubnet', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_group_name: The name of the target resource group to perform topology
         on.
        :paramtype target_resource_group_name: str
        :keyword target_virtual_network: The reference of the Virtual Network resource.
        :paramtype target_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword target_subnet: The reference of the Subnet resource.
        :paramtype target_subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        """
        super(TopologyParameters, self).__init__(**kwargs)
        self.target_resource_group_name = kwargs.get('target_resource_group_name', None)
        self.target_virtual_network = kwargs.get('target_virtual_network', None)
        self.target_subnet = kwargs.get('target_subnet', None)


class TopologyResource(msrest.serialization.Model):
    """The network resource topology information for the given resource group.

    :ivar name: Name of the resource.
    :vartype name: str
    :ivar id: ID of the resource.
    :vartype id: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar associations: Holds the associations the resource has with other resources in the
     resource group.
    :vartype associations: list[~azure.mgmt.network.v2018_04_01.models.TopologyAssociation]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'associations': {'key': 'associations', 'type': '[TopologyAssociation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the resource.
        :paramtype name: str
        :keyword id: ID of the resource.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword associations: Holds the associations the resource has with other resources in the
         resource group.
        :paramtype associations: list[~azure.mgmt.network.v2018_04_01.models.TopologyAssociation]
        """
        super(TopologyResource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.location = kwargs.get('location', None)
        self.associations = kwargs.get('associations', None)


class TrafficAnalyticsConfigurationProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Flag to enable/disable traffic analytics.
    :vartype enabled: bool
    :ivar workspace_id: Required. The resource guid of the attached workspace.
    :vartype workspace_id: str
    :ivar workspace_region: Required. The location of the attached workspace.
    :vartype workspace_region: str
    :ivar workspace_resource_id: Required. Resource Id of the attached workspace.
    :vartype workspace_resource_id: str
    """

    _validation = {
        'enabled': {'required': True},
        'workspace_id': {'required': True},
        'workspace_region': {'required': True},
        'workspace_resource_id': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'workspace_region': {'key': 'workspaceRegion', 'type': 'str'},
        'workspace_resource_id': {'key': 'workspaceResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Required. Flag to enable/disable traffic analytics.
        :paramtype enabled: bool
        :keyword workspace_id: Required. The resource guid of the attached workspace.
        :paramtype workspace_id: str
        :keyword workspace_region: Required. The location of the attached workspace.
        :paramtype workspace_region: str
        :keyword workspace_resource_id: Required. Resource Id of the attached workspace.
        :paramtype workspace_resource_id: str
        """
        super(TrafficAnalyticsConfigurationProperties, self).__init__(**kwargs)
        self.enabled = kwargs['enabled']
        self.workspace_id = kwargs['workspace_id']
        self.workspace_region = kwargs['workspace_region']
        self.workspace_resource_id = kwargs['workspace_resource_id']


class TrafficAnalyticsProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    All required parameters must be populated in order to send to Azure.

    :ivar network_watcher_flow_analytics_configuration: Required. Parameters that define the
     configuration of traffic analytics.
    :vartype network_watcher_flow_analytics_configuration:
     ~azure.mgmt.network.v2018_04_01.models.TrafficAnalyticsConfigurationProperties
    """

    _validation = {
        'network_watcher_flow_analytics_configuration': {'required': True},
    }

    _attribute_map = {
        'network_watcher_flow_analytics_configuration': {'key': 'networkWatcherFlowAnalyticsConfiguration', 'type': 'TrafficAnalyticsConfigurationProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_watcher_flow_analytics_configuration: Required. Parameters that define the
         configuration of traffic analytics.
        :paramtype network_watcher_flow_analytics_configuration:
         ~azure.mgmt.network.v2018_04_01.models.TrafficAnalyticsConfigurationProperties
        """
        super(TrafficAnalyticsProperties, self).__init__(**kwargs)
        self.network_watcher_flow_analytics_configuration = kwargs['network_watcher_flow_analytics_configuration']


class TroubleshootingDetails(msrest.serialization.Model):
    """Information gained from troubleshooting of specified resource.

    :ivar id: The id of the get troubleshoot operation.
    :vartype id: str
    :ivar reason_type: Reason type of failure.
    :vartype reason_type: str
    :ivar summary: A summary of troubleshooting.
    :vartype summary: str
    :ivar detail: Details on troubleshooting results.
    :vartype detail: str
    :ivar recommended_actions: List of recommended actions.
    :vartype recommended_actions:
     list[~azure.mgmt.network.v2018_04_01.models.TroubleshootingRecommendedActions]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'reason_type': {'key': 'reasonType', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'str'},
        'detail': {'key': 'detail', 'type': 'str'},
        'recommended_actions': {'key': 'recommendedActions', 'type': '[TroubleshootingRecommendedActions]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The id of the get troubleshoot operation.
        :paramtype id: str
        :keyword reason_type: Reason type of failure.
        :paramtype reason_type: str
        :keyword summary: A summary of troubleshooting.
        :paramtype summary: str
        :keyword detail: Details on troubleshooting results.
        :paramtype detail: str
        :keyword recommended_actions: List of recommended actions.
        :paramtype recommended_actions:
         list[~azure.mgmt.network.v2018_04_01.models.TroubleshootingRecommendedActions]
        """
        super(TroubleshootingDetails, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.reason_type = kwargs.get('reason_type', None)
        self.summary = kwargs.get('summary', None)
        self.detail = kwargs.get('detail', None)
        self.recommended_actions = kwargs.get('recommended_actions', None)


class TroubleshootingParameters(msrest.serialization.Model):
    """Parameters that define the resource to troubleshoot.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The target resource to troubleshoot.
    :vartype target_resource_id: str
    :ivar storage_id: Required. The ID for the storage account to save the troubleshoot result.
    :vartype storage_id: str
    :ivar storage_path: Required. The path to the blob to save the troubleshoot result in.
    :vartype storage_path: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'storage_id': {'required': True},
        'storage_path': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'storage_path': {'key': 'properties.storagePath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The target resource to troubleshoot.
        :paramtype target_resource_id: str
        :keyword storage_id: Required. The ID for the storage account to save the troubleshoot result.
        :paramtype storage_id: str
        :keyword storage_path: Required. The path to the blob to save the troubleshoot result in.
        :paramtype storage_path: str
        """
        super(TroubleshootingParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.storage_id = kwargs['storage_id']
        self.storage_path = kwargs['storage_path']


class TroubleshootingRecommendedActions(msrest.serialization.Model):
    """Recommended actions based on discovered issues.

    :ivar action_id: ID of the recommended action.
    :vartype action_id: str
    :ivar action_text: Description of recommended actions.
    :vartype action_text: str
    :ivar action_uri: The uri linking to a documentation for the recommended troubleshooting
     actions.
    :vartype action_uri: str
    :ivar action_uri_text: The information from the URI for the recommended troubleshooting
     actions.
    :vartype action_uri_text: str
    """

    _attribute_map = {
        'action_id': {'key': 'actionId', 'type': 'str'},
        'action_text': {'key': 'actionText', 'type': 'str'},
        'action_uri': {'key': 'actionUri', 'type': 'str'},
        'action_uri_text': {'key': 'actionUriText', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword action_id: ID of the recommended action.
        :paramtype action_id: str
        :keyword action_text: Description of recommended actions.
        :paramtype action_text: str
        :keyword action_uri: The uri linking to a documentation for the recommended troubleshooting
         actions.
        :paramtype action_uri: str
        :keyword action_uri_text: The information from the URI for the recommended troubleshooting
         actions.
        :paramtype action_uri_text: str
        """
        super(TroubleshootingRecommendedActions, self).__init__(**kwargs)
        self.action_id = kwargs.get('action_id', None)
        self.action_text = kwargs.get('action_text', None)
        self.action_uri = kwargs.get('action_uri', None)
        self.action_uri_text = kwargs.get('action_uri_text', None)


class TroubleshootingResult(msrest.serialization.Model):
    """Troubleshooting information gained from specified resource.

    :ivar start_time: The start time of the troubleshooting.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the troubleshooting.
    :vartype end_time: ~datetime.datetime
    :ivar code: The result code of the troubleshooting.
    :vartype code: str
    :ivar results: Information from troubleshooting.
    :vartype results: list[~azure.mgmt.network.v2018_04_01.models.TroubleshootingDetails]
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'code': {'key': 'code', 'type': 'str'},
        'results': {'key': 'results', 'type': '[TroubleshootingDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: The start time of the troubleshooting.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the troubleshooting.
        :paramtype end_time: ~datetime.datetime
        :keyword code: The result code of the troubleshooting.
        :paramtype code: str
        :keyword results: Information from troubleshooting.
        :paramtype results: list[~azure.mgmt.network.v2018_04_01.models.TroubleshootingDetails]
        """
        super(TroubleshootingResult, self).__init__(**kwargs)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.code = kwargs.get('code', None)
        self.results = kwargs.get('results', None)


class TunnelConnectionHealth(msrest.serialization.Model):
    """VirtualNetworkGatewayConnection properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tunnel: Tunnel name.
    :vartype tunnel: str
    :ivar connection_status: Virtual network Gateway connection status. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar ingress_bytes_transferred: The Ingress Bytes Transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: The Egress Bytes Transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar last_connection_established_utc_time: The time at which connection was established in Utc
     format.
    :vartype last_connection_established_utc_time: str
    """

    _validation = {
        'tunnel': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'last_connection_established_utc_time': {'readonly': True},
    }

    _attribute_map = {
        'tunnel': {'key': 'tunnel', 'type': 'str'},
        'connection_status': {'key': 'connectionStatus', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'egressBytesTransferred', 'type': 'long'},
        'last_connection_established_utc_time': {'key': 'lastConnectionEstablishedUtcTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(TunnelConnectionHealth, self).__init__(**kwargs)
        self.tunnel = None
        self.connection_status = None
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.last_connection_established_utc_time = None


class Usage(msrest.serialization.Model):
    """Describes network resource usage.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource identifier.
    :vartype id: str
    :ivar unit: Required. An enum describing the unit of measurement. Possible values include:
     "Count".
    :vartype unit: str or ~azure.mgmt.network.v2018_04_01.models.UsageUnit
    :ivar current_value: Required. The current value of the usage.
    :vartype current_value: long
    :ivar limit: Required. The limit of usage.
    :vartype limit: long
    :ivar name: Required. The name of the type of usage.
    :vartype name: ~azure.mgmt.network.v2018_04_01.models.UsageName
    """

    _validation = {
        'id': {'readonly': True},
        'unit': {'required': True},
        'current_value': {'required': True},
        'limit': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'current_value': {'key': 'currentValue', 'type': 'long'},
        'limit': {'key': 'limit', 'type': 'long'},
        'name': {'key': 'name', 'type': 'UsageName'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword unit: Required. An enum describing the unit of measurement. Possible values include:
         "Count".
        :paramtype unit: str or ~azure.mgmt.network.v2018_04_01.models.UsageUnit
        :keyword current_value: Required. The current value of the usage.
        :paramtype current_value: long
        :keyword limit: Required. The limit of usage.
        :paramtype limit: long
        :keyword name: Required. The name of the type of usage.
        :paramtype name: ~azure.mgmt.network.v2018_04_01.models.UsageName
        """
        super(Usage, self).__init__(**kwargs)
        self.id = None
        self.unit = kwargs['unit']
        self.current_value = kwargs['current_value']
        self.limit = kwargs['limit']
        self.name = kwargs['name']


class UsageName(msrest.serialization.Model):
    """The usage names.

    :ivar value: A string describing the resource name.
    :vartype value: str
    :ivar localized_value: A localized string describing the resource name.
    :vartype localized_value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: A string describing the resource name.
        :paramtype value: str
        :keyword localized_value: A localized string describing the resource name.
        :paramtype localized_value: str
        """
        super(UsageName, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.localized_value = kwargs.get('localized_value', None)


class UsagesListResult(msrest.serialization.Model):
    """The list usages operation response.

    :ivar value: The list network resource usages.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.Usage]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list network resource usages.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.Usage]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(UsagesListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VerificationIPFlowParameters(msrest.serialization.Model):
    """Parameters that define the IP flow to be verified.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required. The ID of the target resource to perform next-hop on.
    :vartype target_resource_id: str
    :ivar direction: Required. The direction of the packet represented as a 5-tuple. Possible
     values include: "Inbound", "Outbound".
    :vartype direction: str or ~azure.mgmt.network.v2018_04_01.models.Direction
    :ivar protocol: Required. Protocol to be verified on. Possible values include: "TCP", "UDP".
    :vartype protocol: str or ~azure.mgmt.network.v2018_04_01.models.IpFlowProtocol
    :ivar local_port: Required. The local port. Acceptable values are a single integer in the range
     (0-65535). Support for * for the source port, which depends on the direction.
    :vartype local_port: str
    :ivar remote_port: Required. The remote port. Acceptable values are a single integer in the
     range (0-65535). Support for * for the source port, which depends on the direction.
    :vartype remote_port: str
    :ivar local_ip_address: Required. The local IP address. Acceptable values are valid IPv4
     addresses.
    :vartype local_ip_address: str
    :ivar remote_ip_address: Required. The remote IP address. Acceptable values are valid IPv4
     addresses.
    :vartype remote_ip_address: str
    :ivar target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled
     on any of them, then this parameter must be specified. Otherwise optional).
    :vartype target_nic_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'direction': {'required': True},
        'protocol': {'required': True},
        'local_port': {'required': True},
        'remote_port': {'required': True},
        'local_ip_address': {'required': True},
        'remote_ip_address': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'local_port': {'key': 'localPort', 'type': 'str'},
        'remote_port': {'key': 'remotePort', 'type': 'str'},
        'local_ip_address': {'key': 'localIPAddress', 'type': 'str'},
        'remote_ip_address': {'key': 'remoteIPAddress', 'type': 'str'},
        'target_nic_resource_id': {'key': 'targetNicResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required. The ID of the target resource to perform next-hop on.
        :paramtype target_resource_id: str
        :keyword direction: Required. The direction of the packet represented as a 5-tuple. Possible
         values include: "Inbound", "Outbound".
        :paramtype direction: str or ~azure.mgmt.network.v2018_04_01.models.Direction
        :keyword protocol: Required. Protocol to be verified on. Possible values include: "TCP", "UDP".
        :paramtype protocol: str or ~azure.mgmt.network.v2018_04_01.models.IpFlowProtocol
        :keyword local_port: Required. The local port. Acceptable values are a single integer in the
         range (0-65535). Support for * for the source port, which depends on the direction.
        :paramtype local_port: str
        :keyword remote_port: Required. The remote port. Acceptable values are a single integer in the
         range (0-65535). Support for * for the source port, which depends on the direction.
        :paramtype remote_port: str
        :keyword local_ip_address: Required. The local IP address. Acceptable values are valid IPv4
         addresses.
        :paramtype local_ip_address: str
        :keyword remote_ip_address: Required. The remote IP address. Acceptable values are valid IPv4
         addresses.
        :paramtype remote_ip_address: str
        :keyword target_nic_resource_id: The NIC ID. (If VM has multiple NICs and IP forwarding is
         enabled on any of them, then this parameter must be specified. Otherwise optional).
        :paramtype target_nic_resource_id: str
        """
        super(VerificationIPFlowParameters, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.direction = kwargs['direction']
        self.protocol = kwargs['protocol']
        self.local_port = kwargs['local_port']
        self.remote_port = kwargs['remote_port']
        self.local_ip_address = kwargs['local_ip_address']
        self.remote_ip_address = kwargs['remote_ip_address']
        self.target_nic_resource_id = kwargs.get('target_nic_resource_id', None)


class VerificationIPFlowResult(msrest.serialization.Model):
    """Results of IP flow verification on the target resource.

    :ivar access: Indicates whether the traffic is allowed or denied. Possible values include:
     "Allow", "Deny".
    :vartype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
    :ivar rule_name: Name of the rule. If input is not matched against any security rule, it is not
     displayed.
    :vartype rule_name: str
    """

    _attribute_map = {
        'access': {'key': 'access', 'type': 'str'},
        'rule_name': {'key': 'ruleName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword access: Indicates whether the traffic is allowed or denied. Possible values include:
         "Allow", "Deny".
        :paramtype access: str or ~azure.mgmt.network.v2018_04_01.models.Access
        :keyword rule_name: Name of the rule. If input is not matched against any security rule, it is
         not displayed.
        :paramtype rule_name: str
        """
        super(VerificationIPFlowResult, self).__init__(**kwargs)
        self.access = kwargs.get('access', None)
        self.rule_name = kwargs.get('rule_name', None)


class VirtualHub(Resource):
    """VirtualHub Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_wan: The VirtualWAN to which the VirtualHub belongs.
    :vartype virtual_wan: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar hub_virtual_network_connections: list of all vnet connections with this VirtualHub.
    :vartype hub_virtual_network_connections:
     list[~azure.mgmt.network.v2018_04_01.models.HubVirtualNetworkConnection]
    :ivar address_prefix: Address-prefix for this VirtualHub.
    :vartype address_prefix: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWan', 'type': 'SubResource'},
        'hub_virtual_network_connections': {'key': 'properties.hubVirtualNetworkConnections', 'type': '[HubVirtualNetworkConnection]'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_wan: The VirtualWAN to which the VirtualHub belongs.
        :paramtype virtual_wan: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword hub_virtual_network_connections: list of all vnet connections with this VirtualHub.
        :paramtype hub_virtual_network_connections:
         list[~azure.mgmt.network.v2018_04_01.models.HubVirtualNetworkConnection]
        :keyword address_prefix: Address-prefix for this VirtualHub.
        :paramtype address_prefix: str
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(VirtualHub, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.hub_virtual_network_connections = kwargs.get('hub_virtual_network_connections', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class VirtualNetwork(Resource):
    """Virtual Network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar address_space: The AddressSpace that contains an array of IP address ranges that can be
     used by subnets.
    :vartype address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
    :ivar dhcp_options: The dhcpOptions that contains an array of DNS servers available to VMs
     deployed in the virtual network.
    :vartype dhcp_options: ~azure.mgmt.network.v2018_04_01.models.DhcpOptions
    :ivar subnets: A list of subnets in a Virtual Network.
    :vartype subnets: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
    :ivar virtual_network_peerings: A list of peerings in a Virtual Network.
    :vartype virtual_network_peerings:
     list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeering]
    :ivar resource_guid: The resourceGuid property of the Virtual Network resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the PublicIP resource. Possible values are:
     'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar enable_ddos_protection: Indicates if DDoS protection is enabled for all the protected
     resources in the virtual network. It requires a DDoS protection plan associated with the
     resource.
    :vartype enable_ddos_protection: bool
    :ivar enable_vm_protection: Indicates if VM protection is enabled for all the subnets in the
     virtual network.
    :vartype enable_vm_protection: bool
    :ivar ddos_protection_plan: The DDoS protection plan associated with the virtual network.
    :vartype ddos_protection_plan: ~azure.mgmt.network.v2018_04_01.models.SubResource
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'address_space': {'key': 'properties.addressSpace', 'type': 'AddressSpace'},
        'dhcp_options': {'key': 'properties.dhcpOptions', 'type': 'DhcpOptions'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'virtual_network_peerings': {'key': 'properties.virtualNetworkPeerings', 'type': '[VirtualNetworkPeering]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'enable_ddos_protection': {'key': 'properties.enableDdosProtection', 'type': 'bool'},
        'enable_vm_protection': {'key': 'properties.enableVmProtection', 'type': 'bool'},
        'ddos_protection_plan': {'key': 'properties.ddosProtectionPlan', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword address_space: The AddressSpace that contains an array of IP address ranges that can
         be used by subnets.
        :paramtype address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
        :keyword dhcp_options: The dhcpOptions that contains an array of DNS servers available to VMs
         deployed in the virtual network.
        :paramtype dhcp_options: ~azure.mgmt.network.v2018_04_01.models.DhcpOptions
        :keyword subnets: A list of subnets in a Virtual Network.
        :paramtype subnets: list[~azure.mgmt.network.v2018_04_01.models.Subnet]
        :keyword virtual_network_peerings: A list of peerings in a Virtual Network.
        :paramtype virtual_network_peerings:
         list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeering]
        :keyword resource_guid: The resourceGuid property of the Virtual Network resource.
        :paramtype resource_guid: str
        :keyword provisioning_state: The provisioning state of the PublicIP resource. Possible values
         are: 'Updating', 'Deleting', and 'Failed'.
        :paramtype provisioning_state: str
        :keyword enable_ddos_protection: Indicates if DDoS protection is enabled for all the protected
         resources in the virtual network. It requires a DDoS protection plan associated with the
         resource.
        :paramtype enable_ddos_protection: bool
        :keyword enable_vm_protection: Indicates if VM protection is enabled for all the subnets in the
         virtual network.
        :paramtype enable_vm_protection: bool
        :keyword ddos_protection_plan: The DDoS protection plan associated with the virtual network.
        :paramtype ddos_protection_plan: ~azure.mgmt.network.v2018_04_01.models.SubResource
        """
        super(VirtualNetwork, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.address_space = kwargs.get('address_space', None)
        self.dhcp_options = kwargs.get('dhcp_options', None)
        self.subnets = kwargs.get('subnets', None)
        self.virtual_network_peerings = kwargs.get('virtual_network_peerings', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.enable_ddos_protection = kwargs.get('enable_ddos_protection', False)
        self.enable_vm_protection = kwargs.get('enable_vm_protection', False)
        self.ddos_protection_plan = kwargs.get('ddos_protection_plan', None)


class VirtualNetworkConnectionGatewayReference(msrest.serialization.Model):
    """A reference to VirtualNetworkGateway or LocalNetworkGateway resource.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
    :vartype id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
        :paramtype id: str
        """
        super(VirtualNetworkConnectionGatewayReference, self).__init__(**kwargs)
        self.id = kwargs['id']


class VirtualNetworkGateway(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar ip_configurations: IP configurations for virtual network gateway.
    :vartype ip_configurations:
     list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayIPConfiguration]
    :ivar gateway_type: The type of this virtual network gateway. Possible values are: 'Vpn' and
     'ExpressRoute'. Possible values include: "Vpn", "ExpressRoute".
    :vartype gateway_type: str or ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayType
    :ivar vpn_type: The type of this virtual network gateway. Possible values are: 'PolicyBased'
     and 'RouteBased'. Possible values include: "PolicyBased", "RouteBased".
    :vartype vpn_type: str or ~azure.mgmt.network.v2018_04_01.models.VpnType
    :ivar enable_bgp: Whether BGP is enabled for this virtual network gateway or not.
    :vartype enable_bgp: bool
    :ivar active: ActiveActive flag.
    :vartype active: bool
    :ivar gateway_default_site: The reference of the LocalNetworkGateway resource which represents
     local network site having default routes. Assign Null value in case of removing existing
     default site setting.
    :vartype gateway_default_site: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar sku: The reference of the VirtualNetworkGatewaySku resource which represents the SKU
     selected for Virtual network gateway.
    :vartype sku: ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySku
    :ivar vpn_client_configuration: The reference of the VpnClientConfiguration resource which
     represents the P2S VpnClient configurations.
    :vartype vpn_client_configuration:
     ~azure.mgmt.network.v2018_04_01.models.VpnClientConfiguration
    :ivar bgp_settings: Virtual network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
    :ivar resource_guid: The resource GUID property of the VirtualNetworkGateway resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the VirtualNetworkGateway resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[VirtualNetworkGatewayIPConfiguration]'},
        'gateway_type': {'key': 'properties.gatewayType', 'type': 'str'},
        'vpn_type': {'key': 'properties.vpnType', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'active': {'key': 'properties.activeActive', 'type': 'bool'},
        'gateway_default_site': {'key': 'properties.gatewayDefaultSite', 'type': 'SubResource'},
        'sku': {'key': 'properties.sku', 'type': 'VirtualNetworkGatewaySku'},
        'vpn_client_configuration': {'key': 'properties.vpnClientConfiguration', 'type': 'VpnClientConfiguration'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword ip_configurations: IP configurations for virtual network gateway.
        :paramtype ip_configurations:
         list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayIPConfiguration]
        :keyword gateway_type: The type of this virtual network gateway. Possible values are: 'Vpn' and
         'ExpressRoute'. Possible values include: "Vpn", "ExpressRoute".
        :paramtype gateway_type: str or
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayType
        :keyword vpn_type: The type of this virtual network gateway. Possible values are: 'PolicyBased'
         and 'RouteBased'. Possible values include: "PolicyBased", "RouteBased".
        :paramtype vpn_type: str or ~azure.mgmt.network.v2018_04_01.models.VpnType
        :keyword enable_bgp: Whether BGP is enabled for this virtual network gateway or not.
        :paramtype enable_bgp: bool
        :keyword active: ActiveActive flag.
        :paramtype active: bool
        :keyword gateway_default_site: The reference of the LocalNetworkGateway resource which
         represents local network site having default routes. Assign Null value in case of removing
         existing default site setting.
        :paramtype gateway_default_site: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword sku: The reference of the VirtualNetworkGatewaySku resource which represents the SKU
         selected for Virtual network gateway.
        :paramtype sku: ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySku
        :keyword vpn_client_configuration: The reference of the VpnClientConfiguration resource which
         represents the P2S VpnClient configurations.
        :paramtype vpn_client_configuration:
         ~azure.mgmt.network.v2018_04_01.models.VpnClientConfiguration
        :keyword bgp_settings: Virtual network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
        :keyword resource_guid: The resource GUID property of the VirtualNetworkGateway resource.
        :paramtype resource_guid: str
        """
        super(VirtualNetworkGateway, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.gateway_type = kwargs.get('gateway_type', None)
        self.vpn_type = kwargs.get('vpn_type', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.active = kwargs.get('active', None)
        self.gateway_default_site = kwargs.get('gateway_default_site', None)
        self.sku = kwargs.get('sku', None)
        self.vpn_client_configuration = kwargs.get('vpn_client_configuration', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = None


class VirtualNetworkGatewayConnection(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar authorization_key: The authorizationKey.
    :vartype authorization_key: str
    :ivar virtual_network_gateway1: Required. The reference to virtual network gateway resource.
    :vartype virtual_network_gateway1: ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway
    :ivar virtual_network_gateway2: The reference to virtual network gateway resource.
    :vartype virtual_network_gateway2: ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway
    :ivar local_network_gateway2: The reference to local network gateway resource.
    :vartype local_network_gateway2: ~azure.mgmt.network.v2018_04_01.models.LocalNetworkGateway
    :ivar connection_type: Required. Gateway connection type. Possible values are:
     'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible values include: "IPsec",
     "Vnet2Vnet", "ExpressRoute", "VPNClient".
    :vartype connection_type: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionType
    :ivar routing_weight: The routing weight.
    :vartype routing_weight: int
    :ivar shared_key: The IPSec shared key.
    :vartype shared_key: str
    :ivar connection_status: Virtual network Gateway connection status. Possible values are
     'Unknown', 'Connecting', 'Connected' and 'NotConnected'. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar tunnel_connection_status: Collection of all tunnels' connection health status.
    :vartype tunnel_connection_status:
     list[~azure.mgmt.network.v2018_04_01.models.TunnelConnectionHealth]
    :ivar egress_bytes_transferred: The egress bytes transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar ingress_bytes_transferred: The ingress bytes transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar peer: The reference to peerings resource.
    :vartype peer: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
    :ivar resource_guid: The resource GUID property of the VirtualNetworkGatewayConnection
     resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the VirtualNetworkGatewayConnection
     resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'virtual_network_gateway1': {'required': True},
        'connection_type': {'required': True},
        'connection_status': {'readonly': True},
        'tunnel_connection_status': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'virtual_network_gateway1': {'key': 'properties.virtualNetworkGateway1', 'type': 'VirtualNetworkGateway'},
        'virtual_network_gateway2': {'key': 'properties.virtualNetworkGateway2', 'type': 'VirtualNetworkGateway'},
        'local_network_gateway2': {'key': 'properties.localNetworkGateway2', 'type': 'LocalNetworkGateway'},
        'connection_type': {'key': 'properties.connectionType', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'tunnel_connection_status': {'key': 'properties.tunnelConnectionStatus', 'type': '[TunnelConnectionHealth]'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'peer': {'key': 'properties.peer', 'type': 'SubResource'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword authorization_key: The authorizationKey.
        :paramtype authorization_key: str
        :keyword virtual_network_gateway1: Required. The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway1:
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway
        :keyword virtual_network_gateway2: The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway2:
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway
        :keyword local_network_gateway2: The reference to local network gateway resource.
        :paramtype local_network_gateway2: ~azure.mgmt.network.v2018_04_01.models.LocalNetworkGateway
        :keyword connection_type: Required. Gateway connection type. Possible values are:
         'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible values include: "IPsec",
         "Vnet2Vnet", "ExpressRoute", "VPNClient".
        :paramtype connection_type: str or
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionType
        :keyword routing_weight: The routing weight.
        :paramtype routing_weight: int
        :keyword shared_key: The IPSec shared key.
        :paramtype shared_key: str
        :keyword peer: The reference to peerings resource.
        :paramtype peer: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
        :keyword resource_guid: The resource GUID property of the VirtualNetworkGatewayConnection
         resource.
        :paramtype resource_guid: str
        """
        super(VirtualNetworkGatewayConnection, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.virtual_network_gateway1 = kwargs['virtual_network_gateway1']
        self.virtual_network_gateway2 = kwargs.get('virtual_network_gateway2', None)
        self.local_network_gateway2 = kwargs.get('local_network_gateway2', None)
        self.connection_type = kwargs['connection_type']
        self.routing_weight = kwargs.get('routing_weight', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.connection_status = None
        self.tunnel_connection_status = None
        self.egress_bytes_transferred = None
        self.ingress_bytes_transferred = None
        self.peer = kwargs.get('peer', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = None


class VirtualNetworkGatewayConnectionListEntity(Resource):
    """A common class for general resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar authorization_key: The authorizationKey.
    :vartype authorization_key: str
    :ivar virtual_network_gateway1: Required. The reference to virtual network gateway resource.
    :vartype virtual_network_gateway1:
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
    :ivar virtual_network_gateway2: The reference to virtual network gateway resource.
    :vartype virtual_network_gateway2:
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
    :ivar local_network_gateway2: The reference to local network gateway resource.
    :vartype local_network_gateway2:
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
    :ivar connection_type: Required. Gateway connection type. Possible values are:
     'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible values include: "IPsec",
     "Vnet2Vnet", "ExpressRoute", "VPNClient".
    :vartype connection_type: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionType
    :ivar routing_weight: The routing weight.
    :vartype routing_weight: int
    :ivar shared_key: The IPSec shared key.
    :vartype shared_key: str
    :ivar connection_status: Virtual network Gateway connection status. Possible values are
     'Unknown', 'Connecting', 'Connected' and 'NotConnected'. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionStatus
    :ivar tunnel_connection_status: Collection of all tunnels' connection health status.
    :vartype tunnel_connection_status:
     list[~azure.mgmt.network.v2018_04_01.models.TunnelConnectionHealth]
    :ivar egress_bytes_transferred: The egress bytes transferred in this connection.
    :vartype egress_bytes_transferred: long
    :ivar ingress_bytes_transferred: The ingress bytes transferred in this connection.
    :vartype ingress_bytes_transferred: long
    :ivar peer: The reference to peerings resource.
    :vartype peer: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :vartype use_policy_based_traffic_selectors: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
    :ivar resource_guid: The resource GUID property of the VirtualNetworkGatewayConnection
     resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the VirtualNetworkGatewayConnection
     resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'virtual_network_gateway1': {'required': True},
        'connection_type': {'required': True},
        'connection_status': {'readonly': True},
        'tunnel_connection_status': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'virtual_network_gateway1': {'key': 'properties.virtualNetworkGateway1', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'virtual_network_gateway2': {'key': 'properties.virtualNetworkGateway2', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'local_network_gateway2': {'key': 'properties.localNetworkGateway2', 'type': 'VirtualNetworkConnectionGatewayReference'},
        'connection_type': {'key': 'properties.connectionType', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'tunnel_connection_status': {'key': 'properties.tunnelConnectionStatus', 'type': '[TunnelConnectionHealth]'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'peer': {'key': 'properties.peer', 'type': 'SubResource'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword authorization_key: The authorizationKey.
        :paramtype authorization_key: str
        :keyword virtual_network_gateway1: Required. The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway1:
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
        :keyword virtual_network_gateway2: The reference to virtual network gateway resource.
        :paramtype virtual_network_gateway2:
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
        :keyword local_network_gateway2: The reference to local network gateway resource.
        :paramtype local_network_gateway2:
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkConnectionGatewayReference
        :keyword connection_type: Required. Gateway connection type. Possible values are:
         'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. Possible values include: "IPsec",
         "Vnet2Vnet", "ExpressRoute", "VPNClient".
        :paramtype connection_type: str or
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionType
        :keyword routing_weight: The routing weight.
        :paramtype routing_weight: int
        :keyword shared_key: The IPSec shared key.
        :paramtype shared_key: str
        :keyword peer: The reference to peerings resource.
        :paramtype peer: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
        :paramtype use_policy_based_traffic_selectors: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
        :keyword resource_guid: The resource GUID property of the VirtualNetworkGatewayConnection
         resource.
        :paramtype resource_guid: str
        """
        super(VirtualNetworkGatewayConnectionListEntity, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.virtual_network_gateway1 = kwargs['virtual_network_gateway1']
        self.virtual_network_gateway2 = kwargs.get('virtual_network_gateway2', None)
        self.local_network_gateway2 = kwargs.get('local_network_gateway2', None)
        self.connection_type = kwargs['connection_type']
        self.routing_weight = kwargs.get('routing_weight', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.connection_status = None
        self.tunnel_connection_status = None
        self.egress_bytes_transferred = None
        self.ingress_bytes_transferred = None
        self.peer = kwargs.get('peer', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.resource_guid = kwargs.get('resource_guid', None)
        self.provisioning_state = None


class VirtualNetworkGatewayConnectionListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworkGatewayConnections API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource
     group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnection]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGatewayConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of VirtualNetworkGatewayConnection resources that exists in a
         resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnection]
        """
        super(VirtualNetworkGatewayConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewayIPConfiguration(SubResource):
    """IP configuration for virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar private_ip_allocation_method: The private IP allocation method. Possible values are:
     'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
    :ivar subnet: The reference of the subnet resource.
    :vartype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar public_ip_address: The reference of the public IP resource.
    :vartype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar provisioning_state: The provisioning state of the public IP resource. Possible values
     are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword private_ip_allocation_method: The private IP allocation method. Possible values are:
         'Static' and 'Dynamic'. Possible values include: "Static", "Dynamic".
        :paramtype private_ip_allocation_method: str or
         ~azure.mgmt.network.v2018_04_01.models.IPAllocationMethod
        :keyword subnet: The reference of the subnet resource.
        :paramtype subnet: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword public_ip_address: The reference of the public IP resource.
        :paramtype public_ip_address: ~azure.mgmt.network.v2018_04_01.models.SubResource
        """
        super(VirtualNetworkGatewayIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class VirtualNetworkGatewayListConnectionsResult(msrest.serialization.Model):
    """Response for the VirtualNetworkGatewayListConnections API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource
     group.
    :vartype value:
     list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionListEntity]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGatewayConnectionListEntity]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of VirtualNetworkGatewayConnection resources that exists in a
         resource group.
        :paramtype value:
         list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewayConnectionListEntity]
        """
        super(VirtualNetworkGatewayListConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewayListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworkGateways API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets a list of VirtualNetworkGateway resources that exists in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of VirtualNetworkGateway resources that exists in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGateway]
        """
        super(VirtualNetworkGatewayListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkGatewaySku(msrest.serialization.Model):
    """VirtualNetworkGatewaySku details.

    :ivar name: Gateway SKU name. Possible values include: "Basic", "HighPerformance", "Standard",
     "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw1AZ", "VpnGw2AZ", "VpnGw3AZ",
     "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
    :vartype name: str or ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySkuName
    :ivar tier: Gateway SKU tier. Possible values include: "Basic", "HighPerformance", "Standard",
     "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw1AZ", "VpnGw2AZ", "VpnGw3AZ",
     "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
    :vartype tier: str or ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySkuTier
    :ivar capacity: The capacity.
    :vartype capacity: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gateway SKU name. Possible values include: "Basic", "HighPerformance",
         "Standard", "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw1AZ", "VpnGw2AZ",
         "VpnGw3AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
        :paramtype name: str or ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySkuName
        :keyword tier: Gateway SKU tier. Possible values include: "Basic", "HighPerformance",
         "Standard", "UltraPerformance", "VpnGw1", "VpnGw2", "VpnGw3", "VpnGw1AZ", "VpnGw2AZ",
         "VpnGw3AZ", "ErGw1AZ", "ErGw2AZ", "ErGw3AZ".
        :paramtype tier: str or ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkGatewaySkuTier
        :keyword capacity: The capacity.
        :paramtype capacity: int
        """
        super(VirtualNetworkGatewaySku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.capacity = kwargs.get('capacity', None)


class VirtualNetworkListResult(msrest.serialization.Model):
    """Response for the ListVirtualNetworks API service call.

    :ivar value: Gets a list of VirtualNetwork resources in a resource group.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetwork]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetwork]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Gets a list of VirtualNetwork resources in a resource group.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetwork]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkListUsageResult(msrest.serialization.Model):
    """Response for the virtual networks GetUsage API service call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: VirtualNetwork usage stats.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkUsage]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkUsage]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkListUsageResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkPeering(SubResource):
    """Peerings in a virtual network resource.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar allow_virtual_network_access: Whether the VMs in the linked virtual network space would
     be able to access all the VMs in local Virtual network space.
    :vartype allow_virtual_network_access: bool
    :ivar allow_forwarded_traffic: Whether the forwarded traffic from the VMs in the remote virtual
     network will be allowed/disallowed.
    :vartype allow_forwarded_traffic: bool
    :ivar allow_gateway_transit: If gateway links can be used in remote virtual networking to link
     to this virtual network.
    :vartype allow_gateway_transit: bool
    :ivar use_remote_gateways: If remote gateways can be used on this virtual network. If the flag
     is set to true, and allowGatewayTransit on remote peering is also true, virtual network will
     use gateways of remote virtual network for transit. Only one peering can have this flag set to
     true. This flag cannot be set if virtual network already has a gateway.
    :vartype use_remote_gateways: bool
    :ivar remote_virtual_network: The reference of the remote virtual network. The remote virtual
     network can be in the same or different region (preview). See here to register for the preview
     and learn more
     (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
    :vartype remote_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar remote_address_space: The reference of the remote virtual network address space.
    :vartype remote_address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
    :ivar peering_state: The status of the virtual network peering. Possible values are
     'Initiated', 'Connected', and 'Disconnected'. Possible values include: "Initiated",
     "Connected", "Disconnected".
    :vartype peering_state: str or
     ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeeringState
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'allow_virtual_network_access': {'key': 'properties.allowVirtualNetworkAccess', 'type': 'bool'},
        'allow_forwarded_traffic': {'key': 'properties.allowForwardedTraffic', 'type': 'bool'},
        'allow_gateway_transit': {'key': 'properties.allowGatewayTransit', 'type': 'bool'},
        'use_remote_gateways': {'key': 'properties.useRemoteGateways', 'type': 'bool'},
        'remote_virtual_network': {'key': 'properties.remoteVirtualNetwork', 'type': 'SubResource'},
        'remote_address_space': {'key': 'properties.remoteAddressSpace', 'type': 'AddressSpace'},
        'peering_state': {'key': 'properties.peeringState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword allow_virtual_network_access: Whether the VMs in the linked virtual network space
         would be able to access all the VMs in local Virtual network space.
        :paramtype allow_virtual_network_access: bool
        :keyword allow_forwarded_traffic: Whether the forwarded traffic from the VMs in the remote
         virtual network will be allowed/disallowed.
        :paramtype allow_forwarded_traffic: bool
        :keyword allow_gateway_transit: If gateway links can be used in remote virtual networking to
         link to this virtual network.
        :paramtype allow_gateway_transit: bool
        :keyword use_remote_gateways: If remote gateways can be used on this virtual network. If the
         flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network
         will use gateways of remote virtual network for transit. Only one peering can have this flag
         set to true. This flag cannot be set if virtual network already has a gateway.
        :paramtype use_remote_gateways: bool
        :keyword remote_virtual_network: The reference of the remote virtual network. The remote
         virtual network can be in the same or different region (preview). See here to register for the
         preview and learn more
         (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
        :paramtype remote_virtual_network: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword remote_address_space: The reference of the remote virtual network address space.
        :paramtype remote_address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
        :keyword peering_state: The status of the virtual network peering. Possible values are
         'Initiated', 'Connected', and 'Disconnected'. Possible values include: "Initiated",
         "Connected", "Disconnected".
        :paramtype peering_state: str or
         ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeeringState
        :keyword provisioning_state: The provisioning state of the resource.
        :paramtype provisioning_state: str
        """
        super(VirtualNetworkPeering, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.allow_virtual_network_access = kwargs.get('allow_virtual_network_access', None)
        self.allow_forwarded_traffic = kwargs.get('allow_forwarded_traffic', None)
        self.allow_gateway_transit = kwargs.get('allow_gateway_transit', None)
        self.use_remote_gateways = kwargs.get('use_remote_gateways', None)
        self.remote_virtual_network = kwargs.get('remote_virtual_network', None)
        self.remote_address_space = kwargs.get('remote_address_space', None)
        self.peering_state = kwargs.get('peering_state', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class VirtualNetworkPeeringListResult(msrest.serialization.Model):
    """Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.

    :ivar value: The peerings in a virtual network.
    :vartype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeering]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkPeering]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The peerings in a virtual network.
        :paramtype value: list[~azure.mgmt.network.v2018_04_01.models.VirtualNetworkPeering]
        :keyword next_link: The URL to get the next set of results.
        :paramtype next_link: str
        """
        super(VirtualNetworkPeeringListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VirtualNetworkUsage(msrest.serialization.Model):
    """Usage details for subnet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar current_value: Indicates number of IPs used from the Subnet.
    :vartype current_value: float
    :ivar id: Subnet identifier.
    :vartype id: str
    :ivar limit: Indicates the size of the subnet.
    :vartype limit: float
    :ivar name: The name containing common and localized value for usage.
    :vartype name: ~azure.mgmt.network.v2018_04_01.models.VirtualNetworkUsageName
    :ivar unit: Usage units. Returns 'Count'.
    :vartype unit: str
    """

    _validation = {
        'current_value': {'readonly': True},
        'id': {'readonly': True},
        'limit': {'readonly': True},
        'name': {'readonly': True},
        'unit': {'readonly': True},
    }

    _attribute_map = {
        'current_value': {'key': 'currentValue', 'type': 'float'},
        'id': {'key': 'id', 'type': 'str'},
        'limit': {'key': 'limit', 'type': 'float'},
        'name': {'key': 'name', 'type': 'VirtualNetworkUsageName'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualNetworkUsage, self).__init__(**kwargs)
        self.current_value = None
        self.id = None
        self.limit = None
        self.name = None
        self.unit = None


class VirtualNetworkUsageName(msrest.serialization.Model):
    """Usage strings container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar localized_value: Localized subnet size and usage string.
    :vartype localized_value: str
    :ivar value: Subnet size and usage string.
    :vartype value: str
    """

    _validation = {
        'localized_value': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualNetworkUsageName, self).__init__(**kwargs)
        self.localized_value = None
        self.value = None


class VirtualWAN(Resource):
    """VirtualWAN Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar disable_vpn_encryption: Vpn encryption to be disabled or not.
    :vartype disable_vpn_encryption: bool
    :ivar virtual_hubs: List of VirtualHubs in the VirtualWAN.
    :vartype virtual_hubs: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar vpn_sites:
    :vartype vpn_sites: list[~azure.mgmt.network.v2018_04_01.models.SubResource]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_hubs': {'readonly': True},
        'vpn_sites': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'disable_vpn_encryption': {'key': 'properties.disableVpnEncryption', 'type': 'bool'},
        'virtual_hubs': {'key': 'properties.virtualHubs', 'type': '[SubResource]'},
        'vpn_sites': {'key': 'properties.vpnSites', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword disable_vpn_encryption: Vpn encryption to be disabled or not.
        :paramtype disable_vpn_encryption: bool
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(VirtualWAN, self).__init__(**kwargs)
        self.etag = None
        self.disable_vpn_encryption = kwargs.get('disable_vpn_encryption', None)
        self.virtual_hubs = None
        self.vpn_sites = None
        self.provisioning_state = kwargs.get('provisioning_state', None)


class VpnClientConfiguration(msrest.serialization.Model):
    """VpnClientConfiguration for P2S client.

    :ivar vpn_client_address_pool: The reference of the address space resource which represents
     Address space for P2S VpnClient.
    :vartype vpn_client_address_pool: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
    :ivar vpn_client_root_certificates: VpnClientRootCertificate for virtual network gateway.
    :vartype vpn_client_root_certificates:
     list[~azure.mgmt.network.v2018_04_01.models.VpnClientRootCertificate]
    :ivar vpn_client_revoked_certificates: VpnClientRevokedCertificate for Virtual network gateway.
    :vartype vpn_client_revoked_certificates:
     list[~azure.mgmt.network.v2018_04_01.models.VpnClientRevokedCertificate]
    :ivar vpn_client_protocols: VpnClientProtocols for Virtual network gateway.
    :vartype vpn_client_protocols: list[str or
     ~azure.mgmt.network.v2018_04_01.models.VpnClientProtocol]
    :ivar vpn_client_ipsec_policies: VpnClientIpsecPolicies for virtual network gateway P2S client.
    :vartype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
    :ivar radius_server_address: The radius server address property of the VirtualNetworkGateway
     resource for vpn client connection.
    :vartype radius_server_address: str
    :ivar radius_server_secret: The radius secret property of the VirtualNetworkGateway resource
     for vpn client connection.
    :vartype radius_server_secret: str
    """

    _attribute_map = {
        'vpn_client_address_pool': {'key': 'vpnClientAddressPool', 'type': 'AddressSpace'},
        'vpn_client_root_certificates': {'key': 'vpnClientRootCertificates', 'type': '[VpnClientRootCertificate]'},
        'vpn_client_revoked_certificates': {'key': 'vpnClientRevokedCertificates', 'type': '[VpnClientRevokedCertificate]'},
        'vpn_client_protocols': {'key': 'vpnClientProtocols', 'type': '[str]'},
        'vpn_client_ipsec_policies': {'key': 'vpnClientIpsecPolicies', 'type': '[IpsecPolicy]'},
        'radius_server_address': {'key': 'radiusServerAddress', 'type': 'str'},
        'radius_server_secret': {'key': 'radiusServerSecret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vpn_client_address_pool: The reference of the address space resource which represents
         Address space for P2S VpnClient.
        :paramtype vpn_client_address_pool: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
        :keyword vpn_client_root_certificates: VpnClientRootCertificate for virtual network gateway.
        :paramtype vpn_client_root_certificates:
         list[~azure.mgmt.network.v2018_04_01.models.VpnClientRootCertificate]
        :keyword vpn_client_revoked_certificates: VpnClientRevokedCertificate for Virtual network
         gateway.
        :paramtype vpn_client_revoked_certificates:
         list[~azure.mgmt.network.v2018_04_01.models.VpnClientRevokedCertificate]
        :keyword vpn_client_protocols: VpnClientProtocols for Virtual network gateway.
        :paramtype vpn_client_protocols: list[str or
         ~azure.mgmt.network.v2018_04_01.models.VpnClientProtocol]
        :keyword vpn_client_ipsec_policies: VpnClientIpsecPolicies for virtual network gateway P2S
         client.
        :paramtype vpn_client_ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
        :keyword radius_server_address: The radius server address property of the VirtualNetworkGateway
         resource for vpn client connection.
        :paramtype radius_server_address: str
        :keyword radius_server_secret: The radius secret property of the VirtualNetworkGateway resource
         for vpn client connection.
        :paramtype radius_server_secret: str
        """
        super(VpnClientConfiguration, self).__init__(**kwargs)
        self.vpn_client_address_pool = kwargs.get('vpn_client_address_pool', None)
        self.vpn_client_root_certificates = kwargs.get('vpn_client_root_certificates', None)
        self.vpn_client_revoked_certificates = kwargs.get('vpn_client_revoked_certificates', None)
        self.vpn_client_protocols = kwargs.get('vpn_client_protocols', None)
        self.vpn_client_ipsec_policies = kwargs.get('vpn_client_ipsec_policies', None)
        self.radius_server_address = kwargs.get('radius_server_address', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)


class VpnClientIPsecParameters(msrest.serialization.Model):
    """An IPSec parameters for a virtual network gateway P2S connection.

    All required parameters must be populated in order to send to Azure.

    :ivar sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode or
     Phase 2 SA) lifetime in seconds for P2S client.
    :vartype sa_life_time_seconds: int
    :ivar sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) payload size in KB for P2S client..
    :vartype sa_data_size_kilobytes: int
    :ivar ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible values
     include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
     "GCMAES256".
    :vartype ipsec_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IpsecEncryption
    :ivar ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible values
     include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
    :vartype ipsec_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IpsecIntegrity
    :ivar ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
     include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
    :vartype ike_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IkeEncryption
    :ivar ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
     include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
    :vartype ike_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IkeIntegrity
    :ivar dh_group: Required. The DH Groups used in IKE Phase 1 for initial SA. Possible values
     include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
     "DHGroup24".
    :vartype dh_group: str or ~azure.mgmt.network.v2018_04_01.models.DhGroup
    :ivar pfs_group: Required. The Pfs Groups used in IKE Phase 2 for new child SA. Possible values
     include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM".
    :vartype pfs_group: str or ~azure.mgmt.network.v2018_04_01.models.PfsGroup
    """

    _validation = {
        'sa_life_time_seconds': {'required': True},
        'sa_data_size_kilobytes': {'required': True},
        'ipsec_encryption': {'required': True},
        'ipsec_integrity': {'required': True},
        'ike_encryption': {'required': True},
        'ike_integrity': {'required': True},
        'dh_group': {'required': True},
        'pfs_group': {'required': True},
    }

    _attribute_map = {
        'sa_life_time_seconds': {'key': 'saLifeTimeSeconds', 'type': 'int'},
        'sa_data_size_kilobytes': {'key': 'saDataSizeKilobytes', 'type': 'int'},
        'ipsec_encryption': {'key': 'ipsecEncryption', 'type': 'str'},
        'ipsec_integrity': {'key': 'ipsecIntegrity', 'type': 'str'},
        'ike_encryption': {'key': 'ikeEncryption', 'type': 'str'},
        'ike_integrity': {'key': 'ikeIntegrity', 'type': 'str'},
        'dh_group': {'key': 'dhGroup', 'type': 'str'},
        'pfs_group': {'key': 'pfsGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode
         or Phase 2 SA) lifetime in seconds for P2S client.
        :paramtype sa_life_time_seconds: int
        :keyword sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick
         Mode or Phase 2 SA) payload size in KB for P2S client..
        :paramtype sa_data_size_kilobytes: int
        :keyword ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible
         values include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
         "GCMAES256".
        :paramtype ipsec_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IpsecEncryption
        :keyword ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible
         values include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
        :paramtype ipsec_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IpsecIntegrity
        :keyword ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
         include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
        :paramtype ike_encryption: str or ~azure.mgmt.network.v2018_04_01.models.IkeEncryption
        :keyword ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
         include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
        :paramtype ike_integrity: str or ~azure.mgmt.network.v2018_04_01.models.IkeIntegrity
        :keyword dh_group: Required. The DH Groups used in IKE Phase 1 for initial SA. Possible values
         include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
         "DHGroup24".
        :paramtype dh_group: str or ~azure.mgmt.network.v2018_04_01.models.DhGroup
        :keyword pfs_group: Required. The Pfs Groups used in IKE Phase 2 for new child SA. Possible
         values include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14",
         "PFSMM".
        :paramtype pfs_group: str or ~azure.mgmt.network.v2018_04_01.models.PfsGroup
        """
        super(VpnClientIPsecParameters, self).__init__(**kwargs)
        self.sa_life_time_seconds = kwargs['sa_life_time_seconds']
        self.sa_data_size_kilobytes = kwargs['sa_data_size_kilobytes']
        self.ipsec_encryption = kwargs['ipsec_encryption']
        self.ipsec_integrity = kwargs['ipsec_integrity']
        self.ike_encryption = kwargs['ike_encryption']
        self.ike_integrity = kwargs['ike_integrity']
        self.dh_group = kwargs['dh_group']
        self.pfs_group = kwargs['pfs_group']


class VpnClientParameters(msrest.serialization.Model):
    """Vpn Client Parameters for package generation.

    :ivar processor_architecture: VPN client Processor Architecture. Possible values are: 'AMD64'
     and 'X86'. Possible values include: "Amd64", "X86".
    :vartype processor_architecture: str or
     ~azure.mgmt.network.v2018_04_01.models.ProcessorArchitecture
    :ivar authentication_method: VPN client Authentication Method. Possible values are: 'EAPTLS'
     and 'EAPMSCHAPv2'. Possible values include: "EAPTLS", "EAPMSCHAPv2".
    :vartype authentication_method: str or
     ~azure.mgmt.network.v2018_04_01.models.AuthenticationMethod
    :ivar radius_server_auth_certificate: The public certificate data for the radius server
     authentication certificate as a Base-64 encoded string. Required only if external radius
     authentication has been configured with EAPTLS authentication.
    :vartype radius_server_auth_certificate: str
    :ivar client_root_certificates: A list of client root certificates public certificate data
     encoded as Base-64 strings. Optional parameter for external radius based authentication with
     EAPTLS.
    :vartype client_root_certificates: list[str]
    """

    _attribute_map = {
        'processor_architecture': {'key': 'processorArchitecture', 'type': 'str'},
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
        'radius_server_auth_certificate': {'key': 'radiusServerAuthCertificate', 'type': 'str'},
        'client_root_certificates': {'key': 'clientRootCertificates', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword processor_architecture: VPN client Processor Architecture. Possible values are:
         'AMD64' and 'X86'. Possible values include: "Amd64", "X86".
        :paramtype processor_architecture: str or
         ~azure.mgmt.network.v2018_04_01.models.ProcessorArchitecture
        :keyword authentication_method: VPN client Authentication Method. Possible values are: 'EAPTLS'
         and 'EAPMSCHAPv2'. Possible values include: "EAPTLS", "EAPMSCHAPv2".
        :paramtype authentication_method: str or
         ~azure.mgmt.network.v2018_04_01.models.AuthenticationMethod
        :keyword radius_server_auth_certificate: The public certificate data for the radius server
         authentication certificate as a Base-64 encoded string. Required only if external radius
         authentication has been configured with EAPTLS authentication.
        :paramtype radius_server_auth_certificate: str
        :keyword client_root_certificates: A list of client root certificates public certificate data
         encoded as Base-64 strings. Optional parameter for external radius based authentication with
         EAPTLS.
        :paramtype client_root_certificates: list[str]
        """
        super(VpnClientParameters, self).__init__(**kwargs)
        self.processor_architecture = kwargs.get('processor_architecture', None)
        self.authentication_method = kwargs.get('authentication_method', None)
        self.radius_server_auth_certificate = kwargs.get('radius_server_auth_certificate', None)
        self.client_root_certificates = kwargs.get('client_root_certificates', None)


class VpnClientRevokedCertificate(SubResource):
    """VPN client revoked certificate of virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar thumbprint: The revoked VPN client certificate thumbprint.
    :vartype thumbprint: str
    :ivar provisioning_state: The provisioning state of the VPN client revoked certificate
     resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'thumbprint': {'key': 'properties.thumbprint', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword thumbprint: The revoked VPN client certificate thumbprint.
        :paramtype thumbprint: str
        """
        super(VpnClientRevokedCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.thumbprint = kwargs.get('thumbprint', None)
        self.provisioning_state = None


class VpnClientRootCertificate(SubResource):
    """VPN client root certificate of virtual network gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar public_cert_data: Required. The certificate public data.
    :vartype public_cert_data: str
    :ivar provisioning_state: The provisioning state of the VPN client root certificate resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    """

    _validation = {
        'public_cert_data': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'public_cert_data': {'key': 'properties.publicCertData', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword etag: A unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword public_cert_data: Required. The certificate public data.
        :paramtype public_cert_data: str
        """
        super(VpnClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = kwargs.get('etag', None)
        self.public_cert_data = kwargs['public_cert_data']
        self.provisioning_state = None


class VpnConnection(SubResource):
    """VpnConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar remote_vpn_site: Id of the connected vpn site.
    :vartype remote_vpn_site: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar routing_weight: routing weight for vpn connection.
    :vartype routing_weight: int
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or ~azure.mgmt.network.v2018_04_01.models.VpnConnectionStatus
    :ivar ingress_bytes_transferred: Ingress bytes transferred.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: Egress bytes transferred.
    :vartype egress_bytes_transferred: long
    :ivar connection_bandwidth: Expected bandwidth in MBPS.
    :vartype connection_bandwidth: int
    :ivar shared_key: SharedKey for the vpn connection.
    :vartype shared_key: str
    :ivar enable_bgp: EnableBgp flag.
    :vartype enable_bgp: bool
    :ivar ipsec_policies: The IPSec Policies to be considered by this connection.
    :vartype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'connection_bandwidth': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_vpn_site': {'key': 'properties.remoteVpnSite', 'type': 'SubResource'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'connection_bandwidth': {'key': 'properties.connectionBandwidth', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword remote_vpn_site: Id of the connected vpn site.
        :paramtype remote_vpn_site: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword routing_weight: routing weight for vpn connection.
        :paramtype routing_weight: int
        :keyword shared_key: SharedKey for the vpn connection.
        :paramtype shared_key: str
        :keyword enable_bgp: EnableBgp flag.
        :paramtype enable_bgp: bool
        :keyword ipsec_policies: The IPSec Policies to be considered by this connection.
        :paramtype ipsec_policies: list[~azure.mgmt.network.v2018_04_01.models.IpsecPolicy]
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(VpnConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.remote_vpn_site = kwargs.get('remote_vpn_site', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.connection_status = None
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.connection_bandwidth = None
        self.shared_key = kwargs.get('shared_key', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class VpnDeviceScriptParameters(msrest.serialization.Model):
    """Vpn device configuration script generation parameters.

    :ivar vendor: The vendor for the vpn device.
    :vartype vendor: str
    :ivar device_family: The device family for the vpn device.
    :vartype device_family: str
    :ivar firmware_version: The firmware version for the vpn device.
    :vartype firmware_version: str
    """

    _attribute_map = {
        'vendor': {'key': 'vendor', 'type': 'str'},
        'device_family': {'key': 'deviceFamily', 'type': 'str'},
        'firmware_version': {'key': 'firmwareVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword vendor: The vendor for the vpn device.
        :paramtype vendor: str
        :keyword device_family: The device family for the vpn device.
        :paramtype device_family: str
        :keyword firmware_version: The firmware version for the vpn device.
        :paramtype firmware_version: str
        """
        super(VpnDeviceScriptParameters, self).__init__(**kwargs)
        self.vendor = kwargs.get('vendor', None)
        self.device_family = kwargs.get('device_family', None)
        self.firmware_version = kwargs.get('firmware_version', None)


class VpnGateway(Resource):
    """VpnGateway Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_hub: The VirtualHub to which the gateway belongs.
    :vartype virtual_hub: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar connections: list of all vpn connections to the gateway.
    :vartype connections: list[~azure.mgmt.network.v2018_04_01.models.VpnConnection]
    :ivar bgp_settings: Local network gateway's BGP speaker settings.
    :vartype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    :ivar policies: The policies applied to this vpn gateway.
    :vartype policies: ~azure.mgmt.network.v2018_04_01.models.Policies
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'connections': {'key': 'properties.connections', 'type': '[VpnConnection]'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'policies': {'key': 'properties.policies', 'type': 'Policies'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_hub: The VirtualHub to which the gateway belongs.
        :paramtype virtual_hub: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword connections: list of all vpn connections to the gateway.
        :paramtype connections: list[~azure.mgmt.network.v2018_04_01.models.VpnConnection]
        :keyword bgp_settings: Local network gateway's BGP speaker settings.
        :paramtype bgp_settings: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        :keyword policies: The policies applied to this vpn gateway.
        :paramtype policies: ~azure.mgmt.network.v2018_04_01.models.Policies
        """
        super(VpnGateway, self).__init__(**kwargs)
        self.etag = None
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.connections = kwargs.get('connections', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.policies = kwargs.get('policies', None)


class VpnSite(Resource):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_wan: The VirtualWAN to which the vpnSite belongs.
    :vartype virtual_wan: ~azure.mgmt.network.v2018_04_01.models.SubResource
    :ivar device_properties: The device properties.
    :vartype device_properties: ~azure.mgmt.network.v2018_04_01.models.DeviceProperties
    :ivar ip_address: The ip-address for the vpn-site.
    :vartype ip_address: str
    :ivar site_key: The key for vpn-site that can be used for connections.
    :vartype site_key: str
    :ivar address_space: The AddressSpace that contains an array of IP address ranges.
    :vartype address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
    :ivar bgp_properties: The set of bgp properties.
    :vartype bgp_properties: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWAN', 'type': 'SubResource'},
        'device_properties': {'key': 'properties.deviceProperties', 'type': 'DeviceProperties'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'site_key': {'key': 'properties.siteKey', 'type': 'str'},
        'address_space': {'key': 'properties.addressSpace', 'type': 'AddressSpace'},
        'bgp_properties': {'key': 'properties.bgpProperties', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword virtual_wan: The VirtualWAN to which the vpnSite belongs.
        :paramtype virtual_wan: ~azure.mgmt.network.v2018_04_01.models.SubResource
        :keyword device_properties: The device properties.
        :paramtype device_properties: ~azure.mgmt.network.v2018_04_01.models.DeviceProperties
        :keyword ip_address: The ip-address for the vpn-site.
        :paramtype ip_address: str
        :keyword site_key: The key for vpn-site that can be used for connections.
        :paramtype site_key: str
        :keyword address_space: The AddressSpace that contains an array of IP address ranges.
        :paramtype address_space: ~azure.mgmt.network.v2018_04_01.models.AddressSpace
        :keyword bgp_properties: The set of bgp properties.
        :paramtype bgp_properties: ~azure.mgmt.network.v2018_04_01.models.BgpSettings
        :keyword provisioning_state: The provisioning state of the resource. Possible values include:
         "Succeeded", "Updating", "Deleting", "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.network.v2018_04_01.models.ProvisioningState
        """
        super(VpnSite, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.device_properties = kwargs.get('device_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.site_key = kwargs.get('site_key', None)
        self.address_space = kwargs.get('address_space', None)
        self.bgp_properties = kwargs.get('bgp_properties', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class VpnSiteId(msrest.serialization.Model):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vpn_site: The resource-uri of the vpn-site for which config is to be fetched.
    :vartype vpn_site: str
    """

    _validation = {
        'vpn_site': {'readonly': True},
    }

    _attribute_map = {
        'vpn_site': {'key': 'vpnSite', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VpnSiteId, self).__init__(**kwargs)
        self.vpn_site = None
