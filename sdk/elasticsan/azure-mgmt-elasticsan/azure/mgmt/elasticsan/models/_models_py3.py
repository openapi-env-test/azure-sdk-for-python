# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """The resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = tags


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, location: Optional[str] = None, **kwargs):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        """
        super().__init__(tags=tags, **kwargs)
        self.location = location


class ElasticSan(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Response for ElasticSan request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    :ivar system_data: Resource metadata required by ARM RPC.
    :vartype system_data: ~azure.mgmt.elasticsan.models.SystemData
    :ivar sku: resource sku.
    :vartype sku: ~azure.mgmt.elasticsan.models.Sku
    :ivar availability_zones: Logical zone for Elastic San resource; example: ["1"].
    :vartype availability_zones: list[str]
    :ivar provisioning_state: State of the operation on the resource. Known values are: "Invalid",
     "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.elasticsan.models.ProvisioningStates
    :ivar base_size_tb: Base size of the Elastic San appliance in TB.
    :vartype base_size_tb: int
    :ivar extended_size_tb: Extended size of the Elastic San appliance in TB.
    :vartype extended_size_tb: int
    :ivar total_size_tb: Total size of the Elastic San appliance in TB.
    :vartype total_size_tb: int
    :ivar provisioned_iops: Provisioned IOPS of the Elastic San appliance.
    :vartype provisioned_iops: int
    :ivar provisioned_m_bps: Provisioned MBps Elastic San appliance.
    :vartype provisioned_m_bps: int
    :ivar volume_group_count: Total Number of Volume Groups Created in Elastic San.
    :vartype volume_group_count: int
    :ivar total_volume_size_gi_b: Total Provisioned size of Volumes.
    :vartype total_volume_size_gi_b: int
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "total_size_tb": {"readonly": True},
        "provisioned_iops": {"readonly": True},
        "provisioned_m_bps": {"readonly": True},
        "volume_group_count": {"readonly": True},
        "total_volume_size_gi_b": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "sku": {"key": "properties.sku", "type": "Sku"},
        "availability_zones": {"key": "properties.availabilityZones", "type": "[str]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "base_size_tb": {"key": "properties.baseSizeTB", "type": "int"},
        "extended_size_tb": {"key": "properties.extendedSizeTB", "type": "int"},
        "total_size_tb": {"key": "properties.totalSizeTB", "type": "int"},
        "provisioned_iops": {"key": "properties.provisionedIops", "type": "int"},
        "provisioned_m_bps": {"key": "properties.provisionedMBps", "type": "int"},
        "volume_group_count": {"key": "properties.volumeGroupCount", "type": "int"},
        "total_volume_size_gi_b": {"key": "properties.totalVolumeSizeGiB", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        sku: Optional["_models.Sku"] = None,
        availability_zones: Optional[List[str]] = None,
        base_size_tb: Optional[int] = None,
        extended_size_tb: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        :keyword sku: resource sku.
        :paramtype sku: ~azure.mgmt.elasticsan.models.Sku
        :keyword availability_zones: Logical zone for Elastic San resource; example: ["1"].
        :paramtype availability_zones: list[str]
        :keyword base_size_tb: Base size of the Elastic San appliance in TB.
        :paramtype base_size_tb: int
        :keyword extended_size_tb: Extended size of the Elastic San appliance in TB.
        :paramtype extended_size_tb: int
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.sku = sku
        self.availability_zones = availability_zones
        self.provisioning_state = None
        self.base_size_tb = base_size_tb
        self.extended_size_tb = extended_size_tb
        self.total_size_tb = None
        self.provisioned_iops = None
        self.provisioned_m_bps = None
        self.volume_group_count = None
        self.total_volume_size_gi_b = None


class ElasticSanList(_serialization.Model):
    """List of Elastic Sans.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: An array of Elastic San objects. Required.
    :vartype value: list[~azure.mgmt.elasticsan.models.ElasticSan]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ElasticSan]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ElasticSan"], **kwargs):
        """
        :keyword value: An array of Elastic San objects. Required.
        :paramtype value: list[~azure.mgmt.elasticsan.models.ElasticSan]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class ElasticSanOperationDisplay(_serialization.Model):
    """Metadata about an operation.

    All required parameters must be populated in order to send to Azure.

    :ivar provider: Localized friendly form of the resource provider name. Required.
    :vartype provider: str
    :ivar resource: Localized friendly form of the resource type related to this action/operation.
     Required.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation, as it should be shown to the user.
     Required.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation, as it should be shown to
     the user. Required.
    :vartype description: str
    """

    _validation = {
        "provider": {"required": True},
        "resource": {"required": True},
        "operation": {"required": True},
        "description": {"required": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, provider: str, resource: str, operation: str, description: str, **kwargs):
        """
        :keyword provider: Localized friendly form of the resource provider name. Required.
        :paramtype provider: str
        :keyword resource: Localized friendly form of the resource type related to this
         action/operation. Required.
        :paramtype resource: str
        :keyword operation: Localized friendly name for the operation, as it should be shown to the
         user. Required.
        :paramtype operation: str
        :keyword description: Localized friendly description for the operation, as it should be shown
         to the user. Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class ElasticSanOperationListResult(_serialization.Model):
    """List of operations supported by the RP.

    All required parameters must be populated in order to send to Azure.

    :ivar value: An array of operations supported by the ElasticSan RP. Required.
    :vartype value: list[~azure.mgmt.elasticsan.models.ElasticSanRPOperation]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ElasticSanRPOperation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ElasticSanRPOperation"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: An array of operations supported by the ElasticSan RP. Required.
        :paramtype value: list[~azure.mgmt.elasticsan.models.ElasticSanRPOperation]
        :keyword next_link: URI to fetch the next section of the paginated response.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ElasticSanRPOperation(_serialization.Model):
    """Description of a ElasticSan RP Operation.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the operation being performed on this particular object. Required.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation applies to data-plane. Required.
    :vartype is_data_action: bool
    :ivar display: Additional metadata about RP operation. Required.
    :vartype display: ~azure.mgmt.elasticsan.models.ElasticSanOperationDisplay
    """

    _validation = {
        "name": {"required": True},
        "is_data_action": {"required": True},
        "display": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "ElasticSanOperationDisplay"},
    }

    def __init__(self, *, name: str, is_data_action: bool, display: "_models.ElasticSanOperationDisplay", **kwargs):
        """
        :keyword name: The name of the operation being performed on this particular object. Required.
        :paramtype name: str
        :keyword is_data_action: Indicates whether the operation applies to data-plane. Required.
        :paramtype is_data_action: bool
        :keyword display: Additional metadata about RP operation. Required.
        :paramtype display: ~azure.mgmt.elasticsan.models.ElasticSanOperationDisplay
        """
        super().__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display


class ElasticSanUpdate(_serialization.Model):
    """Response for ElasticSan update request.

    :ivar tags: Update tags.
    :vartype tags: dict[str, str]
    :ivar base_size_tb: Base size of the Elastic San appliance in TB.
    :vartype base_size_tb: int
    :ivar extended_size_tb: Extended size of the Elastic San appliance in TB.
    :vartype extended_size_tb: int
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "base_size_tb": {"key": "properties.baseSizeTB", "type": "int"},
        "extended_size_tb": {"key": "properties.extendedSizeTB", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        base_size_tb: Optional[int] = None,
        extended_size_tb: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword tags: Update tags.
        :paramtype tags: dict[str, str]
        :keyword base_size_tb: Base size of the Elastic San appliance in TB.
        :paramtype base_size_tb: int
        :keyword extended_size_tb: Extended size of the Elastic San appliance in TB.
        :paramtype extended_size_tb: int
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.base_size_tb = base_size_tb
        self.extended_size_tb = extended_size_tb


class Error(_serialization.Model):
    """The resource management error response.

    :ivar error: RP error response.
    :vartype error: ~azure.mgmt.elasticsan.models.ErrorResponse
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorResponse"},
    }

    def __init__(self, *, error: Optional["_models.ErrorResponse"] = None, **kwargs):
        """
        :keyword error: RP error response.
        :paramtype error: ~azure.mgmt.elasticsan.models.ErrorResponse
        """
        super().__init__(**kwargs)
        self.error = error


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorResponse(_serialization.Model):
    """The resource management error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.elasticsan.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.elasticsan.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorResponse]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ExportSnapshot(Resource):
    """Response for Volume Snapshot request to export.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar creation_data: State of the operation on the resource.
    :vartype creation_data: ~azure.mgmt.elasticsan.models.TargetCreationData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "creation_data": {"key": "properties.creationData", "type": "TargetCreationData"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        creation_data: Optional["_models.TargetCreationData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword creation_data: State of the operation on the resource.
        :paramtype creation_data: ~azure.mgmt.elasticsan.models.TargetCreationData
        """
        super().__init__(tags=tags, **kwargs)
        self.creation_data = creation_data


class IscsiTargetInfo(_serialization.Model):
    """Iscsi target information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar target_iqn: iSCSI Target IQN (iSCSI Qualified Name); example:
     "iqn.2005-03.org.iscsi:server".
    :vartype target_iqn: str
    :ivar provisioning_state: State of the operation on the resource. Known values are: "Invalid",
     "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.elasticsan.models.ProvisioningStates
    :ivar status: Operational status of the iSCSI Target. Known values are: "Invalid", "Unknown",
     "Healthy", "Unhealthy", "Updating", "Running", "Stopped", and "Stopped (deallocated)".
    :vartype status: str or ~azure.mgmt.elasticsan.models.OperationalStatus
    :ivar endpoints: List of private IPv4 addresses to connect to the storage Target.
    :vartype endpoints: list[str]
    """

    _validation = {
        "target_iqn": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "target_iqn": {"key": "targetIqn", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "endpoints": {"key": "endpoints", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.OperationalStatus"]] = None,
        endpoints: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword status: Operational status of the iSCSI Target. Known values are: "Invalid",
         "Unknown", "Healthy", "Unhealthy", "Updating", "Running", "Stopped", and "Stopped
         (deallocated)".
        :paramtype status: str or ~azure.mgmt.elasticsan.models.OperationalStatus
        :keyword endpoints: List of private IPv4 addresses to connect to the storage Target.
        :paramtype endpoints: list[str]
        """
        super().__init__(**kwargs)
        self.target_iqn = None
        self.provisioning_state = None
        self.status = status
        self.endpoints = endpoints


class NetworkRuleSet(_serialization.Model):
    """A set of rules governing the network accessibility.

    :ivar virtual_network_rules: The list of virtual network rules.
    :vartype virtual_network_rules: list[~azure.mgmt.elasticsan.models.VirtualNetworkRule]
    """

    _attribute_map = {
        "virtual_network_rules": {"key": "virtualNetworkRules", "type": "[VirtualNetworkRule]"},
    }

    def __init__(self, *, virtual_network_rules: Optional[List["_models.VirtualNetworkRule"]] = None, **kwargs):
        """
        :keyword virtual_network_rules: The list of virtual network rules.
        :paramtype virtual_network_rules: list[~azure.mgmt.elasticsan.models.VirtualNetworkRule]
        """
        super().__init__(**kwargs)
        self.virtual_network_rules = virtual_network_rules


class ResourceTypeSku(_serialization.Model):
    """SkuInformation object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar sku: The Sku tier.
    :vartype sku: ~azure.mgmt.elasticsan.models.Sku
    :ivar location_info: Availability of the SKU for the location/zone.
    :vartype location_info: list[~azure.mgmt.elasticsan.models.SkuLocationInfo]
    :ivar san: Scalability targets for the San account for a given tier.
    :vartype san: ~azure.mgmt.elasticsan.models.SanTierInfo
    :ivar volume_group: Volume Group targets for the San account for a given tier.
    :vartype volume_group: ~azure.mgmt.elasticsan.models.VolumeGroupTierInfo
    :ivar volume: Volume targets for the San account for a given tier.
    :vartype volume: ~azure.mgmt.elasticsan.models.VolumeTierInfo
    """

    _validation = {
        "location_info": {"readonly": True},
    }

    _attribute_map = {
        "sku": {"key": "sku", "type": "Sku"},
        "location_info": {"key": "locationInfo", "type": "[SkuLocationInfo]"},
        "san": {"key": "san", "type": "SanTierInfo"},
        "volume_group": {"key": "volumeGroup", "type": "VolumeGroupTierInfo"},
        "volume": {"key": "volume", "type": "VolumeTierInfo"},
    }

    def __init__(
        self,
        *,
        sku: Optional["_models.Sku"] = None,
        san: Optional["_models.SanTierInfo"] = None,
        volume_group: Optional["_models.VolumeGroupTierInfo"] = None,
        volume: Optional["_models.VolumeTierInfo"] = None,
        **kwargs
    ):
        """
        :keyword sku: The Sku tier.
        :paramtype sku: ~azure.mgmt.elasticsan.models.Sku
        :keyword san: Scalability targets for the San account for a given tier.
        :paramtype san: ~azure.mgmt.elasticsan.models.SanTierInfo
        :keyword volume_group: Volume Group targets for the San account for a given tier.
        :paramtype volume_group: ~azure.mgmt.elasticsan.models.VolumeGroupTierInfo
        :keyword volume: Volume targets for the San account for a given tier.
        :paramtype volume: ~azure.mgmt.elasticsan.models.VolumeTierInfo
        """
        super().__init__(**kwargs)
        self.sku = sku
        self.location_info = None
        self.san = san
        self.volume_group = volume_group
        self.volume = volume


class SanTierInfo(_serialization.Model):
    """San scalability target.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar max_size_tb: Maximum San account capacity in TB.
    :vartype max_size_tb: int
    :ivar min_size_tb: Minimum San account capacity in TB.
    :vartype min_size_tb: int
    :ivar min_increment_size_tb: Increment the San capacity in TB.
    :vartype min_increment_size_tb: int
    :ivar max_iops_per_tb: Maximum IOPS.
    :vartype max_iops_per_tb: int
    :ivar max_m_bps_per_tb: Maximum MBps.
    :vartype max_m_bps_per_tb: int
    :ivar max_iops: Maximum IOPS.
    :vartype max_iops: int
    :ivar max_m_bps: Maximum MBps.
    :vartype max_m_bps: int
    :ivar max_volume_group_count: Maximum number of volume groups per San account.
    :vartype max_volume_group_count: int
    """

    _validation = {
        "max_size_tb": {"readonly": True},
        "min_size_tb": {"readonly": True},
        "min_increment_size_tb": {"readonly": True},
        "max_iops_per_tb": {"readonly": True},
        "max_m_bps_per_tb": {"readonly": True},
        "max_iops": {"readonly": True},
        "max_m_bps": {"readonly": True},
        "max_volume_group_count": {"readonly": True},
    }

    _attribute_map = {
        "max_size_tb": {"key": "maxSizeTB", "type": "int"},
        "min_size_tb": {"key": "minSizeTB", "type": "int"},
        "min_increment_size_tb": {"key": "minIncrementSizeTB", "type": "int"},
        "max_iops_per_tb": {"key": "maxIopsPerTB", "type": "int"},
        "max_m_bps_per_tb": {"key": "maxMBpsPerTB", "type": "int"},
        "max_iops": {"key": "maxIops", "type": "int"},
        "max_m_bps": {"key": "maxMBps", "type": "int"},
        "max_volume_group_count": {"key": "maxVolumeGroupCount", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.max_size_tb = None
        self.min_size_tb = None
        self.min_increment_size_tb = None
        self.max_iops_per_tb = None
        self.max_m_bps_per_tb = None
        self.max_iops = None
        self.max_m_bps = None
        self.max_volume_group_count = None


class Sku(_serialization.Model):
    """The SKU name. Required for account creation; optional for update.

    :ivar name: The sku name. Known values are: "Premium_LRS" and "Premium_ZRS".
    :vartype name: str or ~azure.mgmt.elasticsan.models.Name
    :ivar tier: The sku tier. "Premium"
    :vartype tier: str or ~azure.mgmt.elasticsan.models.Tier
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[Union[str, "_models.Name"]] = None,
        tier: Optional[Union[str, "_models.Tier"]] = None,
        **kwargs
    ):
        """
        :keyword name: The sku name. Known values are: "Premium_LRS" and "Premium_ZRS".
        :paramtype name: str or ~azure.mgmt.elasticsan.models.Name
        :keyword tier: The sku tier. "Premium"
        :paramtype tier: str or ~azure.mgmt.elasticsan.models.Tier
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = tier


class SkuInformationList(_serialization.Model):
    """List of SKU Information objects.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of ResourceType Sku.
    :vartype value: list[~azure.mgmt.elasticsan.models.ResourceTypeSku]
    :ivar next_link: Links to the next set of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ResourceTypeSku]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class SkuLocationInfo(_serialization.Model):
    """The location info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar location: The location.
    :vartype location: str
    :ivar zones: The zones.
    :vartype zones: list[str]
    """

    _validation = {
        "location": {"readonly": True},
        "zones": {"readonly": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "zones": {"key": "zones", "type": "[str]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.location = None
        self.zones = None


class Snapshot(TrackedResource):
    """Response for Volume Snapshot request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    :ivar system_data: Resource metadata required by ARM RPC.
    :vartype system_data: ~azure.mgmt.elasticsan.models.SystemData
    :ivar creation_data: State of the operation on the resource.
    :vartype creation_data: ~azure.mgmt.elasticsan.models.SnapshotCreationData
    :ivar provisioning_state: The snapshot provisioning state.
    :vartype provisioning_state: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "creation_data": {"key": "properties.creationData", "type": "SnapshotCreationData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        creation_data: Optional["_models.SnapshotCreationData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        :keyword creation_data: State of the operation on the resource.
        :paramtype creation_data: ~azure.mgmt.elasticsan.models.SnapshotCreationData
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.creation_data = creation_data
        self.provisioning_state = None


class SnapshotCreationData(_serialization.Model):
    """Data used when creating a disk.

    :ivar source_uri: If createOption is Copy, this is the ARM id of the source snapshot or disk.
     If createOption is Restore, this is the ARM-like id of the source disk restore point.
    :vartype source_uri: str
    """

    _attribute_map = {
        "source_uri": {"key": "sourceUri", "type": "str"},
    }

    def __init__(self, *, source_uri: Optional[str] = None, **kwargs):
        """
        :keyword source_uri: If createOption is Copy, this is the ARM id of the source snapshot or
         disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
        :paramtype source_uri: str
        """
        super().__init__(**kwargs)
        self.source_uri = source_uri


class SnapshotList(_serialization.Model):
    """List of Snapshots.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: An array of Snapshot objects. Required.
    :vartype value: list[~azure.mgmt.elasticsan.models.Snapshot]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Snapshot]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Snapshot"], **kwargs):
        """
        :keyword value: An array of Snapshot objects. Required.
        :paramtype value: list[~azure.mgmt.elasticsan.models.Snapshot]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class SnapshotSku(_serialization.Model):
    """The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot.

    :ivar name: The sku name. Known values are: "Standard_LRS" and "Standard_ZRS".
    :vartype name: str or ~azure.mgmt.elasticsan.models.SnapshotStorageAccountTypes
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[Union[str, "_models.SnapshotStorageAccountTypes"]] = None, **kwargs):
        """
        :keyword name: The sku name. Known values are: "Standard_LRS" and "Standard_ZRS".
        :paramtype name: str or ~azure.mgmt.elasticsan.models.SnapshotStorageAccountTypes
        """
        super().__init__(**kwargs)
        self.name = name


class SnapshotUpdate(_serialization.Model):
    """Snapshot request.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class SourceCreationData(_serialization.Model):
    """Data used when creating a disk.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar create_source: This enumerates the possible sources of a volume or snapshot's creation.
     Required. Default value is "None".
    :vartype create_source: str
    :ivar source_uri: If createOption is Copy, this is the ARM id of the source snapshot or disk.
     If createOption is Restore, this is the ARM-like id of the source disk restore point.
    :vartype source_uri: str
    """

    _validation = {
        "create_source": {"required": True, "constant": True},
    }

    _attribute_map = {
        "create_source": {"key": "createSource", "type": "str"},
        "source_uri": {"key": "sourceUri", "type": "str"},
    }

    create_source = "None"

    def __init__(self, *, source_uri: Optional[str] = None, **kwargs):
        """
        :keyword source_uri: If createOption is Copy, this is the ARM id of the source snapshot or
         disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
        :paramtype source_uri: str
        """
        super().__init__(**kwargs)
        self.source_uri = source_uri


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.elasticsan.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.elasticsan.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.elasticsan.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.elasticsan.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TargetCreationData(_serialization.Model):
    """Data used when creating a disk.

    All required parameters must be populated in order to send to Azure.

    :ivar target_uri: Target location for the source to be copied or exported. Required.
    :vartype target_uri: str
    """

    _validation = {
        "target_uri": {"required": True},
    }

    _attribute_map = {
        "target_uri": {"key": "targetUri", "type": "str"},
    }

    def __init__(self, *, target_uri: str, **kwargs):
        """
        :keyword target_uri: Target location for the source to be copied or exported. Required.
        :paramtype target_uri: str
        """
        super().__init__(**kwargs)
        self.target_uri = target_uri


class VirtualNetworkRule(_serialization.Model):
    """Virtual Network rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar virtual_network_resource_id: Resource ID of a subnet, for example:
     /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     Required.
    :vartype virtual_network_resource_id: str
    :ivar action: The action of virtual network rule. Default value is "Allow".
    :vartype action: str
    :ivar state: Gets the state of virtual network rule. Known values are: "provisioning",
     "deprovisioning", "succeeded", "failed", and "networkSourceDeleted".
    :vartype state: str or ~azure.mgmt.elasticsan.models.State
    """

    _validation = {
        "virtual_network_resource_id": {"required": True},
        "state": {"readonly": True},
    }

    _attribute_map = {
        "virtual_network_resource_id": {"key": "id", "type": "str"},
        "action": {"key": "action", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, *, virtual_network_resource_id: str, action: str = "Allow", **kwargs):
        """
        :keyword virtual_network_resource_id: Resource ID of a subnet, for example:
         /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
         Required.
        :paramtype virtual_network_resource_id: str
        :keyword action: The action of virtual network rule. Default value is "Allow".
        :paramtype action: str
        """
        super().__init__(**kwargs)
        self.virtual_network_resource_id = virtual_network_resource_id
        self.action = action
        self.state = None


class Volume(Resource):
    """Response for Volume request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Resource metadata required by ARM RPC.
    :vartype system_data: ~azure.mgmt.elasticsan.models.SystemData
    :ivar volume_id: Unique Id of the volume in GUID format.
    :vartype volume_id: str
    :ivar creation_data: State of the operation on the resource.
    :vartype creation_data: ~azure.mgmt.elasticsan.models.SourceCreationData
    :ivar size_gb: Volume size.
    :vartype size_gb: int
    :ivar storage_target: Storage target information.
    :vartype storage_target: ~azure.mgmt.elasticsan.models.IscsiTargetInfo
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "volume_id": {"readonly": True},
        "storage_target": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "volume_id": {"key": "properties.volumeId", "type": "str"},
        "creation_data": {"key": "properties.creationData", "type": "SourceCreationData"},
        "size_gb": {"key": "properties.sizeGB", "type": "int"},
        "storage_target": {"key": "properties.storageTarget", "type": "IscsiTargetInfo"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        creation_data: Optional["_models.SourceCreationData"] = None,
        size_gb: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword creation_data: State of the operation on the resource.
        :paramtype creation_data: ~azure.mgmt.elasticsan.models.SourceCreationData
        :keyword size_gb: Volume size.
        :paramtype size_gb: int
        """
        super().__init__(tags=tags, **kwargs)
        self.system_data = None
        self.volume_id = None
        self.creation_data = creation_data
        self.size_gb = size_gb
        self.storage_target = None


class VolumeGroup(Resource):
    """Response for Volume Group request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource identifier.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar tags: Azure resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Resource metadata required by ARM RPC.
    :vartype system_data: ~azure.mgmt.elasticsan.models.SystemData
    :ivar provisioning_state: State of the operation on the resource. Known values are: "Invalid",
     "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.elasticsan.models.ProvisioningStates
    :ivar protocol_type: Type of storage target. Known values are: "Iscsi" and "None".
    :vartype protocol_type: str or ~azure.mgmt.elasticsan.models.StorageTargetType
    :ivar encryption: Type of encryption. "EncryptionAtRestWithPlatformKey"
    :vartype encryption: str or ~azure.mgmt.elasticsan.models.EncryptionType
    :ivar network_acls: A collection of rules governing the accessibility from specific network
     locations.
    :vartype network_acls: ~azure.mgmt.elasticsan.models.NetworkRuleSet
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "protocol_type": {"key": "properties.protocolType", "type": "str"},
        "encryption": {"key": "properties.encryption", "type": "str"},
        "network_acls": {"key": "properties.networkAcls", "type": "NetworkRuleSet"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        protocol_type: Optional[Union[str, "_models.StorageTargetType"]] = None,
        encryption: Optional[Union[str, "_models.EncryptionType"]] = None,
        network_acls: Optional["_models.NetworkRuleSet"] = None,
        **kwargs
    ):
        """
        :keyword tags: Azure resource tags.
        :paramtype tags: dict[str, str]
        :keyword protocol_type: Type of storage target. Known values are: "Iscsi" and "None".
        :paramtype protocol_type: str or ~azure.mgmt.elasticsan.models.StorageTargetType
        :keyword encryption: Type of encryption. "EncryptionAtRestWithPlatformKey"
        :paramtype encryption: str or ~azure.mgmt.elasticsan.models.EncryptionType
        :keyword network_acls: A collection of rules governing the accessibility from specific network
         locations.
        :paramtype network_acls: ~azure.mgmt.elasticsan.models.NetworkRuleSet
        """
        super().__init__(tags=tags, **kwargs)
        self.system_data = None
        self.provisioning_state = None
        self.protocol_type = protocol_type
        self.encryption = encryption
        self.network_acls = network_acls


class VolumeGroupList(_serialization.Model):
    """List of Volume Groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: An array of Volume Groups objects. Required.
    :vartype value: list[~azure.mgmt.elasticsan.models.VolumeGroup]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[VolumeGroup]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.VolumeGroup"], **kwargs):
        """
        :keyword value: An array of Volume Groups objects. Required.
        :paramtype value: list[~azure.mgmt.elasticsan.models.VolumeGroup]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class VolumeGroupTierInfo(_serialization.Model):
    """Volume Group scalability target.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar max_volume_count: Maximum number of Volumes per Volume Groups per San account.
    :vartype max_volume_count: int
    :ivar max_snapshot_count: Maximum number of Snapshots per Volume Groups per San account.
    :vartype max_snapshot_count: int
    """

    _validation = {
        "max_volume_count": {"readonly": True},
        "max_snapshot_count": {"readonly": True},
    }

    _attribute_map = {
        "max_volume_count": {"key": "maxVolumeCount", "type": "int"},
        "max_snapshot_count": {"key": "maxSnapshotCount", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.max_volume_count = None
        self.max_snapshot_count = None


class VolumeGroupUpdate(_serialization.Model):
    """Volume Group request.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar protocol_type: Type of storage target. Known values are: "Iscsi" and "None".
    :vartype protocol_type: str or ~azure.mgmt.elasticsan.models.StorageTargetType
    :ivar encryption: Type of encryption. "EncryptionAtRestWithPlatformKey"
    :vartype encryption: str or ~azure.mgmt.elasticsan.models.EncryptionType
    :ivar network_acls: A collection of rules governing the accessibility from specific network
     locations.
    :vartype network_acls: ~azure.mgmt.elasticsan.models.NetworkRuleSet
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "protocol_type": {"key": "properties.protocolType", "type": "str"},
        "encryption": {"key": "properties.encryption", "type": "str"},
        "network_acls": {"key": "properties.networkAcls", "type": "NetworkRuleSet"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        protocol_type: Optional[Union[str, "_models.StorageTargetType"]] = None,
        encryption: Optional[Union[str, "_models.EncryptionType"]] = None,
        network_acls: Optional["_models.NetworkRuleSet"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword protocol_type: Type of storage target. Known values are: "Iscsi" and "None".
        :paramtype protocol_type: str or ~azure.mgmt.elasticsan.models.StorageTargetType
        :keyword encryption: Type of encryption. "EncryptionAtRestWithPlatformKey"
        :paramtype encryption: str or ~azure.mgmt.elasticsan.models.EncryptionType
        :keyword network_acls: A collection of rules governing the accessibility from specific network
         locations.
        :paramtype network_acls: ~azure.mgmt.elasticsan.models.NetworkRuleSet
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.protocol_type = protocol_type
        self.encryption = encryption
        self.network_acls = network_acls


class VolumeList(_serialization.Model):
    """List of Volumes.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: An array of Volume objects. Required.
    :vartype value: list[~azure.mgmt.elasticsan.models.Volume]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Volume]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Volume"], **kwargs):
        """
        :keyword value: An array of Volume objects. Required.
        :paramtype value: list[~azure.mgmt.elasticsan.models.Volume]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class VolumeTierInfo(_serialization.Model):
    """Volume scalability target.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar max_size_gb: Maximum San account capacity in GB.
    :vartype max_size_gb: int
    :ivar min_size_gb: Minimum San account capacity in GB.
    :vartype min_size_gb: int
    :ivar min_increment_size_gb: Increment the San capacity in TB.
    :vartype min_increment_size_gb: int
    :ivar max_iops_per_gb: Maximum IOPS.
    :vartype max_iops_per_gb: int
    :ivar max_m_bps_per_gb: Maximum MBps.
    :vartype max_m_bps_per_gb: int
    :ivar max_iops: Maximum IOPS.
    :vartype max_iops: int
    :ivar max_m_bps: Maximum MBps.
    :vartype max_m_bps: int
    :ivar max_snapshot_count: Maximum number of Snapshots per Volume.
    :vartype max_snapshot_count: int
    :ivar max_connected_client_count: Maximum number of connected clients count per Volume.
    :vartype max_connected_client_count: int
    """

    _validation = {
        "max_size_gb": {"readonly": True},
        "min_size_gb": {"readonly": True},
        "min_increment_size_gb": {"readonly": True},
        "max_iops_per_gb": {"readonly": True},
        "max_m_bps_per_gb": {"readonly": True},
        "max_iops": {"readonly": True},
        "max_m_bps": {"readonly": True},
        "max_snapshot_count": {"readonly": True},
        "max_connected_client_count": {"readonly": True},
    }

    _attribute_map = {
        "max_size_gb": {"key": "maxSizeGB", "type": "int"},
        "min_size_gb": {"key": "minSizeGB", "type": "int"},
        "min_increment_size_gb": {"key": "minIncrementSizeGB", "type": "int"},
        "max_iops_per_gb": {"key": "maxIopsPerGB", "type": "int"},
        "max_m_bps_per_gb": {"key": "maxMBpsPerGB", "type": "int"},
        "max_iops": {"key": "maxIops", "type": "int"},
        "max_m_bps": {"key": "maxMBps", "type": "int"},
        "max_snapshot_count": {"key": "maxSnapshotCount", "type": "int"},
        "max_connected_client_count": {"key": "maxConnectedClientCount", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.max_size_gb = None
        self.min_size_gb = None
        self.min_increment_size_gb = None
        self.max_iops_per_gb = None
        self.max_m_bps_per_gb = None
        self.max_iops = None
        self.max_m_bps = None
        self.max_snapshot_count = None
        self.max_connected_client_count = None


class VolumeUpdate(_serialization.Model):
    """Response for Volume request.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar size_gb: Volume size.
    :vartype size_gb: int
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "size_gb": {"key": "properties.sizeGB", "type": "int"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, size_gb: Optional[int] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword size_gb: Volume size.
        :paramtype size_gb: int
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.size_gb = size_gb
