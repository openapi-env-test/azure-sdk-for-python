# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common  fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Account(TrackedResource):
    """ADP account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.adp.models.SystemData
    :ivar account_id: The account's data-plane ID.
    :vartype account_id: str
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "system_data": {"readonly": True},
        "account_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "account_id": {"key": "properties.accountId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.account_id = None
        self.provisioning_state = None


class AccountCheckNameAvailabilityParameters(_serialization.Model):
    """The parameters used to check the availability of the account name.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The account name. Required.
    :vartype name: str
    :ivar type: The type of resource, Microsoft.AutonomousDevelopmentPlatform/accounts. Required.
     "Microsoft.AutonomousDevelopmentPlatform/accounts"
    :vartype type: str or ~azure.mgmt.adp.models.Type
    """

    _validation = {
        "name": {"required": True, "pattern": r"^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*"},
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, name: str, type: Union[str, "_models.Type"], **kwargs):
        """
        :keyword name: The account name. Required.
        :paramtype name: str
        :keyword type: The type of resource, Microsoft.AutonomousDevelopmentPlatform/accounts.
         Required. "Microsoft.AutonomousDevelopmentPlatform/accounts"
        :paramtype type: str or ~azure.mgmt.adp.models.Type
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class AccountList(_serialization.Model):
    """The list operation response, that contains the data pools and their properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of accounts and their properties.
    :vartype value: list[~azure.mgmt.adp.models.Account]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Account]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class AccountPatch(_serialization.Model):
    """ADP account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar account_id: The account's data-plane ID.
    :vartype account_id: str
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    """

    _validation = {
        "account_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "account_id": {"key": "properties.accountId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.account_id = None
        self.provisioning_state = None


class CheckNameAvailabilityResult(_serialization.Model):
    """The checkNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: Gets a boolean value that indicates whether the name is available for you
     to use. If true, the name is available. If false, the name has already been taken or is invalid
     and cannot be used.
    :vartype name_available: bool
    :ivar reason: Gets the reason that an account name could not be used. The reason element is
     only returned if nameAvailable is false. Known values are: "Invalid" and "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.adp.models.CheckNameAvailabilityReason
    :ivar message: Gets an error message explaining the reason value in more detail.
    :vartype message: str
    """

    _validation = {
        "name_available": {"readonly": True},
        "reason": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "name_available": {"key": "nameAvailable", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class DataPool(Resource):
    """ADP Data Pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.adp.models.SystemData
    :ivar data_pool_id: The Data Pool's data-plane ID.
    :vartype data_pool_id: str
    :ivar provisioning_state: Gets the status of the data pool at the time the operation was
     called. Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    :ivar locations: Gets or sets the collection of locations where Data Pool resources should be
     created.
    :vartype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "data_pool_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "data_pool_id": {"key": "properties.dataPoolId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "locations": {"key": "properties.locations", "type": "[DataPoolLocation]"},
        "tags": {"key": "properties.tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        locations: Optional[List["_models.DataPoolLocation"]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword locations: Gets or sets the collection of locations where Data Pool resources should
         be created.
        :paramtype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.system_data = None
        self.data_pool_id = None
        self.provisioning_state = None
        self.locations = locations
        self.tags = tags


class DataPoolBaseProperties(_serialization.Model):
    """Data Pool properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar data_pool_id: The Data Pool's data-plane ID.
    :vartype data_pool_id: str
    :ivar provisioning_state: Gets the status of the data pool at the time the operation was
     called. Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    :ivar locations: Gets or sets the collection of locations where Data Pool resources should be
     created.
    :vartype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "data_pool_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "data_pool_id": {"key": "dataPoolId", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "locations": {"key": "locations", "type": "[DataPoolLocation]"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        locations: Optional[List["_models.DataPoolLocation"]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword locations: Gets or sets the collection of locations where Data Pool resources should
         be created.
        :paramtype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.data_pool_id = None
        self.provisioning_state = None
        self.locations = locations
        self.tags = tags


class DataPoolEncryption(_serialization.Model):
    """Encryption properties of a Data Pool.

    All required parameters must be populated in order to send to Azure.

    :ivar key_vault_uri: The URI of a soft delete-enabled Key Vault that is in the same location as
     the Data Pool location. Required.
    :vartype key_vault_uri: str
    :ivar key_name: The name of Key Vault key. Required.
    :vartype key_name: str
    :ivar key_version: The version of Key Vault key.
    :vartype key_version: str
    :ivar user_assigned_identity: The resource ID of a user-assigned Managed Identity used to
     access the encryption key in the Key Vault. Requires access to the key operations get, wrap,
     unwrap, and recover. Required.
    :vartype user_assigned_identity: str
    """

    _validation = {
        "key_vault_uri": {"required": True},
        "key_name": {"required": True},
        "user_assigned_identity": {"required": True},
    }

    _attribute_map = {
        "key_vault_uri": {"key": "keyVaultUri", "type": "str"},
        "key_name": {"key": "keyName", "type": "str"},
        "key_version": {"key": "keyVersion", "type": "str"},
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
    }

    def __init__(
        self,
        *,
        key_vault_uri: str,
        key_name: str,
        user_assigned_identity: str,
        key_version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword key_vault_uri: The URI of a soft delete-enabled Key Vault that is in the same location
         as the Data Pool location. Required.
        :paramtype key_vault_uri: str
        :keyword key_name: The name of Key Vault key. Required.
        :paramtype key_name: str
        :keyword key_version: The version of Key Vault key.
        :paramtype key_version: str
        :keyword user_assigned_identity: The resource ID of a user-assigned Managed Identity used to
         access the encryption key in the Key Vault. Requires access to the key operations get, wrap,
         unwrap, and recover. Required.
        :paramtype user_assigned_identity: str
        """
        super().__init__(**kwargs)
        self.key_vault_uri = key_vault_uri
        self.key_name = key_name
        self.key_version = key_version
        self.user_assigned_identity = user_assigned_identity


class DataPoolList(_serialization.Model):
    """The list operation response, that contains the data pools and their properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of data pools and their properties.
    :vartype value: list[~azure.mgmt.adp.models.DataPool]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DataPool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class DataPoolLocation(_serialization.Model):
    """Location of a Data Pool.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The location name. Required.
    :vartype name: str
    :ivar encryption: Encryption properties of a Data Pool location.
    :vartype encryption: ~azure.mgmt.adp.models.DataPoolEncryption
    :ivar storage_sku: The Storage SKU. Default: Standard_ZRS.
    :vartype storage_sku: ~azure.mgmt.adp.models.StorageSku
    :ivar storage_account_count: The amount of storage accounts provisioned per Data Pool. Default:
     5.
    :vartype storage_account_count: int
    """

    _validation = {
        "name": {"required": True},
        "storage_account_count": {"minimum": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "encryption": {"key": "encryption", "type": "DataPoolEncryption"},
        "storage_sku": {"key": "storageSku", "type": "StorageSku"},
        "storage_account_count": {"key": "storageAccountCount", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        encryption: Optional["_models.DataPoolEncryption"] = None,
        storage_sku: Optional["_models.StorageSku"] = None,
        storage_account_count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword name: The location name. Required.
        :paramtype name: str
        :keyword encryption: Encryption properties of a Data Pool location.
        :paramtype encryption: ~azure.mgmt.adp.models.DataPoolEncryption
        :keyword storage_sku: The Storage SKU. Default: Standard_ZRS.
        :paramtype storage_sku: ~azure.mgmt.adp.models.StorageSku
        :keyword storage_account_count: The amount of storage accounts provisioned per Data Pool.
         Default: 5.
        :paramtype storage_account_count: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.encryption = encryption
        self.storage_sku = storage_sku
        self.storage_account_count = storage_account_count


class DataPoolPatch(Resource):
    """ADP Data Pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.adp.models.SystemData
    :ivar data_pool_id: The Data Pool's data-plane ID.
    :vartype data_pool_id: str
    :ivar provisioning_state: Gets the status of the data pool at the time the operation was
     called. Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    :ivar locations: Gets or sets the collection of locations where Data Pool resources should be
     created.
    :vartype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "data_pool_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "data_pool_id": {"key": "properties.dataPoolId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "locations": {"key": "properties.locations", "type": "[DataPoolLocation]"},
        "tags": {"key": "properties.tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        locations: Optional[List["_models.DataPoolLocation"]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword locations: Gets or sets the collection of locations where Data Pool resources should
         be created.
        :paramtype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.system_data = None
        self.data_pool_id = None
        self.provisioning_state = None
        self.locations = locations
        self.tags = tags


class DataPoolProperties(DataPoolBaseProperties):
    """Data Pool properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar data_pool_id: The Data Pool's data-plane ID.
    :vartype data_pool_id: str
    :ivar provisioning_state: Gets the status of the data pool at the time the operation was
     called. Known values are: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.adp.models.ProvisioningState
    :ivar locations: Gets or sets the collection of locations where Data Pool resources should be
     created.
    :vartype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "data_pool_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "data_pool_id": {"key": "dataPoolId", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "locations": {"key": "locations", "type": "[DataPoolLocation]"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        locations: Optional[List["_models.DataPoolLocation"]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword locations: Gets or sets the collection of locations where Data Pool resources should
         be created.
        :paramtype locations: list[~azure.mgmt.adp.models.DataPoolLocation]
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(locations=locations, tags=tags, **kwargs)


class ErrorDefinition(_serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.adp.models.ErrorDefinition]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "details": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDefinition]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(_serialization.Model):
    """Error response.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.adp.models.ErrorDefinition
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDefinition"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDefinition"] = None, **kwargs):
        """
        :keyword error: The error details.
        :paramtype error: ~azure.mgmt.adp.models.ErrorDefinition
        """
        super().__init__(**kwargs)
        self.error = error


class Operation(_serialization.Model):
    """Operation detail payload.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar action_type: Indicates the action type.
    :vartype action_type: str
    :ivar display: Display of the operation.
    :vartype display: ~azure.mgmt.adp.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar service_specification: Details about a service operation.
    :vartype service_specification: ~azure.mgmt.adp.models.OperationServiceSpecification
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "action_type": {"key": "actionType", "type": "str"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "service_specification": {"key": "properties.serviceSpecification", "type": "OperationServiceSpecification"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        action_type: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        service_specification: Optional["_models.OperationServiceSpecification"] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the operation.
        :paramtype name: str
        :keyword is_data_action: Indicates whether the operation is a data action.
        :paramtype is_data_action: bool
        :keyword action_type: Indicates the action type.
        :paramtype action_type: str
        :keyword display: Display of the operation.
        :paramtype display: ~azure.mgmt.adp.models.OperationDisplay
        :keyword origin: Origin of the operation.
        :paramtype origin: str
        :keyword service_specification: Details about a service operation.
        :paramtype service_specification: ~azure.mgmt.adp.models.OperationServiceSpecification
        """
        super().__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.action_type = action_type
        self.display = display
        self.origin = origin
        self.service_specification = service_specification


class OperationDisplay(_serialization.Model):
    """Operation display payload.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource of the operation.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation.
    :vartype description: str
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Resource provider of the operation.
        :paramtype provider: str
        :keyword resource: Resource of the operation.
        :paramtype resource: str
        :keyword operation: Localized friendly name for the operation.
        :paramtype operation: str
        :keyword description: Localized friendly description for the operation.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationListResult(_serialization.Model):
    """Available operations of the service.

    :ivar value: List of operations supported by the Resource Provider.
    :vartype value: list[~azure.mgmt.adp.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: Optional[List["_models.Operation"]] = None, next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: List of operations supported by the Resource Provider.
        :paramtype value: list[~azure.mgmt.adp.models.Operation]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationLogSpecification(_serialization.Model):
    """Details about an operation related to logs.

    :ivar name: The name of the log category.
    :vartype name: str
    :ivar display_name: Localized display name.
    :vartype display_name: str
    :ivar blob_duration: Blobs created in the customer storage account, per hour.
    :vartype blob_duration: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "blob_duration": {"key": "blobDuration", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        blob_duration: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the log category.
        :paramtype name: str
        :keyword display_name: Localized display name.
        :paramtype display_name: str
        :keyword blob_duration: Blobs created in the customer storage account, per hour.
        :paramtype blob_duration: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.blob_duration = blob_duration


class OperationMetricAvailability(_serialization.Model):
    """Defines how often data for a metric becomes available.

    :ivar time_grain: The granularity for the metric.
    :vartype time_grain: str
    :ivar blob_duration: Blob created in the customer storage account, per hour.
    :vartype blob_duration: str
    """

    _attribute_map = {
        "time_grain": {"key": "timeGrain", "type": "str"},
        "blob_duration": {"key": "blobDuration", "type": "str"},
    }

    def __init__(self, *, time_grain: Optional[str] = None, blob_duration: Optional[str] = None, **kwargs):
        """
        :keyword time_grain: The granularity for the metric.
        :paramtype time_grain: str
        :keyword blob_duration: Blob created in the customer storage account, per hour.
        :paramtype blob_duration: str
        """
        super().__init__(**kwargs)
        self.time_grain = time_grain
        self.blob_duration = blob_duration


class OperationMetricSpecification(_serialization.Model):
    """Details about an operation related to metrics.

    :ivar name: The name of the metric.
    :vartype name: str
    :ivar display_name: Localized display name of the metric.
    :vartype display_name: str
    :ivar display_description: The description of the metric.
    :vartype display_description: str
    :ivar unit: The unit that the metric is measured in.
    :vartype unit: str
    :ivar aggregation_type: The type of metric aggregation.
    :vartype aggregation_type: str
    :ivar enable_regional_mdm_account: Whether or not the service is using regional MDM accounts.
    :vartype enable_regional_mdm_account: str
    :ivar source_mdm_account: The name of the MDM account.
    :vartype source_mdm_account: str
    :ivar source_mdm_namespace: The name of the MDM namespace.
    :vartype source_mdm_namespace: str
    :ivar availabilities: Defines how often data for metrics becomes available.
    :vartype availabilities: list[~azure.mgmt.adp.models.OperationMetricAvailability]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "display_description": {"key": "displayDescription", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "aggregation_type": {"key": "aggregationType", "type": "str"},
        "enable_regional_mdm_account": {"key": "enableRegionalMdmAccount", "type": "str"},
        "source_mdm_account": {"key": "sourceMdmAccount", "type": "str"},
        "source_mdm_namespace": {"key": "sourceMdmNamespace", "type": "str"},
        "availabilities": {"key": "availabilities", "type": "[OperationMetricAvailability]"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        display_description: Optional[str] = None,
        unit: Optional[str] = None,
        aggregation_type: Optional[str] = None,
        enable_regional_mdm_account: Optional[str] = None,
        source_mdm_account: Optional[str] = None,
        source_mdm_namespace: Optional[str] = None,
        availabilities: Optional[List["_models.OperationMetricAvailability"]] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the metric.
        :paramtype name: str
        :keyword display_name: Localized display name of the metric.
        :paramtype display_name: str
        :keyword display_description: The description of the metric.
        :paramtype display_description: str
        :keyword unit: The unit that the metric is measured in.
        :paramtype unit: str
        :keyword aggregation_type: The type of metric aggregation.
        :paramtype aggregation_type: str
        :keyword enable_regional_mdm_account: Whether or not the service is using regional MDM
         accounts.
        :paramtype enable_regional_mdm_account: str
        :keyword source_mdm_account: The name of the MDM account.
        :paramtype source_mdm_account: str
        :keyword source_mdm_namespace: The name of the MDM namespace.
        :paramtype source_mdm_namespace: str
        :keyword availabilities: Defines how often data for metrics becomes available.
        :paramtype availabilities: list[~azure.mgmt.adp.models.OperationMetricAvailability]
        """
        super().__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.display_description = display_description
        self.unit = unit
        self.aggregation_type = aggregation_type
        self.enable_regional_mdm_account = enable_regional_mdm_account
        self.source_mdm_account = source_mdm_account
        self.source_mdm_namespace = source_mdm_namespace
        self.availabilities = availabilities


class OperationServiceSpecification(_serialization.Model):
    """Details about a service operation.

    :ivar log_specifications: Details about operations related to logs.
    :vartype log_specifications: list[~azure.mgmt.adp.models.OperationLogSpecification]
    :ivar metric_specifications: Details about operations related to metrics.
    :vartype metric_specifications: list[~azure.mgmt.adp.models.OperationMetricSpecification]
    """

    _attribute_map = {
        "log_specifications": {"key": "logSpecifications", "type": "[OperationLogSpecification]"},
        "metric_specifications": {"key": "metricSpecifications", "type": "[OperationMetricSpecification]"},
    }

    def __init__(
        self,
        *,
        log_specifications: Optional[List["_models.OperationLogSpecification"]] = None,
        metric_specifications: Optional[List["_models.OperationMetricSpecification"]] = None,
        **kwargs
    ):
        """
        :keyword log_specifications: Details about operations related to logs.
        :paramtype log_specifications: list[~azure.mgmt.adp.models.OperationLogSpecification]
        :keyword metric_specifications: Details about operations related to metrics.
        :paramtype metric_specifications: list[~azure.mgmt.adp.models.OperationMetricSpecification]
        """
        super().__init__(**kwargs)
        self.log_specifications = log_specifications
        self.metric_specifications = metric_specifications


class StorageSku(_serialization.Model):
    """The Storage SKU.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The SKU name. Required. Known values are: "Standard_LRS", "Standard_GRS",
     "Standard_Ragrs", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_Gzrs", and
     "Standard_Ragzrs".
    :vartype name: str or ~azure.mgmt.adp.models.StorageSkuName
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Union[str, "_models.StorageSkuName"], **kwargs):
        """
        :keyword name: The SKU name. Required. Known values are: "Standard_LRS", "Standard_GRS",
         "Standard_Ragrs", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_Gzrs", and
         "Standard_Ragzrs".
        :paramtype name: str or ~azure.mgmt.adp.models.StorageSkuName
        """
        super().__init__(**kwargs)
        self.name = name


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.adp.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.adp.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.adp.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.adp.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
