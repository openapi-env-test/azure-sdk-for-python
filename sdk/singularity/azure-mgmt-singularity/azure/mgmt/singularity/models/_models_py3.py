# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccountLocation(_serialization.Model):
    """Describes the properties of an Account location resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the account location. Required.
    :vartype name: str
    :ivar failover_priority: The failover priority of the location. Failover priority values must
     be unique for each of the locations associated with the account. Required.
    :vartype failover_priority: int
    :ivar is_zone_redundant: Indicates whether or not this location has AvailabilityZone enabled.
    :vartype is_zone_redundant: bool
    """

    _validation = {
        "name": {"required": True},
        "failover_priority": {"required": True, "maximum": 2147483647, "minimum": 1},
        "is_zone_redundant": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "failover_priority": {"key": "failoverPriority", "type": "int"},
        "is_zone_redundant": {"key": "isZoneRedundant", "type": "bool"},
    }

    def __init__(self, *, name: str, failover_priority: int, **kwargs):
        """
        :keyword name: Name of the account location. Required.
        :paramtype name: str
        :keyword failover_priority: The failover priority of the location. Failover priority values
         must be unique for each of the locations associated with the account. Required.
        :paramtype failover_priority: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.failover_priority = failover_priority
        self.is_zone_redundant = None


class AccountPatchProperties(_serialization.Model):
    """Describes all properties which can be updated for a Singularity account resource.

    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "idle_resources_handling_policy": {"key": "idleResourcesHandlingPolicy", "type": "IdleResourcesHandlingPolicy"},
        "locations": {"key": "locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(**kwargs)
        self.description = description
        self.idle_resources_handling_policy = idle_resources_handling_policy
        self.locations = locations
        self.network_settings = network_settings


class AccountProperties(_serialization.Model):
    """Describes the properties of an Account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.AccountStatus
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _validation = {
        "status_details": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "idle_resources_handling_policy": {"key": "idleResourcesHandlingPolicy", "type": "IdleResourcesHandlingPolicy"},
        "status_details": {"key": "statusDetails", "type": "str"},
        "locations": {"key": "locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "_models.AccountStatus"]] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.AccountStatus
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.status = status
        self.idle_resources_handling_policy = idle_resources_handling_policy
        self.status_details = None
        self.locations = locations
        self.network_settings = network_settings


class AccountQuotaPolicyPatchProperties(_serialization.Model):
    """Describes all properties which can be updated for a Singularity account quota policy resource.

    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(**kwargs)
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyProperties(_serialization.Model):
    """Describes properties of AccountQuotaPolicy resource.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas


class Resource(_serialization.Model):
    """The resource model definition for Azure Resource Manager resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = tags
        self.system_data = system_data


class AccountQuotaPolicyResourceDescription(Resource):
    """Describes an account quota policy resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "quotas": {"key": "properties.quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyResourceDescriptionList(_serialization.Model):
    """A pageable list of AccountQuotaPolicy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.AccountQuotaPolicyResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AccountQuotaPolicyResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class AccountQuotaPolicyResourceDescriptionProperties(AccountQuotaPolicyProperties):
    """AccountQuotaPolicyResourceDescriptionProperties.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(
            provisioning_state=provisioning_state, status=status, description=description, quotas=quotas, **kwargs
        )


class AccountQuotaPolicyResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity account quota policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "description": {"key": "properties.description", "type": "str"},
        "quotas": {"key": "properties.quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyResourcePatchDescriptionProperties(AccountQuotaPolicyPatchProperties):
    """AccountQuotaPolicyResourcePatchDescriptionProperties.

    :ivar description: User-friendly description of an AccountQuotaPolicy.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of an AccountQuotaPolicy.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        """
        super().__init__(description=description, quotas=quotas, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for Azure Resource Manager tracked top-level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.location = location


class AccountResourceDescription(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Describes an account resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.AccountStatus
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "status_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "location": {"key": "location", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "idle_resources_handling_policy": {
            "key": "properties.idleResourcesHandlingPolicy",
            "type": "IdleResourcesHandlingPolicy",
        },
        "status_details": {"key": "properties.statusDetails", "type": "str"},
        "locations": {"key": "properties.locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "properties.networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "_models.AccountStatus"]] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.AccountStatus
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(tags=tags, system_data=system_data, location=location, **kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.status = status
        self.idle_resources_handling_policy = idle_resources_handling_policy
        self.status_details = None
        self.locations = locations
        self.network_settings = network_settings


class AccountResourceDescriptionList(_serialization.Model):
    """A pageable list of Account resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.AccountResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AccountResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class AccountResourceDescriptionProperties(AccountProperties):
    """AccountResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.AccountStatus
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _validation = {
        "status_details": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "idle_resources_handling_policy": {"key": "idleResourcesHandlingPolicy", "type": "IdleResourcesHandlingPolicy"},
        "status_details": {"key": "statusDetails", "type": "str"},
        "locations": {"key": "locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "_models.AccountStatus"]] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.AccountStatus
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(
            provisioning_state=provisioning_state,
            description=description,
            status=status,
            idle_resources_handling_policy=idle_resources_handling_policy,
            locations=locations,
            network_settings=network_settings,
            **kwargs
        )


class AccountResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "description": {"key": "properties.description", "type": "str"},
        "idle_resources_handling_policy": {
            "key": "properties.idleResourcesHandlingPolicy",
            "type": "IdleResourcesHandlingPolicy",
        },
        "locations": {"key": "properties.locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "properties.networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        description: Optional[str] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.description = description
        self.idle_resources_handling_policy = idle_resources_handling_policy
        self.locations = locations
        self.network_settings = network_settings


class AccountResourcePatchDescriptionProperties(AccountPatchProperties):
    """AccountResourcePatchDescriptionProperties.

    :ivar description: User-friendly description of an account.
    :vartype description: str
    :ivar idle_resources_handling_policy: Describes the properties of idle resources handling
     policy.
    :vartype idle_resources_handling_policy:
     ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
    :ivar locations: The collection of account locations.
    :vartype locations: list[~azure.mgmt.singularity.models.AccountLocation]
    :ivar network_settings: Describes the network settings for the account.
    :vartype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "idle_resources_handling_policy": {"key": "idleResourcesHandlingPolicy", "type": "IdleResourcesHandlingPolicy"},
        "locations": {"key": "locations", "type": "[AccountLocation]"},
        "network_settings": {"key": "networkSettings", "type": "NetworkSettings"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        idle_resources_handling_policy: Optional["_models.IdleResourcesHandlingPolicy"] = None,
        locations: Optional[List["_models.AccountLocation"]] = None,
        network_settings: Optional["_models.NetworkSettings"] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of an account.
        :paramtype description: str
        :keyword idle_resources_handling_policy: Describes the properties of idle resources handling
         policy.
        :paramtype idle_resources_handling_policy:
         ~azure.mgmt.singularity.models.IdleResourcesHandlingPolicy
        :keyword locations: The collection of account locations.
        :paramtype locations: list[~azure.mgmt.singularity.models.AccountLocation]
        :keyword network_settings: Describes the network settings for the account.
        :paramtype network_settings: ~azure.mgmt.singularity.models.NetworkSettings
        """
        super().__init__(
            description=description,
            idle_resources_handling_policy=idle_resources_handling_policy,
            locations=locations,
            network_settings=network_settings,
            **kwargs
        )


class AdlsMountOptionsBase(_serialization.Model):
    """Describes options to use when mounting a storage cache container backed by ADLS Gen1.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AdlsFuseMountOptions, AdlsInterceptionMountOptions

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"Fuse": "AdlsFuseMountOptions", "Interception": "AdlsInterceptionMountOptions"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class AdlsFuseMountOptions(AdlsMountOptionsBase):
    """Describes options to use when mounting a storage cache container backed by ADLS Gen1 through FUSE.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "Fuse"  # type: str


class AdlsInterceptionMountOptions(AdlsMountOptionsBase):
    """Describes options to use when accessing a storage cache container backed by ADLS Gen1 through file system interception.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "Interception"  # type: str


class StorageCachePropertiesBase(_serialization.Model):
    """Describes the properties of a storage cache resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AdlsStorageCacheProperties, BlobStorageCacheProperties, NfsStorageCacheProperties

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Blob", "NFS", and "ADLS".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageCacheKind
    :ivar description: Description of the storage cache resource.
    :vartype description: str
    :ivar region: Optional region for managed storage resources (if any).
    :vartype region: str
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", "Deleting", and "Suspended".
    :vartype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
    :ivar default_mount_path: Default mount path that will be used within a job or model if none is
     specified.
    :vartype default_mount_path: str
    """

    _validation = {
        "kind": {"required": True},
        "default_mount_path": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "default_mount_path": {"key": "defaultMountPath", "type": "str"},
    }

    _subtype_map = {
        "kind": {
            "ADLS": "AdlsStorageCacheProperties",
            "Blob": "BlobStorageCacheProperties",
            "NFS": "NfsStorageCacheProperties",
        }
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        region: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.StorageCacheStatus"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the storage cache resource.
        :paramtype description: str
        :keyword region: Optional region for managed storage resources (if any).
        :paramtype region: str
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", "Deleting", and
         "Suspended".
        :paramtype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
        """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.description = description
        self.region = region
        self.provisioning_state = provisioning_state
        self.status = status
        self.default_mount_path = None


class AdlsStorageCacheProperties(StorageCachePropertiesBase):  # pylint: disable=too-many-instance-attributes
    """Describes the properties of a storage cache resource backed by ADLS Gen 1.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Blob", "NFS", and "ADLS".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageCacheKind
    :ivar description: Description of the storage cache resource.
    :vartype description: str
    :ivar region: Optional region for managed storage resources (if any).
    :vartype region: str
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", "Deleting", and "Suspended".
    :vartype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
    :ivar default_mount_path: Default mount path that will be used within a job or model if none is
     specified.
    :vartype default_mount_path: str
    :ivar path: ADLS path (e.g. adl://:code:`<adls name>`.azuredatalakestore.net/:code:`<folder>`).
     Required.
    :vartype path: str
    :ivar tenant_id: Service principal tenant ID. Required.
    :vartype tenant_id: str
    :ivar client_id: Service principal client (application) ID. Required.
    :vartype client_id: str
    :ivar client_secret: Service principal client secret. Required.
    :vartype client_secret: str
    :ivar mount_options: Describes options to use when mounting a storage cache container backed by
     ADLS Gen1.
    :vartype mount_options: ~azure.mgmt.singularity.models.AdlsMountOptionsBase
    """

    _validation = {
        "kind": {"required": True},
        "default_mount_path": {"readonly": True},
        "path": {"required": True},
        "tenant_id": {"required": True},
        "client_id": {"required": True},
        "client_secret": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "default_mount_path": {"key": "defaultMountPath", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
        "mount_options": {"key": "mountOptions", "type": "AdlsMountOptionsBase"},
    }

    def __init__(
        self,
        *,
        path: str,
        tenant_id: str,
        client_id: str,
        client_secret: str,
        description: Optional[str] = None,
        region: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.StorageCacheStatus"]] = None,
        mount_options: Optional["_models.AdlsMountOptionsBase"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the storage cache resource.
        :paramtype description: str
        :keyword region: Optional region for managed storage resources (if any).
        :paramtype region: str
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", "Deleting", and
         "Suspended".
        :paramtype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
        :keyword path: ADLS path (e.g. adl://:code:`<adls
         name>`.azuredatalakestore.net/:code:`<folder>`). Required.
        :paramtype path: str
        :keyword tenant_id: Service principal tenant ID. Required.
        :paramtype tenant_id: str
        :keyword client_id: Service principal client (application) ID. Required.
        :paramtype client_id: str
        :keyword client_secret: Service principal client secret. Required.
        :paramtype client_secret: str
        :keyword mount_options: Describes options to use when mounting a storage cache container backed
         by ADLS Gen1.
        :paramtype mount_options: ~azure.mgmt.singularity.models.AdlsMountOptionsBase
        """
        super().__init__(
            description=description, region=region, provisioning_state=provisioning_state, status=status, **kwargs
        )
        self.kind = "ADLS"  # type: str
        self.path = path
        self.tenant_id = tenant_id
        self.client_id = client_id
        self.client_secret = client_secret
        self.mount_options = mount_options


class AvailableInstanceTypeDescription(_serialization.Model):
    """Instance type available in the location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name for the instance type.
    :vartype name: str
    :ivar quota_count: Quota count for the instance type.
    :vartype quota_count: int
    :ivar description: Description for the instance type.
    :vartype description: str
    """

    _validation = {
        "name": {"readonly": True},
        "quota_count": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "quota_count": {"key": "quotaCount", "type": "int"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.name = None
        self.quota_count = None
        self.description = None


class AvailableInstanceTypeDescriptionList(_serialization.Model):
    """A pageable list of available instance types.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.AvailableInstanceTypeDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AvailableInstanceTypeDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class AvailableInstanceTypeSeriesDescription(_serialization.Model):
    """Instance type series available in the location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier for the instance type series.
    :vartype id: str
    :ivar name: Descriptive name for the instance type series.
    :vartype name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None


class AvailableInstanceTypeSeriesDescriptionList(_serialization.Model):
    """A pageable list of available instance type series.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.AvailableInstanceTypeSeriesDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AvailableInstanceTypeSeriesDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class AvailableOperationDisplay(_serialization.Model):
    """An operation available at the listed Azure resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Name of the operation provider.
    :vartype provider: str
    :ivar resource: Name of the resource on which the operation is available.
    :vartype resource: str
    :ivar operation: Name of the available operation.
    :vartype operation: str
    :ivar description: Description of the available operation.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class AvailablePlatformImageDescription(_serialization.Model):
    """Platform supported container image types available.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualifed Id for the container image.
    :vartype id: str
    :ivar names: Image names.
    :vartype names: list[str]
    :ivar description: Description of the container image.
    :vartype description: str
    """

    _validation = {
        "id": {"readonly": True},
        "names": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "names": {"key": "names", "type": "[str]"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.names = None
        self.description = None


class AvailablePlatformImageDescriptionList(_serialization.Model):
    """A pageable list of available images.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.AvailablePlatformImageDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AvailablePlatformImageDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class BlobMountOptionsBase(_serialization.Model):
    """Describes options to use when mounting a storage cache container backed by Azure blob storage.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BlobFuseMountOptions, BlobInterceptionMountOptions

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"Fuse": "BlobFuseMountOptions", "Interception": "BlobInterceptionMountOptions"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class BlobFuseMountOptions(BlobMountOptionsBase):
    """Describes options to use when mounting a storage cache container backed by Azure blob storage through FUSE.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    :ivar streaming: --streaming option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype streaming: bool
    :ivar streaming_cache_limit_mi_b: --stream-cache-mb option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype streaming_cache_limit_mi_b: int
    :ivar streaming_max_blocks_per_file: --max-blocks-per-file option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype streaming_max_blocks_per_file: int
    :ivar streaming_block_size_mi_b: --block-size-mb option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype streaming_block_size_mi_b: int
    :ivar max_concurrency: --max-concurrency option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype max_concurrency: int
    :ivar file_cache_timeout_seconds: --file-cache-timeout-in-seconds option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype file_cache_timeout_seconds: int
    :ivar invalidate_on_sync: --invalidate-on-sync option as described at
     https://github.com/Azure/azure-storage-fuse.
    :vartype invalidate_on_sync: bool
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "streaming": {"key": "streaming", "type": "bool"},
        "streaming_cache_limit_mi_b": {"key": "streamingCacheLimitMiB", "type": "int"},
        "streaming_max_blocks_per_file": {"key": "streamingMaxBlocksPerFile", "type": "int"},
        "streaming_block_size_mi_b": {"key": "streamingBlockSizeMiB", "type": "int"},
        "max_concurrency": {"key": "maxConcurrency", "type": "int"},
        "file_cache_timeout_seconds": {"key": "fileCacheTimeoutSeconds", "type": "int"},
        "invalidate_on_sync": {"key": "invalidateOnSync", "type": "bool"},
    }

    def __init__(
        self,
        *,
        streaming: Optional[bool] = None,
        streaming_cache_limit_mi_b: Optional[int] = None,
        streaming_max_blocks_per_file: Optional[int] = None,
        streaming_block_size_mi_b: Optional[int] = None,
        max_concurrency: Optional[int] = None,
        file_cache_timeout_seconds: Optional[int] = None,
        invalidate_on_sync: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword streaming: --streaming option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype streaming: bool
        :keyword streaming_cache_limit_mi_b: --stream-cache-mb option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype streaming_cache_limit_mi_b: int
        :keyword streaming_max_blocks_per_file: --max-blocks-per-file option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype streaming_max_blocks_per_file: int
        :keyword streaming_block_size_mi_b: --block-size-mb option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype streaming_block_size_mi_b: int
        :keyword max_concurrency: --max-concurrency option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype max_concurrency: int
        :keyword file_cache_timeout_seconds: --file-cache-timeout-in-seconds option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype file_cache_timeout_seconds: int
        :keyword invalidate_on_sync: --invalidate-on-sync option as described at
         https://github.com/Azure/azure-storage-fuse.
        :paramtype invalidate_on_sync: bool
        """
        super().__init__(**kwargs)
        self.kind = "Fuse"  # type: str
        self.streaming = streaming
        self.streaming_cache_limit_mi_b = streaming_cache_limit_mi_b
        self.streaming_max_blocks_per_file = streaming_max_blocks_per_file
        self.streaming_block_size_mi_b = streaming_block_size_mi_b
        self.max_concurrency = max_concurrency
        self.file_cache_timeout_seconds = file_cache_timeout_seconds
        self.invalidate_on_sync = invalidate_on_sync


class BlobInterceptionMountOptions(BlobMountOptionsBase):
    """Describes options to use when accessing a storage cache container backed by Azure blob storage through file system interception.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Fuse" and "Interception".
    :vartype kind: str or ~azure.mgmt.singularity.models.MountOptionsKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "Interception"  # type: str


class BlobStorageCacheProperties(StorageCachePropertiesBase):
    """Describes the properties of a storage cache resource backed by Azure blob.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Blob", "NFS", and "ADLS".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageCacheKind
    :ivar description: Description of the storage cache resource.
    :vartype description: str
    :ivar region: Optional region for managed storage resources (if any).
    :vartype region: str
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", "Deleting", and "Suspended".
    :vartype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
    :ivar default_mount_path: Default mount path that will be used within a job or model if none is
     specified.
    :vartype default_mount_path: str
    :ivar storage_target:
    :vartype storage_target: ~azure.mgmt.singularity.models.BlobStorageTarget
    :ivar mount_options: Describes options to use when mounting a storage cache container backed by
     Azure blob storage.
    :vartype mount_options: ~azure.mgmt.singularity.models.BlobMountOptionsBase
    """

    _validation = {
        "kind": {"required": True},
        "default_mount_path": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "default_mount_path": {"key": "defaultMountPath", "type": "str"},
        "storage_target": {"key": "storageTarget", "type": "BlobStorageTarget"},
        "mount_options": {"key": "mountOptions", "type": "BlobMountOptionsBase"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        region: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.StorageCacheStatus"]] = None,
        storage_target: Optional["_models.BlobStorageTarget"] = None,
        mount_options: Optional["_models.BlobMountOptionsBase"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the storage cache resource.
        :paramtype description: str
        :keyword region: Optional region for managed storage resources (if any).
        :paramtype region: str
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", "Deleting", and
         "Suspended".
        :paramtype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
        :keyword storage_target:
        :paramtype storage_target: ~azure.mgmt.singularity.models.BlobStorageTarget
        :keyword mount_options: Describes options to use when mounting a storage cache container backed
         by Azure blob storage.
        :paramtype mount_options: ~azure.mgmt.singularity.models.BlobMountOptionsBase
        """
        super().__init__(
            description=description, region=region, provisioning_state=provisioning_state, status=status, **kwargs
        )
        self.kind = "Blob"  # type: str
        self.storage_target = storage_target
        self.mount_options = mount_options


class BlobStorageTarget(_serialization.Model):
    """BlobStorageTarget.

    All required parameters must be populated in order to send to Azure.

    :ivar container_endpoint: Storage container endpoint (e.g.
     https://:code:`<account>`.blob.core.windows.net/:code:`<container>`. Required.
    :vartype container_endpoint: str
    :ivar blob_name: Optional model blob name within container for FPGA inferencing deployments.
    :vartype blob_name: str
    :ivar sas_token: SAS token to use for authentication.
    :vartype sas_token: str
    :ivar user_assigned_identity: User assigned managed identity resource ID to use for
     authentication.
    :vartype user_assigned_identity: str
    """

    _validation = {
        "container_endpoint": {"required": True},
    }

    _attribute_map = {
        "container_endpoint": {"key": "containerEndpoint", "type": "str"},
        "blob_name": {"key": "blobName", "type": "str"},
        "sas_token": {"key": "sasToken", "type": "str"},
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
    }

    def __init__(
        self,
        *,
        container_endpoint: str,
        blob_name: Optional[str] = None,
        sas_token: Optional[str] = None,
        user_assigned_identity: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword container_endpoint: Storage container endpoint (e.g.
         https://:code:`<account>`.blob.core.windows.net/:code:`<container>`. Required.
        :paramtype container_endpoint: str
        :keyword blob_name: Optional model blob name within container for FPGA inferencing deployments.
        :paramtype blob_name: str
        :keyword sas_token: SAS token to use for authentication.
        :paramtype sas_token: str
        :keyword user_assigned_identity: User assigned managed identity resource ID to use for
         authentication.
        :paramtype user_assigned_identity: str
        """
        super().__init__(**kwargs)
        self.container_endpoint = container_endpoint
        self.blob_name = blob_name
        self.sas_token = sas_token
        self.user_assigned_identity = user_assigned_identity


class CheckpointPolicy(_serialization.Model):
    """Describes the checkpointing policy for job.

    :ivar enable_checkpoint: Enables automatic checkpointing of training job.
    :vartype enable_checkpoint: bool
    :ivar checkpoint_relative_path: The relative path in the platform storage.
    :vartype checkpoint_relative_path: str
    :ivar checkpoint_interval: Maximum elapsed duration between subsequent checkpoints. The value
     should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
    :vartype checkpoint_interval: ~datetime.timedelta
    :ivar checkpoint_iteration_count: Maximum elapsed iteration count between the subsequent
     checkpoints.
    :vartype checkpoint_iteration_count: int
    :ivar checkpoint_retention_policy: Describes the checkpointing retention policy for job.
    :vartype checkpoint_retention_policy: ~azure.mgmt.singularity.models.CheckpointRetentionPolicy
    """

    _attribute_map = {
        "enable_checkpoint": {"key": "enableCheckpoint", "type": "bool"},
        "checkpoint_relative_path": {"key": "checkpointRelativePath", "type": "str"},
        "checkpoint_interval": {"key": "checkpointInterval", "type": "duration"},
        "checkpoint_iteration_count": {"key": "checkpointIterationCount", "type": "int"},
        "checkpoint_retention_policy": {"key": "checkpointRetentionPolicy", "type": "CheckpointRetentionPolicy"},
    }

    def __init__(
        self,
        *,
        enable_checkpoint: Optional[bool] = None,
        checkpoint_relative_path: Optional[str] = None,
        checkpoint_interval: Optional[datetime.timedelta] = None,
        checkpoint_iteration_count: Optional[int] = None,
        checkpoint_retention_policy: Optional["_models.CheckpointRetentionPolicy"] = None,
        **kwargs
    ):
        """
        :keyword enable_checkpoint: Enables automatic checkpointing of training job.
        :paramtype enable_checkpoint: bool
        :keyword checkpoint_relative_path: The relative path in the platform storage.
        :paramtype checkpoint_relative_path: str
        :keyword checkpoint_interval: Maximum elapsed duration between subsequent checkpoints. The
         value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
        :paramtype checkpoint_interval: ~datetime.timedelta
        :keyword checkpoint_iteration_count: Maximum elapsed iteration count between the subsequent
         checkpoints.
        :paramtype checkpoint_iteration_count: int
        :keyword checkpoint_retention_policy: Describes the checkpointing retention policy for job.
        :paramtype checkpoint_retention_policy:
         ~azure.mgmt.singularity.models.CheckpointRetentionPolicy
        """
        super().__init__(**kwargs)
        self.enable_checkpoint = enable_checkpoint
        self.checkpoint_relative_path = checkpoint_relative_path
        self.checkpoint_interval = checkpoint_interval
        self.checkpoint_iteration_count = checkpoint_iteration_count
        self.checkpoint_retention_policy = checkpoint_retention_policy


class CheckpointRetentionPolicy(_serialization.Model):
    """Describes the checkpointing retention policy for job.

    All required parameters must be populated in order to send to Azure.

    :ivar mode: Required. Known values are: "Ttl" and "MaxStorage".
    :vartype mode: str or ~azure.mgmt.singularity.models.CheckpointRetentionMode
    :ivar ttl: Minimum elapsed duration before deleting checkpoint. The value should be in ISO
     8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
    :vartype ttl: ~datetime.timedelta
    :ivar max_storage: Maximum storage size for checkpoint files to retain. Checkpoint files will
     be purged in FIFO manner.
    :vartype max_storage: int
    """

    _validation = {
        "mode": {"required": True},
    }

    _attribute_map = {
        "mode": {"key": "mode", "type": "str"},
        "ttl": {"key": "ttl", "type": "duration"},
        "max_storage": {"key": "maxStorage", "type": "int"},
    }

    def __init__(
        self,
        *,
        mode: Union[str, "_models.CheckpointRetentionMode"],
        ttl: Optional[datetime.timedelta] = None,
        max_storage: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword mode: Required. Known values are: "Ttl" and "MaxStorage".
        :paramtype mode: str or ~azure.mgmt.singularity.models.CheckpointRetentionMode
        :keyword ttl: Minimum elapsed duration before deleting checkpoint. The value should be in ISO
         8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
        :paramtype ttl: ~datetime.timedelta
        :keyword max_storage: Maximum storage size for checkpoint files to retain. Checkpoint files
         will be purged in FIFO manner.
        :paramtype max_storage: int
        """
        super().__init__(**kwargs)
        self.mode = mode
        self.ttl = ttl
        self.max_storage = max_storage


class CompilationPolicyBase(_serialization.Model):
    """This type describes the Compilation Policy of the model for training / inferencing.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "JIT" and "AOT".
    :vartype kind: str or ~azure.mgmt.singularity.models.CompilationPolicyKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, kind: Union[str, "_models.CompilationPolicyKind"], **kwargs):
        """
        :keyword kind: Required. Known values are: "JIT" and "AOT".
        :paramtype kind: str or ~azure.mgmt.singularity.models.CompilationPolicyKind
        """
        super().__init__(**kwargs)
        self.kind = kind


class ContainerEntryPoint(_serialization.Model):
    """Describes container's entry-point.

    :ivar program: The entry point program.
    :vartype program: str
    :ivar program_args: Command line arguments to be passed to the program.
    :vartype program_args: str
    """

    _attribute_map = {
        "program": {"key": "program", "type": "str"},
        "program_args": {"key": "programArgs", "type": "str"},
    }

    def __init__(self, *, program: Optional[str] = None, program_args: Optional[str] = None, **kwargs):
        """
        :keyword program: The entry point program.
        :paramtype program: str
        :keyword program_args: Command line arguments to be passed to the program.
        :paramtype program_args: str
        """
        super().__init__(**kwargs)
        self.program = program
        self.program_args = program_args


class ContainerImageBase(_serialization.Model):
    """Describes the container image for the job resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CustomContainerImage, PlatformContainerImage

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Platform" and "Custom".
    :vartype kind: str or ~azure.mgmt.singularity.models.ContainerImageKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"Custom": "CustomContainerImage", "Platform": "PlatformContainerImage"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ContainerSetting(_serialization.Model):
    """Describes the settings of container.

    :ivar image: Describes the container image for the job resource.
    :vartype image: ~azure.mgmt.singularity.models.ContainerImageBase
    :ivar environment_variables: Environment variables.
    :vartype environment_variables: dict[str, str]
    :ivar setup_entry_point: Describes container's entry-point.
    :vartype setup_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
    :ivar main_entry_point: Describes container's entry-point.
    :vartype main_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
    :ivar cleanup_entry_point: Describes container's entry-point.
    :vartype cleanup_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
    :ivar liveness_probe_setting: Describes the settings of the probe.
    :vartype liveness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
    """

    _attribute_map = {
        "image": {"key": "image", "type": "ContainerImageBase"},
        "environment_variables": {"key": "environmentVariables", "type": "{str}"},
        "setup_entry_point": {"key": "setupEntryPoint", "type": "ContainerEntryPoint"},
        "main_entry_point": {"key": "mainEntryPoint", "type": "ContainerEntryPoint"},
        "cleanup_entry_point": {"key": "cleanupEntryPoint", "type": "ContainerEntryPoint"},
        "liveness_probe_setting": {"key": "livenessProbeSetting", "type": "ProbeSetting"},
    }

    def __init__(
        self,
        *,
        image: Optional["_models.ContainerImageBase"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        setup_entry_point: Optional["_models.ContainerEntryPoint"] = None,
        main_entry_point: Optional["_models.ContainerEntryPoint"] = None,
        cleanup_entry_point: Optional["_models.ContainerEntryPoint"] = None,
        liveness_probe_setting: Optional["_models.ProbeSetting"] = None,
        **kwargs
    ):
        """
        :keyword image: Describes the container image for the job resource.
        :paramtype image: ~azure.mgmt.singularity.models.ContainerImageBase
        :keyword environment_variables: Environment variables.
        :paramtype environment_variables: dict[str, str]
        :keyword setup_entry_point: Describes container's entry-point.
        :paramtype setup_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
        :keyword main_entry_point: Describes container's entry-point.
        :paramtype main_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
        :keyword cleanup_entry_point: Describes container's entry-point.
        :paramtype cleanup_entry_point: ~azure.mgmt.singularity.models.ContainerEntryPoint
        :keyword liveness_probe_setting: Describes the settings of the probe.
        :paramtype liveness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
        """
        super().__init__(**kwargs)
        self.image = image
        self.environment_variables = environment_variables
        self.setup_entry_point = setup_entry_point
        self.main_entry_point = main_entry_point
        self.cleanup_entry_point = cleanup_entry_point
        self.liveness_probe_setting = liveness_probe_setting


class CustomContainerImage(ContainerImageBase):
    """Describes a custom image.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Platform" and "Custom".
    :vartype kind: str or ~azure.mgmt.singularity.models.ContainerImageKind
    :ivar image: Location of image to use for training. Required.
    :vartype image: str
    :ivar container_registry_username: Username of the container registry account. Required if
     UserAssignedIdentity is omitted.
    :vartype container_registry_username: str
    :ivar container_registry_password: Password of the container registry account. Required if
     UserAssignedIdentity is omitted.
    :vartype container_registry_password: str
    :ivar user_assigned_identity: User assigned identity with access to the container registry.
     Required if ContainerRegistryUsername and ContainerRegistryPassword are omitted.
    :vartype user_assigned_identity: str
    """

    _validation = {
        "kind": {"required": True},
        "image": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "image": {"key": "image", "type": "str"},
        "container_registry_username": {"key": "containerRegistryUsername", "type": "str"},
        "container_registry_password": {"key": "containerRegistryPassword", "type": "str"},
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
    }

    def __init__(
        self,
        *,
        image: str,
        container_registry_username: Optional[str] = None,
        container_registry_password: Optional[str] = None,
        user_assigned_identity: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword image: Location of image to use for training. Required.
        :paramtype image: str
        :keyword container_registry_username: Username of the container registry account. Required if
         UserAssignedIdentity is omitted.
        :paramtype container_registry_username: str
        :keyword container_registry_password: Password of the container registry account. Required if
         UserAssignedIdentity is omitted.
        :paramtype container_registry_password: str
        :keyword user_assigned_identity: User assigned identity with access to the container registry.
         Required if ContainerRegistryUsername and ContainerRegistryPassword are omitted.
        :paramtype user_assigned_identity: str
        """
        super().__init__(**kwargs)
        self.kind = "Custom"  # type: str
        self.image = image
        self.container_registry_username = container_registry_username
        self.container_registry_password = container_registry_password
        self.user_assigned_identity = user_assigned_identity


class NetworkPropertiesBase(_serialization.Model):
    """Describes the properties of a network resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DelegatedSubnetProperties

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. "DelegatedSubnet"
    :vartype kind: str or ~azure.mgmt.singularity.models.NetworkKind
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", and "Deleting".
    :vartype status: str or ~azure.mgmt.singularity.models.NetworkResourceStatus
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    _subtype_map = {"kind": {"DelegatedSubnet": "DelegatedSubnetProperties"}}

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.NetworkResourceStatus"]] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", and "Deleting".
        :paramtype status: str or ~azure.mgmt.singularity.models.NetworkResourceStatus
        """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.provisioning_state = provisioning_state
        self.status = status


class DelegatedSubnetProperties(NetworkPropertiesBase):
    """Describes the properties of a delegated subnet resource.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. "DelegatedSubnet"
    :vartype kind: str or ~azure.mgmt.singularity.models.NetworkKind
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", and "Deleting".
    :vartype status: str or ~azure.mgmt.singularity.models.NetworkResourceStatus
    :ivar delegated_subnet_resource_id: Subnet resource ID (e.g.
     /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
    :vartype delegated_subnet_resource_id: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "delegated_subnet_resource_id": {"key": "delegatedSubnetResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.NetworkResourceStatus"]] = None,
        delegated_subnet_resource_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", and "Deleting".
        :paramtype status: str or ~azure.mgmt.singularity.models.NetworkResourceStatus
        :keyword delegated_subnet_resource_id: Subnet resource ID (e.g.
         /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
        :paramtype delegated_subnet_resource_id: str
        """
        super().__init__(provisioning_state=provisioning_state, status=status, **kwargs)
        self.kind = "DelegatedSubnet"  # type: str
        self.delegated_subnet_resource_id = delegated_subnet_resource_id


class Endpoint(_serialization.Model):
    """Describes the named endpoint of a job or model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the endpoint.
    :vartype name: str
    :ivar address: The address of the endpoint.
    :vartype address: str
    """

    _validation = {
        "name": {"readonly": True},
        "address": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "address": {"key": "address", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.name = None
        self.address = None


class ErrorDetailsModel(_serialization.Model):
    """ErrorDetailsModel.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs):
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class ErrorModel(_serialization.Model):
    """ErrorModel.

    :ivar error:
    :vartype error: ~azure.mgmt.singularity.models.ErrorModelProperties
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorModelProperties"},
    }

    def __init__(self, *, error: Optional["_models.ErrorModelProperties"] = None, **kwargs):
        """
        :keyword error:
        :paramtype error: ~azure.mgmt.singularity.models.ErrorModelProperties
        """
        super().__init__(**kwargs)
        self.error = error


class ErrorModelProperties(_serialization.Model):
    """ErrorModelProperties.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    :ivar inner_error:
    :vartype inner_error: str
    :ivar details:
    :vartype details: list[~azure.mgmt.singularity.models.ErrorDetailsModel]
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "inner_error": {"key": "innerError", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetailsModel]"},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        inner_error: Optional[str] = None,
        details: Optional[List["_models.ErrorDetailsModel"]] = None,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        :keyword inner_error:
        :paramtype inner_error: str
        :keyword details:
        :paramtype details: list[~azure.mgmt.singularity.models.ErrorDetailsModel]
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.inner_error = inner_error
        self.details = details


class ProbeSetting(_serialization.Model):
    """Describes the settings of the probe.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ExecProbeSetting, HttpProbeSetting

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Exec" and "Http".
    :vartype kind: str or ~azure.mgmt.singularity.models.ProbeSettingKind
    :ivar initial_delay_in_seconds: The initial delay in seconds to start executing the probe after
     the container has started.
    :vartype initial_delay_in_seconds: int
    :ivar success_threshold: Minimum consecutive successes for the probe to be considered
     successful after having failed.
    :vartype success_threshold: int
    :ivar failure_threshold: Number of consecutive failures for the probe after which the container
     is restarted.
    :vartype failure_threshold: int
    :ivar frequency_in_seconds: The period in seconds to specify the frequency of the probe.
    :vartype frequency_in_seconds: int
    :ivar timeout_in_seconds: The period in seconds after which we consider the probe as failed, if
     it hasn't finished successfully.
    :vartype timeout_in_seconds: int
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "initial_delay_in_seconds": {"key": "initialDelayInSeconds", "type": "int"},
        "success_threshold": {"key": "successThreshold", "type": "int"},
        "failure_threshold": {"key": "failureThreshold", "type": "int"},
        "frequency_in_seconds": {"key": "frequencyInSeconds", "type": "int"},
        "timeout_in_seconds": {"key": "timeoutInSeconds", "type": "int"},
    }

    _subtype_map = {"kind": {"Exec": "ExecProbeSetting", "Http": "HttpProbeSetting"}}

    def __init__(
        self,
        *,
        initial_delay_in_seconds: Optional[int] = None,
        success_threshold: Optional[int] = None,
        failure_threshold: Optional[int] = None,
        frequency_in_seconds: Optional[int] = None,
        timeout_in_seconds: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword initial_delay_in_seconds: The initial delay in seconds to start executing the probe
         after the container has started.
        :paramtype initial_delay_in_seconds: int
        :keyword success_threshold: Minimum consecutive successes for the probe to be considered
         successful after having failed.
        :paramtype success_threshold: int
        :keyword failure_threshold: Number of consecutive failures for the probe after which the
         container is restarted.
        :paramtype failure_threshold: int
        :keyword frequency_in_seconds: The period in seconds to specify the frequency of the probe.
        :paramtype frequency_in_seconds: int
        :keyword timeout_in_seconds: The period in seconds after which we consider the probe as failed,
         if it hasn't finished successfully.
        :paramtype timeout_in_seconds: int
        """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.initial_delay_in_seconds = initial_delay_in_seconds
        self.success_threshold = success_threshold
        self.failure_threshold = failure_threshold
        self.frequency_in_seconds = frequency_in_seconds
        self.timeout_in_seconds = timeout_in_seconds


class ExecProbeSetting(ProbeSetting):
    """Describes probe settings based on executing a program.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Exec" and "Http".
    :vartype kind: str or ~azure.mgmt.singularity.models.ProbeSettingKind
    :ivar initial_delay_in_seconds: The initial delay in seconds to start executing the probe after
     the container has started.
    :vartype initial_delay_in_seconds: int
    :ivar success_threshold: Minimum consecutive successes for the probe to be considered
     successful after having failed.
    :vartype success_threshold: int
    :ivar failure_threshold: Number of consecutive failures for the probe after which the container
     is restarted.
    :vartype failure_threshold: int
    :ivar frequency_in_seconds: The period in seconds to specify the frequency of the probe.
    :vartype frequency_in_seconds: int
    :ivar timeout_in_seconds: The period in seconds after which we consider the probe as failed, if
     it hasn't finished successfully.
    :vartype timeout_in_seconds: int
    :ivar program: Program to be executed for the probe. Required.
    :vartype program: str
    :ivar program_args: Arguments passed into the Program.
    :vartype program_args: str
    """

    _validation = {
        "kind": {"required": True},
        "program": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "initial_delay_in_seconds": {"key": "initialDelayInSeconds", "type": "int"},
        "success_threshold": {"key": "successThreshold", "type": "int"},
        "failure_threshold": {"key": "failureThreshold", "type": "int"},
        "frequency_in_seconds": {"key": "frequencyInSeconds", "type": "int"},
        "timeout_in_seconds": {"key": "timeoutInSeconds", "type": "int"},
        "program": {"key": "program", "type": "str"},
        "program_args": {"key": "programArgs", "type": "str"},
    }

    def __init__(
        self,
        *,
        program: str,
        initial_delay_in_seconds: Optional[int] = None,
        success_threshold: Optional[int] = None,
        failure_threshold: Optional[int] = None,
        frequency_in_seconds: Optional[int] = None,
        timeout_in_seconds: Optional[int] = None,
        program_args: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword initial_delay_in_seconds: The initial delay in seconds to start executing the probe
         after the container has started.
        :paramtype initial_delay_in_seconds: int
        :keyword success_threshold: Minimum consecutive successes for the probe to be considered
         successful after having failed.
        :paramtype success_threshold: int
        :keyword failure_threshold: Number of consecutive failures for the probe after which the
         container is restarted.
        :paramtype failure_threshold: int
        :keyword frequency_in_seconds: The period in seconds to specify the frequency of the probe.
        :paramtype frequency_in_seconds: int
        :keyword timeout_in_seconds: The period in seconds after which we consider the probe as failed,
         if it hasn't finished successfully.
        :paramtype timeout_in_seconds: int
        :keyword program: Program to be executed for the probe. Required.
        :paramtype program: str
        :keyword program_args: Arguments passed into the Program.
        :paramtype program_args: str
        """
        super().__init__(
            initial_delay_in_seconds=initial_delay_in_seconds,
            success_threshold=success_threshold,
            failure_threshold=failure_threshold,
            frequency_in_seconds=frequency_in_seconds,
            timeout_in_seconds=timeout_in_seconds,
            **kwargs
        )
        self.kind = "Exec"  # type: str
        self.program = program
        self.program_args = program_args


class GroupPolicyPatchProperties(_serialization.Model):
    """Describes all properties which can be updated for a Singularity group policy resource.

    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(**kwargs)
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyProperties(_serialization.Model):
    """Describes the properties of a GroupPolicy resource.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourceDescription(Resource):  # pylint: disable=too-many-instance-attributes
    """Describes a GroupPolicy resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "quotas": {"key": "properties.quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "properties.maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "properties.maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourceDescriptionList(_serialization.Model):
    """A pageable list of GroupPolicy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.GroupPolicyResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[GroupPolicyResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class GroupPolicyResourceDescriptionProperties(GroupPolicyProperties):
    """GroupPolicyResourceDescriptionProperties.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
    :vartype status: str or ~azure.mgmt.singularity.models.PolicyStatus
    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Creating", "Created", "Updating", "Deleting", and "Failed".
        :paramtype status: str or ~azure.mgmt.singularity.models.PolicyStatus
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(
            provisioning_state=provisioning_state,
            status=status,
            description=description,
            quotas=quotas,
            max_shared_storage_io_ps=max_shared_storage_io_ps,
            max_shared_storage_bandwidth=max_shared_storage_bandwidth,
            **kwargs
        )


class GroupPolicyResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity group policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "description": {"key": "properties.description", "type": "str"},
        "quotas": {"key": "properties.quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "properties.maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "properties.maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourcePatchDescriptionProperties(GroupPolicyPatchProperties):
    """GroupPolicyResourcePatchDescriptionProperties.

    :ivar description: User-friendly description of the resource.
    :vartype description: str
    :ivar quotas: A list of quota policy per instance type series.
    :vartype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :vartype max_shared_storage_io_ps: int
    :ivar max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :vartype max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "quotas": {"key": "quotas", "type": "[InstanceTypeSeriesQuota]"},
        "max_shared_storage_io_ps": {"key": "maxSharedStorageIOPs", "type": "int"},
        "max_shared_storage_bandwidth": {"key": "maxSharedStorageBandwidth", "type": "int"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["_models.InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of the resource.
        :paramtype description: str
        :keyword quotas: A list of quota policy per instance type series.
        :paramtype quotas: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
        :keyword max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
        :paramtype max_shared_storage_io_ps: int
        :keyword max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
         expressed in MB/s.
        :paramtype max_shared_storage_bandwidth: int
        """
        super().__init__(
            description=description,
            quotas=quotas,
            max_shared_storage_io_ps=max_shared_storage_io_ps,
            max_shared_storage_bandwidth=max_shared_storage_bandwidth,
            **kwargs
        )


class HttpProbeSetting(ProbeSetting):
    """Describes probe settings based on HTTP request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Exec" and "Http".
    :vartype kind: str or ~azure.mgmt.singularity.models.ProbeSettingKind
    :ivar initial_delay_in_seconds: The initial delay in seconds to start executing the probe after
     the container has started.
    :vartype initial_delay_in_seconds: int
    :ivar success_threshold: Minimum consecutive successes for the probe to be considered
     successful after having failed.
    :vartype success_threshold: int
    :ivar failure_threshold: Number of consecutive failures for the probe after which the container
     is restarted.
    :vartype failure_threshold: int
    :ivar frequency_in_seconds: The period in seconds to specify the frequency of the probe.
    :vartype frequency_in_seconds: int
    :ivar timeout_in_seconds: The period in seconds after which we consider the probe as failed, if
     it hasn't finished successfully.
    :vartype timeout_in_seconds: int
    :ivar path: The path relative to the endpoint domain name used to probe.
    :vartype path: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "initial_delay_in_seconds": {"key": "initialDelayInSeconds", "type": "int"},
        "success_threshold": {"key": "successThreshold", "type": "int"},
        "failure_threshold": {"key": "failureThreshold", "type": "int"},
        "frequency_in_seconds": {"key": "frequencyInSeconds", "type": "int"},
        "timeout_in_seconds": {"key": "timeoutInSeconds", "type": "int"},
        "path": {"key": "path", "type": "str"},
    }

    def __init__(
        self,
        *,
        initial_delay_in_seconds: Optional[int] = None,
        success_threshold: Optional[int] = None,
        failure_threshold: Optional[int] = None,
        frequency_in_seconds: Optional[int] = None,
        timeout_in_seconds: Optional[int] = None,
        path: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword initial_delay_in_seconds: The initial delay in seconds to start executing the probe
         after the container has started.
        :paramtype initial_delay_in_seconds: int
        :keyword success_threshold: Minimum consecutive successes for the probe to be considered
         successful after having failed.
        :paramtype success_threshold: int
        :keyword failure_threshold: Number of consecutive failures for the probe after which the
         container is restarted.
        :paramtype failure_threshold: int
        :keyword frequency_in_seconds: The period in seconds to specify the frequency of the probe.
        :paramtype frequency_in_seconds: int
        :keyword timeout_in_seconds: The period in seconds after which we consider the probe as failed,
         if it hasn't finished successfully.
        :paramtype timeout_in_seconds: int
        :keyword path: The path relative to the endpoint domain name used to probe.
        :paramtype path: str
        """
        super().__init__(
            initial_delay_in_seconds=initial_delay_in_seconds,
            success_threshold=success_threshold,
            failure_threshold=failure_threshold,
            frequency_in_seconds=frequency_in_seconds,
            timeout_in_seconds=timeout_in_seconds,
            **kwargs
        )
        self.kind = "Http"  # type: str
        self.path = path


class IdleResourcesHandlingPolicy(_serialization.Model):
    """Describes the properties of idle resources handling policy.

    :ivar idle_resources_handling_mode: Known values are: "AutoSuspend" and "AutoDelete".
    :vartype idle_resources_handling_mode: str or
     ~azure.mgmt.singularity.models.IdleResourcesHandlingMode
    """

    _attribute_map = {
        "idle_resources_handling_mode": {"key": "idleResourcesHandlingMode", "type": "str"},
    }

    def __init__(
        self,
        *,
        idle_resources_handling_mode: Optional[Union[str, "_models.IdleResourcesHandlingMode"]] = None,
        **kwargs
    ):
        """
        :keyword idle_resources_handling_mode: Known values are: "AutoSuspend" and "AutoDelete".
        :paramtype idle_resources_handling_mode: str or
         ~azure.mgmt.singularity.models.IdleResourcesHandlingMode
        """
        super().__init__(**kwargs)
        self.idle_resources_handling_mode = idle_resources_handling_mode


class InstanceTypeSeriesQuota(_serialization.Model):
    """Describes the quota for the InstanceType series.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The identifier for instance type series quota. Required.
    :vartype id: str
    :ivar name: User friendly description for the instance type series.
    :vartype name: str
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar limit: Maximum allowed units for the instance type series. Required.
    :vartype limit: int
    :ivar used: Number of units currently in use.
    :vartype used: int
    """

    _validation = {
        "id": {"required": True},
        "name": {"readonly": True},
        "limit": {"required": True},
        "used": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "sla_tier": {"key": "slaTier", "type": "str"},
        "limit": {"key": "limit", "type": "int"},
        "used": {"key": "used", "type": "int"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        limit: int,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        **kwargs
    ):
        """
        :keyword id: The identifier for instance type series quota. Required.
        :paramtype id: str
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword limit: Maximum allowed units for the instance type series. Required.
        :paramtype limit: int
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = None
        self.sla_tier = sla_tier
        self.limit = limit
        self.used = None


class InstanceTypeSeriesQuotaList(_serialization.Model):
    """A pageable list of quotas.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.InstanceTypeSeriesQuota]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[InstanceTypeSeriesQuota]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class InstanceTypeSetting(_serialization.Model):
    """Describes setting for a Singularity Instance Type.

    :ivar name: Specifies the name of this instance type setting. This name can be used to identify
     the instance of an instanceType. Resources referencing the same name are collocated on the same
     instance of the instance type.
    :vartype name: str
    :ivar instance_type: The instance type name.
    :vartype instance_type: str
    :ivar container_setting: Describes the settings of container.
    :vartype container_setting: ~azure.mgmt.singularity.models.ContainerSetting
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "instance_type": {"key": "instanceType", "type": "str"},
        "container_setting": {"key": "containerSetting", "type": "ContainerSetting"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        instance_type: Optional[str] = None,
        container_setting: Optional["_models.ContainerSetting"] = None,
        **kwargs
    ):
        """
        :keyword name: Specifies the name of this instance type setting. This name can be used to
         identify the instance of an instanceType. Resources referencing the same name are collocated on
         the same instance of the instance type.
        :paramtype name: str
        :keyword instance_type: The instance type name.
        :paramtype instance_type: str
        :keyword container_setting: Describes the settings of container.
        :paramtype container_setting: ~azure.mgmt.singularity.models.ContainerSetting
        """
        super().__init__(**kwargs)
        self.name = name
        self.instance_type = instance_type
        self.container_setting = container_setting


class InstanceTypeSettings(_serialization.Model):
    """Describes the instance type settings.

    All required parameters must be populated in order to send to Azure.

    :ivar instance_type: The instance type belonging to the same series. Required.
    :vartype instance_type: str
    :ivar scale_policy: Describes the scale policy for a Job or a Model. Required.
    :vartype scale_policy: ~azure.mgmt.singularity.models.ScalePolicy
    """

    _validation = {
        "instance_type": {"required": True},
        "scale_policy": {"required": True},
    }

    _attribute_map = {
        "instance_type": {"key": "instanceType", "type": "str"},
        "scale_policy": {"key": "scalePolicy", "type": "ScalePolicy"},
    }

    def __init__(self, *, instance_type: str, scale_policy: "_models.ScalePolicy", **kwargs):
        """
        :keyword instance_type: The instance type belonging to the same series. Required.
        :paramtype instance_type: str
        :keyword scale_policy: Describes the scale policy for a Job or a Model. Required.
        :paramtype scale_policy: ~azure.mgmt.singularity.models.ScalePolicy
        """
        super().__init__(**kwargs)
        self.instance_type = instance_type
        self.scale_policy = scale_policy


class JobPatchProperties(_serialization.Model):
    """Describes all properties which can be updated for a Singularity job resource.

    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "scheduling_priority": {"key": "schedulingPriority", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        """
        super().__init__(**kwargs)
        self.description = description
        self.scheduling_priority = scheduling_priority


class JobResourceDescription(Resource):  # pylint: disable=too-many-instance-attributes
    """Describes a job resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar identity:
    :vartype identity: ~azure.mgmt.singularity.models.ResourceIdentity
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :ivar placement_policies: Collection of placement policies to use for the training job.
     Required.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    :ivar data_location: Job input data location.
    :vartype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
    :ivar code_location: Describes the location of a storage source and how it will be accessed.
    :vartype code_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar output_location: Describes the location of a storage source and how it will be accessed.
    :vartype output_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar container_image: Describes the container image for the job resource. Required.
    :vartype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
    :ivar group_policy_name: Group policy name associated with the training job.
    :vartype group_policy_name: str
    :ivar checkpoint_policy: Describes the checkpointing policy for job.
    :vartype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
    :ivar max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :vartype max_job_execution_time: float
    :ivar suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
     hours).
    :vartype suspend_on_idle_time: float
    :ivar program: The entry script for your Job in the codeLocation. For interactive jobs, specify
     null.
    :vartype program: str
    :ivar program_args: Command line arguments to be passed to the program.
    :vartype program_args: str
    :ivar tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :vartype tensor_board_log_directory: str
    :ivar status: Known values are: "Initialized", "Running", "Suspended", "Completed", "Failed",
     and "Canceled".
    :vartype status: str or ~azure.mgmt.singularity.models.JobStatus
    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    :ivar environment_variables: User specified job environment variables.
    :vartype environment_variables: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "job_id": {"readonly": True},
        "placement_policies": {"required": True},
        "container_image": {"required": True},
        "status_details": {"readonly": True},
        "notebook_endpoint": {"readonly": True},
        "tensor_board_endpoint": {"readonly": True},
        "grafana_endpoint": {"readonly": True},
        "job_logs_endpoint": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "identity": {"key": "identity", "type": "ResourceIdentity"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "job_id": {"key": "properties.jobId", "type": "str"},
        "placement_policies": {"key": "properties.placementPolicies", "type": "[PlacementPolicy]"},
        "sla_tier": {"key": "properties.slaTier", "type": "str"},
        "scheduling_priority": {"key": "properties.schedulingPriority", "type": "str"},
        "data_location": {"key": "properties.dataLocation", "type": "[StorageLocation]"},
        "code_location": {"key": "properties.codeLocation", "type": "StorageLocation"},
        "output_location": {"key": "properties.outputLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "properties.networkResourceRef", "type": "NetworkReference"},
        "container_image": {"key": "properties.containerImage", "type": "ContainerImageBase"},
        "group_policy_name": {"key": "properties.groupPolicyName", "type": "str"},
        "checkpoint_policy": {"key": "properties.checkpointPolicy", "type": "CheckpointPolicy"},
        "max_job_execution_time": {"key": "properties.maxJobExecutionTime", "type": "float"},
        "suspend_on_idle_time": {"key": "properties.suspendOnIdleTime", "type": "float"},
        "program": {"key": "properties.program", "type": "str"},
        "program_args": {"key": "properties.programArgs", "type": "str"},
        "tensor_board_log_directory": {"key": "properties.tensorBoardLogDirectory", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "status_details": {"key": "properties.statusDetails", "type": "str"},
        "notebook_endpoint": {"key": "properties.notebookEndpoint", "type": "str"},
        "tensor_board_endpoint": {"key": "properties.tensorBoardEndpoint", "type": "str"},
        "grafana_endpoint": {"key": "properties.grafanaEndpoint", "type": "str"},
        "job_logs_endpoint": {"key": "properties.jobLogsEndpoint", "type": "str"},
        "environment_variables": {"key": "properties.environmentVariables", "type": "{str}"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        placement_policies: List["_models.PlacementPolicy"],
        container_image: "_models.ContainerImageBase",
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        data_location: Optional[List["_models.StorageLocation"]] = None,
        code_location: Optional["_models.StorageLocation"] = None,
        output_location: Optional["_models.StorageLocation"] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["_models.CheckpointPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        suspend_on_idle_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "_models.JobStatus"]] = None,
        description: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword identity:
        :paramtype identity: ~azure.mgmt.singularity.models.ResourceIdentity
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword placement_policies: Collection of placement policies to use for the training job.
         Required.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        :keyword data_location: Job input data location.
        :paramtype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
        :keyword code_location: Describes the location of a storage source and how it will be accessed.
        :paramtype code_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword output_location: Describes the location of a storage source and how it will be
         accessed.
        :paramtype output_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword container_image: Describes the container image for the job resource. Required.
        :paramtype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
        :keyword group_policy_name: Group policy name associated with the training job.
        :paramtype group_policy_name: str
        :keyword checkpoint_policy: Describes the checkpointing policy for job.
        :paramtype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
        :keyword max_job_execution_time: Maximum execution time for a training job in the account (in
         hours).
        :paramtype max_job_execution_time: float
        :keyword suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
         hours).
        :paramtype suspend_on_idle_time: float
        :keyword program: The entry script for your Job in the codeLocation. For interactive jobs,
         specify null.
        :paramtype program: str
        :keyword program_args: Command line arguments to be passed to the program.
        :paramtype program_args: str
        :keyword tensor_board_log_directory: The directory which TensorBoard will be configured to use
         as the log directory.
        :paramtype tensor_board_log_directory: str
        :keyword status: Known values are: "Initialized", "Running", "Suspended", "Completed",
         "Failed", and "Canceled".
        :paramtype status: str or ~azure.mgmt.singularity.models.JobStatus
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword environment_variables: User specified job environment variables.
        :paramtype environment_variables: dict[str, str]
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.identity = identity
        self.provisioning_state = provisioning_state
        self.job_id = None
        self.placement_policies = placement_policies
        self.sla_tier = sla_tier
        self.scheduling_priority = scheduling_priority
        self.data_location = data_location
        self.code_location = code_location
        self.output_location = output_location
        self.network_resource_ref = network_resource_ref
        self.container_image = container_image
        self.group_policy_name = group_policy_name
        self.checkpoint_policy = checkpoint_policy
        self.max_job_execution_time = max_job_execution_time
        self.suspend_on_idle_time = suspend_on_idle_time
        self.program = program
        self.program_args = program_args
        self.tensor_board_log_directory = tensor_board_log_directory
        self.status = status
        self.description = description
        self.status_details = None
        self.notebook_endpoint = None
        self.tensor_board_endpoint = None
        self.grafana_endpoint = None
        self.job_logs_endpoint = None
        self.environment_variables = environment_variables


class JobResourceDescriptionList(_serialization.Model):
    """A pageable list of Job resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.JobResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[JobResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class JobResourceProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Describes the properties of a job resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :ivar placement_policies: Collection of placement policies to use for the training job.
     Required.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    :ivar data_location: Job input data location.
    :vartype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
    :ivar code_location: Describes the location of a storage source and how it will be accessed.
    :vartype code_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar output_location: Describes the location of a storage source and how it will be accessed.
    :vartype output_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar container_image: Describes the container image for the job resource. Required.
    :vartype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
    :ivar group_policy_name: Group policy name associated with the training job.
    :vartype group_policy_name: str
    :ivar checkpoint_policy: Describes the checkpointing policy for job.
    :vartype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
    :ivar max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :vartype max_job_execution_time: float
    :ivar suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
     hours).
    :vartype suspend_on_idle_time: float
    :ivar program: The entry script for your Job in the codeLocation. For interactive jobs, specify
     null.
    :vartype program: str
    :ivar program_args: Command line arguments to be passed to the program.
    :vartype program_args: str
    :ivar tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :vartype tensor_board_log_directory: str
    :ivar status: Known values are: "Initialized", "Running", "Suspended", "Completed", "Failed",
     and "Canceled".
    :vartype status: str or ~azure.mgmt.singularity.models.JobStatus
    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    :ivar environment_variables: User specified job environment variables.
    :vartype environment_variables: dict[str, str]
    """

    _validation = {
        "job_id": {"readonly": True},
        "placement_policies": {"required": True},
        "container_image": {"required": True},
        "status_details": {"readonly": True},
        "notebook_endpoint": {"readonly": True},
        "tensor_board_endpoint": {"readonly": True},
        "grafana_endpoint": {"readonly": True},
        "job_logs_endpoint": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "job_id": {"key": "jobId", "type": "str"},
        "placement_policies": {"key": "placementPolicies", "type": "[PlacementPolicy]"},
        "sla_tier": {"key": "slaTier", "type": "str"},
        "scheduling_priority": {"key": "schedulingPriority", "type": "str"},
        "data_location": {"key": "dataLocation", "type": "[StorageLocation]"},
        "code_location": {"key": "codeLocation", "type": "StorageLocation"},
        "output_location": {"key": "outputLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "networkResourceRef", "type": "NetworkReference"},
        "container_image": {"key": "containerImage", "type": "ContainerImageBase"},
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
        "checkpoint_policy": {"key": "checkpointPolicy", "type": "CheckpointPolicy"},
        "max_job_execution_time": {"key": "maxJobExecutionTime", "type": "float"},
        "suspend_on_idle_time": {"key": "suspendOnIdleTime", "type": "float"},
        "program": {"key": "program", "type": "str"},
        "program_args": {"key": "programArgs", "type": "str"},
        "tensor_board_log_directory": {"key": "tensorBoardLogDirectory", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status_details": {"key": "statusDetails", "type": "str"},
        "notebook_endpoint": {"key": "notebookEndpoint", "type": "str"},
        "tensor_board_endpoint": {"key": "tensorBoardEndpoint", "type": "str"},
        "grafana_endpoint": {"key": "grafanaEndpoint", "type": "str"},
        "job_logs_endpoint": {"key": "jobLogsEndpoint", "type": "str"},
        "environment_variables": {"key": "environmentVariables", "type": "{str}"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        placement_policies: List["_models.PlacementPolicy"],
        container_image: "_models.ContainerImageBase",
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        data_location: Optional[List["_models.StorageLocation"]] = None,
        code_location: Optional["_models.StorageLocation"] = None,
        output_location: Optional["_models.StorageLocation"] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["_models.CheckpointPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        suspend_on_idle_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "_models.JobStatus"]] = None,
        description: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword placement_policies: Collection of placement policies to use for the training job.
         Required.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        :keyword data_location: Job input data location.
        :paramtype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
        :keyword code_location: Describes the location of a storage source and how it will be accessed.
        :paramtype code_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword output_location: Describes the location of a storage source and how it will be
         accessed.
        :paramtype output_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword container_image: Describes the container image for the job resource. Required.
        :paramtype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
        :keyword group_policy_name: Group policy name associated with the training job.
        :paramtype group_policy_name: str
        :keyword checkpoint_policy: Describes the checkpointing policy for job.
        :paramtype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
        :keyword max_job_execution_time: Maximum execution time for a training job in the account (in
         hours).
        :paramtype max_job_execution_time: float
        :keyword suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
         hours).
        :paramtype suspend_on_idle_time: float
        :keyword program: The entry script for your Job in the codeLocation. For interactive jobs,
         specify null.
        :paramtype program: str
        :keyword program_args: Command line arguments to be passed to the program.
        :paramtype program_args: str
        :keyword tensor_board_log_directory: The directory which TensorBoard will be configured to use
         as the log directory.
        :paramtype tensor_board_log_directory: str
        :keyword status: Known values are: "Initialized", "Running", "Suspended", "Completed",
         "Failed", and "Canceled".
        :paramtype status: str or ~azure.mgmt.singularity.models.JobStatus
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword environment_variables: User specified job environment variables.
        :paramtype environment_variables: dict[str, str]
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.job_id = None
        self.placement_policies = placement_policies
        self.sla_tier = sla_tier
        self.scheduling_priority = scheduling_priority
        self.data_location = data_location
        self.code_location = code_location
        self.output_location = output_location
        self.network_resource_ref = network_resource_ref
        self.container_image = container_image
        self.group_policy_name = group_policy_name
        self.checkpoint_policy = checkpoint_policy
        self.max_job_execution_time = max_job_execution_time
        self.suspend_on_idle_time = suspend_on_idle_time
        self.program = program
        self.program_args = program_args
        self.tensor_board_log_directory = tensor_board_log_directory
        self.status = status
        self.description = description
        self.status_details = None
        self.notebook_endpoint = None
        self.tensor_board_endpoint = None
        self.grafana_endpoint = None
        self.job_logs_endpoint = None
        self.environment_variables = environment_variables


class JobResourceDescriptionProperties(JobResourceProperties):  # pylint: disable=too-many-instance-attributes
    """JobResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :ivar placement_policies: Collection of placement policies to use for the training job.
     Required.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    :ivar data_location: Job input data location.
    :vartype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
    :ivar code_location: Describes the location of a storage source and how it will be accessed.
    :vartype code_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar output_location: Describes the location of a storage source and how it will be accessed.
    :vartype output_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar container_image: Describes the container image for the job resource. Required.
    :vartype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
    :ivar group_policy_name: Group policy name associated with the training job.
    :vartype group_policy_name: str
    :ivar checkpoint_policy: Describes the checkpointing policy for job.
    :vartype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
    :ivar max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :vartype max_job_execution_time: float
    :ivar suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
     hours).
    :vartype suspend_on_idle_time: float
    :ivar program: The entry script for your Job in the codeLocation. For interactive jobs, specify
     null.
    :vartype program: str
    :ivar program_args: Command line arguments to be passed to the program.
    :vartype program_args: str
    :ivar tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :vartype tensor_board_log_directory: str
    :ivar status: Known values are: "Initialized", "Running", "Suspended", "Completed", "Failed",
     and "Canceled".
    :vartype status: str or ~azure.mgmt.singularity.models.JobStatus
    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    :ivar environment_variables: User specified job environment variables.
    :vartype environment_variables: dict[str, str]
    """

    _validation = {
        "job_id": {"readonly": True},
        "placement_policies": {"required": True},
        "container_image": {"required": True},
        "status_details": {"readonly": True},
        "notebook_endpoint": {"readonly": True},
        "tensor_board_endpoint": {"readonly": True},
        "grafana_endpoint": {"readonly": True},
        "job_logs_endpoint": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "job_id": {"key": "jobId", "type": "str"},
        "placement_policies": {"key": "placementPolicies", "type": "[PlacementPolicy]"},
        "sla_tier": {"key": "slaTier", "type": "str"},
        "scheduling_priority": {"key": "schedulingPriority", "type": "str"},
        "data_location": {"key": "dataLocation", "type": "[StorageLocation]"},
        "code_location": {"key": "codeLocation", "type": "StorageLocation"},
        "output_location": {"key": "outputLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "networkResourceRef", "type": "NetworkReference"},
        "container_image": {"key": "containerImage", "type": "ContainerImageBase"},
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
        "checkpoint_policy": {"key": "checkpointPolicy", "type": "CheckpointPolicy"},
        "max_job_execution_time": {"key": "maxJobExecutionTime", "type": "float"},
        "suspend_on_idle_time": {"key": "suspendOnIdleTime", "type": "float"},
        "program": {"key": "program", "type": "str"},
        "program_args": {"key": "programArgs", "type": "str"},
        "tensor_board_log_directory": {"key": "tensorBoardLogDirectory", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status_details": {"key": "statusDetails", "type": "str"},
        "notebook_endpoint": {"key": "notebookEndpoint", "type": "str"},
        "tensor_board_endpoint": {"key": "tensorBoardEndpoint", "type": "str"},
        "grafana_endpoint": {"key": "grafanaEndpoint", "type": "str"},
        "job_logs_endpoint": {"key": "jobLogsEndpoint", "type": "str"},
        "environment_variables": {"key": "environmentVariables", "type": "{str}"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        placement_policies: List["_models.PlacementPolicy"],
        container_image: "_models.ContainerImageBase",
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        data_location: Optional[List["_models.StorageLocation"]] = None,
        code_location: Optional["_models.StorageLocation"] = None,
        output_location: Optional["_models.StorageLocation"] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["_models.CheckpointPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        suspend_on_idle_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "_models.JobStatus"]] = None,
        description: Optional[str] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword placement_policies: Collection of placement policies to use for the training job.
         Required.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        :keyword data_location: Job input data location.
        :paramtype data_location: list[~azure.mgmt.singularity.models.StorageLocation]
        :keyword code_location: Describes the location of a storage source and how it will be accessed.
        :paramtype code_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword output_location: Describes the location of a storage source and how it will be
         accessed.
        :paramtype output_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword container_image: Describes the container image for the job resource. Required.
        :paramtype container_image: ~azure.mgmt.singularity.models.ContainerImageBase
        :keyword group_policy_name: Group policy name associated with the training job.
        :paramtype group_policy_name: str
        :keyword checkpoint_policy: Describes the checkpointing policy for job.
        :paramtype checkpoint_policy: ~azure.mgmt.singularity.models.CheckpointPolicy
        :keyword max_job_execution_time: Maximum execution time for a training job in the account (in
         hours).
        :paramtype max_job_execution_time: float
        :keyword suspend_on_idle_time: Minimum idle time before job gets automatically suspended (in
         hours).
        :paramtype suspend_on_idle_time: float
        :keyword program: The entry script for your Job in the codeLocation. For interactive jobs,
         specify null.
        :paramtype program: str
        :keyword program_args: Command line arguments to be passed to the program.
        :paramtype program_args: str
        :keyword tensor_board_log_directory: The directory which TensorBoard will be configured to use
         as the log directory.
        :paramtype tensor_board_log_directory: str
        :keyword status: Known values are: "Initialized", "Running", "Suspended", "Completed",
         "Failed", and "Canceled".
        :paramtype status: str or ~azure.mgmt.singularity.models.JobStatus
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword environment_variables: User specified job environment variables.
        :paramtype environment_variables: dict[str, str]
        """
        super().__init__(
            provisioning_state=provisioning_state,
            placement_policies=placement_policies,
            sla_tier=sla_tier,
            scheduling_priority=scheduling_priority,
            data_location=data_location,
            code_location=code_location,
            output_location=output_location,
            network_resource_ref=network_resource_ref,
            container_image=container_image,
            group_policy_name=group_policy_name,
            checkpoint_policy=checkpoint_policy,
            max_job_execution_time=max_job_execution_time,
            suspend_on_idle_time=suspend_on_idle_time,
            program=program,
            program_args=program_args,
            tensor_board_log_directory=tensor_board_log_directory,
            status=status,
            description=description,
            environment_variables=environment_variables,
            **kwargs
        )


class JobResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity job resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "description": {"key": "properties.description", "type": "str"},
        "scheduling_priority": {"key": "properties.schedulingPriority", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.description = description
        self.scheduling_priority = scheduling_priority


class JobResourcePatchDescriptionProperties(JobPatchProperties):
    """JobResourcePatchDescriptionProperties.

    :ivar description: User-friendly description of the job.
    :vartype description: str
    :ivar scheduling_priority: Known values are: "Low", "Medium", and "High".
    :vartype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "scheduling_priority": {"key": "schedulingPriority", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "_models.SchedulingPriority"]] = None,
        **kwargs
    ):
        """
        :keyword description: User-friendly description of the job.
        :paramtype description: str
        :keyword scheduling_priority: Known values are: "Low", "Medium", and "High".
        :paramtype scheduling_priority: str or ~azure.mgmt.singularity.models.SchedulingPriority
        """
        super().__init__(description=description, scheduling_priority=scheduling_priority, **kwargs)


class JobSasTokenDescription(_serialization.Model):
    """Describes a Shared Access Signature (SAS) Token for Singularity Jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_time: The SAS token is valid only after the start time (UTC).
    :vartype start_time: ~datetime.datetime
    :ivar expiration_time: The time (UTC) after which the SAS token becomes invalid.
    :vartype expiration_time: ~datetime.datetime
    :ivar protocol: Known values are: "Https", "Tcp", "WebSocket", and "Ssh".
    :vartype protocol: str or ~azure.mgmt.singularity.models.ProtocolType
    :ivar version: The algorithm and API version the SAS token was generated with.
    :vartype version: str
    :ivar token: The SAS token generated by the service.
    :vartype token: str
    :ivar group_policy_name: The name of the group policy.
    :vartype group_policy_name: str
    """

    _validation = {
        "version": {"readonly": True},
        "token": {"readonly": True},
    }

    _attribute_map = {
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "expiration_time": {"key": "expirationTime", "type": "iso-8601"},
        "protocol": {"key": "protocol", "type": "str"},
        "version": {"key": "version", "type": "str"},
        "token": {"key": "token", "type": "str"},
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.datetime] = None,
        expiration_time: Optional[datetime.datetime] = None,
        protocol: Optional[Union[str, "_models.ProtocolType"]] = None,
        group_policy_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword start_time: The SAS token is valid only after the start time (UTC).
        :paramtype start_time: ~datetime.datetime
        :keyword expiration_time: The time (UTC) after which the SAS token becomes invalid.
        :paramtype expiration_time: ~datetime.datetime
        :keyword protocol: Known values are: "Https", "Tcp", "WebSocket", and "Ssh".
        :paramtype protocol: str or ~azure.mgmt.singularity.models.ProtocolType
        :keyword group_policy_name: The name of the group policy.
        :paramtype group_policy_name: str
        """
        super().__init__(**kwargs)
        self.start_time = start_time
        self.expiration_time = expiration_time
        self.protocol = protocol
        self.version = None
        self.token = None
        self.group_policy_name = group_policy_name


class JobUserActionDescription(_serialization.Model):
    """Describes properties for the user action of Singularity jobs.

    :ivar group_policy_name: The name of the group policy.
    :vartype group_policy_name: str
    """

    _attribute_map = {
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
    }

    def __init__(self, *, group_policy_name: Optional[str] = None, **kwargs):
        """
        :keyword group_policy_name: The name of the group policy.
        :paramtype group_policy_name: str
        """
        super().__init__(**kwargs)
        self.group_policy_name = group_policy_name


class ModelLocation(_serialization.Model):
    """Describes properties of a model resource for a given geographic location.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Name of the geographic location. Required.
    :vartype location: str
    :ivar status: Known values are: "Creating", "Ready", "Deleting",
     "DeploymentCompletedWithError", "Failed", and "Updating".
    :vartype status: str or ~azure.mgmt.singularity.models.ModelStatus
    :ivar status_details: Gives additional information about the current status of the model in
     this location.
    :vartype status_details: str
    :ivar error_code: Error code of the model in this location.
    :vartype error_code: str
    :ivar scale_policy: Describes the scale policy of resource. This serves as the data parallel
     dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
     of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
     specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
     any instance count specified by the range ("min", "max").
    :vartype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
    :ivar endpoints: Endpoints of the model in this location.
    :vartype endpoints: list[~azure.mgmt.singularity.models.Endpoint]
    :ivar current_instance_count: Current instance count of the model in this location.
    :vartype current_instance_count: int
    """

    _validation = {
        "location": {"required": True},
        "status_details": {"readonly": True},
        "error_code": {"readonly": True},
        "endpoints": {"readonly": True},
        "current_instance_count": {"readonly": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_details": {"key": "statusDetails", "type": "str"},
        "error_code": {"key": "errorCode", "type": "str"},
        "scale_policy": {"key": "scalePolicy", "type": "ScalePolicyV2"},
        "endpoints": {"key": "endpoints", "type": "[Endpoint]"},
        "current_instance_count": {"key": "currentInstanceCount", "type": "int"},
    }

    def __init__(
        self,
        *,
        location: str,
        status: Optional[Union[str, "_models.ModelStatus"]] = None,
        scale_policy: Optional["_models.ScalePolicyV2"] = None,
        **kwargs
    ):
        """
        :keyword location: Name of the geographic location. Required.
        :paramtype location: str
        :keyword status: Known values are: "Creating", "Ready", "Deleting",
         "DeploymentCompletedWithError", "Failed", and "Updating".
        :paramtype status: str or ~azure.mgmt.singularity.models.ModelStatus
        :keyword scale_policy: Describes the scale policy of resource. This serves as the data parallel
         dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
         of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
         specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
         any instance count specified by the range ("min", "max").
        :paramtype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
        """
        super().__init__(**kwargs)
        self.location = location
        self.status = status
        self.status_details = None
        self.error_code = None
        self.scale_policy = scale_policy
        self.endpoints = None
        self.current_instance_count = None


class ModelPartition(_serialization.Model):
    """Describes a partition of a model. A model consists of one or more partitions (in the tensor and pipeline parallel dimensions). A partition is scoped and mapped onto a device.

    All required parameters must be populated in order to send to Azure.

    :ivar pipeline_partition_index: Index of pipeline partition. Required.
    :vartype pipeline_partition_index: int
    :ivar tensor_partition_index: Index of tensor partition. Required.
    :vartype tensor_partition_index: int
    :ivar package_path: Path in modelPackageLocation where package for this model partition is
     located.
    :vartype package_path: str
    :ivar partition_placement: Describes placement of a model partition on a device. Required.
    :vartype partition_placement: ~azure.mgmt.singularity.models.ModelPartitionPlacement
    """

    _validation = {
        "pipeline_partition_index": {"required": True},
        "tensor_partition_index": {"required": True},
        "partition_placement": {"required": True},
    }

    _attribute_map = {
        "pipeline_partition_index": {"key": "pipelinePartitionIndex", "type": "int"},
        "tensor_partition_index": {"key": "tensorPartitionIndex", "type": "int"},
        "package_path": {"key": "packagePath", "type": "str"},
        "partition_placement": {"key": "partitionPlacement", "type": "ModelPartitionPlacement"},
    }

    def __init__(
        self,
        *,
        pipeline_partition_index: int,
        tensor_partition_index: int,
        partition_placement: "_models.ModelPartitionPlacement",
        package_path: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword pipeline_partition_index: Index of pipeline partition. Required.
        :paramtype pipeline_partition_index: int
        :keyword tensor_partition_index: Index of tensor partition. Required.
        :paramtype tensor_partition_index: int
        :keyword package_path: Path in modelPackageLocation where package for this model partition is
         located.
        :paramtype package_path: str
        :keyword partition_placement: Describes placement of a model partition on a device. Required.
        :paramtype partition_placement: ~azure.mgmt.singularity.models.ModelPartitionPlacement
        """
        super().__init__(**kwargs)
        self.pipeline_partition_index = pipeline_partition_index
        self.tensor_partition_index = tensor_partition_index
        self.package_path = package_path
        self.partition_placement = partition_placement


class ModelPartitioningSetting(_serialization.Model):
    """Describes the partitioning settings of the model. Models can be partitioned for scalability (when a model is too large to fit on a single device) and/or throughput.

    :ivar pipeline_partition_count: Specifies the pipeline-parallelism dimension of the model.
    :vartype pipeline_partition_count: int
    :ivar tensor_partition_count: Specifies the model-parallelism dimension of the model.
    :vartype tensor_partition_count: int
    :ivar partitions: The list of information about model partitions.
    :vartype partitions: list[~azure.mgmt.singularity.models.ModelPartition]
    """

    _attribute_map = {
        "pipeline_partition_count": {"key": "pipelinePartitionCount", "type": "int"},
        "tensor_partition_count": {"key": "tensorPartitionCount", "type": "int"},
        "partitions": {"key": "partitions", "type": "[ModelPartition]"},
    }

    def __init__(
        self,
        *,
        pipeline_partition_count: Optional[int] = None,
        tensor_partition_count: Optional[int] = None,
        partitions: Optional[List["_models.ModelPartition"]] = None,
        **kwargs
    ):
        """
        :keyword pipeline_partition_count: Specifies the pipeline-parallelism dimension of the model.
        :paramtype pipeline_partition_count: int
        :keyword tensor_partition_count: Specifies the model-parallelism dimension of the model.
        :paramtype tensor_partition_count: int
        :keyword partitions: The list of information about model partitions.
        :paramtype partitions: list[~azure.mgmt.singularity.models.ModelPartition]
        """
        super().__init__(**kwargs)
        self.pipeline_partition_count = pipeline_partition_count
        self.tensor_partition_count = tensor_partition_count
        self.partitions = partitions


class ModelPartitionPlacement(_serialization.Model):
    """Describes placement of a model partition on a device.

    All required parameters must be populated in order to send to Azure.

    :ivar instance_type_setting_name_ref: Model partitions can target placement on the same or
     different instances of the InstanceType by referencing the same or different
     InstanceTypeSetting name. Required.
    :vartype instance_type_setting_name_ref: str
    :ivar device_id: Id of the device for placement of this model partition on the InstanceType
     referenced above.
    :vartype device_id: int
    """

    _validation = {
        "instance_type_setting_name_ref": {"required": True},
    }

    _attribute_map = {
        "instance_type_setting_name_ref": {"key": "instanceTypeSettingNameRef", "type": "str"},
        "device_id": {"key": "deviceId", "type": "int"},
    }

    def __init__(self, *, instance_type_setting_name_ref: str, device_id: Optional[int] = None, **kwargs):
        """
        :keyword instance_type_setting_name_ref: Model partitions can target placement on the same or
         different instances of the InstanceType by referencing the same or different
         InstanceTypeSetting name. Required.
        :paramtype instance_type_setting_name_ref: str
        :keyword device_id: Id of the device for placement of this model partition on the InstanceType
         referenced above.
        :paramtype device_id: int
        """
        super().__init__(**kwargs)
        self.instance_type_setting_name_ref = instance_type_setting_name_ref
        self.device_id = device_id


class ModelPatchProperties(_serialization.Model):
    """Describes all properties which can be updated for a Singularity Model resource.

    :ivar placement_policies: Collection of placement policies to use for placement of this model
     version.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar description: User-friendly description of the model.
    :vartype description: str
    """

    _attribute_map = {
        "placement_policies": {"key": "placementPolicies", "type": "[PlacementPolicy]"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        placement_policies: Optional[List["_models.PlacementPolicy"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword placement_policies: Collection of placement policies to use for placement of this
         model version.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword description: User-friendly description of the model.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.placement_policies = placement_policies
        self.description = description


class ModelProbeSetting(_serialization.Model):
    """Describes the model probe setting.

    :ivar liveness_probe_setting: Describes the settings of the probe.
    :vartype liveness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
    :ivar readiness_probe_setting: Describes the settings of the probe.
    :vartype readiness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
    """

    _attribute_map = {
        "liveness_probe_setting": {"key": "livenessProbeSetting", "type": "ProbeSetting"},
        "readiness_probe_setting": {"key": "readinessProbeSetting", "type": "ProbeSetting"},
    }

    def __init__(
        self,
        *,
        liveness_probe_setting: Optional["_models.ProbeSetting"] = None,
        readiness_probe_setting: Optional["_models.ProbeSetting"] = None,
        **kwargs
    ):
        """
        :keyword liveness_probe_setting: Describes the settings of the probe.
        :paramtype liveness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
        :keyword readiness_probe_setting: Describes the settings of the probe.
        :paramtype readiness_probe_setting: ~azure.mgmt.singularity.models.ProbeSetting
        """
        super().__init__(**kwargs)
        self.liveness_probe_setting = liveness_probe_setting
        self.readiness_probe_setting = readiness_probe_setting


class ModelResourceDescription(Resource):  # pylint: disable=too-many-instance-attributes
    """Describes a model resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar identity:
    :vartype identity: ~azure.mgmt.singularity.models.ResourceIdentity
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar group_policy_name: Group policy name associated with the model.
    :vartype group_policy_name: str
    :ivar inference_mode: Known values are: "Online" and "Batch".
    :vartype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar package_location: Describes the location of a storage source and how it will be accessed.
     Required.
    :vartype package_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar scale_policy: Describes the scale policy of resource. This serves as the data parallel
     dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
     of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
     specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
     any instance count specified by the range ("min", "max"). Required.
    :vartype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
    :ivar partitioning_setting: Describes the partitioning settings of the model. Models can be
     partitioned for scalability (when a model is too large to fit on a single device) and/or
     throughput.
    :vartype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
    :ivar instance_type_settings: The specification for the instance type for instantiating the
     model. For AOT compiled model this property specifies the settings for the instance types where
     the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
     JIT compiled model this property specifies the list of instance types on which the model
     partitions can be instantiated. Required.
    :vartype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
    :ivar locations: Collection of geographic locations where the model is deployed.
    :vartype locations: list[~azure.mgmt.singularity.models.ModelLocation]
    :ivar endpoints: Global endpoints of the model that allow accessing the model across geographic
     locations.
    :vartype endpoints: list[~azure.mgmt.singularity.models.Endpoint]
    :ivar compilation_policy: This type describes the Compilation Policy of the model for training
     / inferencing.
    :vartype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
    :ivar model_probe_setting: Describes the model probe setting.
    :vartype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "package_location": {"required": True},
        "scale_policy": {"required": True},
        "instance_type_settings": {"required": True},
        "endpoints": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "identity": {"key": "identity", "type": "ResourceIdentity"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "group_policy_name": {"key": "properties.groupPolicyName", "type": "str"},
        "inference_mode": {"key": "properties.inferenceMode", "type": "str"},
        "sla_tier": {"key": "properties.slaTier", "type": "str"},
        "package_location": {"key": "properties.packageLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "properties.networkResourceRef", "type": "NetworkReference"},
        "scale_policy": {"key": "properties.scalePolicy", "type": "ScalePolicyV2"},
        "partitioning_setting": {"key": "properties.partitioningSetting", "type": "ModelPartitioningSetting"},
        "instance_type_settings": {"key": "properties.instanceTypeSettings", "type": "[InstanceTypeSetting]"},
        "locations": {"key": "properties.locations", "type": "[ModelLocation]"},
        "endpoints": {"key": "properties.endpoints", "type": "[Endpoint]"},
        "compilation_policy": {"key": "properties.compilationPolicy", "type": "CompilationPolicyBase"},
        "model_probe_setting": {"key": "properties.modelProbeSetting", "type": "ModelProbeSetting"},
    }

    def __init__(
        self,
        *,
        package_location: "_models.StorageLocation",
        scale_policy: "_models.ScalePolicyV2",
        instance_type_settings: List["_models.InstanceTypeSetting"],
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        group_policy_name: Optional[str] = None,
        inference_mode: Optional[Union[str, "_models.InferenceMode"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        partitioning_setting: Optional["_models.ModelPartitioningSetting"] = None,
        locations: Optional[List["_models.ModelLocation"]] = None,
        compilation_policy: Optional["_models.CompilationPolicyBase"] = None,
        model_probe_setting: Optional["_models.ModelProbeSetting"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword identity:
        :paramtype identity: ~azure.mgmt.singularity.models.ResourceIdentity
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword group_policy_name: Group policy name associated with the model.
        :paramtype group_policy_name: str
        :keyword inference_mode: Known values are: "Online" and "Batch".
        :paramtype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword package_location: Describes the location of a storage source and how it will be
         accessed. Required.
        :paramtype package_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword scale_policy: Describes the scale policy of resource. This serves as the data parallel
         dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
         of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
         specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
         any instance count specified by the range ("min", "max"). Required.
        :paramtype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
        :keyword partitioning_setting: Describes the partitioning settings of the model. Models can be
         partitioned for scalability (when a model is too large to fit on a single device) and/or
         throughput.
        :paramtype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
        :keyword instance_type_settings: The specification for the instance type for instantiating the
         model. For AOT compiled model this property specifies the settings for the instance types where
         the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
         JIT compiled model this property specifies the list of instance types on which the model
         partitions can be instantiated. Required.
        :paramtype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
        :keyword locations: Collection of geographic locations where the model is deployed.
        :paramtype locations: list[~azure.mgmt.singularity.models.ModelLocation]
        :keyword compilation_policy: This type describes the Compilation Policy of the model for
         training / inferencing.
        :paramtype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
        :keyword model_probe_setting: Describes the model probe setting.
        :paramtype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.identity = identity
        self.provisioning_state = provisioning_state
        self.group_policy_name = group_policy_name
        self.inference_mode = inference_mode
        self.sla_tier = sla_tier
        self.package_location = package_location
        self.network_resource_ref = network_resource_ref
        self.scale_policy = scale_policy
        self.partitioning_setting = partitioning_setting
        self.instance_type_settings = instance_type_settings
        self.locations = locations
        self.endpoints = None
        self.compilation_policy = compilation_policy
        self.model_probe_setting = model_probe_setting


class ModelResourceDescriptionList(_serialization.Model):
    """A pageable list of model resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.ModelResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ModelResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ModelResourceProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Describes the properties of a model resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar group_policy_name: Group policy name associated with the model.
    :vartype group_policy_name: str
    :ivar inference_mode: Known values are: "Online" and "Batch".
    :vartype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar package_location: Describes the location of a storage source and how it will be accessed.
     Required.
    :vartype package_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar scale_policy: Describes the scale policy of resource. This serves as the data parallel
     dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
     of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
     specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
     any instance count specified by the range ("min", "max"). Required.
    :vartype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
    :ivar partitioning_setting: Describes the partitioning settings of the model. Models can be
     partitioned for scalability (when a model is too large to fit on a single device) and/or
     throughput.
    :vartype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
    :ivar instance_type_settings: The specification for the instance type for instantiating the
     model. For AOT compiled model this property specifies the settings for the instance types where
     the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
     JIT compiled model this property specifies the list of instance types on which the model
     partitions can be instantiated. Required.
    :vartype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
    :ivar locations: Collection of geographic locations where the model is deployed.
    :vartype locations: list[~azure.mgmt.singularity.models.ModelLocation]
    :ivar endpoints: Global endpoints of the model that allow accessing the model across geographic
     locations.
    :vartype endpoints: list[~azure.mgmt.singularity.models.Endpoint]
    :ivar compilation_policy: This type describes the Compilation Policy of the model for training
     / inferencing.
    :vartype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
    :ivar model_probe_setting: Describes the model probe setting.
    :vartype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
    """

    _validation = {
        "package_location": {"required": True},
        "scale_policy": {"required": True},
        "instance_type_settings": {"required": True},
        "endpoints": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
        "inference_mode": {"key": "inferenceMode", "type": "str"},
        "sla_tier": {"key": "slaTier", "type": "str"},
        "package_location": {"key": "packageLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "networkResourceRef", "type": "NetworkReference"},
        "scale_policy": {"key": "scalePolicy", "type": "ScalePolicyV2"},
        "partitioning_setting": {"key": "partitioningSetting", "type": "ModelPartitioningSetting"},
        "instance_type_settings": {"key": "instanceTypeSettings", "type": "[InstanceTypeSetting]"},
        "locations": {"key": "locations", "type": "[ModelLocation]"},
        "endpoints": {"key": "endpoints", "type": "[Endpoint]"},
        "compilation_policy": {"key": "compilationPolicy", "type": "CompilationPolicyBase"},
        "model_probe_setting": {"key": "modelProbeSetting", "type": "ModelProbeSetting"},
    }

    def __init__(
        self,
        *,
        package_location: "_models.StorageLocation",
        scale_policy: "_models.ScalePolicyV2",
        instance_type_settings: List["_models.InstanceTypeSetting"],
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        group_policy_name: Optional[str] = None,
        inference_mode: Optional[Union[str, "_models.InferenceMode"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        partitioning_setting: Optional["_models.ModelPartitioningSetting"] = None,
        locations: Optional[List["_models.ModelLocation"]] = None,
        compilation_policy: Optional["_models.CompilationPolicyBase"] = None,
        model_probe_setting: Optional["_models.ModelProbeSetting"] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword group_policy_name: Group policy name associated with the model.
        :paramtype group_policy_name: str
        :keyword inference_mode: Known values are: "Online" and "Batch".
        :paramtype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword package_location: Describes the location of a storage source and how it will be
         accessed. Required.
        :paramtype package_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword scale_policy: Describes the scale policy of resource. This serves as the data parallel
         dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
         of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
         specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
         any instance count specified by the range ("min", "max"). Required.
        :paramtype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
        :keyword partitioning_setting: Describes the partitioning settings of the model. Models can be
         partitioned for scalability (when a model is too large to fit on a single device) and/or
         throughput.
        :paramtype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
        :keyword instance_type_settings: The specification for the instance type for instantiating the
         model. For AOT compiled model this property specifies the settings for the instance types where
         the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
         JIT compiled model this property specifies the list of instance types on which the model
         partitions can be instantiated. Required.
        :paramtype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
        :keyword locations: Collection of geographic locations where the model is deployed.
        :paramtype locations: list[~azure.mgmt.singularity.models.ModelLocation]
        :keyword compilation_policy: This type describes the Compilation Policy of the model for
         training / inferencing.
        :paramtype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
        :keyword model_probe_setting: Describes the model probe setting.
        :paramtype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.group_policy_name = group_policy_name
        self.inference_mode = inference_mode
        self.sla_tier = sla_tier
        self.package_location = package_location
        self.network_resource_ref = network_resource_ref
        self.scale_policy = scale_policy
        self.partitioning_setting = partitioning_setting
        self.instance_type_settings = instance_type_settings
        self.locations = locations
        self.endpoints = None
        self.compilation_policy = compilation_policy
        self.model_probe_setting = model_probe_setting


class ModelResourceDescriptionProperties(ModelResourceProperties):  # pylint: disable=too-many-instance-attributes
    """ModelResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar group_policy_name: Group policy name associated with the model.
    :vartype group_policy_name: str
    :ivar inference_mode: Known values are: "Online" and "Batch".
    :vartype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
    :ivar sla_tier: Known values are: "Premium", "Standard", and "Basic".
    :vartype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
    :ivar package_location: Describes the location of a storage source and how it will be accessed.
     Required.
    :vartype package_location: ~azure.mgmt.singularity.models.StorageLocation
    :ivar network_resource_ref: Describes a network resource reference.
    :vartype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
    :ivar scale_policy: Describes the scale policy of resource. This serves as the data parallel
     dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
     of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
     specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
     any instance count specified by the range ("min", "max"). Required.
    :vartype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
    :ivar partitioning_setting: Describes the partitioning settings of the model. Models can be
     partitioned for scalability (when a model is too large to fit on a single device) and/or
     throughput.
    :vartype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
    :ivar instance_type_settings: The specification for the instance type for instantiating the
     model. For AOT compiled model this property specifies the settings for the instance types where
     the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
     JIT compiled model this property specifies the list of instance types on which the model
     partitions can be instantiated. Required.
    :vartype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
    :ivar locations: Collection of geographic locations where the model is deployed.
    :vartype locations: list[~azure.mgmt.singularity.models.ModelLocation]
    :ivar endpoints: Global endpoints of the model that allow accessing the model across geographic
     locations.
    :vartype endpoints: list[~azure.mgmt.singularity.models.Endpoint]
    :ivar compilation_policy: This type describes the Compilation Policy of the model for training
     / inferencing.
    :vartype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
    :ivar model_probe_setting: Describes the model probe setting.
    :vartype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
    """

    _validation = {
        "package_location": {"required": True},
        "scale_policy": {"required": True},
        "instance_type_settings": {"required": True},
        "endpoints": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "group_policy_name": {"key": "groupPolicyName", "type": "str"},
        "inference_mode": {"key": "inferenceMode", "type": "str"},
        "sla_tier": {"key": "slaTier", "type": "str"},
        "package_location": {"key": "packageLocation", "type": "StorageLocation"},
        "network_resource_ref": {"key": "networkResourceRef", "type": "NetworkReference"},
        "scale_policy": {"key": "scalePolicy", "type": "ScalePolicyV2"},
        "partitioning_setting": {"key": "partitioningSetting", "type": "ModelPartitioningSetting"},
        "instance_type_settings": {"key": "instanceTypeSettings", "type": "[InstanceTypeSetting]"},
        "locations": {"key": "locations", "type": "[ModelLocation]"},
        "endpoints": {"key": "endpoints", "type": "[Endpoint]"},
        "compilation_policy": {"key": "compilationPolicy", "type": "CompilationPolicyBase"},
        "model_probe_setting": {"key": "modelProbeSetting", "type": "ModelProbeSetting"},
    }

    def __init__(
        self,
        *,
        package_location: "_models.StorageLocation",
        scale_policy: "_models.ScalePolicyV2",
        instance_type_settings: List["_models.InstanceTypeSetting"],
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        group_policy_name: Optional[str] = None,
        inference_mode: Optional[Union[str, "_models.InferenceMode"]] = None,
        sla_tier: Optional[Union[str, "_models.SlaTier"]] = None,
        network_resource_ref: Optional["_models.NetworkReference"] = None,
        partitioning_setting: Optional["_models.ModelPartitioningSetting"] = None,
        locations: Optional[List["_models.ModelLocation"]] = None,
        compilation_policy: Optional["_models.CompilationPolicyBase"] = None,
        model_probe_setting: Optional["_models.ModelProbeSetting"] = None,
        **kwargs
    ):
        """
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword group_policy_name: Group policy name associated with the model.
        :paramtype group_policy_name: str
        :keyword inference_mode: Known values are: "Online" and "Batch".
        :paramtype inference_mode: str or ~azure.mgmt.singularity.models.InferenceMode
        :keyword sla_tier: Known values are: "Premium", "Standard", and "Basic".
        :paramtype sla_tier: str or ~azure.mgmt.singularity.models.SlaTier
        :keyword package_location: Describes the location of a storage source and how it will be
         accessed. Required.
        :paramtype package_location: ~azure.mgmt.singularity.models.StorageLocation
        :keyword network_resource_ref: Describes a network resource reference.
        :paramtype network_resource_ref: ~azure.mgmt.singularity.models.NetworkReference
        :keyword scale_policy: Describes the scale policy of resource. This serves as the data parallel
         dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes
         of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s)
         specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to
         any instance count specified by the range ("min", "max"). Required.
        :paramtype scale_policy: ~azure.mgmt.singularity.models.ScalePolicyV2
        :keyword partitioning_setting: Describes the partitioning settings of the model. Models can be
         partitioned for scalability (when a model is too large to fit on a single device) and/or
         throughput.
        :paramtype partitioning_setting: ~azure.mgmt.singularity.models.ModelPartitioningSetting
        :keyword instance_type_settings: The specification for the instance type for instantiating the
         model. For AOT compiled model this property specifies the settings for the instance types where
         the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For
         JIT compiled model this property specifies the list of instance types on which the model
         partitions can be instantiated. Required.
        :paramtype instance_type_settings: list[~azure.mgmt.singularity.models.InstanceTypeSetting]
        :keyword locations: Collection of geographic locations where the model is deployed.
        :paramtype locations: list[~azure.mgmt.singularity.models.ModelLocation]
        :keyword compilation_policy: This type describes the Compilation Policy of the model for
         training / inferencing.
        :paramtype compilation_policy: ~azure.mgmt.singularity.models.CompilationPolicyBase
        :keyword model_probe_setting: Describes the model probe setting.
        :paramtype model_probe_setting: ~azure.mgmt.singularity.models.ModelProbeSetting
        """
        super().__init__(
            provisioning_state=provisioning_state,
            group_policy_name=group_policy_name,
            inference_mode=inference_mode,
            sla_tier=sla_tier,
            package_location=package_location,
            network_resource_ref=network_resource_ref,
            scale_policy=scale_policy,
            partitioning_setting=partitioning_setting,
            instance_type_settings=instance_type_settings,
            locations=locations,
            compilation_policy=compilation_policy,
            model_probe_setting=model_probe_setting,
            **kwargs
        )


class ModelResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity Model resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar placement_policies: Collection of placement policies to use for placement of this model
     version.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar description: User-friendly description of the model.
    :vartype description: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "placement_policies": {"key": "properties.placementPolicies", "type": "[PlacementPolicy]"},
        "description": {"key": "properties.description", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        placement_policies: Optional[List["_models.PlacementPolicy"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword placement_policies: Collection of placement policies to use for placement of this
         model version.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword description: User-friendly description of the model.
        :paramtype description: str
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.placement_policies = placement_policies
        self.description = description


class ModelResourcePatchDescriptionProperties(ModelPatchProperties):
    """ModelResourcePatchDescriptionProperties.

    :ivar placement_policies: Collection of placement policies to use for placement of this model
     version.
    :vartype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
    :ivar description: User-friendly description of the model.
    :vartype description: str
    """

    _attribute_map = {
        "placement_policies": {"key": "placementPolicies", "type": "[PlacementPolicy]"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        placement_policies: Optional[List["_models.PlacementPolicy"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword placement_policies: Collection of placement policies to use for placement of this
         model version.
        :paramtype placement_policies: list[~azure.mgmt.singularity.models.PlacementPolicy]
        :keyword description: User-friendly description of the model.
        :paramtype description: str
        """
        super().__init__(placement_policies=placement_policies, description=description, **kwargs)


class NetworkReference(_serialization.Model):
    """Describes a network resource reference.

    :ivar name: Name of the network resource to reference.
    :vartype name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, **kwargs):
        """
        :keyword name: Name of the network resource to reference.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class NetworkResourceDescription(Resource):
    """Describes a network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar properties: Describes the properties of a network resource. Required.
    :vartype properties: ~azure.mgmt.singularity.models.NetworkPropertiesBase
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "properties": {"key": "properties", "type": "NetworkPropertiesBase"},
    }

    def __init__(
        self,
        *,
        properties: "_models.NetworkPropertiesBase",
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword properties: Describes the properties of a network resource. Required.
        :paramtype properties: ~azure.mgmt.singularity.models.NetworkPropertiesBase
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.properties = properties


class NetworkResourceDescriptionList(_serialization.Model):
    """A pageable list of network resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.NetworkResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[NetworkResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class NetworkSettings(_serialization.Model):
    """Describes the network settings for the account.

    :ivar subnet_id: The resource id of the delegated subnet.
    :vartype subnet_id: str
    """

    _attribute_map = {
        "subnet_id": {"key": "subnetId", "type": "str"},
    }

    def __init__(self, *, subnet_id: Optional[str] = None, **kwargs):
        """
        :keyword subnet_id: The resource id of the delegated subnet.
        :paramtype subnet_id: str
        """
        super().__init__(**kwargs)
        self.subnet_id = subnet_id


class NfsStorageCacheProperties(StorageCachePropertiesBase):
    """Describes the properties of a storage cache resource backed by NFS.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Blob", "NFS", and "ADLS".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageCacheKind
    :ivar description: Description of the storage cache resource.
    :vartype description: str
    :ivar region: Optional region for managed storage resources (if any).
    :vartype region: str
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
     "Suspending", "Resuming", "Canceling", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
    :ivar status: Known values are: "Unknown", "Creating", "Created", "Deleting", and "Suspended".
    :vartype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
    :ivar default_mount_path: Default mount path that will be used within a job or model if none is
     specified.
    :vartype default_mount_path: str
    :ivar capacity_in_gi_b: Optional storage capacity to allocate.
    :vartype capacity_in_gi_b: int
    """

    _validation = {
        "kind": {"required": True},
        "default_mount_path": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "default_mount_path": {"key": "defaultMountPath", "type": "str"},
        "capacity_in_gi_b": {"key": "capacityInGiB", "type": "int"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        region: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        status: Optional[Union[str, "_models.StorageCacheStatus"]] = None,
        capacity_in_gi_b: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the storage cache resource.
        :paramtype description: str
        :keyword region: Optional region for managed storage resources (if any).
        :paramtype region: str
        :keyword provisioning_state: Known values are: "Succeeded", "Failed", "Creating", "Updating",
         "Suspending", "Resuming", "Canceling", and "Deleting".
        :paramtype provisioning_state: str or ~azure.mgmt.singularity.models.ProvisioningState
        :keyword status: Known values are: "Unknown", "Creating", "Created", "Deleting", and
         "Suspended".
        :paramtype status: str or ~azure.mgmt.singularity.models.StorageCacheStatus
        :keyword capacity_in_gi_b: Optional storage capacity to allocate.
        :paramtype capacity_in_gi_b: int
        """
        super().__init__(
            description=description, region=region, provisioning_state=provisioning_state, status=status, **kwargs
        )
        self.kind = "NFS"  # type: str
        self.capacity_in_gi_b = capacity_in_gi_b


class OperationListResult(_serialization.Model):
    """Describes the result of the request to list Singularity operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the Singularity resource provider.
    :vartype value: list[~azure.mgmt.singularity.models.OperationResult]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[OperationResult]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationResult(_serialization.Model):
    """List of operations available at the listed Azure resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation.
    :vartype name: str
    :ivar display: An operation available at the listed Azure resource provider.
    :vartype display: ~azure.mgmt.singularity.models.AvailableOperationDisplay
    :ivar origin: Origin result.
    :vartype origin: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _validation = {
        "name": {"readonly": True},
        "origin": {"readonly": True},
        "is_data_action": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "AvailableOperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.AvailableOperationDisplay"] = None, **kwargs):
        """
        :keyword display: An operation available at the listed Azure resource provider.
        :paramtype display: ~azure.mgmt.singularity.models.AvailableOperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.display = display
        self.origin = None
        self.is_data_action = None
        self.next_link = None


class PlacementPolicy(_serialization.Model):
    """Describes the placement policy for a Job or a Model.

    All required parameters must be populated in order to send to Azure.

    :ivar instance_types: The list of settings for instance types. Required.
    :vartype instance_types: list[~azure.mgmt.singularity.models.InstanceTypeSettings]
    :ivar location: An optional location for instance type placement. If specified, this must be
     one of the account resource locations.
    :vartype location: str
    """

    _validation = {
        "instance_types": {"required": True},
    }

    _attribute_map = {
        "instance_types": {"key": "instanceTypes", "type": "[InstanceTypeSettings]"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(
        self, *, instance_types: List["_models.InstanceTypeSettings"], location: Optional[str] = None, **kwargs
    ):
        """
        :keyword instance_types: The list of settings for instance types. Required.
        :paramtype instance_types: list[~azure.mgmt.singularity.models.InstanceTypeSettings]
        :keyword location: An optional location for instance type placement. If specified, this must be
         one of the account resource locations.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.instance_types = instance_types
        self.location = location


class PlatformContainerImage(ContainerImageBase):
    """Describes a platform image.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "Platform" and "Custom".
    :vartype kind: str or ~azure.mgmt.singularity.models.ContainerImageKind
    :ivar name: Name of the platform image. This supports fully qualified image names and image
     friendly names. Required.
    :vartype name: str
    """

    _validation = {
        "kind": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs):
        """
        :keyword name: Name of the platform image. This supports fully qualified image names and image
         friendly names. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.kind = "Platform"  # type: str
        self.name = name


class ResourceIdentity(_serialization.Model):
    """ResourceIdentity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of identity used for the resource. The type 'None' will remove any
     identities from the resource. Required.
    :vartype type: str
    :ivar tenant_id: The tenant id associated with the resource. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar principal_id: The principal id of the resource identity. This property will only be
     provided for a system assigned identity.
    :vartype principal_id: str
    :ivar user_assigned_identities: The user assigned managed identities assigned to this resource
     (if any).
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.singularity.models.ResourceUserAssignedIdentity]
    """

    _validation = {
        "type": {"required": True},
        "tenant_id": {"readonly": True},
        "principal_id": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "principal_id": {"key": "principalId", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{ResourceUserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: str,
        user_assigned_identities: Optional[Dict[str, "_models.ResourceUserAssignedIdentity"]] = None,
        **kwargs
    ):
        """
        :keyword type: The type of identity used for the resource. The type 'None' will remove any
         identities from the resource. Required.
        :paramtype type: str
        :keyword user_assigned_identities: The user assigned managed identities assigned to this
         resource (if any).
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.singularity.models.ResourceUserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.type = type
        self.tenant_id = None
        self.principal_id = None
        self.user_assigned_identities = user_assigned_identities


class ResourceSystemData(_serialization.Model):
    """ResourceSystemData.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: A string identifier for the identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource: user, application,
     managedIdentity, key.
    :vartype created_by_type: str
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: str
    :ivar last_modified_by: A string identifier for the identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource: user,
     application, managedIdentity, key.
    :vartype last_modified_by_type: str
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: str
    """

    _validation = {
        "created_by": {"readonly": True},
        "created_by_type": {"readonly": True},
        "created_at": {"readonly": True},
        "last_modified_by": {"readonly": True},
        "last_modified_by_type": {"readonly": True},
        "last_modified_at": {"readonly": True},
    }

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "str"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.created_by = None
        self.created_by_type = None
        self.created_at = None
        self.last_modified_by = None
        self.last_modified_by_type = None
        self.last_modified_at = None


class ResourceUserAssignedIdentity(_serialization.Model):
    """ResourceUserAssignedIdentity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class ScalePolicy(_serialization.Model):
    """Describes the scale policy for a Job or a Model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar min_instance_type_count: The minimum instance type count to provision.
    :vartype min_instance_type_count: int
    :ivar max_instance_type_count: Maximum instance type count (the limit) up to which to
     provision.
    :vartype max_instance_type_count: int
    :ivar current_instance_type_count: The current instance type count.
    :vartype current_instance_type_count: int
    :ivar instance_type_count_set: Set of valid instance type counts that the job can be autoscaled
     to e.g., [2,4,8,16].
    :vartype instance_type_count_set: list[int]
    :ivar auto_scale_interval_in_seconds_hint: A hint on the interval to use for auto scaling.
    :vartype auto_scale_interval_in_seconds_hint: int
    """

    _validation = {
        "current_instance_type_count": {"readonly": True},
    }

    _attribute_map = {
        "min_instance_type_count": {"key": "minInstanceTypeCount", "type": "int"},
        "max_instance_type_count": {"key": "maxInstanceTypeCount", "type": "int"},
        "current_instance_type_count": {"key": "currentInstanceTypeCount", "type": "int"},
        "instance_type_count_set": {"key": "instanceTypeCountSet", "type": "[int]"},
        "auto_scale_interval_in_seconds_hint": {"key": "autoScaleIntervalInSecondsHint", "type": "int"},
    }

    def __init__(
        self,
        *,
        min_instance_type_count: Optional[int] = None,
        max_instance_type_count: Optional[int] = None,
        instance_type_count_set: Optional[List[int]] = None,
        auto_scale_interval_in_seconds_hint: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword min_instance_type_count: The minimum instance type count to provision.
        :paramtype min_instance_type_count: int
        :keyword max_instance_type_count: Maximum instance type count (the limit) up to which to
         provision.
        :paramtype max_instance_type_count: int
        :keyword instance_type_count_set: Set of valid instance type counts that the job can be
         autoscaled to e.g., [2,4,8,16].
        :paramtype instance_type_count_set: list[int]
        :keyword auto_scale_interval_in_seconds_hint: A hint on the interval to use for auto scaling.
        :paramtype auto_scale_interval_in_seconds_hint: int
        """
        super().__init__(**kwargs)
        self.min_instance_type_count = min_instance_type_count
        self.max_instance_type_count = max_instance_type_count
        self.current_instance_type_count = None
        self.instance_type_count_set = instance_type_count_set
        self.auto_scale_interval_in_seconds_hint = auto_scale_interval_in_seconds_hint


class ScalePolicyV2(_serialization.Model):
    """Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max").

    :ivar min: The minimum instance count of the resource.
    :vartype min: int
    :ivar max: Maximum instance count of the resource.
    :vartype max: int
    :ivar scale_set: Set of valid instance counts that the resource can be scaled to e.g.,
     [2,4,8,16]. This is required for discrete scaling.
    :vartype scale_set: list[int]
    """

    _attribute_map = {
        "min": {"key": "min", "type": "int"},
        "max": {"key": "max", "type": "int"},
        "scale_set": {"key": "scaleSet", "type": "[int]"},
    }

    def __init__(
        self,
        *,
        min: Optional[int] = None,  # pylint: disable=redefined-builtin
        max: Optional[int] = None,  # pylint: disable=redefined-builtin
        scale_set: Optional[List[int]] = None,
        **kwargs
    ):
        """
        :keyword min: The minimum instance count of the resource.
        :paramtype min: int
        :keyword max: Maximum instance count of the resource.
        :paramtype max: int
        :keyword scale_set: Set of valid instance counts that the resource can be scaled to e.g.,
         [2,4,8,16]. This is required for discrete scaling.
        :paramtype scale_set: list[int]
        """
        super().__init__(**kwargs)
        self.min = min
        self.max = max
        self.scale_set = scale_set


class StorageCacheResourceDescription(Resource):
    """Describes a storage cache resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar properties: Describes the properties of a storage cache resource. Required.
    :vartype properties: ~azure.mgmt.singularity.models.StorageCachePropertiesBase
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "properties": {"key": "properties", "type": "StorageCachePropertiesBase"},
    }

    def __init__(
        self,
        *,
        properties: "_models.StorageCachePropertiesBase",
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        :keyword properties: Describes the properties of a storage cache resource. Required.
        :paramtype properties: ~azure.mgmt.singularity.models.StorageCachePropertiesBase
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.properties = properties


class StorageCacheResourceDescriptionList(_serialization.Model):
    """A pageable list of storage cache resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~azure.mgmt.singularity.models.StorageCacheResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[StorageCacheResourceDescription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class StorageCacheResourceDiagnosticsInfo(Resource):
    """Storage cache resource diagnostics information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, ``Microsoft.Compute/virtualMachines`` or
     ``Microsoft.Storage/storageAccounts``.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data:
    :vartype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
    :ivar usage_in_mi_b: The used storage capacity.
    :vartype usage_in_mi_b: int
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "usage_in_mi_b": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "ResourceSystemData"},
        "usage_in_mi_b": {"key": "usageInMiB", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["_models.ResourceSystemData"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword system_data:
        :paramtype system_data: ~azure.mgmt.singularity.models.ResourceSystemData
        """
        super().__init__(tags=tags, system_data=system_data, **kwargs)
        self.usage_in_mi_b = None


class StorageLocation(_serialization.Model):
    """Describes the location of a storage source and how it will be accessed.

    :ivar source: This type describes Singularity storage for a job or service.
    :vartype source: ~azure.mgmt.singularity.models.StorageSourceBase
    :ivar storage_cache_container_name: Name of the managed storage resource to mount.
    :vartype storage_cache_container_name: str
    :ivar mount: Describes the target mountpoint of a storage source.
    :vartype mount: ~azure.mgmt.singularity.models.StorageMount
    """

    _attribute_map = {
        "source": {"key": "source", "type": "StorageSourceBase"},
        "storage_cache_container_name": {"key": "storageCacheContainerName", "type": "str"},
        "mount": {"key": "mount", "type": "StorageMount"},
    }

    def __init__(
        self,
        *,
        source: Optional["_models.StorageSourceBase"] = None,
        storage_cache_container_name: Optional[str] = None,
        mount: Optional["_models.StorageMount"] = None,
        **kwargs
    ):
        """
        :keyword source: This type describes Singularity storage for a job or service.
        :paramtype source: ~azure.mgmt.singularity.models.StorageSourceBase
        :keyword storage_cache_container_name: Name of the managed storage resource to mount.
        :paramtype storage_cache_container_name: str
        :keyword mount: Describes the target mountpoint of a storage source.
        :paramtype mount: ~azure.mgmt.singularity.models.StorageMount
        """
        super().__init__(**kwargs)
        self.source = source
        self.storage_cache_container_name = storage_cache_container_name
        self.mount = mount


class StorageMount(_serialization.Model):
    """Describes the target mountpoint of a storage source.

    :ivar path: The target mountpoint path.
    :vartype path: str
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
    }

    def __init__(self, *, path: Optional[str] = None, **kwargs):
        """
        :keyword path: The target mountpoint path.
        :paramtype path: str
        """
        super().__init__(**kwargs)
        self.path = path


class StorageSourceBase(_serialization.Model):
    """This type describes Singularity storage for a job or service.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    StorageSourceAzureAISupercomputerStorage, StorageSourceAzureBlob

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "AzureAISupercomputerStorage" and "AzureBlobStorage".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageSourceKind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {
            "AzureAISupercomputerStorage": "StorageSourceAzureAISupercomputerStorage",
            "AzureBlobStorage": "StorageSourceAzureBlob",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class StorageSourceAzureAISupercomputerStorage(StorageSourceBase):
    """This type describes Singularity storage for a job or service.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "AzureAISupercomputerStorage" and "AzureBlobStorage".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageSourceKind
    :ivar storage_container_name: Path to the Singularity storage. Required.
    :vartype storage_container_name: str
    """

    _validation = {
        "kind": {"required": True},
        "storage_container_name": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "storage_container_name": {"key": "storageContainerName", "type": "str"},
    }

    def __init__(self, *, storage_container_name: str, **kwargs):
        """
        :keyword storage_container_name: Path to the Singularity storage. Required.
        :paramtype storage_container_name: str
        """
        super().__init__(**kwargs)
        self.kind = "AzureAISupercomputerStorage"  # type: str
        self.storage_container_name = storage_container_name


class StorageSourceAzureBlob(StorageSourceBase):
    """This type describes Singularity storage for a job or service.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Known values are: "AzureAISupercomputerStorage" and "AzureBlobStorage".
    :vartype kind: str or ~azure.mgmt.singularity.models.StorageSourceKind
    :ivar blob_endpoint: For SasToken AuthenticationType: Container Endpoint with the associated
     SAS token. For SystemAssignedIdentity and UserAssignedIdentity AuthenticationType: Container
     Endpoint only. Required.
    :vartype blob_endpoint: str
    :ivar account_resource_id: Storage account ResourceId for the Azure blob. Required when
     AuthenticationType is SystemAssignedIdentity.
    :vartype account_resource_id: str
    :ivar user_assigned_identity: User assigned managed identity. Required when AuthenticationType
     is UserAssignedIdentity.
    :vartype user_assigned_identity: str
    :ivar authentication_type: Known values are: "None", "SasToken", "StorageAccountKey",
     "SystemAssignedIdentity", and "UserAssignedIdentity".
    :vartype authentication_type: str or ~azure.mgmt.singularity.models.StorageAuthenticationType
    """

    _validation = {
        "kind": {"required": True},
        "blob_endpoint": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "blob_endpoint": {"key": "blobEndpoint", "type": "str"},
        "account_resource_id": {"key": "accountResourceId", "type": "str"},
        "user_assigned_identity": {"key": "userAssignedIdentity", "type": "str"},
        "authentication_type": {"key": "authenticationType", "type": "str"},
    }

    def __init__(
        self,
        *,
        blob_endpoint: str,
        account_resource_id: Optional[str] = None,
        user_assigned_identity: Optional[str] = None,
        authentication_type: Optional[Union[str, "_models.StorageAuthenticationType"]] = None,
        **kwargs
    ):
        """
        :keyword blob_endpoint: For SasToken AuthenticationType: Container Endpoint with the associated
         SAS token. For SystemAssignedIdentity and UserAssignedIdentity AuthenticationType: Container
         Endpoint only. Required.
        :paramtype blob_endpoint: str
        :keyword account_resource_id: Storage account ResourceId for the Azure blob. Required when
         AuthenticationType is SystemAssignedIdentity.
        :paramtype account_resource_id: str
        :keyword user_assigned_identity: User assigned managed identity. Required when
         AuthenticationType is UserAssignedIdentity.
        :paramtype user_assigned_identity: str
        :keyword authentication_type: Known values are: "None", "SasToken", "StorageAccountKey",
         "SystemAssignedIdentity", and "UserAssignedIdentity".
        :paramtype authentication_type: str or ~azure.mgmt.singularity.models.StorageAuthenticationType
        """
        super().__init__(**kwargs)
        self.kind = "AzureBlobStorage"  # type: str
        self.blob_endpoint = blob_endpoint
        self.account_resource_id = account_resource_id
        self.user_assigned_identity = user_assigned_identity
        self.authentication_type = authentication_type
