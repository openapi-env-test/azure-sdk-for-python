# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class ApplicationGroupType(str, Enum):

    remote_app = "RemoteApp"
    desktop = "Desktop"


class Operation(str, Enum):

    start = "Start"  #: Start the migration.
    revoke = "Revoke"  #: Revoke the migration.
    complete = "Complete"  #: Complete the migration.
    hide = "Hide"  #: Hide the hostpool.
    unhide = "Unhide"  #: Unhide the hostpool.


class HostPoolType(str, Enum):

    personal = "Personal"  #: Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
    pooled = "Pooled"  #: Users get a new (random) SessionHost every time it connects to the HostPool.
    byo_desktop = "BYODesktop"  #: Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.


class PersonalDesktopAssignmentType(str, Enum):

    automatic = "Automatic"
    direct = "Direct"


class LoadBalancerType(str, Enum):

    breadth_first = "BreadthFirst"
    depth_first = "DepthFirst"
    persistent = "Persistent"


class RegistrationTokenOperation(str, Enum):

    delete = "Delete"
    none = "None"
    update = "Update"


class SSOSecretType(str, Enum):

    shared_key = "SharedKey"
    certificate = "Certificate"
    shared_key_in_key_vault = "SharedKeyInKeyVault"
    certificate_in_key_vault = "CertificateInKeyVault"


class PreferredAppGroupType(str, Enum):

    none = "None"
    desktop = "Desktop"
    rail_applications = "RailApplications"


class RemoteApplicationType(str, Enum):

    in_built = "InBuilt"
    msix_application = "MsixApplication"


class CommandLineSetting(str, Enum):

    do_not_allow = "DoNotAllow"
    allow = "Allow"
    require = "Require"


class Status(str, Enum):

    available = "Available"  #: Session Host has passed all the health checks and is available to handle connections.
    unavailable = "Unavailable"  #: Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status.
    shutdown = "Shutdown"  #: Session Host is shutdown - RD Agent reported session host to be stopped or deallocated.
    disconnected = "Disconnected"  #: The Session Host is unavailable because it is currently disconnected.
    upgrading = "Upgrading"  #: Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections.
    upgrade_failed = "UpgradeFailed"  #: Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed.
    no_heartbeat = "NoHeartbeat"  #: The Session Host is not heart beating.
    not_joined_to_domain = "NotJoinedToDomain"  #: SessionHost is not joined to domain.
    domain_trust_relationship_lost = "DomainTrustRelationshipLost"  #: SessionHost's domain trust relationship lost
    sx_sstack_listener_not_ready = "SxSStackListenerNotReady"  #: SxS stack installed on the SessionHost is not ready to receive connections.
    fs_logix_not_healthy = "FSLogixNotHealthy"  #: FSLogix is in an unhealthy state on the session host.
    needs_assistance = "NeedsAssistance"  #: New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal.


class UpdateState(str, Enum):

    initial = "Initial"
    pending = "Pending"
    started = "Started"
    succeeded = "Succeeded"
    failed = "Failed"


class HealthCheckName(str, Enum):

    domain_joined_check = "DomainJoinedCheck"  #: Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain.
    domain_trust_check = "DomainTrustCheck"  #: Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost.
    fs_logix_health_check = "FSLogixHealthCheck"  #: Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session.
    sx_sstack_listener_check = "SxSStackListenerCheck"  #: Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready.
    urls_accessible_check = "UrlsAccessibleCheck"  #: Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...).
    monitoring_agent_check = "MonitoringAgentCheck"  #: Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version.
    domain_reachable = "DomainReachable"  #: Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection.
    web_rtc_redirector_check = "WebRTCRedirectorCheck"  #: Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated.
    supported_encryption_check = "SupportedEncryptionCheck"  #: Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal.
    meta_data_service_check = "MetaDataServiceCheck"  #: Verifies the metadata service is accessible and return compute properties.
    app_attach_health_check = "AppAttachHealthCheck"  #: Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging/registration (and eventual deregistration/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users.


class HealthCheckResult(str, Enum):

    unknown = "Unknown"  #: Health check result is not currently known.
    health_check_succeeded = "HealthCheckSucceeded"  #: Health check passed.
    health_check_failed = "HealthCheckFailed"  #: Health check failed.
    session_host_shutdown = "SessionHostShutdown"  #: We received a Shutdown notification.


class ApplicationType(str, Enum):

    remote_app = "RemoteApp"
    desktop = "Desktop"


class SessionState(str, Enum):

    unknown = "Unknown"
    active = "Active"
    disconnected = "Disconnected"
    pending = "Pending"
    log_off = "LogOff"
    user_profile_disk_mounted = "UserProfileDiskMounted"


class SessionHostLoadBalancingAlgorithm(str, Enum):

    breadth_first = "BreadthFirst"
    depth_first = "DepthFirst"


class StopHostsWhen(str, Enum):

    zero_sessions = "ZeroSessions"
    zero_active_sessions = "ZeroActiveSessions"


class SkuTier(str, Enum):

    free = "Free"
    basic = "Basic"
    standard = "Standard"
    premium = "Premium"


class ResourceIdentityType(str, Enum):

    system_assigned = "SystemAssigned"
