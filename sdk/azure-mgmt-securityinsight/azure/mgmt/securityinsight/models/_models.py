# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class DataConnectorsCheckRequirements(Model):
    """Data connector requirements properties.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AADCheckRequirements, AATPCheckRequirements,
    ASCCheckRequirements, AwsCloudTrailCheckRequirements,
    Dynamics365CheckRequirements, MCASCheckRequirements,
    MDATPCheckRequirements, OfficeATPCheckRequirements, TICheckRequirements,
    TiTaxiiCheckRequirements

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AzureActiveDirectory': 'AADCheckRequirements', 'AzureAdvancedThreatProtection': 'AATPCheckRequirements', 'AzureSecurityCenter': 'ASCCheckRequirements', 'AmazonWebServicesCloudTrail': 'AwsCloudTrailCheckRequirements', 'Dynamics365': 'Dynamics365CheckRequirements', 'MicrosoftCloudAppSecurity': 'MCASCheckRequirements', 'MicrosoftDefenderAdvancedThreatProtection': 'MDATPCheckRequirements', 'OfficeATP': 'OfficeATPCheckRequirements', 'ThreatIntelligence': 'TICheckRequirements', 'ThreatIntelligenceTaxii': 'TiTaxiiCheckRequirements'}
    }

    def __init__(self, **kwargs):
        super(DataConnectorsCheckRequirements, self).__init__(**kwargs)
        self.kind = None


class AADCheckRequirements(DataConnectorsCheckRequirements):
    """Represents AAD (Azure Active Directory) requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AADCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'AzureActiveDirectory'


class DataConnector(Model):
    """Data connector.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AADDataConnector, AATPDataConnector, ASCDataConnector,
    AwsCloudTrailDataConnector, Dynamics365DataConnector, MCASDataConnector,
    MDATPDataConnector, OfficeATPDataConnector, OfficeDataConnector,
    TIDataConnector, TiTaxiiDataConnector

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AzureActiveDirectory': 'AADDataConnector', 'AzureAdvancedThreatProtection': 'AATPDataConnector', 'AzureSecurityCenter': 'ASCDataConnector', 'AmazonWebServicesCloudTrail': 'AwsCloudTrailDataConnector', 'Dynamics365': 'Dynamics365DataConnector', 'MicrosoftCloudAppSecurity': 'MCASDataConnector', 'MicrosoftDefenderAdvancedThreatProtection': 'MDATPDataConnector', 'OfficeATP': 'OfficeATPDataConnector', 'Office365': 'OfficeDataConnector', 'ThreatIntelligence': 'TIDataConnector', 'ThreatIntelligenceTaxii': 'TiTaxiiDataConnector'}
    }

    def __init__(self, **kwargs):
        super(DataConnector, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.kind = None


class AADDataConnector(DataConnector):
    """Represents AAD (Azure Active Directory) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, **kwargs):
        super(AADDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'AzureActiveDirectory'


class AATPCheckRequirements(DataConnectorsCheckRequirements):
    """Represents AATP (Azure Advanced Threat Protection) requirements check
    request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AATPCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'AzureAdvancedThreatProtection'


class AATPDataConnector(DataConnector):
    """Represents AATP (Azure Advanced Threat Protection) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, **kwargs):
        super(AATPDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'AzureAdvancedThreatProtection'


class Entity(Model):
    """Specific entity.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AccountEntity, AzureResourceEntity,
    CloudApplicationEntity, DnsEntity, FileEntity, FileHashEntity, HostEntity,
    HuntingBookmark, SecurityAlert, IpEntity, MailboxEntity, MailClusterEntity,
    MailMessageEntity, SubmissionMailEntity, MalwareEntity, ProcessEntity,
    RegistryKeyEntity, RegistryValueEntity, SecurityGroupEntity, UrlEntity,
    IoTDeviceEntity

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Account': 'AccountEntity', 'AzureResource': 'AzureResourceEntity', 'CloudApplication': 'CloudApplicationEntity', 'DnsResolution': 'DnsEntity', 'File': 'FileEntity', 'FileHash': 'FileHashEntity', 'Host': 'HostEntity', 'Bookmark': 'HuntingBookmark', 'SecurityAlert': 'SecurityAlert', 'Ip': 'IpEntity', 'Mailbox': 'MailboxEntity', 'MailCluster': 'MailClusterEntity', 'MailMessage': 'MailMessageEntity', 'SubmissionMail': 'SubmissionMailEntity', 'Malware': 'MalwareEntity', 'Process': 'ProcessEntity', 'RegistryKey': 'RegistryKeyEntity', 'RegistryValue': 'RegistryValueEntity', 'SecurityGroup': 'SecurityGroupEntity', 'Url': 'UrlEntity', 'IoTDevice': 'IoTDeviceEntity'}
    }

    def __init__(self, **kwargs):
        super(Entity, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AccountEntity(Entity):
    """Represents an account entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar aad_tenant_id: The Azure Active Directory tenant id.
    :vartype aad_tenant_id: str
    :ivar aad_user_id: The Azure Active Directory user id.
    :vartype aad_user_id: str
    :ivar account_name: The name of the account. This field should hold only
     the name without any domain added to it, i.e. administrator.
    :vartype account_name: str
    :ivar display_name: The display name of the account.
    :vartype display_name: str
    :ivar host_entity_id: The Host entity id that contains the account in case
     it is a local account (not domain joined)
    :vartype host_entity_id: str
    :ivar is_domain_joined: Determines whether this is a domain account.
    :vartype is_domain_joined: bool
    :ivar nt_domain: The NetBIOS domain name as it appears in the alert format
     – domain\\username. Examples: NT AUTHORITY.
    :vartype nt_domain: str
    :ivar object_guid: The objectGUID attribute is a single-value attribute
     that is the unique identifier for the object, assigned by active
     directory.
    :vartype object_guid: str
    :ivar puid: The Azure Active Directory Passport User ID.
    :vartype puid: str
    :ivar sid: The account security identifier, e.g. S-1-5-18.
    :vartype sid: str
    :ivar upn_suffix: The user principal name suffix for the account, in some
     cases it is also the domain name. Examples: contoso.com.
    :vartype upn_suffix: str
    :ivar dns_domain: The fully qualified domain DNS name.
    :vartype dns_domain: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'aad_tenant_id': {'readonly': True},
        'aad_user_id': {'readonly': True},
        'account_name': {'readonly': True},
        'display_name': {'readonly': True},
        'host_entity_id': {'readonly': True},
        'is_domain_joined': {'readonly': True},
        'nt_domain': {'readonly': True},
        'object_guid': {'readonly': True},
        'puid': {'readonly': True},
        'sid': {'readonly': True},
        'upn_suffix': {'readonly': True},
        'dns_domain': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'aad_tenant_id': {'key': 'properties.aadTenantId', 'type': 'str'},
        'aad_user_id': {'key': 'properties.aadUserId', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
        'is_domain_joined': {'key': 'properties.isDomainJoined', 'type': 'bool'},
        'nt_domain': {'key': 'properties.ntDomain', 'type': 'str'},
        'object_guid': {'key': 'properties.objectGuid', 'type': 'str'},
        'puid': {'key': 'properties.puid', 'type': 'str'},
        'sid': {'key': 'properties.sid', 'type': 'str'},
        'upn_suffix': {'key': 'properties.upnSuffix', 'type': 'str'},
        'dns_domain': {'key': 'properties.dnsDomain', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AccountEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.aad_tenant_id = None
        self.aad_user_id = None
        self.account_name = None
        self.display_name = None
        self.host_entity_id = None
        self.is_domain_joined = None
        self.nt_domain = None
        self.object_guid = None
        self.puid = None
        self.sid = None
        self.upn_suffix = None
        self.dns_domain = None
        self.kind = 'Account'


class ActionPropertiesBase(Model):
    """Action property bag base.

    :param logic_app_resource_id: Logic App Resource Id,
     /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}.
    :type logic_app_resource_id: str
    """

    _attribute_map = {
        'logic_app_resource_id': {'key': 'logicAppResourceId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ActionPropertiesBase, self).__init__(**kwargs)
        self.logic_app_resource_id = kwargs.get('logic_app_resource_id', None)


class ResourceWithEtag(Model):
    """An azure resource object with an Etag property.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceWithEtag, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)


class ActionRequest(ResourceWithEtag):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param logic_app_resource_id: Logic App Resource Id,
     /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}.
    :type logic_app_resource_id: str
    :param trigger_uri: Logic App Callback URL for this specific workflow.
    :type trigger_uri: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'logic_app_resource_id': {'key': 'properties.logicAppResourceId', 'type': 'str'},
        'trigger_uri': {'key': 'properties.triggerUri', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ActionRequest, self).__init__(**kwargs)
        self.logic_app_resource_id = kwargs.get('logic_app_resource_id', None)
        self.trigger_uri = kwargs.get('trigger_uri', None)


class Resource(Model):
    """An azure resource object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ActionResponse(Resource):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the action.
    :type etag: str
    :param logic_app_resource_id: Logic App Resource Id,
     /subscriptions/{my-subscription}/resourceGroups/{my-resource-group}/providers/Microsoft.Logic/workflows/{my-workflow-id}.
    :type logic_app_resource_id: str
    :param workflow_id: The name of the logic app's workflow.
    :type workflow_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'logic_app_resource_id': {'key': 'properties.logicAppResourceId', 'type': 'str'},
        'workflow_id': {'key': 'properties.workflowId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ActionResponse, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.logic_app_resource_id = kwargs.get('logic_app_resource_id', None)
        self.workflow_id = kwargs.get('workflow_id', None)


class EntityTimelineItem(Model):
    """Entity timeline Item.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ActivityTimelineItem, SecurityAlertTimelineItem,
    BookmarkTimelineItem

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Activity': 'ActivityTimelineItem', 'SecurityAlert': 'SecurityAlertTimelineItem', 'Bookmark': 'BookmarkTimelineItem'}
    }

    def __init__(self, **kwargs):
        super(EntityTimelineItem, self).__init__(**kwargs)
        self.kind = None


class ActivityTimelineItem(EntityTimelineItem):
    """Represents Activity timeline item.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param query_id: Required. The activity query id.
    :type query_id: str
    :param bucket_start_time_utc: Required. The grouping bucket start time.
    :type bucket_start_time_utc: datetime
    :param bucket_end_time_utc: Required. The grouping bucket end time.
    :type bucket_end_time_utc: datetime
    :param first_activity_time_utc: Required. The time of the first activity
     in the grouping bucket.
    :type first_activity_time_utc: datetime
    :param last_activity_time_utc: Required. The time of the last activity in
     the grouping bucket.
    :type last_activity_time_utc: datetime
    :param content: Required. The activity timeline content.
    :type content: str
    :param title: Required. The activity timeline title.
    :type title: str
    """

    _validation = {
        'kind': {'required': True},
        'query_id': {'required': True},
        'bucket_start_time_utc': {'required': True},
        'bucket_end_time_utc': {'required': True},
        'first_activity_time_utc': {'required': True},
        'last_activity_time_utc': {'required': True},
        'content': {'required': True},
        'title': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'query_id': {'key': 'queryId', 'type': 'str'},
        'bucket_start_time_utc': {'key': 'bucketStartTimeUTC', 'type': 'iso-8601'},
        'bucket_end_time_utc': {'key': 'bucketEndTimeUTC', 'type': 'iso-8601'},
        'first_activity_time_utc': {'key': 'firstActivityTimeUTC', 'type': 'iso-8601'},
        'last_activity_time_utc': {'key': 'lastActivityTimeUTC', 'type': 'iso-8601'},
        'content': {'key': 'content', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ActivityTimelineItem, self).__init__(**kwargs)
        self.query_id = kwargs.get('query_id', None)
        self.bucket_start_time_utc = kwargs.get('bucket_start_time_utc', None)
        self.bucket_end_time_utc = kwargs.get('bucket_end_time_utc', None)
        self.first_activity_time_utc = kwargs.get('first_activity_time_utc', None)
        self.last_activity_time_utc = kwargs.get('last_activity_time_utc', None)
        self.content = kwargs.get('content', None)
        self.title = kwargs.get('title', None)
        self.kind = 'Activity'


class Aggregations(Model):
    """The aggregation.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CasesAggregation

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'CasesAggregation': 'CasesAggregation'}
    }

    def __init__(self, **kwargs):
        super(Aggregations, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AggregationsKind(Model):
    """Describes an Azure resource with kind.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The kind of the setting. Default value:
     "CasesAggregation" .
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    kind = "CasesAggregation"


class AlertRule(Model):
    """Alert rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FusionAlertRule,
    MicrosoftSecurityIncidentCreationAlertRule, ScheduledAlertRule

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Fusion': 'FusionAlertRule', 'MicrosoftSecurityIncidentCreation': 'MicrosoftSecurityIncidentCreationAlertRule', 'Scheduled': 'ScheduledAlertRule'}
    }

    def __init__(self, **kwargs):
        super(AlertRule, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.kind = None


class AlertRuleKind1(Model):
    """Describes an Azure resource with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values
     include: 'Scheduled', 'MicrosoftSecurityIncidentCreation', 'Fusion',
     'MLBehaviorAnalytics', 'ThreatIntelligence', 'Anomaly'
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AlertRuleKind1, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)


class AlertRuleTemplate(Model):
    """Alert rule template.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FusionAlertRuleTemplate,
    MicrosoftSecurityIncidentCreationAlertRuleTemplate,
    ScheduledAlertRuleTemplate

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Fusion': 'FusionAlertRuleTemplate', 'MicrosoftSecurityIncidentCreation': 'MicrosoftSecurityIncidentCreationAlertRuleTemplate', 'Scheduled': 'ScheduledAlertRuleTemplate'}
    }

    def __init__(self, **kwargs):
        super(AlertRuleTemplate, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AlertRuleTemplateDataSource(Model):
    """alert rule template data sources.

    :param connector_id: The connector id that provides the following data
     types
    :type connector_id: str
    :param data_types: The data types used by the alert rule template
    :type data_types: list[str]
    """

    _attribute_map = {
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(AlertRuleTemplateDataSource, self).__init__(**kwargs)
        self.connector_id = kwargs.get('connector_id', None)
        self.data_types = kwargs.get('data_types', None)


class AlertRuleTemplatePropertiesBase(Model):
    """Base alert rule template property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param alert_rules_created_by_template_count: the number of alert rules
     that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar last_updated_date_utc: The last time that this alert rule template
     has been updated.
    :vartype last_updated_date_utc: datetime
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data sources for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include:
     'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    """

    _validation = {
        'last_updated_date_utc': {'readonly': True},
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'alert_rules_created_by_template_count': {'key': 'alertRulesCreatedByTemplateCount', 'type': 'int'},
        'last_updated_date_utc': {'key': 'lastUpdatedDateUTC', 'type': 'iso-8601'},
        'created_date_utc': {'key': 'createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AlertRuleTemplatePropertiesBase, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = kwargs.get('alert_rules_created_by_template_count', None)
        self.last_updated_date_utc = None
        self.created_date_utc = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.required_data_connectors = kwargs.get('required_data_connectors', None)
        self.status = kwargs.get('status', None)


class AlertsDataTypeOfDataConnector(Model):
    """Alerts data type for data connectors.

    :param alerts: Alerts data type connection.
    :type alerts:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
    }

    def __init__(self, **kwargs):
        super(AlertsDataTypeOfDataConnector, self).__init__(**kwargs)
        self.alerts = kwargs.get('alerts', None)


class DataConnectorDataTypeCommon(Model):
    """Common field for data type in data connectors.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataConnectorDataTypeCommon, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)


class AlertsDataTypeOfDataConnectorAlerts(DataConnectorDataTypeCommon):
    """Alerts data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AlertsDataTypeOfDataConnectorAlerts, self).__init__(**kwargs)


class ASCCheckRequirements(DataConnectorsCheckRequirements):
    """Represents ASC (Azure Security Center) requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param subscription_id: The subscription id to connect to, and get the
     data from.
    :type subscription_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'subscription_id': {'key': 'properties.subscriptionId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ASCCheckRequirements, self).__init__(**kwargs)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.kind = 'AzureSecurityCenter'


class ASCDataConnector(DataConnector):
    """Represents ASC (Azure Security Center) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    :param subscription_id: The subscription id to connect to, and get the
     data from.
    :type subscription_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
        'subscription_id': {'key': 'properties.subscriptionId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ASCDataConnector, self).__init__(**kwargs)
        self.data_types = kwargs.get('data_types', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.kind = 'AzureSecurityCenter'


class AwsCloudTrailCheckRequirements(DataConnectorsCheckRequirements):
    """Amazon Web Services CloudTrail requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AwsCloudTrailCheckRequirements, self).__init__(**kwargs)
        self.kind = 'AmazonWebServicesCloudTrail'


class AwsCloudTrailDataConnector(DataConnector):
    """Represents Amazon Web Services CloudTrail data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param aws_role_arn: The Aws Role Arn (with CloudTrailReadOnly policy)
     that is used to access the Aws account.
    :type aws_role_arn: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'aws_role_arn': {'key': 'properties.awsRoleArn', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AwsCloudTrailDataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(AwsCloudTrailDataConnector, self).__init__(**kwargs)
        self.aws_role_arn = kwargs.get('aws_role_arn', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'AmazonWebServicesCloudTrail'


class AwsCloudTrailDataConnectorDataTypes(Model):
    """The available data types for Amazon Web Services CloudTrail data connector.

    :param logs: Logs data type.
    :type logs:
     ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypesLogs
    """

    _attribute_map = {
        'logs': {'key': 'logs', 'type': 'AwsCloudTrailDataConnectorDataTypesLogs'},
    }

    def __init__(self, **kwargs):
        super(AwsCloudTrailDataConnectorDataTypes, self).__init__(**kwargs)
        self.logs = kwargs.get('logs', None)


class AwsCloudTrailDataConnectorDataTypesLogs(DataConnectorDataTypeCommon):
    """Logs data type.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AwsCloudTrailDataConnectorDataTypesLogs, self).__init__(**kwargs)


class AzureResourceEntity(Entity):
    """Represents an azure resource entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar resource_id: The azure resource id of the resource
    :vartype resource_id: str
    :ivar subscription_id: The subscription id of the resource
    :vartype subscription_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'resource_id': {'readonly': True},
        'subscription_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'subscription_id': {'key': 'properties.subscriptionId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AzureResourceEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.resource_id = None
        self.subscription_id = None
        self.kind = 'AzureResource'


class Bookmark(ResourceWithEtag):
    """Represents a bookmark in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param created: The time the bookmark was created
    :type created: datetime
    :param created_by: Describes a user that created the bookmark
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param display_name: Required. The display name of the bookmark
    :type display_name: str
    :param labels: List of labels relevant to this bookmark
    :type labels: list[str]
    :param notes: The notes of the bookmark
    :type notes: str
    :param query: Required. The query of the bookmark.
    :type query: str
    :param query_result: The query result of the bookmark.
    :type query_result: str
    :param updated: The last time the bookmark was updated
    :type updated: datetime
    :param updated_by: Describes a user that updated the bookmark
    :type updated_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param incident_info: Describes an incident that relates to bookmark
    :type incident_info: ~azure.mgmt.securityinsight.models.IncidentInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'UserInfo'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_result': {'key': 'properties.queryResult', 'type': 'str'},
        'updated': {'key': 'properties.updated', 'type': 'iso-8601'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'UserInfo'},
        'incident_info': {'key': 'properties.incidentInfo', 'type': 'IncidentInfo'},
    }

    def __init__(self, **kwargs):
        super(Bookmark, self).__init__(**kwargs)
        self.created = kwargs.get('created', None)
        self.created_by = kwargs.get('created_by', None)
        self.display_name = kwargs.get('display_name', None)
        self.labels = kwargs.get('labels', None)
        self.notes = kwargs.get('notes', None)
        self.query = kwargs.get('query', None)
        self.query_result = kwargs.get('query_result', None)
        self.updated = kwargs.get('updated', None)
        self.updated_by = kwargs.get('updated_by', None)
        self.incident_info = kwargs.get('incident_info', None)


class BookmarkExpandParameters(Model):
    """The parameters required to execute an expand operation on the given
    bookmark.

    :param end_time: The end date filter, so the only expansion results
     returned are before this date.
    :type end_time: datetime
    :param expansion_id: The Id of the expansion to perform.
    :type expansion_id: str
    :param start_time: The start date filter, so the only expansion results
     returned are after this date.
    :type start_time: datetime
    """

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'expansion_id': {'key': 'expansionId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(BookmarkExpandParameters, self).__init__(**kwargs)
        self.end_time = kwargs.get('end_time', None)
        self.expansion_id = kwargs.get('expansion_id', None)
        self.start_time = kwargs.get('start_time', None)


class BookmarkExpandResponse(Model):
    """The entity expansion result operation response.

    :param meta_data: The metadata from the expansion operation results.
    :type meta_data:
     ~azure.mgmt.securityinsight.models.ExpansionResultsMetadata
    :param value: The expansion result values.
    :type value:
     ~azure.mgmt.securityinsight.models.BookmarkExpandResponseValue
    """

    _attribute_map = {
        'meta_data': {'key': 'metaData', 'type': 'ExpansionResultsMetadata'},
        'value': {'key': 'value', 'type': 'BookmarkExpandResponseValue'},
    }

    def __init__(self, **kwargs):
        super(BookmarkExpandResponse, self).__init__(**kwargs)
        self.meta_data = kwargs.get('meta_data', None)
        self.value = kwargs.get('value', None)


class BookmarkExpandResponseValue(Model):
    """The expansion result values.

    :param entities: Array of the expansion result entities.
    :type entities: list[~azure.mgmt.securityinsight.models.Entity]
    """

    _attribute_map = {
        'entities': {'key': 'entities', 'type': '[Entity]'},
    }

    def __init__(self, **kwargs):
        super(BookmarkExpandResponseValue, self).__init__(**kwargs)
        self.entities = kwargs.get('entities', None)


class BookmarkTimelineItem(EntityTimelineItem):
    """Represents bookmark timeline item.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param azure_resource_id: Required. The bookmark azure resource id.
    :type azure_resource_id: str
    :param display_name: Required. The bookmark display name.
    :type display_name: str
    :param notes: Required. The notes of the bookmark
    :type notes: str
    :param end_time_utc: Required. The bookmark end time.
    :type end_time_utc: datetime
    :param start_time_utc: Required. TThe bookmark start time.
    :type start_time_utc: datetime
    :param event_time: The bookmark event time.
    :type event_time: datetime
    :param created_by: Required. Describes a user that created the bookmark
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param labels: Required. List of labels relevant to this bookmark
    :type labels: list[str]
    """

    _validation = {
        'kind': {'required': True},
        'azure_resource_id': {'required': True},
        'display_name': {'required': True},
        'notes': {'required': True},
        'end_time_utc': {'required': True},
        'start_time_utc': {'required': True},
        'created_by': {'required': True},
        'labels': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'azure_resource_id': {'key': 'azureResourceId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'end_time_utc': {'key': 'endTimeUtc', 'type': 'iso-8601'},
        'start_time_utc': {'key': 'startTimeUtc', 'type': 'iso-8601'},
        'event_time': {'key': 'eventTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'UserInfo'},
        'labels': {'key': 'labels', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(BookmarkTimelineItem, self).__init__(**kwargs)
        self.azure_resource_id = kwargs.get('azure_resource_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.notes = kwargs.get('notes', None)
        self.end_time_utc = kwargs.get('end_time_utc', None)
        self.start_time_utc = kwargs.get('start_time_utc', None)
        self.event_time = kwargs.get('event_time', None)
        self.created_by = kwargs.get('created_by', None)
        self.labels = kwargs.get('labels', None)
        self.kind = 'Bookmark'


class Case(ResourceWithEtag):
    """Represents a case in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :ivar case_number: a sequential number
    :vartype case_number: int
    :param close_reason: The reason the case was closed. Possible values
     include: 'Resolved', 'Dismissed', 'TruePositive', 'FalsePositive', 'Other'
    :type close_reason: str or ~azure.mgmt.securityinsight.models.CloseReason
    :param closed_reason_text: the case close reason details
    :type closed_reason_text: str
    :ivar created_time_utc: The time the case was created
    :vartype created_time_utc: datetime
    :param description: The description of the case
    :type description: str
    :param end_time_utc: The end time of the case
    :type end_time_utc: datetime
    :param labels: List of labels relevant to this case
    :type labels: list[str]
    :ivar last_comment: the last comment in the case
    :vartype last_comment: str
    :ivar last_updated_time_utc: The last time the case was updated
    :vartype last_updated_time_utc: datetime
    :param owner: Describes a user that the case is assigned to
    :type owner: ~azure.mgmt.securityinsight.models.UserInfo
    :ivar related_alert_ids: List of related alert identifiers
    :vartype related_alert_ids: list[str]
    :ivar tactics: The tactics associated with case
    :vartype tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :param severity: Required. The severity of the case. Possible values
     include: 'Critical', 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.CaseSeverity
    :param start_time_utc: Required. The start time of the case
    :type start_time_utc: datetime
    :param status: Required. The status of the case. Possible values include:
     'Draft', 'New', 'InProgress', 'Closed'
    :type status: str or ~azure.mgmt.securityinsight.models.CaseStatus
    :param title: Required. The title of the case
    :type title: str
    :ivar total_comments: the number of total comments in the case
    :vartype total_comments: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'case_number': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'last_comment': {'readonly': True},
        'last_updated_time_utc': {'readonly': True},
        'related_alert_ids': {'readonly': True},
        'tactics': {'readonly': True},
        'severity': {'required': True},
        'start_time_utc': {'required': True},
        'status': {'required': True},
        'title': {'required': True},
        'total_comments': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'case_number': {'key': 'properties.caseNumber', 'type': 'int'},
        'close_reason': {'key': 'properties.closeReason', 'type': 'str'},
        'closed_reason_text': {'key': 'properties.closedReasonText', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'end_time_utc': {'key': 'properties.endTimeUtc', 'type': 'iso-8601'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'last_comment': {'key': 'properties.lastComment', 'type': 'str'},
        'last_updated_time_utc': {'key': 'properties.lastUpdatedTimeUtc', 'type': 'iso-8601'},
        'owner': {'key': 'properties.owner', 'type': 'UserInfo'},
        'related_alert_ids': {'key': 'properties.relatedAlertIds', 'type': '[str]'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'start_time_utc': {'key': 'properties.startTimeUtc', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'total_comments': {'key': 'properties.totalComments', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Case, self).__init__(**kwargs)
        self.case_number = None
        self.close_reason = kwargs.get('close_reason', None)
        self.closed_reason_text = kwargs.get('closed_reason_text', None)
        self.created_time_utc = None
        self.description = kwargs.get('description', None)
        self.end_time_utc = kwargs.get('end_time_utc', None)
        self.labels = kwargs.get('labels', None)
        self.last_comment = None
        self.last_updated_time_utc = None
        self.owner = kwargs.get('owner', None)
        self.related_alert_ids = None
        self.tactics = None
        self.severity = kwargs.get('severity', None)
        self.start_time_utc = kwargs.get('start_time_utc', None)
        self.status = kwargs.get('status', None)
        self.title = kwargs.get('title', None)
        self.total_comments = None


class CaseComment(Resource):
    """Represents a case comment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar created_time_utc: The time the comment was created
    :vartype created_time_utc: datetime
    :param message: Required. The comment message
    :type message: str
    :ivar user_info: Describes the user that created the comment
    :vartype user_info: ~azure.mgmt.securityinsight.models.UserInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'message': {'required': True},
        'user_info': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'message': {'key': 'properties.message', 'type': 'str'},
        'user_info': {'key': 'properties.userInfo', 'type': 'UserInfo'},
    }

    def __init__(self, **kwargs):
        super(CaseComment, self).__init__(**kwargs)
        self.created_time_utc = None
        self.message = kwargs.get('message', None)
        self.user_info = None


class RelationBase(Resource):
    """Represents a relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RelationBase, self).__init__(**kwargs)
        self.kind = None
        self.etag = kwargs.get('etag', None)


class CaseRelation(RelationBase):
    """Represents a case relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Required. Name of relation
    :type relation_name: str
    :param bookmark_id: Required. The case related bookmark id
    :type bookmark_id: str
    :param case_identifier: Required. The case identifier
    :type case_identifier: str
    :param bookmark_name: The case related bookmark name
    :type bookmark_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
        'relation_name': {'required': True},
        'bookmark_id': {'required': True},
        'case_identifier': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'bookmark_id': {'key': 'properties.bookmarkId', 'type': 'str'},
        'case_identifier': {'key': 'properties.caseIdentifier', 'type': 'str'},
        'bookmark_name': {'key': 'properties.bookmarkName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CaseRelation, self).__init__(**kwargs)
        self.relation_name = kwargs.get('relation_name', None)
        self.bookmark_id = kwargs.get('bookmark_id', None)
        self.case_identifier = kwargs.get('case_identifier', None)
        self.bookmark_name = kwargs.get('bookmark_name', None)


class CasesAggregation(Aggregations):
    """Represents aggregations results for cases.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param aggregation_by_severity: Aggregations results by case severity.
    :type aggregation_by_severity:
     ~azure.mgmt.securityinsight.models.CasesAggregationBySeverityProperties
    :param aggregation_by_status: Aggregations results by case status.
    :type aggregation_by_status:
     ~azure.mgmt.securityinsight.models.CasesAggregationByStatusProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'aggregation_by_severity': {'key': 'properties.aggregationBySeverity', 'type': 'CasesAggregationBySeverityProperties'},
        'aggregation_by_status': {'key': 'properties.aggregationByStatus', 'type': 'CasesAggregationByStatusProperties'},
    }

    def __init__(self, **kwargs):
        super(CasesAggregation, self).__init__(**kwargs)
        self.aggregation_by_severity = kwargs.get('aggregation_by_severity', None)
        self.aggregation_by_status = kwargs.get('aggregation_by_status', None)
        self.kind = 'CasesAggregation'


class CasesAggregationBySeverityProperties(Model):
    """Aggregative results of cases by severity property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar total_critical_severity: Total amount of open cases with severity
     Critical
    :vartype total_critical_severity: int
    :ivar total_high_severity: Total amount of open cases with severity High
    :vartype total_high_severity: int
    :ivar total_informational_severity: Total amount of open cases with
     severity Informational
    :vartype total_informational_severity: int
    :ivar total_low_severity: Total amount of open cases with severity Low
    :vartype total_low_severity: int
    :ivar total_medium_severity: Total amount of open cases with severity
     medium
    :vartype total_medium_severity: int
    """

    _validation = {
        'total_critical_severity': {'readonly': True},
        'total_high_severity': {'readonly': True},
        'total_informational_severity': {'readonly': True},
        'total_low_severity': {'readonly': True},
        'total_medium_severity': {'readonly': True},
    }

    _attribute_map = {
        'total_critical_severity': {'key': 'totalCriticalSeverity', 'type': 'int'},
        'total_high_severity': {'key': 'totalHighSeverity', 'type': 'int'},
        'total_informational_severity': {'key': 'totalInformationalSeverity', 'type': 'int'},
        'total_low_severity': {'key': 'totalLowSeverity', 'type': 'int'},
        'total_medium_severity': {'key': 'totalMediumSeverity', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(CasesAggregationBySeverityProperties, self).__init__(**kwargs)
        self.total_critical_severity = None
        self.total_high_severity = None
        self.total_informational_severity = None
        self.total_low_severity = None
        self.total_medium_severity = None


class CasesAggregationByStatusProperties(Model):
    """Aggregative results of cases by status property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar total_dismissed_status: Total amount of closed cases with status
     Dismissed
    :vartype total_dismissed_status: int
    :ivar total_in_progress_status: Total amount of open cases with status
     InProgress
    :vartype total_in_progress_status: int
    :ivar total_new_status: Total amount of open cases with status New
    :vartype total_new_status: int
    :ivar total_resolved_status: Total amount of closed cases with status
     Resolved
    :vartype total_resolved_status: int
    :ivar total_false_positive_status: Total amount of closed cases with
     status Closed and Close reason of False positive
    :vartype total_false_positive_status: int
    :ivar total_true_positive_status: Total amount of closed cases with status
     Closed and Close reason of True positive
    :vartype total_true_positive_status: int
    """

    _validation = {
        'total_dismissed_status': {'readonly': True},
        'total_in_progress_status': {'readonly': True},
        'total_new_status': {'readonly': True},
        'total_resolved_status': {'readonly': True},
        'total_false_positive_status': {'readonly': True},
        'total_true_positive_status': {'readonly': True},
    }

    _attribute_map = {
        'total_dismissed_status': {'key': 'totalDismissedStatus', 'type': 'int'},
        'total_in_progress_status': {'key': 'totalInProgressStatus', 'type': 'int'},
        'total_new_status': {'key': 'totalNewStatus', 'type': 'int'},
        'total_resolved_status': {'key': 'totalResolvedStatus', 'type': 'int'},
        'total_false_positive_status': {'key': 'totalFalsePositiveStatus', 'type': 'int'},
        'total_true_positive_status': {'key': 'totalTruePositiveStatus', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(CasesAggregationByStatusProperties, self).__init__(**kwargs)
        self.total_dismissed_status = None
        self.total_in_progress_status = None
        self.total_new_status = None
        self.total_resolved_status = None
        self.total_false_positive_status = None
        self.total_true_positive_status = None


class ClientInfo(Model):
    """Information on the client (user or application) that made some action.

    :param email: The email of the client.
    :type email: str
    :param name: The name of the client.
    :type name: str
    :param object_id: The object id of the client.
    :type object_id: str
    :param user_principal_name: The user principal name of the client.
    :type user_principal_name: str
    """

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ClientInfo, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.name = kwargs.get('name', None)
        self.object_id = kwargs.get('object_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class CloudApplicationEntity(Entity):
    """Represents a cloud application entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar app_id: The technical identifier of the application.
    :vartype app_id: int
    :ivar app_name: The name of the related cloud application.
    :vartype app_name: str
    :ivar instance_name: The user defined instance name of the cloud
     application. It is often used to distinguish between several applications
     of the same type that a customer has.
    :vartype instance_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'app_id': {'readonly': True},
        'app_name': {'readonly': True},
        'instance_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'app_id': {'key': 'properties.appId', 'type': 'int'},
        'app_name': {'key': 'properties.appName', 'type': 'str'},
        'instance_name': {'key': 'properties.instanceName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CloudApplicationEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.app_id = None
        self.app_name = None
        self.instance_name = None
        self.kind = 'CloudApplication'


class CloudError(Model):
    """Error response structure.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for
     display in a user interface.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'error.code', 'type': 'str'},
        'message': {'key': 'error.message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CloudError, self).__init__(**kwargs)
        self.code = None
        self.message = None


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class DataConnectorKind1(Model):
    """Describes an Azure resource with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the data connector. Possible values
     include: 'AzureActiveDirectory', 'AzureSecurityCenter',
     'MicrosoftCloudAppSecurity', 'ThreatIntelligence',
     'ThreatIntelligenceTaxii', 'Office365', 'OfficeATP',
     'AmazonWebServicesCloudTrail', 'AzureAdvancedThreatProtection',
     'MicrosoftDefenderAdvancedThreatProtection', 'Dynamics365'
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataConnectorKind1, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)


class DataConnectorRequirementsState(Model):
    """Data connector requirements status.

    :param authorization_state: Authorization state for this connector.
     Possible values include: 'Valid', 'Invalid'
    :type authorization_state: str or
     ~azure.mgmt.securityinsight.models.DataConnectorAuthorizationState
    :param license_state: License state for this connector. Possible values
     include: 'Valid', 'Invalid', 'Unknown'
    :type license_state: str or
     ~azure.mgmt.securityinsight.models.DataConnectorLicenseState
    """

    _attribute_map = {
        'authorization_state': {'key': 'authorizationState', 'type': 'str'},
        'license_state': {'key': 'licenseState', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataConnectorRequirementsState, self).__init__(**kwargs)
        self.authorization_state = kwargs.get('authorization_state', None)
        self.license_state = kwargs.get('license_state', None)


class DataConnectorTenantId(Model):
    """Properties data connector on tenant level.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataConnectorTenantId, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)


class DataConnectorWithAlertsProperties(Model):
    """Data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, **kwargs):
        super(DataConnectorWithAlertsProperties, self).__init__(**kwargs)
        self.data_types = kwargs.get('data_types', None)


class DnsEntity(Entity):
    """Represents a dns entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar dns_server_ip_entity_id: An ip entity id for the dns server
     resolving the request
    :vartype dns_server_ip_entity_id: str
    :ivar domain_name: The name of the dns record associated with the alert
    :vartype domain_name: str
    :ivar host_ip_address_entity_id: An ip entity id for the dns request
     client
    :vartype host_ip_address_entity_id: str
    :ivar ip_address_entity_ids: Ip entity identifiers for the resolved ip
     address.
    :vartype ip_address_entity_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'dns_server_ip_entity_id': {'readonly': True},
        'domain_name': {'readonly': True},
        'host_ip_address_entity_id': {'readonly': True},
        'ip_address_entity_ids': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'dns_server_ip_entity_id': {'key': 'properties.dnsServerIpEntityId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'host_ip_address_entity_id': {'key': 'properties.hostIpAddressEntityId', 'type': 'str'},
        'ip_address_entity_ids': {'key': 'properties.ipAddressEntityIds', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(DnsEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.dns_server_ip_entity_id = None
        self.domain_name = None
        self.host_ip_address_entity_id = None
        self.ip_address_entity_ids = None
        self.kind = 'DnsResolution'


class Dynamics365CheckRequirements(DataConnectorsCheckRequirements):
    """Represents Dynamics365 requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Dynamics365CheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'Dynamics365'


class Dynamics365DataConnector(DataConnector):
    """Represents Dynamics365 data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.Dynamics365DataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'Dynamics365DataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(Dynamics365DataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'Dynamics365'


class Dynamics365DataConnectorDataTypes(Model):
    """The available data types for Dynamics365 data connector.

    :param dynamics365_cds_activities: Common Data Service data type
     connection.
    :type dynamics365_cds_activities:
     ~azure.mgmt.securityinsight.models.Dynamics365DataConnectorDataTypesDynamics365CdsActivities
    """

    _attribute_map = {
        'dynamics365_cds_activities': {'key': 'dynamics365CdsActivities', 'type': 'Dynamics365DataConnectorDataTypesDynamics365CdsActivities'},
    }

    def __init__(self, **kwargs):
        super(Dynamics365DataConnectorDataTypes, self).__init__(**kwargs)
        self.dynamics365_cds_activities = kwargs.get('dynamics365_cds_activities', None)


class Dynamics365DataConnectorDataTypesDynamics365CdsActivities(DataConnectorDataTypeCommon):
    """Common Data Service data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Dynamics365DataConnectorDataTypesDynamics365CdsActivities, self).__init__(**kwargs)


class Settings(Model):
    """The Setting.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EyesOn, EntityAnalytics, Ueba

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'EyesOn': 'EyesOn', 'EntityAnalytics': 'EntityAnalytics', 'Ueba': 'Ueba'}
    }

    def __init__(self, **kwargs):
        super(Settings, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.kind = None


class EntityAnalytics(Settings):
    """Settings with single toggle.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar is_enabled: Determines whether the setting is enable or disabled.
    :vartype is_enabled: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'is_enabled': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(EntityAnalytics, self).__init__(**kwargs)
        self.is_enabled = None
        self.kind = 'EntityAnalytics'


class EntityCommonProperties(Model):
    """Entity common property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    """

    _validation = {
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
    }

    _attribute_map = {
        'additional_data': {'key': 'additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityCommonProperties, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None


class EntityExpandParameters(Model):
    """The parameters required to execute an expand operation on the given entity.

    :param end_time: The end date filter, so the only expansion results
     returned are before this date.
    :type end_time: datetime
    :param expansion_id: The Id of the expansion to perform.
    :type expansion_id: str
    :param start_time: The start date filter, so the only expansion results
     returned are after this date.
    :type start_time: datetime
    """

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'expansion_id': {'key': 'expansionId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(EntityExpandParameters, self).__init__(**kwargs)
        self.end_time = kwargs.get('end_time', None)
        self.expansion_id = kwargs.get('expansion_id', None)
        self.start_time = kwargs.get('start_time', None)


class EntityExpandResponse(Model):
    """The entity expansion result operation response.

    :param meta_data: The metadata from the expansion operation results.
    :type meta_data:
     ~azure.mgmt.securityinsight.models.ExpansionResultsMetadata
    :param value: The expansion result values.
    :type value: ~azure.mgmt.securityinsight.models.EntityExpandResponseValue
    """

    _attribute_map = {
        'meta_data': {'key': 'metaData', 'type': 'ExpansionResultsMetadata'},
        'value': {'key': 'value', 'type': 'EntityExpandResponseValue'},
    }

    def __init__(self, **kwargs):
        super(EntityExpandResponse, self).__init__(**kwargs)
        self.meta_data = kwargs.get('meta_data', None)
        self.value = kwargs.get('value', None)


class EntityExpandResponseValue(Model):
    """The expansion result values.

    :param entities: Array of the expansion result entities.
    :type entities: list[~azure.mgmt.securityinsight.models.Entity]
    """

    _attribute_map = {
        'entities': {'key': 'entities', 'type': '[Entity]'},
    }

    def __init__(self, **kwargs):
        super(EntityExpandResponseValue, self).__init__(**kwargs)
        self.entities = kwargs.get('entities', None)


class EntityGetInsightsParameters(Model):
    """The parameters required to execute insights operation on the given entity.

    All required parameters must be populated in order to send to Azure.

    :param start_time: Required. The start timeline date, so the results
     returned are after this date.
    :type start_time: datetime
    :param end_time: Required. The end timeline date, so the results returned
     are before this date.
    :type end_time: datetime
    :param add_default_extended_time_range: Indicates if query time range
     should be extended with default time range of the query. Default value is
     false
    :type add_default_extended_time_range: bool
    :param insight_query_ids: List of Insights Query Id. If empty, default
     value is all insights of this entity
    :type insight_query_ids: list[str]
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'add_default_extended_time_range': {'key': 'addDefaultExtendedTimeRange', 'type': 'bool'},
        'insight_query_ids': {'key': 'insightQueryIds', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(EntityGetInsightsParameters, self).__init__(**kwargs)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.add_default_extended_time_range = kwargs.get('add_default_extended_time_range', None)
        self.insight_query_ids = kwargs.get('insight_query_ids', None)


class EntityGetInsightsResponse(Model):
    """The Get Insights result operation response.

    :param meta_data: The metadata from the get insights operation results.
    :type meta_data:
     ~azure.mgmt.securityinsight.models.GetInsightsResultsMetadata
    :param value: The insights result values.
    :type value: list[~azure.mgmt.securityinsight.models.EntityInsightItem]
    """

    _attribute_map = {
        'meta_data': {'key': 'metaData', 'type': 'GetInsightsResultsMetadata'},
        'value': {'key': 'value', 'type': '[EntityInsightItem]'},
    }

    def __init__(self, **kwargs):
        super(EntityGetInsightsResponse, self).__init__(**kwargs)
        self.meta_data = kwargs.get('meta_data', None)
        self.value = kwargs.get('value', None)


class EntityInsightItem(Model):
    """Entity insight Item.

    :param query_id: The query id of the insight
    :type query_id: str
    :param query_time_interval: The Time interval that the query actually
     executed on.
    :type query_time_interval:
     ~azure.mgmt.securityinsight.models.EntityInsightItemQueryTimeInterval
    :param table_query_results: Query results for table insights query.
    :type table_query_results:
     ~azure.mgmt.securityinsight.models.InsightsTableResult
    :param chart_query_results: Query results for table insights query.
    :type chart_query_results:
     list[~azure.mgmt.securityinsight.models.InsightsTableResult]
    """

    _attribute_map = {
        'query_id': {'key': 'queryId', 'type': 'str'},
        'query_time_interval': {'key': 'queryTimeInterval', 'type': 'EntityInsightItemQueryTimeInterval'},
        'table_query_results': {'key': 'tableQueryResults', 'type': 'InsightsTableResult'},
        'chart_query_results': {'key': 'chartQueryResults', 'type': '[InsightsTableResult]'},
    }

    def __init__(self, **kwargs):
        super(EntityInsightItem, self).__init__(**kwargs)
        self.query_id = kwargs.get('query_id', None)
        self.query_time_interval = kwargs.get('query_time_interval', None)
        self.table_query_results = kwargs.get('table_query_results', None)
        self.chart_query_results = kwargs.get('chart_query_results', None)


class EntityInsightItemQueryTimeInterval(Model):
    """The Time interval that the query actually executed on.

    :param start_time: Insight query start time
    :type start_time: datetime
    :param end_time: Insight query end time
    :type end_time: datetime
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(EntityInsightItemQueryTimeInterval, self).__init__(**kwargs)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)


class EntityKind1(Model):
    """Describes an entity with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the entity. Possible values include:
     'Account', 'Host', 'File', 'AzureResource', 'CloudApplication',
     'DnsResolution', 'FileHash', 'Ip', 'Malware', 'Process', 'RegistryKey',
     'RegistryValue', 'SecurityGroup', 'Url', 'IoTDevice', 'SecurityAlert',
     'Bookmark', 'MailCluster', 'MailMessage', 'Mailbox', 'SubmissionMail'
    :type kind: str or ~azure.mgmt.securityinsight.models.EntityKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityKind1, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)


class EntityQuery(Model):
    """Specific entity query.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ExpansionEntityQuery

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Expansion': 'ExpansionEntityQuery'}
    }

    def __init__(self, **kwargs):
        super(EntityQuery, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.kind = None


class EntityQueryItem(Model):
    """An abstract Query item for entity.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: InsightQueryItem

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Query Template ARM ID
    :vartype id: str
    :param name: Query Template ARM Name
    :type name: str
    :param type: ARM Type
    :type type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Insight': 'InsightQueryItem'}
    }

    def __init__(self, **kwargs):
        super(EntityQueryItem, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.kind = None


class EntityQueryItemProperties(Model):
    """An properties abstract Query item for entity.

    :param data_types: Data types for template
    :type data_types:
     list[~azure.mgmt.securityinsight.models.EntityQueryItemPropertiesDataTypesItem]
    :param input_entity_type: The type of the entity. Possible values include:
     'Account', 'Host', 'File', 'AzureResource', 'CloudApplication', 'DNS',
     'FileHash', 'IP', 'Malware', 'Process', 'RegistryKey', 'RegistryValue',
     'SecurityGroup', 'URL', 'IoTDevice', 'SecurityAlert', 'HuntingBookmark',
     'MailCluster', 'MailMessage', 'Mailbox', 'SubmissionMail'
    :type input_entity_type: str or
     ~azure.mgmt.securityinsight.models.EntityType
    :param required_input_fields_sets: Data types for template
    :type required_input_fields_sets: list[list[str]]
    :param entities_filter: The query applied only to entities matching to all
     filters
    :type entities_filter: object
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': '[EntityQueryItemPropertiesDataTypesItem]'},
        'input_entity_type': {'key': 'inputEntityType', 'type': 'str'},
        'required_input_fields_sets': {'key': 'requiredInputFieldsSets', 'type': '[[str]]'},
        'entities_filter': {'key': 'entitiesFilter', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(EntityQueryItemProperties, self).__init__(**kwargs)
        self.data_types = kwargs.get('data_types', None)
        self.input_entity_type = kwargs.get('input_entity_type', None)
        self.required_input_fields_sets = kwargs.get('required_input_fields_sets', None)
        self.entities_filter = kwargs.get('entities_filter', None)


class EntityQueryItemPropertiesDataTypesItem(Model):
    """EntityQueryItemPropertiesDataTypesItem.

    :param data_type: Data type name
    :type data_type: str
    """

    _attribute_map = {
        'data_type': {'key': 'dataType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityQueryItemPropertiesDataTypesItem, self).__init__(**kwargs)
        self.data_type = kwargs.get('data_type', None)


class EntityQueryKind1(Model):
    """Describes an Entity query resource with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the entity query. Possible values
     include: 'Expansion', 'Insight'
    :type kind: str or ~azure.mgmt.securityinsight.models.EntityQueryKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityQueryKind1, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)


class EntityTimelineParameters(Model):
    """The parameters required to execute s timeline operation on the given
    entity.

    All required parameters must be populated in order to send to Azure.

    :param kinds: Array of timeline Item kinds.
    :type kinds: list[str or
     ~azure.mgmt.securityinsight.models.EntityTimelineKind]
    :param start_time: Required. The start timeline date, so the results
     returned are after this date.
    :type start_time: datetime
    :param end_time: Required. The end timeline date, so the results returned
     are before this date.
    :type end_time: datetime
    :param number_of_bucket: The number of bucket for timeline queries
     aggregation.
    :type number_of_bucket: int
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'kinds': {'key': 'kinds', 'type': '[str]'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'number_of_bucket': {'key': 'numberOfBucket', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(EntityTimelineParameters, self).__init__(**kwargs)
        self.kinds = kwargs.get('kinds', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.number_of_bucket = kwargs.get('number_of_bucket', None)


class EntityTimelineResponse(Model):
    """The entity timeline result operation response.

    :param meta_data: The metadata from the timeline operation results.
    :type meta_data:
     ~azure.mgmt.securityinsight.models.TimelineResultsMetadata
    :param value: The timeline result values.
    :type value: list[~azure.mgmt.securityinsight.models.EntityTimelineItem]
    """

    _attribute_map = {
        'meta_data': {'key': 'metaData', 'type': 'TimelineResultsMetadata'},
        'value': {'key': 'value', 'type': '[EntityTimelineItem]'},
    }

    def __init__(self, **kwargs):
        super(EntityTimelineResponse, self).__init__(**kwargs)
        self.meta_data = kwargs.get('meta_data', None)
        self.value = kwargs.get('value', None)


class EventGroupingSettings(Model):
    """Event grouping settings property bag.

    :param aggregation_kind: Possible values include: 'SingleAlert',
     'AlertPerResult'
    :type aggregation_kind: str or
     ~azure.mgmt.securityinsight.models.EventGroupingAggregationKind
    """

    _attribute_map = {
        'aggregation_kind': {'key': 'aggregationKind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventGroupingSettings, self).__init__(**kwargs)
        self.aggregation_kind = kwargs.get('aggregation_kind', None)


class ExpansionEntityQuery(EntityQuery):
    """Represents Expansion entity query.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param data_sources: List of the data sources that are required to run the
     query
    :type data_sources: list[str]
    :param display_name: The query display name
    :type display_name: str
    :param input_entity_type: The type of the query's source entity. Possible
     values include: 'Account', 'Host', 'File', 'AzureResource',
     'CloudApplication', 'DNS', 'FileHash', 'IP', 'Malware', 'Process',
     'RegistryKey', 'RegistryValue', 'SecurityGroup', 'URL', 'IoTDevice',
     'SecurityAlert', 'HuntingBookmark', 'MailCluster', 'MailMessage',
     'Mailbox', 'SubmissionMail'
    :type input_entity_type: str or
     ~azure.mgmt.securityinsight.models.EntityType
    :param input_fields: List of the fields of the source entity that are
     required to run the query
    :type input_fields: list[str]
    :param output_entity_types: List of the desired output types to be
     constructed from the result
    :type output_entity_types: list[str or
     ~azure.mgmt.securityinsight.models.EntityType]
    :param query_template: The template query string to be parsed and
     formatted
    :type query_template: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_sources': {'key': 'properties.dataSources', 'type': '[str]'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'input_entity_type': {'key': 'properties.inputEntityType', 'type': 'str'},
        'input_fields': {'key': 'properties.inputFields', 'type': '[str]'},
        'output_entity_types': {'key': 'properties.outputEntityTypes', 'type': '[str]'},
        'query_template': {'key': 'properties.queryTemplate', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ExpansionEntityQuery, self).__init__(**kwargs)
        self.data_sources = kwargs.get('data_sources', None)
        self.display_name = kwargs.get('display_name', None)
        self.input_entity_type = kwargs.get('input_entity_type', None)
        self.input_fields = kwargs.get('input_fields', None)
        self.output_entity_types = kwargs.get('output_entity_types', None)
        self.query_template = kwargs.get('query_template', None)
        self.kind = 'Expansion'


class ExpansionResultAggregation(Model):
    """Information of a specific aggregation in the expansion result.

    All required parameters must be populated in order to send to Azure.

    :param aggregation_type: The common type of the aggregation. (for e.g.
     entity field name)
    :type aggregation_type: str
    :param count: Required. Total number of aggregations of the given kind
     (and aggregationType if given) in the expansion result.
    :type count: int
    :param display_name: The display name of the aggregation by type.
    :type display_name: str
    :param entity_kind: Required. The kind of the aggregated entity. Possible
     values include: 'Account', 'Host', 'File', 'AzureResource',
     'CloudApplication', 'DnsResolution', 'FileHash', 'Ip', 'Malware',
     'Process', 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'Url',
     'IoTDevice', 'SecurityAlert', 'Bookmark', 'MailCluster', 'MailMessage',
     'Mailbox', 'SubmissionMail'
    :type entity_kind: str or ~azure.mgmt.securityinsight.models.EntityKind
    """

    _validation = {
        'count': {'required': True},
        'entity_kind': {'required': True},
    }

    _attribute_map = {
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'entity_kind': {'key': 'entityKind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ExpansionResultAggregation, self).__init__(**kwargs)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.count = kwargs.get('count', None)
        self.display_name = kwargs.get('display_name', None)
        self.entity_kind = kwargs.get('entity_kind', None)


class ExpansionResultsMetadata(Model):
    """Expansion result metadata.

    :param aggregations: Information of the aggregated nodes in the expansion
     result.
    :type aggregations:
     list[~azure.mgmt.securityinsight.models.ExpansionResultAggregation]
    """

    _attribute_map = {
        'aggregations': {'key': 'aggregations', 'type': '[ExpansionResultAggregation]'},
    }

    def __init__(self, **kwargs):
        super(ExpansionResultsMetadata, self).__init__(**kwargs)
        self.aggregations = kwargs.get('aggregations', None)


class EyesOn(Settings):
    """Settings with single toggle.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar is_enabled: Determines whether the setting is enable or disabled.
    :vartype is_enabled: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'is_enabled': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(EyesOn, self).__init__(**kwargs)
        self.is_enabled = None
        self.kind = 'EyesOn'


class FileEntity(Entity):
    """Represents a file entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar directory: The full path to the file.
    :vartype directory: str
    :ivar file_hash_entity_ids: The file hash entity identifiers associated
     with this file
    :vartype file_hash_entity_ids: list[str]
    :ivar file_name: The file name without path (some alerts might not include
     path).
    :vartype file_name: str
    :ivar host_entity_id: The Host entity id which the file belongs to
    :vartype host_entity_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'directory': {'readonly': True},
        'file_hash_entity_ids': {'readonly': True},
        'file_name': {'readonly': True},
        'host_entity_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'directory': {'key': 'properties.directory', 'type': 'str'},
        'file_hash_entity_ids': {'key': 'properties.fileHashEntityIds', 'type': '[str]'},
        'file_name': {'key': 'properties.fileName', 'type': 'str'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(FileEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.directory = None
        self.file_hash_entity_ids = None
        self.file_name = None
        self.host_entity_id = None
        self.kind = 'File'


class FileHashEntity(Entity):
    """Represents a file hash entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar algorithm: The hash algorithm type. Possible values include:
     'Unknown', 'MD5', 'SHA1', 'SHA256', 'SHA256AC'
    :vartype algorithm: str or
     ~azure.mgmt.securityinsight.models.FileHashAlgorithm
    :ivar hash_value: The file hash value.
    :vartype hash_value: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'algorithm': {'readonly': True},
        'hash_value': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'algorithm': {'key': 'properties.algorithm', 'type': 'str'},
        'hash_value': {'key': 'properties.hashValue', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(FileHashEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.algorithm = None
        self.hash_value = None
        self.kind = 'FileHash'


class FusionAlertRule(AlertRule):
    """Represents Fusion alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rule_template_name: Required. The Name of the alert rule
     template used to create this rule.
    :type alert_rule_template_name: str
    :ivar description: The description of the alert rule.
    :vartype description: str
    :ivar display_name: The display name for alerts created by this alert
     rule.
    :vartype display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: datetime
    :ivar severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :vartype severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :ivar tactics: The tactics of the alert rule
    :vartype tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rule_template_name': {'required': True},
        'description': {'readonly': True},
        'display_name': {'readonly': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
        'severity': {'readonly': True},
        'tactics': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(FusionAlertRule, self).__init__(**kwargs)
        self.alert_rule_template_name = kwargs.get('alert_rule_template_name', None)
        self.description = None
        self.display_name = None
        self.enabled = kwargs.get('enabled', None)
        self.last_modified_utc = None
        self.severity = None
        self.tactics = None
        self.kind = 'Fusion'


class FusionAlertRuleTemplate(AlertRuleTemplate):
    """Represents Fusion alert rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: the number of alert rules
     that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar last_updated_date_utc: The last time that this alert rule template
     has been updated.
    :vartype last_updated_date_utc: datetime
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data sources for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include:
     'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param severity: Required. The severity for alerts created by this alert
     rule. Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'last_updated_date_utc': {'readonly': True},
        'created_date_utc': {'readonly': True},
        'severity': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'last_updated_date_utc': {'key': 'properties.lastUpdatedDateUTC', 'type': 'iso-8601'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(FusionAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = kwargs.get('alert_rules_created_by_template_count', None)
        self.last_updated_date_utc = None
        self.created_date_utc = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.required_data_connectors = kwargs.get('required_data_connectors', None)
        self.status = kwargs.get('status', None)
        self.severity = kwargs.get('severity', None)
        self.tactics = kwargs.get('tactics', None)
        self.kind = 'Fusion'


class GeoLocation(Model):
    """The geo-location context attached to the ip entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar asn: Autonomous System Number
    :vartype asn: int
    :ivar city: City name
    :vartype city: str
    :ivar country_code: The country code according to ISO 3166 format
    :vartype country_code: str
    :ivar country_name: Country name according to ISO 3166 Alpha 2: the
     lowercase of the English Short Name
    :vartype country_name: str
    :ivar latitude: The longitude of the identified location, expressed as a
     floating point number with range of -180 to 180, with positive numbers
     representing East and negative numbers representing West. Latitude and
     longitude are derived from the city or postal code.
    :vartype latitude: float
    :ivar longitude: The latitude of the identified location, expressed as a
     floating point number with range of - 90 to 90, with positive numbers
     representing North and negative numbers representing South. Latitude and
     longitude are derived from the city or postal code.
    :vartype longitude: float
    :ivar state: State name
    :vartype state: str
    """

    _validation = {
        'asn': {'readonly': True},
        'city': {'readonly': True},
        'country_code': {'readonly': True},
        'country_name': {'readonly': True},
        'latitude': {'readonly': True},
        'longitude': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'int'},
        'city': {'key': 'city', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'country_name': {'key': 'countryName', 'type': 'str'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GeoLocation, self).__init__(**kwargs)
        self.asn = None
        self.city = None
        self.country_code = None
        self.country_name = None
        self.latitude = None
        self.longitude = None
        self.state = None


class GetInsightsError(Model):
    """GetInsights Query Errors.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. the query kind. Default value: "Insight" .
    :vartype kind: str
    :param query_id: the query id
    :type query_id: str
    :param error_message: Required. the error message
    :type error_message: str
    """

    _validation = {
        'kind': {'required': True, 'constant': True},
        'error_message': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'query_id': {'key': 'queryId', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
    }

    kind = "Insight"

    def __init__(self, **kwargs):
        super(GetInsightsError, self).__init__(**kwargs)
        self.query_id = kwargs.get('query_id', None)
        self.error_message = kwargs.get('error_message', None)


class GetInsightsResultsMetadata(Model):
    """Get Insights result metadata.

    All required parameters must be populated in order to send to Azure.

    :param total_count: Required. the total items found for the insights
     request
    :type total_count: int
    :param errors: information about the failed queries
    :type errors: list[~azure.mgmt.securityinsight.models.GetInsightsError]
    """

    _validation = {
        'total_count': {'required': True},
    }

    _attribute_map = {
        'total_count': {'key': 'totalCount', 'type': 'int'},
        'errors': {'key': 'errors', 'type': '[GetInsightsError]'},
    }

    def __init__(self, **kwargs):
        super(GetInsightsResultsMetadata, self).__init__(**kwargs)
        self.total_count = kwargs.get('total_count', None)
        self.errors = kwargs.get('errors', None)


class GetQueriesResponse(Model):
    """Retrieve queries for entity result operation response.

    :param value: The query result values.
    :type value: list[~azure.mgmt.securityinsight.models.EntityQueryItem]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EntityQueryItem]'},
    }

    def __init__(self, **kwargs):
        super(GetQueriesResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class GroupingConfiguration(Model):
    """Grouping configuration property bag.

    All required parameters must be populated in order to send to Azure.

    :param enabled: Required. Grouping enabled
    :type enabled: bool
    :param reopen_closed_incident: Required. Re-open closed matching incidents
    :type reopen_closed_incident: bool
    :param lookback_duration: Required. Limit the group to alerts created
     within the lookback duration (in ISO 8601 duration format)
    :type lookback_duration: timedelta
    :param entities_matching_method: Required. Grouping matching method.
     Possible values include: 'All', 'None', 'Custom'
    :type entities_matching_method: str or
     ~azure.mgmt.securityinsight.models.EntitiesMatchingMethod
    :param group_by_entities: A list of entity types to group by (when
     entitiesMatchingMethod is Custom)
    :type group_by_entities: list[str or
     ~azure.mgmt.securityinsight.models.GroupingEntityType]
    """

    _validation = {
        'enabled': {'required': True},
        'reopen_closed_incident': {'required': True},
        'lookback_duration': {'required': True},
        'entities_matching_method': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'reopen_closed_incident': {'key': 'reopenClosedIncident', 'type': 'bool'},
        'lookback_duration': {'key': 'lookbackDuration', 'type': 'duration'},
        'entities_matching_method': {'key': 'entitiesMatchingMethod', 'type': 'str'},
        'group_by_entities': {'key': 'groupByEntities', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(GroupingConfiguration, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.reopen_closed_incident = kwargs.get('reopen_closed_incident', None)
        self.lookback_duration = kwargs.get('lookback_duration', None)
        self.entities_matching_method = kwargs.get('entities_matching_method', None)
        self.group_by_entities = kwargs.get('group_by_entities', None)


class HostEntity(Entity):
    """Represents a host entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar azure_id: The azure resource id of the VM.
    :vartype azure_id: str
    :ivar dns_domain: The DNS domain that this host belongs to. Should contain
     the compete DNS suffix for the domain
    :vartype dns_domain: str
    :ivar host_name: The hostname without the domain suffix.
    :vartype host_name: str
    :ivar is_domain_joined: Determines whether this host belongs to a domain.
    :vartype is_domain_joined: bool
    :ivar net_bios_name: The host name (pre-windows2000).
    :vartype net_bios_name: str
    :ivar nt_domain: The NT domain that this host belongs to.
    :vartype nt_domain: str
    :ivar oms_agent_id: The OMS agent id, if the host has OMS agent installed.
    :vartype oms_agent_id: str
    :param os_family: The operating system type. Possible values include:
     'Linux', 'Windows', 'Android', 'IOS', 'Unknown'
    :type os_family: str or ~azure.mgmt.securityinsight.models.OSFamily
    :ivar os_version: A free text representation of the operating system. This
     field is meant to hold specific versions the are more fine grained than
     OSFamily or future values not supported by OSFamily enumeration
    :vartype os_version: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'azure_id': {'readonly': True},
        'dns_domain': {'readonly': True},
        'host_name': {'readonly': True},
        'is_domain_joined': {'readonly': True},
        'net_bios_name': {'readonly': True},
        'nt_domain': {'readonly': True},
        'oms_agent_id': {'readonly': True},
        'os_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'azure_id': {'key': 'properties.azureID', 'type': 'str'},
        'dns_domain': {'key': 'properties.dnsDomain', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'is_domain_joined': {'key': 'properties.isDomainJoined', 'type': 'bool'},
        'net_bios_name': {'key': 'properties.netBiosName', 'type': 'str'},
        'nt_domain': {'key': 'properties.ntDomain', 'type': 'str'},
        'oms_agent_id': {'key': 'properties.omsAgentID', 'type': 'str'},
        'os_family': {'key': 'properties.osFamily', 'type': 'OSFamily'},
        'os_version': {'key': 'properties.osVersion', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(HostEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.azure_id = None
        self.dns_domain = None
        self.host_name = None
        self.is_domain_joined = None
        self.net_bios_name = None
        self.nt_domain = None
        self.oms_agent_id = None
        self.os_family = kwargs.get('os_family', None)
        self.os_version = None
        self.kind = 'Host'


class HuntingBookmark(Entity):
    """Represents a Hunting bookmark entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :param created: The time the bookmark was created
    :type created: datetime
    :param created_by: Describes a user that created the bookmark
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param display_name: Required. The display name of the bookmark
    :type display_name: str
    :param event_time: The time of the event
    :type event_time: datetime
    :param labels: List of labels relevant to this bookmark
    :type labels: list[str]
    :param notes: The notes of the bookmark
    :type notes: str
    :param query: Required. The query of the bookmark.
    :type query: str
    :param query_result: The query result of the bookmark.
    :type query_result: str
    :param updated: The last time the bookmark was updated
    :type updated: datetime
    :param updated_by: Describes a user that updated the bookmark
    :type updated_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param incident_info: Describes an incident that relates to bookmark
    :type incident_info: ~azure.mgmt.securityinsight.models.IncidentInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'display_name': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'UserInfo'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'event_time': {'key': 'properties.eventTime', 'type': 'iso-8601'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_result': {'key': 'properties.queryResult', 'type': 'str'},
        'updated': {'key': 'properties.updated', 'type': 'iso-8601'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'UserInfo'},
        'incident_info': {'key': 'properties.incidentInfo', 'type': 'IncidentInfo'},
    }

    def __init__(self, **kwargs):
        super(HuntingBookmark, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.created = kwargs.get('created', None)
        self.created_by = kwargs.get('created_by', None)
        self.display_name = kwargs.get('display_name', None)
        self.event_time = kwargs.get('event_time', None)
        self.labels = kwargs.get('labels', None)
        self.notes = kwargs.get('notes', None)
        self.query = kwargs.get('query', None)
        self.query_result = kwargs.get('query_result', None)
        self.updated = kwargs.get('updated', None)
        self.updated_by = kwargs.get('updated_by', None)
        self.incident_info = kwargs.get('incident_info', None)
        self.kind = 'Bookmark'


class Incident(ResourceWithEtag):
    """Represents an incident in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :ivar additional_data: Additional data on the incident
    :vartype additional_data:
     ~azure.mgmt.securityinsight.models.IncidentAdditionalData
    :param classification: The reason the incident was closed. Possible values
     include: 'Undetermined', 'TruePositive', 'BenignPositive', 'FalsePositive'
    :type classification: str or
     ~azure.mgmt.securityinsight.models.IncidentClassification
    :param classification_comment: Describes the reason the incident was
     closed
    :type classification_comment: str
    :param classification_reason: The classification reason the incident was
     closed with. Possible values include: 'SuspiciousActivity',
     'SuspiciousButExpected', 'IncorrectAlertLogic', 'InaccurateData'
    :type classification_reason: str or
     ~azure.mgmt.securityinsight.models.IncidentClassificationReason
    :ivar created_time_utc: The time the incident was created
    :vartype created_time_utc: datetime
    :param description: The description of the incident
    :type description: str
    :param first_activity_time_utc: The time of the first activity in the
     incident
    :type first_activity_time_utc: datetime
    :ivar incident_url: The deep-link url to the incident in Azure portal
    :vartype incident_url: str
    :ivar incident_number: A sequential number
    :vartype incident_number: int
    :param labels: List of labels relevant to this incident
    :type labels: list[~azure.mgmt.securityinsight.models.IncidentLabel]
    :param last_activity_time_utc: The time of the last activity in the
     incident
    :type last_activity_time_utc: datetime
    :ivar last_modified_time_utc: The last time the incident was updated
    :vartype last_modified_time_utc: datetime
    :param owner: Describes a user that the incident is assigned to
    :type owner: ~azure.mgmt.securityinsight.models.IncidentOwnerInfo
    :ivar related_analytic_rule_ids: List of resource ids of Analytic rules
     related to the incident
    :vartype related_analytic_rule_ids: list[str]
    :param severity: Required. The severity of the incident. Possible values
     include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.IncidentSeverity
    :param status: Required. The status of the incident. Possible values
     include: 'New', 'Active', 'Closed'
    :type status: str or ~azure.mgmt.securityinsight.models.IncidentStatus
    :param title: Required. The title of the incident
    :type title: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'additional_data': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'incident_url': {'readonly': True},
        'incident_number': {'readonly': True},
        'last_modified_time_utc': {'readonly': True},
        'related_analytic_rule_ids': {'readonly': True},
        'severity': {'required': True},
        'status': {'required': True},
        'title': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': 'IncidentAdditionalData'},
        'classification': {'key': 'properties.classification', 'type': 'str'},
        'classification_comment': {'key': 'properties.classificationComment', 'type': 'str'},
        'classification_reason': {'key': 'properties.classificationReason', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'first_activity_time_utc': {'key': 'properties.firstActivityTimeUtc', 'type': 'iso-8601'},
        'incident_url': {'key': 'properties.incidentUrl', 'type': 'str'},
        'incident_number': {'key': 'properties.incidentNumber', 'type': 'int'},
        'labels': {'key': 'properties.labels', 'type': '[IncidentLabel]'},
        'last_activity_time_utc': {'key': 'properties.lastActivityTimeUtc', 'type': 'iso-8601'},
        'last_modified_time_utc': {'key': 'properties.lastModifiedTimeUtc', 'type': 'iso-8601'},
        'owner': {'key': 'properties.owner', 'type': 'IncidentOwnerInfo'},
        'related_analytic_rule_ids': {'key': 'properties.relatedAnalyticRuleIds', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Incident, self).__init__(**kwargs)
        self.additional_data = None
        self.classification = kwargs.get('classification', None)
        self.classification_comment = kwargs.get('classification_comment', None)
        self.classification_reason = kwargs.get('classification_reason', None)
        self.created_time_utc = None
        self.description = kwargs.get('description', None)
        self.first_activity_time_utc = kwargs.get('first_activity_time_utc', None)
        self.incident_url = None
        self.incident_number = None
        self.labels = kwargs.get('labels', None)
        self.last_activity_time_utc = kwargs.get('last_activity_time_utc', None)
        self.last_modified_time_utc = None
        self.owner = kwargs.get('owner', None)
        self.related_analytic_rule_ids = None
        self.severity = kwargs.get('severity', None)
        self.status = kwargs.get('status', None)
        self.title = kwargs.get('title', None)


class IncidentAdditionalData(Model):
    """Incident additional data property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar alerts_count: The number of alerts in the incident
    :vartype alerts_count: int
    :ivar bookmarks_count: The number of bookmarks in the incident
    :vartype bookmarks_count: int
    :ivar comments_count: The number of comments in the incident
    :vartype comments_count: int
    :ivar alert_product_names: List of product names of alerts in the incident
    :vartype alert_product_names: list[str]
    :ivar tactics: The tactics associated with incident
    :vartype tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'alerts_count': {'readonly': True},
        'bookmarks_count': {'readonly': True},
        'comments_count': {'readonly': True},
        'alert_product_names': {'readonly': True},
        'tactics': {'readonly': True},
    }

    _attribute_map = {
        'alerts_count': {'key': 'alertsCount', 'type': 'int'},
        'bookmarks_count': {'key': 'bookmarksCount', 'type': 'int'},
        'comments_count': {'key': 'commentsCount', 'type': 'int'},
        'alert_product_names': {'key': 'alertProductNames', 'type': '[str]'},
        'tactics': {'key': 'tactics', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(IncidentAdditionalData, self).__init__(**kwargs)
        self.alerts_count = None
        self.bookmarks_count = None
        self.comments_count = None
        self.alert_product_names = None
        self.tactics = None


class IncidentAlertList(Model):
    """List of incident alerts.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Array of incident alerts.
    :type value: list[~azure.mgmt.securityinsight.models.SecurityAlert]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityAlert]'},
    }

    def __init__(self, **kwargs):
        super(IncidentAlertList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class IncidentBookmarkList(Model):
    """List of incident bookmarks.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Array of incident bookmarks.
    :type value: list[~azure.mgmt.securityinsight.models.HuntingBookmark]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HuntingBookmark]'},
    }

    def __init__(self, **kwargs):
        super(IncidentBookmarkList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class IncidentComment(ResourceWithEtag):
    """Represents an incident comment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :ivar created_time_utc: The time the comment was created
    :vartype created_time_utc: datetime
    :ivar last_modified_time_utc: The time the comment was updated
    :vartype last_modified_time_utc: datetime
    :param message: Required. The comment message
    :type message: str
    :ivar author: Describes the client that created the comment
    :vartype author: ~azure.mgmt.securityinsight.models.ClientInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'last_modified_time_utc': {'readonly': True},
        'message': {'required': True},
        'author': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'last_modified_time_utc': {'key': 'properties.lastModifiedTimeUtc', 'type': 'iso-8601'},
        'message': {'key': 'properties.message', 'type': 'str'},
        'author': {'key': 'properties.author', 'type': 'ClientInfo'},
    }

    def __init__(self, **kwargs):
        super(IncidentComment, self).__init__(**kwargs)
        self.created_time_utc = None
        self.last_modified_time_utc = None
        self.message = kwargs.get('message', None)
        self.author = None


class IncidentConfiguration(Model):
    """Incident Configuration property bag.

    All required parameters must be populated in order to send to Azure.

    :param create_incident: Required. Create incidents from alerts triggered
     by this analytics rule
    :type create_incident: bool
    :param grouping_configuration: Set how the alerts that are triggered by
     this analytics rule, are grouped into incidents
    :type grouping_configuration:
     ~azure.mgmt.securityinsight.models.GroupingConfiguration
    """

    _validation = {
        'create_incident': {'required': True},
    }

    _attribute_map = {
        'create_incident': {'key': 'createIncident', 'type': 'bool'},
        'grouping_configuration': {'key': 'groupingConfiguration', 'type': 'GroupingConfiguration'},
    }

    def __init__(self, **kwargs):
        super(IncidentConfiguration, self).__init__(**kwargs)
        self.create_incident = kwargs.get('create_incident', None)
        self.grouping_configuration = kwargs.get('grouping_configuration', None)


class IncidentEntitiesResponse(Model):
    """The incident related entities response.

    :param entities: Array of the incident related entities.
    :type entities: list[~azure.mgmt.securityinsight.models.Entity]
    :param meta_data: The metadata from the incident related entities results.
    :type meta_data:
     list[~azure.mgmt.securityinsight.models.IncidentEntitiesResultsMetadata]
    """

    _attribute_map = {
        'entities': {'key': 'entities', 'type': '[Entity]'},
        'meta_data': {'key': 'metaData', 'type': '[IncidentEntitiesResultsMetadata]'},
    }

    def __init__(self, **kwargs):
        super(IncidentEntitiesResponse, self).__init__(**kwargs)
        self.entities = kwargs.get('entities', None)
        self.meta_data = kwargs.get('meta_data', None)


class IncidentEntitiesResultsMetadata(Model):
    """Information of a specific aggregation in the incident related entities
    result.

    All required parameters must be populated in order to send to Azure.

    :param count: Required. Total number of aggregations of the given kind in
     the incident related entities result.
    :type count: int
    :param entity_kind: Required. The kind of the aggregated entity. Possible
     values include: 'Account', 'Host', 'File', 'AzureResource',
     'CloudApplication', 'DnsResolution', 'FileHash', 'Ip', 'Malware',
     'Process', 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'Url',
     'IoTDevice', 'SecurityAlert', 'Bookmark', 'MailCluster', 'MailMessage',
     'Mailbox', 'SubmissionMail'
    :type entity_kind: str or ~azure.mgmt.securityinsight.models.EntityKind
    """

    _validation = {
        'count': {'required': True},
        'entity_kind': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'entity_kind': {'key': 'entityKind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IncidentEntitiesResultsMetadata, self).__init__(**kwargs)
        self.count = kwargs.get('count', None)
        self.entity_kind = kwargs.get('entity_kind', None)


class IncidentInfo(Model):
    """Describes related incident information for the bookmark.

    All required parameters must be populated in order to send to Azure.

    :param incident_id: Required. Incident Id
    :type incident_id: str
    :param severity: Required. The severity of the incident. Possible values
     include: 'Critical', 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.CaseSeverity
    :param title: Required. The title of the incident
    :type title: str
    :param relation_name: Required. Relation Name
    :type relation_name: str
    """

    _validation = {
        'incident_id': {'required': True},
        'severity': {'required': True},
        'title': {'required': True},
        'relation_name': {'required': True},
    }

    _attribute_map = {
        'incident_id': {'key': 'incidentId', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'relation_name': {'key': 'relationName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IncidentInfo, self).__init__(**kwargs)
        self.incident_id = kwargs.get('incident_id', None)
        self.severity = kwargs.get('severity', None)
        self.title = kwargs.get('title', None)
        self.relation_name = kwargs.get('relation_name', None)


class IncidentLabel(Model):
    """Represents an incident label.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param label_name: Required. The name of the label
    :type label_name: str
    :ivar label_type: The type of the label. Possible values include: 'User',
     'System'
    :vartype label_type: str or
     ~azure.mgmt.securityinsight.models.IncidentLabelType
    """

    _validation = {
        'label_name': {'required': True},
        'label_type': {'readonly': True},
    }

    _attribute_map = {
        'label_name': {'key': 'labelName', 'type': 'str'},
        'label_type': {'key': 'labelType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IncidentLabel, self).__init__(**kwargs)
        self.label_name = kwargs.get('label_name', None)
        self.label_type = None


class IncidentOwnerInfo(Model):
    """Information on the user an incident is assigned to.

    :param email: The email of the user the incident is assigned to.
    :type email: str
    :param assigned_to: The name of the user the incident is assigned to.
    :type assigned_to: str
    :param object_id: The object id of the user the incident is assigned to.
    :type object_id: str
    :param user_principal_name: The user principal name of the user the
     incident is assigned to.
    :type user_principal_name: str
    """

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IncidentOwnerInfo, self).__init__(**kwargs)
        self.email = kwargs.get('email', None)
        self.assigned_to = kwargs.get('assigned_to', None)
        self.object_id = kwargs.get('object_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class InsightQueryItem(EntityQueryItem):
    """Represents Insight Query.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Query Template ARM ID
    :vartype id: str
    :param name: Query Template ARM Name
    :type name: str
    :param type: ARM Type
    :type type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param properties: Properties bag for InsightQueryItem
    :type properties:
     ~azure.mgmt.securityinsight.models.InsightQueryItemProperties
    """

    _validation = {
        'id': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'InsightQueryItemProperties'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItem, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.kind = 'Insight'


class InsightQueryItemProperties(EntityQueryItemProperties):
    """Represents Insight Query.

    :param data_types: Data types for template
    :type data_types:
     list[~azure.mgmt.securityinsight.models.EntityQueryItemPropertiesDataTypesItem]
    :param input_entity_type: The type of the entity. Possible values include:
     'Account', 'Host', 'File', 'AzureResource', 'CloudApplication', 'DNS',
     'FileHash', 'IP', 'Malware', 'Process', 'RegistryKey', 'RegistryValue',
     'SecurityGroup', 'URL', 'IoTDevice', 'SecurityAlert', 'HuntingBookmark',
     'MailCluster', 'MailMessage', 'Mailbox', 'SubmissionMail'
    :type input_entity_type: str or
     ~azure.mgmt.securityinsight.models.EntityType
    :param required_input_fields_sets: Data types for template
    :type required_input_fields_sets: list[list[str]]
    :param entities_filter: The query applied only to entities matching to all
     filters
    :type entities_filter: object
    :param display_name: The insight display name.
    :type display_name: str
    :param description: The insight description.
    :type description: str
    :param base_query: The base query of the insight.
    :type base_query: str
    :param table_query: The insight table query.
    :type table_query:
     ~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesTableQuery
    :param chart_query: The insight chart query.
    :type chart_query: object
    :param additional_query: The activity query definitions.
    :type additional_query:
     ~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesAdditionalQuery
    :param default_time_range: The insight chart query.
    :type default_time_range:
     ~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesDefaultTimeRange
    :param reference_time_range: The insight chart query.
    :type reference_time_range:
     ~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesReferenceTimeRange
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': '[EntityQueryItemPropertiesDataTypesItem]'},
        'input_entity_type': {'key': 'inputEntityType', 'type': 'str'},
        'required_input_fields_sets': {'key': 'requiredInputFieldsSets', 'type': '[[str]]'},
        'entities_filter': {'key': 'entitiesFilter', 'type': 'object'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'base_query': {'key': 'baseQuery', 'type': 'str'},
        'table_query': {'key': 'tableQuery', 'type': 'InsightQueryItemPropertiesTableQuery'},
        'chart_query': {'key': 'chartQuery', 'type': 'object'},
        'additional_query': {'key': 'additionalQuery', 'type': 'InsightQueryItemPropertiesAdditionalQuery'},
        'default_time_range': {'key': 'defaultTimeRange', 'type': 'InsightQueryItemPropertiesDefaultTimeRange'},
        'reference_time_range': {'key': 'referenceTimeRange', 'type': 'InsightQueryItemPropertiesReferenceTimeRange'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemProperties, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.base_query = kwargs.get('base_query', None)
        self.table_query = kwargs.get('table_query', None)
        self.chart_query = kwargs.get('chart_query', None)
        self.additional_query = kwargs.get('additional_query', None)
        self.default_time_range = kwargs.get('default_time_range', None)
        self.reference_time_range = kwargs.get('reference_time_range', None)


class InsightQueryItemPropertiesAdditionalQuery(Model):
    """The activity query definitions.

    :param query: The insight query.
    :type query: str
    :param text: The insight text.
    :type text: str
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesAdditionalQuery, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.text = kwargs.get('text', None)


class InsightQueryItemPropertiesDefaultTimeRange(Model):
    """The insight chart query.

    :param before_range: The padding for the start time of the query.
    :type before_range: str
    :param after_range: The padding for the end time of the query.
    :type after_range: str
    """

    _attribute_map = {
        'before_range': {'key': 'beforeRange', 'type': 'str'},
        'after_range': {'key': 'afterRange', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesDefaultTimeRange, self).__init__(**kwargs)
        self.before_range = kwargs.get('before_range', None)
        self.after_range = kwargs.get('after_range', None)


class InsightQueryItemPropertiesReferenceTimeRange(Model):
    """The insight chart query.

    :param before_range: Additional query time for looking back.
    :type before_range: str
    """

    _attribute_map = {
        'before_range': {'key': 'beforeRange', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesReferenceTimeRange, self).__init__(**kwargs)
        self.before_range = kwargs.get('before_range', None)


class InsightQueryItemPropertiesTableQuery(Model):
    """The insight table query.

    :param columns_definitions: List of insight column definitions.
    :type columns_definitions:
     list[~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem]
    :param queries_definitions: List of insight queries definitions.
    :type queries_definitions:
     list[~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem]
    """

    _attribute_map = {
        'columns_definitions': {'key': 'columnsDefinitions', 'type': '[InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem]'},
        'queries_definitions': {'key': 'queriesDefinitions', 'type': '[InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem]'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesTableQuery, self).__init__(**kwargs)
        self.columns_definitions = kwargs.get('columns_definitions', None)
        self.queries_definitions = kwargs.get('queries_definitions', None)


class InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem(Model):
    """InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem.

    :param header: Insight column header.
    :type header: str
    :param output_type: Insights Column type. Possible values include:
     'Number', 'String', 'Date', 'Entity'
    :type output_type: str or ~azure.mgmt.securityinsight.models.enum
    :param support_deep_link: Is query supports deep-link.
    :type support_deep_link: bool
    """

    _attribute_map = {
        'header': {'key': 'header', 'type': 'str'},
        'output_type': {'key': 'outputType', 'type': 'str'},
        'support_deep_link': {'key': 'supportDeepLink', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem, self).__init__(**kwargs)
        self.header = kwargs.get('header', None)
        self.output_type = kwargs.get('output_type', None)
        self.support_deep_link = kwargs.get('support_deep_link', None)


class InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem(Model):
    """InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem.

    :param filter: Insight column header.
    :type filter: str
    :param summarize: Insight column header.
    :type summarize: str
    :param project: Insight column header.
    :type project: str
    :param link_columns_definitions: Insight column header.
    :type link_columns_definitions:
     list[~azure.mgmt.securityinsight.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem]
    """

    _attribute_map = {
        'filter': {'key': 'filter', 'type': 'str'},
        'summarize': {'key': 'summarize', 'type': 'str'},
        'project': {'key': 'project', 'type': 'str'},
        'link_columns_definitions': {'key': 'linkColumnsDefinitions', 'type': '[InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem]'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem, self).__init__(**kwargs)
        self.filter = kwargs.get('filter', None)
        self.summarize = kwargs.get('summarize', None)
        self.project = kwargs.get('project', None)
        self.link_columns_definitions = kwargs.get('link_columns_definitions', None)


class InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem(Model):
    """InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem.

    :param projected_name: Insight Link Definition Projected Name.
    :type projected_name: str
    :param query: Insight Link Definition Query.
    :type query: str
    """

    _attribute_map = {
        'projected_name': {'key': 'projectedName', 'type': 'str'},
        'query': {'key': 'Query', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem, self).__init__(**kwargs)
        self.projected_name = kwargs.get('projected_name', None)
        self.query = kwargs.get('query', None)


class InsightsTableResult(Model):
    """Query results for table insights query.

    :param columns: Columns Metadata of the table
    :type columns:
     list[~azure.mgmt.securityinsight.models.InsightsTableResultColumnsItem]
    :param rows: Rows data of the table
    :type rows: list[list[str]]
    """

    _attribute_map = {
        'columns': {'key': 'columns', 'type': '[InsightsTableResultColumnsItem]'},
        'rows': {'key': 'rows', 'type': '[[str]]'},
    }

    def __init__(self, **kwargs):
        super(InsightsTableResult, self).__init__(**kwargs)
        self.columns = kwargs.get('columns', None)
        self.rows = kwargs.get('rows', None)


class InsightsTableResultColumnsItem(Model):
    """InsightsTableResultColumnsItem.

    :param type: the type of the colum
    :type type: str
    :param name: the name of the colum
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InsightsTableResultColumnsItem, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class IoTDeviceEntity(Entity):
    """Represents an IoT device entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar device_id: The ID of the IoT Device in the IoT Hub
    :vartype device_id: str
    :ivar device_name: The friendly name of the device
    :vartype device_name: str
    :ivar source: The source of the device
    :vartype source: str
    :ivar iot_security_agent_id: The ID of the security agent running on the
     device
    :vartype iot_security_agent_id: str
    :ivar device_type: The type of the device
    :vartype device_type: str
    :ivar vendor: The vendor of the device
    :vartype vendor: str
    :ivar edge_id: The ID of the edge device
    :vartype edge_id: str
    :ivar mac_address: The MAC address of the device
    :vartype mac_address: str
    :ivar model: The model of the device
    :vartype model: str
    :ivar serial_number: The serial number of the device
    :vartype serial_number: str
    :ivar firmware_version: The firmware version of the device
    :vartype firmware_version: str
    :ivar operating_system: The operating system of the device
    :vartype operating_system: str
    :ivar iot_hub_entity_id: The AzureResource entity id of the IoT Hub
    :vartype iot_hub_entity_id: str
    :ivar host_entity_id: The Host entity id of this device
    :vartype host_entity_id: str
    :ivar ip_address_entity_id: The IP entity if of this device
    :vartype ip_address_entity_id: str
    :ivar threat_intelligence: A list of TI contexts attached to the IoTDevice
     entity.
    :vartype threat_intelligence:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligence]
    :ivar protocols: A list of protocols of the IoTDevice entity.
    :vartype protocols: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'device_id': {'readonly': True},
        'device_name': {'readonly': True},
        'source': {'readonly': True},
        'iot_security_agent_id': {'readonly': True},
        'device_type': {'readonly': True},
        'vendor': {'readonly': True},
        'edge_id': {'readonly': True},
        'mac_address': {'readonly': True},
        'model': {'readonly': True},
        'serial_number': {'readonly': True},
        'firmware_version': {'readonly': True},
        'operating_system': {'readonly': True},
        'iot_hub_entity_id': {'readonly': True},
        'host_entity_id': {'readonly': True},
        'ip_address_entity_id': {'readonly': True},
        'threat_intelligence': {'readonly': True},
        'protocols': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'device_id': {'key': 'properties.deviceId', 'type': 'str'},
        'device_name': {'key': 'properties.deviceName', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'iot_security_agent_id': {'key': 'properties.iotSecurityAgentId', 'type': 'str'},
        'device_type': {'key': 'properties.deviceType', 'type': 'str'},
        'vendor': {'key': 'properties.vendor', 'type': 'str'},
        'edge_id': {'key': 'properties.edgeId', 'type': 'str'},
        'mac_address': {'key': 'properties.macAddress', 'type': 'str'},
        'model': {'key': 'properties.model', 'type': 'str'},
        'serial_number': {'key': 'properties.serialNumber', 'type': 'str'},
        'firmware_version': {'key': 'properties.firmwareVersion', 'type': 'str'},
        'operating_system': {'key': 'properties.operatingSystem', 'type': 'str'},
        'iot_hub_entity_id': {'key': 'properties.iotHubEntityId', 'type': 'str'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
        'ip_address_entity_id': {'key': 'properties.ipAddressEntityId', 'type': 'str'},
        'threat_intelligence': {'key': 'properties.threatIntelligence', 'type': '[ThreatIntelligence]'},
        'protocols': {'key': 'properties.protocols', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(IoTDeviceEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.device_id = None
        self.device_name = None
        self.source = None
        self.iot_security_agent_id = None
        self.device_type = None
        self.vendor = None
        self.edge_id = None
        self.mac_address = None
        self.model = None
        self.serial_number = None
        self.firmware_version = None
        self.operating_system = None
        self.iot_hub_entity_id = None
        self.host_entity_id = None
        self.ip_address_entity_id = None
        self.threat_intelligence = None
        self.protocols = None
        self.kind = 'IoTDevice'


class IpEntity(Entity):
    """Represents an ip entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar address: The IP address as string, e.g. 127.0.0.1 (either in Ipv4 or
     Ipv6)
    :vartype address: str
    :param location: The geo-location context attached to the ip entity
    :type location: ~azure.mgmt.securityinsight.models.GeoLocation
    :ivar threat_intelligence: A list of TI contexts attached to the ip
     entity.
    :vartype threat_intelligence:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligence]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'address': {'readonly': True},
        'threat_intelligence': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'address': {'key': 'properties.address', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'GeoLocation'},
        'threat_intelligence': {'key': 'properties.threatIntelligence', 'type': '[ThreatIntelligence]'},
    }

    def __init__(self, **kwargs):
        super(IpEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.address = None
        self.location = kwargs.get('location', None)
        self.threat_intelligence = None
        self.kind = 'Ip'


class MailboxEntity(Entity):
    """Represents a mailbox entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar mailbox_primary_address: The mailbox's primary address
    :vartype mailbox_primary_address: str
    :ivar display_name: The mailbox's display name
    :vartype display_name: str
    :ivar upn: The mailbox's UPN
    :vartype upn: str
    :ivar external_directory_object_id: The AzureAD identifier of mailbox.
     Similar to AadUserId in account entity but this property is specific to
     mailbox object on office side
    :vartype external_directory_object_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'mailbox_primary_address': {'readonly': True},
        'display_name': {'readonly': True},
        'upn': {'readonly': True},
        'external_directory_object_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'mailbox_primary_address': {'key': 'properties.mailboxPrimaryAddress', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'upn': {'key': 'properties.upn', 'type': 'str'},
        'external_directory_object_id': {'key': 'properties.externalDirectoryObjectId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MailboxEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.mailbox_primary_address = None
        self.display_name = None
        self.upn = None
        self.external_directory_object_id = None
        self.kind = 'Mailbox'


class MailClusterEntity(Entity):
    """Represents a mail cluster entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar network_message_ids: The mail message IDs that are part of the mail
     cluster
    :vartype network_message_ids: list[str]
    :ivar count_by_delivery_status: Count of mail messages by DeliveryStatus
     string representation
    :vartype count_by_delivery_status: object
    :ivar count_by_threat_type: Count of mail messages by ThreatType string
     representation
    :vartype count_by_threat_type: object
    :ivar count_by_protection_status: Count of mail messages by
     ProtectionStatus string representation
    :vartype count_by_protection_status: object
    :ivar threats: The threats of mail messages that are part of the mail
     cluster
    :vartype threats: list[str]
    :ivar query: The query that was used to identify the messages of the mail
     cluster
    :vartype query: str
    :ivar query_time: The query time
    :vartype query_time: datetime
    :ivar mail_count: The number of mail messages that are part of the mail
     cluster
    :vartype mail_count: int
    :ivar is_volume_anomaly: Is this a volume anomaly mail cluster
    :vartype is_volume_anomaly: bool
    :ivar source: The source of the mail cluster (default is 'O365 ATP')
    :vartype source: str
    :ivar cluster_source_identifier: The id of the cluster source
    :vartype cluster_source_identifier: str
    :ivar cluster_source_type: The type of the cluster source
    :vartype cluster_source_type: str
    :ivar cluster_query_start_time: The cluster query start time
    :vartype cluster_query_start_time: datetime
    :ivar cluster_query_end_time: The cluster query end time
    :vartype cluster_query_end_time: datetime
    :ivar cluster_group: The cluster group
    :vartype cluster_group: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'network_message_ids': {'readonly': True},
        'count_by_delivery_status': {'readonly': True},
        'count_by_threat_type': {'readonly': True},
        'count_by_protection_status': {'readonly': True},
        'threats': {'readonly': True},
        'query': {'readonly': True},
        'query_time': {'readonly': True},
        'mail_count': {'readonly': True},
        'is_volume_anomaly': {'readonly': True},
        'source': {'readonly': True},
        'cluster_source_identifier': {'readonly': True},
        'cluster_source_type': {'readonly': True},
        'cluster_query_start_time': {'readonly': True},
        'cluster_query_end_time': {'readonly': True},
        'cluster_group': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'network_message_ids': {'key': 'properties.networkMessageIds', 'type': '[str]'},
        'count_by_delivery_status': {'key': 'properties.countByDeliveryStatus', 'type': 'object'},
        'count_by_threat_type': {'key': 'properties.countByThreatType', 'type': 'object'},
        'count_by_protection_status': {'key': 'properties.countByProtectionStatus', 'type': 'object'},
        'threats': {'key': 'properties.threats', 'type': '[str]'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_time': {'key': 'properties.queryTime', 'type': 'iso-8601'},
        'mail_count': {'key': 'properties.mailCount', 'type': 'int'},
        'is_volume_anomaly': {'key': 'properties.isVolumeAnomaly', 'type': 'bool'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'cluster_source_identifier': {'key': 'properties.clusterSourceIdentifier', 'type': 'str'},
        'cluster_source_type': {'key': 'properties.clusterSourceType', 'type': 'str'},
        'cluster_query_start_time': {'key': 'properties.clusterQueryStartTime', 'type': 'iso-8601'},
        'cluster_query_end_time': {'key': 'properties.clusterQueryEndTime', 'type': 'iso-8601'},
        'cluster_group': {'key': 'properties.clusterGroup', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MailClusterEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.network_message_ids = None
        self.count_by_delivery_status = None
        self.count_by_threat_type = None
        self.count_by_protection_status = None
        self.threats = None
        self.query = None
        self.query_time = None
        self.mail_count = None
        self.is_volume_anomaly = None
        self.source = None
        self.cluster_source_identifier = None
        self.cluster_source_type = None
        self.cluster_query_start_time = None
        self.cluster_query_end_time = None
        self.cluster_group = None
        self.kind = 'MailCluster'


class MailMessageEntity(Entity):
    """Represents a mail message entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar file_entity_ids: The File entity ids of this mail message's
     attachments
    :vartype file_entity_ids: list[str]
    :ivar recipient: The recipient of this mail message. Note that in case of
     multiple recipients the mail message is forked and each copy has one
     recipient
    :vartype recipient: str
    :ivar urls: The Urls contained in this mail message
    :vartype urls: str
    :ivar threats: The threats of this mail message
    :vartype threats: list[str]
    :ivar p1_sender: The p1 sender's email address
    :vartype p1_sender: str
    :ivar p1_sender_display_name: The p1 sender's display name
    :vartype p1_sender_display_name: str
    :ivar p1_sender_domain: The p1 sender's domain
    :vartype p1_sender_domain: str
    :ivar sender_ip: The sender's IP address
    :vartype sender_ip: str
    :ivar p2_sender: The p2 sender's email address
    :vartype p2_sender: str
    :ivar p2_sender_display_name: The p2 sender's display name
    :vartype p2_sender_display_name: str
    :ivar p2_sender_domain: The p2 sender's domain
    :vartype p2_sender_domain: str
    :ivar received_date: The received date of this message
    :vartype received_date: datetime
    :ivar network_message_id: The network message id of this mail message
    :vartype network_message_id: str
    :ivar internet_message_id: The internet message id of this mail message
    :vartype internet_message_id: str
    :ivar subject: The subject of this mail message
    :vartype subject: str
    :ivar language: The language of this mail message
    :vartype language: str
    :ivar threat_detection_methods: The threat detection methods
    :vartype threat_detection_methods: str
    :param body_fingerprint_bin1: The bodyFingerprintBin1
    :type body_fingerprint_bin1: int
    :param body_fingerprint_bin2: The bodyFingerprintBin2
    :type body_fingerprint_bin2: int
    :param body_fingerprint_bin3: The bodyFingerprintBin3
    :type body_fingerprint_bin3: int
    :param body_fingerprint_bin4: The bodyFingerprintBin4
    :type body_fingerprint_bin4: int
    :param body_fingerprint_bin5: The bodyFingerprintBin5
    :type body_fingerprint_bin5: int
    :param antispam_direction: The directionality of this mail message.
     Possible values include: 'Unknown', 'Inbound', 'Outbound', 'Intraorg'
    :type antispam_direction: str or
     ~azure.mgmt.securityinsight.models.AntispamMailDirection
    :param delivery_action: The delivery action of this mail message like
     Delivered, Blocked, Replaced etc. Possible values include: 'Unknown',
     'DeliveredAsSpam', 'Delivered', 'Blocked', 'Replaced'
    :type delivery_action: str or
     ~azure.mgmt.securityinsight.models.DeliveryAction
    :param delivery_location: The delivery location of this mail message like
     Inbox, JunkFolder etc. Possible values include: 'Unknown', 'Inbox',
     'JunkFolder', 'DeletedFolder', 'Quarantine', 'External', 'Failed',
     'Dropped', 'Forwarded'
    :type delivery_location: str or
     ~azure.mgmt.securityinsight.models.DeliveryLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'file_entity_ids': {'readonly': True},
        'recipient': {'readonly': True},
        'urls': {'readonly': True},
        'threats': {'readonly': True},
        'p1_sender': {'readonly': True},
        'p1_sender_display_name': {'readonly': True},
        'p1_sender_domain': {'readonly': True},
        'sender_ip': {'readonly': True},
        'p2_sender': {'readonly': True},
        'p2_sender_display_name': {'readonly': True},
        'p2_sender_domain': {'readonly': True},
        'received_date': {'readonly': True},
        'network_message_id': {'readonly': True},
        'internet_message_id': {'readonly': True},
        'subject': {'readonly': True},
        'language': {'readonly': True},
        'threat_detection_methods': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'file_entity_ids': {'key': 'properties.fileEntityIds', 'type': '[str]'},
        'recipient': {'key': 'properties.recipient', 'type': 'str'},
        'urls': {'key': 'properties.urls', 'type': 'str'},
        'threats': {'key': 'properties.threats', 'type': '[str]'},
        'p1_sender': {'key': 'properties.p1Sender', 'type': 'str'},
        'p1_sender_display_name': {'key': 'properties.p1SenderDisplayName', 'type': 'str'},
        'p1_sender_domain': {'key': 'properties.p1SenderDomain', 'type': 'str'},
        'sender_ip': {'key': 'properties.senderIP', 'type': 'str'},
        'p2_sender': {'key': 'properties.p2Sender', 'type': 'str'},
        'p2_sender_display_name': {'key': 'properties.p2SenderDisplayName', 'type': 'str'},
        'p2_sender_domain': {'key': 'properties.p2SenderDomain', 'type': 'str'},
        'received_date': {'key': 'properties.receivedDate', 'type': 'iso-8601'},
        'network_message_id': {'key': 'properties.networkMessageId', 'type': 'str'},
        'internet_message_id': {'key': 'properties.internetMessageId', 'type': 'str'},
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'language': {'key': 'properties.language', 'type': 'str'},
        'threat_detection_methods': {'key': 'properties.threatDetectionMethods', 'type': 'str'},
        'body_fingerprint_bin1': {'key': 'properties.bodyFingerprintBin1', 'type': 'int'},
        'body_fingerprint_bin2': {'key': 'properties.bodyFingerprintBin2', 'type': 'int'},
        'body_fingerprint_bin3': {'key': 'properties.bodyFingerprintBin3', 'type': 'int'},
        'body_fingerprint_bin4': {'key': 'properties.bodyFingerprintBin4', 'type': 'int'},
        'body_fingerprint_bin5': {'key': 'properties.bodyFingerprintBin5', 'type': 'int'},
        'antispam_direction': {'key': 'properties.antispamDirection', 'type': 'str'},
        'delivery_action': {'key': 'properties.deliveryAction', 'type': 'DeliveryAction'},
        'delivery_location': {'key': 'properties.deliveryLocation', 'type': 'DeliveryLocation'},
    }

    def __init__(self, **kwargs):
        super(MailMessageEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.file_entity_ids = None
        self.recipient = None
        self.urls = None
        self.threats = None
        self.p1_sender = None
        self.p1_sender_display_name = None
        self.p1_sender_domain = None
        self.sender_ip = None
        self.p2_sender = None
        self.p2_sender_display_name = None
        self.p2_sender_domain = None
        self.received_date = None
        self.network_message_id = None
        self.internet_message_id = None
        self.subject = None
        self.language = None
        self.threat_detection_methods = None
        self.body_fingerprint_bin1 = kwargs.get('body_fingerprint_bin1', None)
        self.body_fingerprint_bin2 = kwargs.get('body_fingerprint_bin2', None)
        self.body_fingerprint_bin3 = kwargs.get('body_fingerprint_bin3', None)
        self.body_fingerprint_bin4 = kwargs.get('body_fingerprint_bin4', None)
        self.body_fingerprint_bin5 = kwargs.get('body_fingerprint_bin5', None)
        self.antispam_direction = kwargs.get('antispam_direction', None)
        self.delivery_action = kwargs.get('delivery_action', None)
        self.delivery_location = kwargs.get('delivery_location', None)
        self.kind = 'MailMessage'


class MalwareEntity(Entity):
    """Represents a malware entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar category: The malware category by the vendor, e.g. Trojan
    :vartype category: str
    :ivar file_entity_ids: List of linked file entity identifiers on which the
     malware was found
    :vartype file_entity_ids: list[str]
    :ivar malware_name: The malware name by the vendor, e.g. Win32/Toga!rfn
    :vartype malware_name: str
    :ivar process_entity_ids: List of linked process entity identifiers on
     which the malware was found.
    :vartype process_entity_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'category': {'readonly': True},
        'file_entity_ids': {'readonly': True},
        'malware_name': {'readonly': True},
        'process_entity_ids': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'category': {'key': 'properties.category', 'type': 'str'},
        'file_entity_ids': {'key': 'properties.fileEntityIds', 'type': '[str]'},
        'malware_name': {'key': 'properties.malwareName', 'type': 'str'},
        'process_entity_ids': {'key': 'properties.processEntityIds', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MalwareEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.category = None
        self.file_entity_ids = None
        self.malware_name = None
        self.process_entity_ids = None
        self.kind = 'Malware'


class MCASCheckRequirements(DataConnectorsCheckRequirements):
    """Represents MCAS (Microsoft Cloud App Security) requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MCASCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'MicrosoftCloudAppSecurity'


class MCASDataConnector(DataConnector):
    """Represents MCAS (Microsoft Cloud App Security) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.MCASDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'MCASDataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(MCASDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'MicrosoftCloudAppSecurity'


class MCASDataConnectorDataTypes(AlertsDataTypeOfDataConnector):
    """The available data types for MCAS (Microsoft Cloud App Security) data
    connector.

    :param alerts: Alerts data type connection.
    :type alerts:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    :param discovery_logs: Discovery log data type connection.
    :type discovery_logs:
     ~azure.mgmt.securityinsight.models.MCASDataConnectorDataTypesDiscoveryLogs
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
        'discovery_logs': {'key': 'discoveryLogs', 'type': 'MCASDataConnectorDataTypesDiscoveryLogs'},
    }

    def __init__(self, **kwargs):
        super(MCASDataConnectorDataTypes, self).__init__(**kwargs)
        self.discovery_logs = kwargs.get('discovery_logs', None)


class MCASDataConnectorDataTypesDiscoveryLogs(DataConnectorDataTypeCommon):
    """Discovery log data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MCASDataConnectorDataTypesDiscoveryLogs, self).__init__(**kwargs)


class MDATPCheckRequirements(DataConnectorsCheckRequirements):
    """Represents MDATP (Microsoft Defender Advanced Threat Protection)
    requirements check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MDATPCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'MicrosoftDefenderAdvancedThreatProtection'


class MDATPDataConnector(DataConnector):
    """Represents MDATP (Microsoft Defender Advanced Threat Protection) data
    connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, **kwargs):
        super(MDATPDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'MicrosoftDefenderAdvancedThreatProtection'


class MicrosoftSecurityIncidentCreationAlertRule(AlertRule):
    """Represents MicrosoftSecurityIncidentCreation rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param display_names_exclude_filter: the alerts' displayNames on which the
     cases will not be generated
    :type display_names_exclude_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT', 'Office 365 Advanced Threat Protection', 'Microsoft Defender
     Advanced Threat Protection'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    :param alert_rule_template_name: The Name of the alert rule template used
     to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this
     alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'product_filter': {'required': True},
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'display_names_exclude_filter': {'key': 'properties.displayNamesExcludeFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(MicrosoftSecurityIncidentCreationAlertRule, self).__init__(**kwargs)
        self.display_names_filter = kwargs.get('display_names_filter', None)
        self.display_names_exclude_filter = kwargs.get('display_names_exclude_filter', None)
        self.product_filter = kwargs.get('product_filter', None)
        self.severities_filter = kwargs.get('severities_filter', None)
        self.alert_rule_template_name = kwargs.get('alert_rule_template_name', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.enabled = kwargs.get('enabled', None)
        self.last_modified_utc = None
        self.kind = 'MicrosoftSecurityIncidentCreation'


class MicrosoftSecurityIncidentCreationAlertRuleCommonProperties(Model):
    """MicrosoftSecurityIncidentCreation rule common property bag.

    All required parameters must be populated in order to send to Azure.

    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param display_names_exclude_filter: the alerts' displayNames on which the
     cases will not be generated
    :type display_names_exclude_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT', 'Office 365 Advanced Threat Protection', 'Microsoft Defender
     Advanced Threat Protection'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'display_names_filter': {'key': 'displayNamesFilter', 'type': '[str]'},
        'display_names_exclude_filter': {'key': 'displayNamesExcludeFilter', 'type': '[str]'},
        'product_filter': {'key': 'productFilter', 'type': 'str'},
        'severities_filter': {'key': 'severitiesFilter', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MicrosoftSecurityIncidentCreationAlertRuleCommonProperties, self).__init__(**kwargs)
        self.display_names_filter = kwargs.get('display_names_filter', None)
        self.display_names_exclude_filter = kwargs.get('display_names_exclude_filter', None)
        self.product_filter = kwargs.get('product_filter', None)
        self.severities_filter = kwargs.get('severities_filter', None)


class MicrosoftSecurityIncidentCreationAlertRuleTemplate(AlertRuleTemplate):
    """Represents MicrosoftSecurityIncidentCreation rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: Required. the number of
     alert rules that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar last_updated_date_utc: The last time that this alert rule template
     has been updated.
    :vartype last_updated_date_utc: datetime
    :ivar created_date_utc: Required. The time that this alert rule template
     has been added.
    :vartype created_date_utc: datetime
    :param description: Required. The description of the alert rule template.
    :type description: str
    :param display_name: Required. The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data sources for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: Required. The alert rule template status. Possible values
     include: 'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param display_names_exclude_filter: the alerts' displayNames on which the
     cases will not be generated
    :type display_names_exclude_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT', 'Office 365 Advanced Threat Protection', 'Microsoft Defender
     Advanced Threat Protection'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rules_created_by_template_count': {'required': True},
        'last_updated_date_utc': {'readonly': True},
        'created_date_utc': {'required': True, 'readonly': True},
        'description': {'required': True},
        'display_name': {'required': True},
        'status': {'required': True},
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'last_updated_date_utc': {'key': 'properties.lastUpdatedDateUTC', 'type': 'iso-8601'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'display_names_exclude_filter': {'key': 'properties.displayNamesExcludeFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MicrosoftSecurityIncidentCreationAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = kwargs.get('alert_rules_created_by_template_count', None)
        self.last_updated_date_utc = None
        self.created_date_utc = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.required_data_connectors = kwargs.get('required_data_connectors', None)
        self.status = kwargs.get('status', None)
        self.display_names_filter = kwargs.get('display_names_filter', None)
        self.display_names_exclude_filter = kwargs.get('display_names_exclude_filter', None)
        self.product_filter = kwargs.get('product_filter', None)
        self.severities_filter = kwargs.get('severities_filter', None)
        self.kind = 'MicrosoftSecurityIncidentCreation'


class OfficeATPCheckRequirements(DataConnectorsCheckRequirements):
    """Represents OfficeATP (Office 365 Advanced Threat Protection) requirements
    check request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OfficeATPCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'OfficeATP'


class OfficeATPDataConnector(DataConnector):
    """Represents OfficeATP (Office 365 Advanced Threat Protection) data
    connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, **kwargs):
        super(OfficeATPDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'OfficeATP'


class OfficeConsent(Resource):
    """Consent for Office365 tenant that already made.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param tenant_id: The tenantId of the Office365 with the consent.
    :type tenant_id: str
    :ivar tenant_name: The tenant name of the Office365 with the consent.
    :vartype tenant_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tenant_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'tenant_name': {'key': 'properties.tenantName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OfficeConsent, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.tenant_name = None


class OfficeDataConnector(DataConnector):
    """Represents office data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'OfficeDataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(OfficeDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'Office365'


class OfficeDataConnectorDataTypes(Model):
    """The available data types for office data connector.

    :param exchange: Exchange data type connection.
    :type exchange:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesExchange
    :param share_point: SharePoint data type connection.
    :type share_point:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesSharePoint
    :param teams: Teams data type connection.
    :type teams:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesTeams
    """

    _attribute_map = {
        'exchange': {'key': 'exchange', 'type': 'OfficeDataConnectorDataTypesExchange'},
        'share_point': {'key': 'sharePoint', 'type': 'OfficeDataConnectorDataTypesSharePoint'},
        'teams': {'key': 'teams', 'type': 'OfficeDataConnectorDataTypesTeams'},
    }

    def __init__(self, **kwargs):
        super(OfficeDataConnectorDataTypes, self).__init__(**kwargs)
        self.exchange = kwargs.get('exchange', None)
        self.share_point = kwargs.get('share_point', None)
        self.teams = kwargs.get('teams', None)


class OfficeDataConnectorDataTypesExchange(DataConnectorDataTypeCommon):
    """Exchange data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OfficeDataConnectorDataTypesExchange, self).__init__(**kwargs)


class OfficeDataConnectorDataTypesSharePoint(DataConnectorDataTypeCommon):
    """SharePoint data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OfficeDataConnectorDataTypesSharePoint, self).__init__(**kwargs)


class OfficeDataConnectorDataTypesTeams(DataConnectorDataTypeCommon):
    """Teams data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OfficeDataConnectorDataTypesTeams, self).__init__(**kwargs)


class Operation(Model):
    """Operation provided by provider.

    :param display: Properties of the operation
    :type display: ~azure.mgmt.securityinsight.models.OperationDisplay
    :param name: Name of the operation
    :type name: str
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.display = kwargs.get('display', None)
        self.name = kwargs.get('name', None)


class OperationDisplay(Model):
    """Properties of the operation.

    :param description: Description of the operation
    :type description: str
    :param operation: Operation name
    :type operation: str
    :param provider: Provider name
    :type provider: str
    :param resource: Resource name
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.operation = kwargs.get('operation', None)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)


class ProcessEntity(Entity):
    """Represents a process entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar account_entity_id: The account entity id running the processes.
    :vartype account_entity_id: str
    :ivar command_line: The command line used to create the process
    :vartype command_line: str
    :ivar creation_time_utc: The time when the process started to run
    :vartype creation_time_utc: datetime
    :param elevation_token: The elevation token associated with the process.
     Possible values include: 'Default', 'Full', 'Limited'
    :type elevation_token: str or
     ~azure.mgmt.securityinsight.models.ElevationToken
    :ivar host_entity_id: The host entity id on which the process was running
    :vartype host_entity_id: str
    :ivar host_logon_session_entity_id: The session entity id in which the
     process was running
    :vartype host_logon_session_entity_id: str
    :ivar image_file_entity_id: Image file entity id
    :vartype image_file_entity_id: str
    :ivar parent_process_entity_id: The parent process entity id.
    :vartype parent_process_entity_id: str
    :ivar process_id: The process ID
    :vartype process_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'account_entity_id': {'readonly': True},
        'command_line': {'readonly': True},
        'creation_time_utc': {'readonly': True},
        'host_entity_id': {'readonly': True},
        'host_logon_session_entity_id': {'readonly': True},
        'image_file_entity_id': {'readonly': True},
        'parent_process_entity_id': {'readonly': True},
        'process_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'account_entity_id': {'key': 'properties.accountEntityId', 'type': 'str'},
        'command_line': {'key': 'properties.commandLine', 'type': 'str'},
        'creation_time_utc': {'key': 'properties.creationTimeUtc', 'type': 'iso-8601'},
        'elevation_token': {'key': 'properties.elevationToken', 'type': 'ElevationToken'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
        'host_logon_session_entity_id': {'key': 'properties.hostLogonSessionEntityId', 'type': 'str'},
        'image_file_entity_id': {'key': 'properties.imageFileEntityId', 'type': 'str'},
        'parent_process_entity_id': {'key': 'properties.parentProcessEntityId', 'type': 'str'},
        'process_id': {'key': 'properties.processId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProcessEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.account_entity_id = None
        self.command_line = None
        self.creation_time_utc = None
        self.elevation_token = kwargs.get('elevation_token', None)
        self.host_entity_id = None
        self.host_logon_session_entity_id = None
        self.image_file_entity_id = None
        self.parent_process_entity_id = None
        self.process_id = None
        self.kind = 'Process'


class RegistryKeyEntity(Entity):
    """Represents a registry key entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar hive: the hive that holds the registry key. Possible values include:
     'HKEY_LOCAL_MACHINE', 'HKEY_CLASSES_ROOT', 'HKEY_CURRENT_CONFIG',
     'HKEY_USERS', 'HKEY_CURRENT_USER_LOCAL_SETTINGS', 'HKEY_PERFORMANCE_DATA',
     'HKEY_PERFORMANCE_NLSTEXT', 'HKEY_PERFORMANCE_TEXT', 'HKEY_A',
     'HKEY_CURRENT_USER'
    :vartype hive: str or ~azure.mgmt.securityinsight.models.RegistryHive
    :ivar key: The registry key path.
    :vartype key: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'hive': {'readonly': True},
        'key': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'hive': {'key': 'properties.hive', 'type': 'str'},
        'key': {'key': 'properties.key', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RegistryKeyEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.hive = None
        self.key = None
        self.kind = 'RegistryKey'


class RegistryValueEntity(Entity):
    """Represents a registry value entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar key_entity_id: The registry key entity id.
    :vartype key_entity_id: str
    :ivar value_data: String formatted representation of the value data.
    :vartype value_data: str
    :ivar value_name: The registry value name.
    :vartype value_name: str
    :ivar value_type: Specifies the data types to use when storing values in
     the registry, or identifies the data type of a value in the registry.
     Possible values include: 'None', 'Unknown', 'String', 'ExpandString',
     'Binary', 'DWord', 'MultiString', 'QWord'
    :vartype value_type: str or
     ~azure.mgmt.securityinsight.models.RegistryValueKind
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'key_entity_id': {'readonly': True},
        'value_data': {'readonly': True},
        'value_name': {'readonly': True},
        'value_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'key_entity_id': {'key': 'properties.keyEntityId', 'type': 'str'},
        'value_data': {'key': 'properties.valueData', 'type': 'str'},
        'value_name': {'key': 'properties.valueName', 'type': 'str'},
        'value_type': {'key': 'properties.valueType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RegistryValueEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.key_entity_id = None
        self.value_data = None
        self.value_name = None
        self.value_type = None
        self.kind = 'RegistryValue'


class Relation(ResourceWithEtag):
    """Represents a relation between two resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param related_resource_id: Required. The resource ID of the related
     resource
    :type related_resource_id: str
    :ivar related_resource_name: The name of the related resource
    :vartype related_resource_name: str
    :ivar related_resource_type: The resource type of the related resource
    :vartype related_resource_type: str
    :ivar related_resource_kind: The resource kind of the related resource
    :vartype related_resource_kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'related_resource_id': {'required': True},
        'related_resource_name': {'readonly': True},
        'related_resource_type': {'readonly': True},
        'related_resource_kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'related_resource_id': {'key': 'properties.relatedResourceId', 'type': 'str'},
        'related_resource_name': {'key': 'properties.relatedResourceName', 'type': 'str'},
        'related_resource_type': {'key': 'properties.relatedResourceType', 'type': 'str'},
        'related_resource_kind': {'key': 'properties.relatedResourceKind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Relation, self).__init__(**kwargs)
        self.related_resource_id = kwargs.get('related_resource_id', None)
        self.related_resource_name = None
        self.related_resource_type = None
        self.related_resource_kind = None


class RelationNode(Model):
    """Relation node.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param relation_node_id: Relation Node Id
    :type relation_node_id: str
    :ivar relation_node_kind: The type of relation node. Possible values
     include: 'Case', 'Bookmark'
    :vartype relation_node_kind: str or
     ~azure.mgmt.securityinsight.models.RelationNodeKind
    :param etag: Etag for relation node
    :type etag: str
    :param relation_additional_properties: Additional set of properties
    :type relation_additional_properties: dict[str, str]
    """

    _validation = {
        'relation_node_kind': {'readonly': True},
    }

    _attribute_map = {
        'relation_node_id': {'key': 'relationNodeId', 'type': 'str'},
        'relation_node_kind': {'key': 'relationNodeKind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_additional_properties': {'key': 'relationAdditionalProperties', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(RelationNode, self).__init__(**kwargs)
        self.relation_node_id = kwargs.get('relation_node_id', None)
        self.relation_node_kind = None
        self.etag = kwargs.get('etag', None)
        self.relation_additional_properties = kwargs.get('relation_additional_properties', None)


class RelationsModelInput(RelationBase):
    """Relation input model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Name of relation
    :type relation_name: str
    :param source_relation_node: Relation source node
    :type source_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    :param target_relation_node: Relation target node
    :type target_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'source_relation_node': {'key': 'properties.sourceRelationNode', 'type': 'RelationNode'},
        'target_relation_node': {'key': 'properties.targetRelationNode', 'type': 'RelationNode'},
    }

    def __init__(self, **kwargs):
        super(RelationsModelInput, self).__init__(**kwargs)
        self.relation_name = kwargs.get('relation_name', None)
        self.source_relation_node = kwargs.get('source_relation_node', None)
        self.target_relation_node = kwargs.get('target_relation_node', None)


class ScheduledAlertRule(AlertRule):
    """Represents scheduled alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for
     this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: The period (in ISO 8601 duration format) that this
     alert rule looks at.
    :type query_period: timedelta
    :param severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers
     alert rule. Possible values include: 'GreaterThan', 'LessThan', 'Equal',
     'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param event_grouping_settings: The event grouping settings.
    :type event_grouping_settings:
     ~azure.mgmt.securityinsight.models.EventGroupingSettings
    :param alert_rule_template_name: The Name of the alert rule template used
     to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this
     alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert rule has been
     modified.
    :vartype last_modified_utc: datetime
    :param suppression_duration: Required. The suppression (in ISO 8601
     duration format) to wait since last time this alert rule been triggered.
    :type suppression_duration: timedelta
    :param suppression_enabled: Required. Determines whether the suppression
     for this alert rule is enabled or disabled.
    :type suppression_enabled: bool
    :param tactics: The tactics of the alert rule
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :param incident_configuration: The settings of the incidents that created
     from alerts triggered by this analytics rule
    :type incident_configuration:
     ~azure.mgmt.securityinsight.models.IncidentConfiguration
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
        'suppression_duration': {'required': True},
        'suppression_enabled': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'event_grouping_settings': {'key': 'properties.eventGroupingSettings', 'type': 'EventGroupingSettings'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'suppression_duration': {'key': 'properties.suppressionDuration', 'type': 'duration'},
        'suppression_enabled': {'key': 'properties.suppressionEnabled', 'type': 'bool'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'incident_configuration': {'key': 'properties.incidentConfiguration', 'type': 'IncidentConfiguration'},
    }

    def __init__(self, **kwargs):
        super(ScheduledAlertRule, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.query_frequency = kwargs.get('query_frequency', None)
        self.query_period = kwargs.get('query_period', None)
        self.severity = kwargs.get('severity', None)
        self.trigger_operator = kwargs.get('trigger_operator', None)
        self.trigger_threshold = kwargs.get('trigger_threshold', None)
        self.event_grouping_settings = kwargs.get('event_grouping_settings', None)
        self.alert_rule_template_name = kwargs.get('alert_rule_template_name', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.enabled = kwargs.get('enabled', None)
        self.last_modified_utc = None
        self.suppression_duration = kwargs.get('suppression_duration', None)
        self.suppression_enabled = kwargs.get('suppression_enabled', None)
        self.tactics = kwargs.get('tactics', None)
        self.incident_configuration = kwargs.get('incident_configuration', None)
        self.kind = 'Scheduled'


class ScheduledAlertRuleCommonProperties(Model):
    """Schedule alert rule template property bag.

    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for
     this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: The period (in ISO 8601 duration format) that this
     alert rule looks at.
    :type query_period: timedelta
    :param severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers
     alert rule. Possible values include: 'GreaterThan', 'LessThan', 'Equal',
     'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param event_grouping_settings: The event grouping settings.
    :type event_grouping_settings:
     ~azure.mgmt.securityinsight.models.EventGroupingSettings
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_frequency': {'key': 'queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'queryPeriod', 'type': 'duration'},
        'severity': {'key': 'severity', 'type': 'str'},
        'trigger_operator': {'key': 'triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'triggerThreshold', 'type': 'int'},
        'event_grouping_settings': {'key': 'eventGroupingSettings', 'type': 'EventGroupingSettings'},
    }

    def __init__(self, **kwargs):
        super(ScheduledAlertRuleCommonProperties, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.query_frequency = kwargs.get('query_frequency', None)
        self.query_period = kwargs.get('query_period', None)
        self.severity = kwargs.get('severity', None)
        self.trigger_operator = kwargs.get('trigger_operator', None)
        self.trigger_threshold = kwargs.get('trigger_threshold', None)
        self.event_grouping_settings = kwargs.get('event_grouping_settings', None)


class ScheduledAlertRuleTemplate(AlertRuleTemplate):
    """Represents scheduled alert rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: Required. the number of
     alert rules that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar last_updated_date_utc: The last time that this alert rule template
     has been updated.
    :vartype last_updated_date_utc: datetime
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: Required. The description of the alert rule template.
    :type description: str
    :param display_name: Required. The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data sources for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: Required. The alert rule template status. Possible values
     include: 'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param query: Required. The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: Required. The frequency (in ISO 8601 duration
     format) for this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: Required. The period (in ISO 8601 duration format)
     that this alert rule looks at.
    :type query_period: timedelta
    :param severity: Required. The severity for alerts created by this alert
     rule. Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: Required. The operation against the threshold
     that triggers alert rule. Possible values include: 'GreaterThan',
     'LessThan', 'Equal', 'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: Required. The threshold triggers this alert
     rule.
    :type trigger_threshold: int
    :param event_grouping_settings: The event grouping settings.
    :type event_grouping_settings:
     ~azure.mgmt.securityinsight.models.EventGroupingSettings
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rules_created_by_template_count': {'required': True},
        'last_updated_date_utc': {'readonly': True},
        'created_date_utc': {'readonly': True},
        'description': {'required': True},
        'display_name': {'required': True},
        'status': {'required': True},
        'query': {'required': True},
        'query_frequency': {'required': True},
        'query_period': {'required': True},
        'severity': {'required': True},
        'trigger_operator': {'required': True},
        'trigger_threshold': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'last_updated_date_utc': {'key': 'properties.lastUpdatedDateUTC', 'type': 'iso-8601'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'event_grouping_settings': {'key': 'properties.eventGroupingSettings', 'type': 'EventGroupingSettings'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ScheduledAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = kwargs.get('alert_rules_created_by_template_count', None)
        self.last_updated_date_utc = None
        self.created_date_utc = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.required_data_connectors = kwargs.get('required_data_connectors', None)
        self.status = kwargs.get('status', None)
        self.query = kwargs.get('query', None)
        self.query_frequency = kwargs.get('query_frequency', None)
        self.query_period = kwargs.get('query_period', None)
        self.severity = kwargs.get('severity', None)
        self.trigger_operator = kwargs.get('trigger_operator', None)
        self.trigger_threshold = kwargs.get('trigger_threshold', None)
        self.event_grouping_settings = kwargs.get('event_grouping_settings', None)
        self.tactics = kwargs.get('tactics', None)
        self.kind = 'Scheduled'


class SecurityAlert(Entity):
    """Represents a security alert entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar alert_display_name: The display name of the alert.
    :vartype alert_display_name: str
    :ivar alert_type: The type name of the alert.
    :vartype alert_type: str
    :ivar compromised_entity: Display name of the main entity being reported
     on.
    :vartype compromised_entity: str
    :ivar confidence_level: The confidence level of this alert. Possible
     values include: 'Unknown', 'Low', 'High'
    :vartype confidence_level: str or
     ~azure.mgmt.securityinsight.models.ConfidenceLevel
    :ivar confidence_reasons: The confidence reasons
    :vartype confidence_reasons:
     list[~azure.mgmt.securityinsight.models.SecurityAlertPropertiesConfidenceReasonsItem]
    :ivar confidence_score: The confidence score of the alert.
    :vartype confidence_score: float
    :ivar confidence_score_status: The confidence score calculation status,
     i.e. indicating if score calculation is pending for this alert, not
     applicable or final. Possible values include: 'NotApplicable',
     'InProcess', 'NotFinal', 'Final'
    :vartype confidence_score_status: str or
     ~azure.mgmt.securityinsight.models.ConfidenceScoreStatus
    :ivar description: Alert description.
    :vartype description: str
    :ivar end_time_utc: The impact end time of the alert (the time of the last
     event contributing to the alert).
    :vartype end_time_utc: datetime
    :ivar intent: Holds the alert intent stage(s) mapping for this alert.
     Possible values include: 'Unknown', 'Probing', 'Exploitation',
     'Persistence', 'PrivilegeEscalation', 'DefenseEvasion',
     'CredentialAccess', 'Discovery', 'LateralMovement', 'Execution',
     'Collection', 'Exfiltration', 'CommandAndControl', 'Impact'
    :vartype intent: str or ~azure.mgmt.securityinsight.models.KillChainIntent
    :ivar provider_alert_id: The identifier of the alert inside the product
     which generated the alert.
    :vartype provider_alert_id: str
    :ivar processing_end_time: The time the alert was made available for
     consumption.
    :vartype processing_end_time: datetime
    :ivar product_component_name: The name of a component inside the product
     which generated the alert.
    :vartype product_component_name: str
    :ivar product_name: The name of the product which published this alert.
    :vartype product_name: str
    :ivar product_version: The version of the product generating the alert.
    :vartype product_version: str
    :ivar remediation_steps: Manual action items to take to remediate the
     alert.
    :vartype remediation_steps: list[str]
    :param severity: The severity of the alert. Possible values include:
     'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :ivar start_time_utc: The impact start time of the alert (the time of the
     first event contributing to the alert).
    :vartype start_time_utc: datetime
    :ivar status: The lifecycle status of the alert. Possible values include:
     'Unknown', 'New', 'Resolved', 'Dismissed', 'InProgress'
    :vartype status: str or ~azure.mgmt.securityinsight.models.AlertStatus
    :ivar system_alert_id: Holds the product identifier of the alert for the
     product.
    :vartype system_alert_id: str
    :ivar tactics: The tactics of the alert
    :vartype tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :ivar time_generated: The time the alert was generated.
    :vartype time_generated: datetime
    :ivar vendor_name: The name of the vendor that raise the alert.
    :vartype vendor_name: str
    :ivar alert_link: The uri link of the alert.
    :vartype alert_link: str
    :ivar resource_identifiers: The list of resource identifiers of the alert.
    :vartype resource_identifiers: list[object]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'alert_display_name': {'readonly': True},
        'alert_type': {'readonly': True},
        'compromised_entity': {'readonly': True},
        'confidence_level': {'readonly': True},
        'confidence_reasons': {'readonly': True},
        'confidence_score': {'readonly': True},
        'confidence_score_status': {'readonly': True},
        'description': {'readonly': True},
        'end_time_utc': {'readonly': True},
        'intent': {'readonly': True},
        'provider_alert_id': {'readonly': True},
        'processing_end_time': {'readonly': True},
        'product_component_name': {'readonly': True},
        'product_name': {'readonly': True},
        'product_version': {'readonly': True},
        'remediation_steps': {'readonly': True},
        'start_time_utc': {'readonly': True},
        'status': {'readonly': True},
        'system_alert_id': {'readonly': True},
        'tactics': {'readonly': True},
        'time_generated': {'readonly': True},
        'vendor_name': {'readonly': True},
        'alert_link': {'readonly': True},
        'resource_identifiers': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'alert_display_name': {'key': 'properties.alertDisplayName', 'type': 'str'},
        'alert_type': {'key': 'properties.alertType', 'type': 'str'},
        'compromised_entity': {'key': 'properties.compromisedEntity', 'type': 'str'},
        'confidence_level': {'key': 'properties.confidenceLevel', 'type': 'str'},
        'confidence_reasons': {'key': 'properties.confidenceReasons', 'type': '[SecurityAlertPropertiesConfidenceReasonsItem]'},
        'confidence_score': {'key': 'properties.confidenceScore', 'type': 'float'},
        'confidence_score_status': {'key': 'properties.confidenceScoreStatus', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'end_time_utc': {'key': 'properties.endTimeUtc', 'type': 'iso-8601'},
        'intent': {'key': 'properties.intent', 'type': 'str'},
        'provider_alert_id': {'key': 'properties.providerAlertId', 'type': 'str'},
        'processing_end_time': {'key': 'properties.processingEndTime', 'type': 'iso-8601'},
        'product_component_name': {'key': 'properties.productComponentName', 'type': 'str'},
        'product_name': {'key': 'properties.productName', 'type': 'str'},
        'product_version': {'key': 'properties.productVersion', 'type': 'str'},
        'remediation_steps': {'key': 'properties.remediationSteps', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'start_time_utc': {'key': 'properties.startTimeUtc', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'system_alert_id': {'key': 'properties.systemAlertId', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'time_generated': {'key': 'properties.timeGenerated', 'type': 'iso-8601'},
        'vendor_name': {'key': 'properties.vendorName', 'type': 'str'},
        'alert_link': {'key': 'properties.alertLink', 'type': 'str'},
        'resource_identifiers': {'key': 'properties.resourceIdentifiers', 'type': '[object]'},
    }

    def __init__(self, **kwargs):
        super(SecurityAlert, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.alert_display_name = None
        self.alert_type = None
        self.compromised_entity = None
        self.confidence_level = None
        self.confidence_reasons = None
        self.confidence_score = None
        self.confidence_score_status = None
        self.description = None
        self.end_time_utc = None
        self.intent = None
        self.provider_alert_id = None
        self.processing_end_time = None
        self.product_component_name = None
        self.product_name = None
        self.product_version = None
        self.remediation_steps = None
        self.severity = kwargs.get('severity', None)
        self.start_time_utc = None
        self.status = None
        self.system_alert_id = None
        self.tactics = None
        self.time_generated = None
        self.vendor_name = None
        self.alert_link = None
        self.resource_identifiers = None
        self.kind = 'SecurityAlert'


class SecurityAlertPropertiesConfidenceReasonsItem(Model):
    """confidence reason item.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar reason: The reason's description
    :vartype reason: str
    :ivar reason_type: The type (category) of the reason
    :vartype reason_type: str
    """

    _validation = {
        'reason': {'readonly': True},
        'reason_type': {'readonly': True},
    }

    _attribute_map = {
        'reason': {'key': 'reason', 'type': 'str'},
        'reason_type': {'key': 'reasonType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecurityAlertPropertiesConfidenceReasonsItem, self).__init__(**kwargs)
        self.reason = None
        self.reason_type = None


class SecurityAlertTimelineItem(EntityTimelineItem):
    """Represents security alert timeline item.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param azure_resource_id: Required. The alert azure resource id.
    :type azure_resource_id: str
    :param product_name: Required. The alert product name.
    :type product_name: str
    :param display_name: Required. The alert name.
    :type display_name: str
    :param severity: Required. The alert severity. Possible values include:
     'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param end_time_utc: Required. The alert end time.
    :type end_time_utc: datetime
    :param start_time_utc: Required. The alert start time.
    :type start_time_utc: datetime
    :param time_generated: Required. The alert generated time.
    :type time_generated: datetime
    :param alert_type: Required. The name of the alert type.
    :type alert_type: str
    """

    _validation = {
        'kind': {'required': True},
        'azure_resource_id': {'required': True},
        'product_name': {'required': True},
        'display_name': {'required': True},
        'severity': {'required': True},
        'end_time_utc': {'required': True},
        'start_time_utc': {'required': True},
        'time_generated': {'required': True},
        'alert_type': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'azure_resource_id': {'key': 'azureResourceId', 'type': 'str'},
        'product_name': {'key': 'productName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'end_time_utc': {'key': 'endTimeUtc', 'type': 'iso-8601'},
        'start_time_utc': {'key': 'startTimeUtc', 'type': 'iso-8601'},
        'time_generated': {'key': 'timeGenerated', 'type': 'iso-8601'},
        'alert_type': {'key': 'alertType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecurityAlertTimelineItem, self).__init__(**kwargs)
        self.azure_resource_id = kwargs.get('azure_resource_id', None)
        self.product_name = kwargs.get('product_name', None)
        self.display_name = kwargs.get('display_name', None)
        self.severity = kwargs.get('severity', None)
        self.end_time_utc = kwargs.get('end_time_utc', None)
        self.start_time_utc = kwargs.get('start_time_utc', None)
        self.time_generated = kwargs.get('time_generated', None)
        self.alert_type = kwargs.get('alert_type', None)
        self.kind = 'SecurityAlert'


class SecurityGroupEntity(Entity):
    """Represents a security group entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar distinguished_name: The group distinguished name
    :vartype distinguished_name: str
    :ivar object_guid: A single-value attribute that is the unique identifier
     for the object, assigned by active directory.
    :vartype object_guid: str
    :ivar sid: The SID attribute is a single-value attribute that specifies
     the security identifier (SID) of the group
    :vartype sid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'distinguished_name': {'readonly': True},
        'object_guid': {'readonly': True},
        'sid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'distinguished_name': {'key': 'properties.distinguishedName', 'type': 'str'},
        'object_guid': {'key': 'properties.objectGuid', 'type': 'str'},
        'sid': {'key': 'properties.sid', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecurityGroupEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.distinguished_name = None
        self.object_guid = None
        self.sid = None
        self.kind = 'SecurityGroup'


class SettingList(Model):
    """List of all the settings.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Array of settings.
    :type value: list[~azure.mgmt.securityinsight.models.Settings]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Settings]'},
    }

    def __init__(self, **kwargs):
        super(SettingList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class SettingsKind(Model):
    """Describes an Azure resource with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the setting. Possible values include:
     'EyesOn', 'EntityAnalytics', 'Ueba'
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SettingsKind, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)


class SubmissionMailEntity(Entity):
    """Represents a submission mail entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar network_message_id: The network message id of email to which
     submission belongs
    :vartype network_message_id: str
    :ivar timestamp: The Time stamp when the message is received (Mail)
    :vartype timestamp: datetime
    :ivar recipient: The recipient of the mail
    :vartype recipient: str
    :ivar sender: The sender of the mail
    :vartype sender: str
    :ivar sender_ip: The sender's IP
    :vartype sender_ip: str
    :ivar subject: The subject of submission mail
    :vartype subject: str
    :ivar report_type: The submission type for the given instance. This maps
     to Junk, Phish, Malware or NotJunk.
    :vartype report_type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'network_message_id': {'readonly': True},
        'timestamp': {'readonly': True},
        'recipient': {'readonly': True},
        'sender': {'readonly': True},
        'sender_ip': {'readonly': True},
        'subject': {'readonly': True},
        'report_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'network_message_id': {'key': 'properties.networkMessageId', 'type': 'str'},
        'timestamp': {'key': 'properties.timestamp', 'type': 'iso-8601'},
        'recipient': {'key': 'properties.recipient', 'type': 'str'},
        'sender': {'key': 'properties.sender', 'type': 'str'},
        'sender_ip': {'key': 'properties.senderIp', 'type': 'str'},
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'report_type': {'key': 'properties.reportType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubmissionMailEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.network_message_id = None
        self.timestamp = None
        self.recipient = None
        self.sender = None
        self.sender_ip = None
        self.subject = None
        self.report_type = None
        self.kind = 'SubmissionMail'


class ThreatIntelligence(Model):
    """ThreatIntelligence property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar confidence: Confidence (must be between 0 and 1)
    :vartype confidence: float
    :ivar provider_name: Name of the provider from whom this Threat
     Intelligence information was received
    :vartype provider_name: str
    :ivar report_link: Report link
    :vartype report_link: str
    :ivar threat_description: Threat description (free text)
    :vartype threat_description: str
    :ivar threat_name: Threat name (e.g. "Jedobot malware")
    :vartype threat_name: str
    :ivar threat_type: Threat type (e.g. "Botnet")
    :vartype threat_type: str
    """

    _validation = {
        'confidence': {'readonly': True},
        'provider_name': {'readonly': True},
        'report_link': {'readonly': True},
        'threat_description': {'readonly': True},
        'threat_name': {'readonly': True},
        'threat_type': {'readonly': True},
    }

    _attribute_map = {
        'confidence': {'key': 'confidence', 'type': 'float'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'report_link': {'key': 'reportLink', 'type': 'str'},
        'threat_description': {'key': 'threatDescription', 'type': 'str'},
        'threat_name': {'key': 'threatName', 'type': 'str'},
        'threat_type': {'key': 'threatType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligence, self).__init__(**kwargs)
        self.confidence = None
        self.provider_name = None
        self.report_link = None
        self.threat_description = None
        self.threat_name = None
        self.threat_type = None


class ThreatIntelligenceAppendTags(Model):
    """Array of tags to be appended to the threat intelligence indicator.

    :param threat_intelligence_tags: List of tags to be appended.
    :type threat_intelligence_tags: list[str]
    """

    _attribute_map = {
        'threat_intelligence_tags': {'key': 'threatIntelligenceTags', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceAppendTags, self).__init__(**kwargs)
        self.threat_intelligence_tags = kwargs.get('threat_intelligence_tags', None)


class ThreatIntelligenceFilteringCriteria(Model):
    """Filtering criteria for querying threat intelligence indicators.

    :param page_size: Page size
    :type page_size: int
    :param min_confidence: Minimum confidence.
    :type min_confidence: int
    :param max_confidence: Maximum confidence.
    :type max_confidence: int
    :param min_valid_until: Start time for ValidUntil filter.
    :type min_valid_until: str
    :param max_valid_until: End time for ValidUntil filter.
    :type max_valid_until: str
    :param include_disabled: Parameter to include/exclude disabled indicators.
    :type include_disabled: bool
    :param sort_by: Columns to sort by and sorting order
    :type sort_by:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceSortingCriteria1]
    :param sources: Sources of threat intelligence indicators
    :type sources: list[str]
    :param pattern_types: Pattern types
    :type pattern_types: list[str]
    :param threat_types: Threat types of threat intelligence indicators
    :type threat_types: list[str]
    :param ids: Ids of threat intelligence indicators
    :type ids: list[str]
    :param keywords: Keywords for searching threat intelligence indicators
    :type keywords: list[str]
    :param skip_token: Skip token.
    :type skip_token: str
    """

    _attribute_map = {
        'page_size': {'key': 'pageSize', 'type': 'int'},
        'min_confidence': {'key': 'minConfidence', 'type': 'int'},
        'max_confidence': {'key': 'maxConfidence', 'type': 'int'},
        'min_valid_until': {'key': 'minValidUntil', 'type': 'str'},
        'max_valid_until': {'key': 'maxValidUntil', 'type': 'str'},
        'include_disabled': {'key': 'includeDisabled', 'type': 'bool'},
        'sort_by': {'key': 'sortBy', 'type': '[ThreatIntelligenceSortingCriteria1]'},
        'sources': {'key': 'sources', 'type': '[str]'},
        'pattern_types': {'key': 'patternTypes', 'type': '[str]'},
        'threat_types': {'key': 'threatTypes', 'type': '[str]'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'keywords': {'key': 'keywords', 'type': '[str]'},
        'skip_token': {'key': 'skipToken', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceFilteringCriteria, self).__init__(**kwargs)
        self.page_size = kwargs.get('page_size', None)
        self.min_confidence = kwargs.get('min_confidence', None)
        self.max_confidence = kwargs.get('max_confidence', None)
        self.min_valid_until = kwargs.get('min_valid_until', None)
        self.max_valid_until = kwargs.get('max_valid_until', None)
        self.include_disabled = kwargs.get('include_disabled', None)
        self.sort_by = kwargs.get('sort_by', None)
        self.sources = kwargs.get('sources', None)
        self.pattern_types = kwargs.get('pattern_types', None)
        self.threat_types = kwargs.get('threat_types', None)
        self.ids = kwargs.get('ids', None)
        self.keywords = kwargs.get('keywords', None)
        self.skip_token = kwargs.get('skip_token', None)


class ThreatIntelligenceGranularMarkingModel(Model):
    """Describes threat granular marking model entity.

    :param language: Language granular marking model
    :type language: str
    :param marking_ref: marking reference granular marking model
    :type marking_ref: int
    :param selectors: granular marking model selectors
    :type selectors: list[str]
    """

    _attribute_map = {
        'language': {'key': 'language', 'type': 'str'},
        'marking_ref': {'key': 'markingRef', 'type': 'int'},
        'selectors': {'key': 'selectors', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceGranularMarkingModel, self).__init__(**kwargs)
        self.language = kwargs.get('language', None)
        self.marking_ref = kwargs.get('marking_ref', None)
        self.selectors = kwargs.get('selectors', None)


class ThreatIntelligenceInformation(Model):
    """Threat intelligence information object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ThreatIntelligenceIndicatorModel

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'indicator': 'ThreatIntelligenceIndicatorModel'}
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceInformation, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = kwargs.get('etag', None)
        self.kind = None


class ThreatIntelligenceIndicatorModel(ThreatIntelligenceInformation):
    """Threat intelligence indicator entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :param threat_intelligence_tags: List of tags
    :type threat_intelligence_tags: list[str]
    :param last_updated_time_utc: Last updated time in UTC
    :type last_updated_time_utc: str
    :param source: Source of a threat intelligence entity
    :type source: str
    :param display_name: Display name of a threat intelligence entity
    :type display_name: str
    :param description: Description of a threat intelligence entity
    :type description: str
    :param indicator_types: Indicator types of threat intelligence entities
    :type indicator_types: list[str]
    :param pattern: Pattern of a threat intelligence entity
    :type pattern: str
    :param pattern_type: Pattern type of a threat intelligence entity
    :type pattern_type: str
    :param kill_chain_phases: Kill chain phases
    :type kill_chain_phases:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceKillChainPhase]
    :param external_id: External ID of threat intelligence entity
    :type external_id: str
    :param created_by_ref: Created by reference of threat intelligence entity
    :type created_by_ref: str
    :param external_references: External References
    :type external_references: list[str]
    :param granular_markings: Granular Markings
    :type granular_markings:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceGranularMarkingModel]
    :param revoked: Is threat intelligence entity revoked
    :type revoked: bool
    :param confidence: Confidence of threat intelligence entity
    :type confidence: int
    :param labels: Labels  of threat intelligence entity
    :type labels: list[str]
    :param threat_types: Threat types
    :type threat_types: list[str]
    :param valid_from: Valid from
    :type valid_from: str
    :param valid_until: Valid until
    :type valid_until: str
    :param created: Created by
    :type created: str
    :param modified: Modified by
    :type modified: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'threat_intelligence_tags': {'key': 'properties.threatIntelligenceTags', 'type': '[str]'},
        'last_updated_time_utc': {'key': 'properties.lastUpdatedTimeUtc', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'indicator_types': {'key': 'properties.indicatorTypes', 'type': '[str]'},
        'pattern': {'key': 'properties.pattern', 'type': 'str'},
        'pattern_type': {'key': 'properties.patternType', 'type': 'str'},
        'kill_chain_phases': {'key': 'properties.killChainPhases', 'type': '[ThreatIntelligenceKillChainPhase]'},
        'external_id': {'key': 'properties.externalId', 'type': 'str'},
        'created_by_ref': {'key': 'properties.createdByRef', 'type': 'str'},
        'external_references': {'key': 'properties.externalReferences', 'type': '[str]'},
        'granular_markings': {'key': 'properties.granularMarkings', 'type': '[ThreatIntelligenceGranularMarkingModel]'},
        'revoked': {'key': 'properties.revoked', 'type': 'bool'},
        'confidence': {'key': 'properties.confidence', 'type': 'int'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'threat_types': {'key': 'properties.threatTypes', 'type': '[str]'},
        'valid_from': {'key': 'properties.validFrom', 'type': 'str'},
        'valid_until': {'key': 'properties.validUntil', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'str'},
        'modified': {'key': 'properties.modified', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceIndicatorModel, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.threat_intelligence_tags = kwargs.get('threat_intelligence_tags', None)
        self.last_updated_time_utc = kwargs.get('last_updated_time_utc', None)
        self.source = kwargs.get('source', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.indicator_types = kwargs.get('indicator_types', None)
        self.pattern = kwargs.get('pattern', None)
        self.pattern_type = kwargs.get('pattern_type', None)
        self.kill_chain_phases = kwargs.get('kill_chain_phases', None)
        self.external_id = kwargs.get('external_id', None)
        self.created_by_ref = kwargs.get('created_by_ref', None)
        self.external_references = kwargs.get('external_references', None)
        self.granular_markings = kwargs.get('granular_markings', None)
        self.revoked = kwargs.get('revoked', None)
        self.confidence = kwargs.get('confidence', None)
        self.labels = kwargs.get('labels', None)
        self.threat_types = kwargs.get('threat_types', None)
        self.valid_from = kwargs.get('valid_from', None)
        self.valid_until = kwargs.get('valid_until', None)
        self.created = kwargs.get('created', None)
        self.modified = kwargs.get('modified', None)
        self.kind = 'indicator'


class ThreatIntelligenceResourceKind1(Model):
    """Describes an entity with kind.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The kind of the entity. Default value: "indicator" .
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    kind = "indicator"


class ThreatIntelligenceIndicatorModelForRequestBody(ThreatIntelligenceResourceKind1):
    """Threat intelligence indicator entity used in request body.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The kind of the entity. Default value: "indicator" .
    :vartype kind: str
    :param etag: Etag of the azure resource
    :type etag: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :param threat_intelligence_tags: List of tags
    :type threat_intelligence_tags: list[str]
    :param last_updated_time_utc: Last updated time in UTC
    :type last_updated_time_utc: str
    :param source: Source of a threat intelligence entity
    :type source: str
    :param display_name: Display name of a threat intelligence entity
    :type display_name: str
    :param description: Description of a threat intelligence entity
    :type description: str
    :param indicator_types: Indicator types of threat intelligence entities
    :type indicator_types: list[str]
    :param pattern: Pattern of a threat intelligence entity
    :type pattern: str
    :param pattern_type: Pattern type of a threat intelligence entity
    :type pattern_type: str
    :param kill_chain_phases: Kill chain phases
    :type kill_chain_phases:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceKillChainPhase]
    :param external_id: External ID of threat intelligence entity
    :type external_id: str
    :param created_by_ref: Created by reference of threat intelligence entity
    :type created_by_ref: str
    :param external_references: External References
    :type external_references: list[str]
    :param granular_markings: Granular Markings
    :type granular_markings:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceGranularMarkingModel]
    :param revoked: Is threat intelligence entity revoked
    :type revoked: bool
    :param confidence: Confidence of threat intelligence entity
    :type confidence: int
    :param labels: Labels  of threat intelligence entity
    :type labels: list[str]
    :param threat_types: Threat types
    :type threat_types: list[str]
    :param valid_from: Valid from
    :type valid_from: str
    :param valid_until: Valid until
    :type valid_until: str
    :param created: Created by
    :type created: str
    :param modified: Modified by
    :type modified: str
    """

    _validation = {
        'kind': {'required': True, 'constant': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'threat_intelligence_tags': {'key': 'properties.threatIntelligenceTags', 'type': '[str]'},
        'last_updated_time_utc': {'key': 'properties.lastUpdatedTimeUtc', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'indicator_types': {'key': 'properties.indicatorTypes', 'type': '[str]'},
        'pattern': {'key': 'properties.pattern', 'type': 'str'},
        'pattern_type': {'key': 'properties.patternType', 'type': 'str'},
        'kill_chain_phases': {'key': 'properties.killChainPhases', 'type': '[ThreatIntelligenceKillChainPhase]'},
        'external_id': {'key': 'properties.externalId', 'type': 'str'},
        'created_by_ref': {'key': 'properties.createdByRef', 'type': 'str'},
        'external_references': {'key': 'properties.externalReferences', 'type': '[str]'},
        'granular_markings': {'key': 'properties.granularMarkings', 'type': '[ThreatIntelligenceGranularMarkingModel]'},
        'revoked': {'key': 'properties.revoked', 'type': 'bool'},
        'confidence': {'key': 'properties.confidence', 'type': 'int'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'threat_types': {'key': 'properties.threatTypes', 'type': '[str]'},
        'valid_from': {'key': 'properties.validFrom', 'type': 'str'},
        'valid_until': {'key': 'properties.validUntil', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'str'},
        'modified': {'key': 'properties.modified', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceIndicatorModelForRequestBody, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.additional_data = None
        self.friendly_name = None
        self.threat_intelligence_tags = kwargs.get('threat_intelligence_tags', None)
        self.last_updated_time_utc = kwargs.get('last_updated_time_utc', None)
        self.source = kwargs.get('source', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.indicator_types = kwargs.get('indicator_types', None)
        self.pattern = kwargs.get('pattern', None)
        self.pattern_type = kwargs.get('pattern_type', None)
        self.kill_chain_phases = kwargs.get('kill_chain_phases', None)
        self.external_id = kwargs.get('external_id', None)
        self.created_by_ref = kwargs.get('created_by_ref', None)
        self.external_references = kwargs.get('external_references', None)
        self.granular_markings = kwargs.get('granular_markings', None)
        self.revoked = kwargs.get('revoked', None)
        self.confidence = kwargs.get('confidence', None)
        self.labels = kwargs.get('labels', None)
        self.threat_types = kwargs.get('threat_types', None)
        self.valid_from = kwargs.get('valid_from', None)
        self.valid_until = kwargs.get('valid_until', None)
        self.created = kwargs.get('created', None)
        self.modified = kwargs.get('modified', None)


class ThreatIntelligenceKillChainPhase(Model):
    """Describes threat kill chain phase entity.

    :param kill_chain_name: Kill chainName name
    :type kill_chain_name: str
    :param phase_name: Phase name
    :type phase_name: int
    """

    _attribute_map = {
        'kill_chain_name': {'key': 'killChainName', 'type': 'str'},
        'phase_name': {'key': 'phaseName', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceKillChainPhase, self).__init__(**kwargs)
        self.kill_chain_name = kwargs.get('kill_chain_name', None)
        self.phase_name = kwargs.get('phase_name', None)


class ThreatIntelligenceMetric(Model):
    """Describes threat intelligence metric.

    :param last_updated_time_utc: Last updated indicator metric
    :type last_updated_time_utc: str
    :param threat_type_metrics: Threat type metrics
    :type threat_type_metrics:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceMetricEntity]
    :param pattern_type_metrics: Pattern type metrics
    :type pattern_type_metrics:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceMetricEntity]
    :param source_metrics: Source metrics
    :type source_metrics:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceMetricEntity]
    """

    _attribute_map = {
        'last_updated_time_utc': {'key': 'lastUpdatedTimeUtc', 'type': 'str'},
        'threat_type_metrics': {'key': 'threatTypeMetrics', 'type': '[ThreatIntelligenceMetricEntity]'},
        'pattern_type_metrics': {'key': 'patternTypeMetrics', 'type': '[ThreatIntelligenceMetricEntity]'},
        'source_metrics': {'key': 'sourceMetrics', 'type': '[ThreatIntelligenceMetricEntity]'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceMetric, self).__init__(**kwargs)
        self.last_updated_time_utc = kwargs.get('last_updated_time_utc', None)
        self.threat_type_metrics = kwargs.get('threat_type_metrics', None)
        self.pattern_type_metrics = kwargs.get('pattern_type_metrics', None)
        self.source_metrics = kwargs.get('source_metrics', None)


class ThreatIntelligenceMetricEntity(Model):
    """Describes threat intelligence metric entity.

    :param metric_name: Metric name
    :type metric_name: str
    :param metric_value: Metric value
    :type metric_value: int
    """

    _attribute_map = {
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_value': {'key': 'metricValue', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceMetricEntity, self).__init__(**kwargs)
        self.metric_name = kwargs.get('metric_name', None)
        self.metric_value = kwargs.get('metric_value', None)


class ThreatIntelligenceMetrics(Model):
    """Threat intelligence metrics.

    :param properties: Threat intelligence metrics.
    :type properties:
     ~azure.mgmt.securityinsight.models.ThreatIntelligenceMetric
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'ThreatIntelligenceMetric'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceMetrics, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ThreatIntelligenceMetricsList(Model):
    """List of all the threat intelligence metric fields (type/threat
    type/source).

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Array of threat intelligence metric fields
     (type/threat type/source).
    :type value:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligenceMetrics]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ThreatIntelligenceMetrics]'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceMetricsList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ThreatIntelligenceSortingCriteria1(Model):
    """List of available columns for sorting.

    :param item_key: Column name
    :type item_key: str
    :param sort_order: Sorting order (ascending/descending/unsorted). Possible
     values include: 'unsorted', 'ascending', 'descending'
    :type sort_order: str or
     ~azure.mgmt.securityinsight.models.ThreatIntelligenceSortingCriteria
    """

    _attribute_map = {
        'item_key': {'key': 'itemKey', 'type': 'str'},
        'sort_order': {'key': 'sortOrder', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ThreatIntelligenceSortingCriteria1, self).__init__(**kwargs)
        self.item_key = kwargs.get('item_key', None)
        self.sort_order = kwargs.get('sort_order', None)


class TICheckRequirements(DataConnectorsCheckRequirements):
    """Threat Intelligence Platforms data connector check requirements.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TICheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'ThreatIntelligence'


class TIDataConnector(DataConnector):
    """Data connector to pull threat intelligence data from TIP products.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.TIDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'TIDataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(TIDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'ThreatIntelligence'


class TIDataConnectorDataTypes(Model):
    """The available data types for Threat Intelligence Platforms data connector.

    :param indicators: Data type for Threat Intelligence Platforms data
     connector.
    :type indicators:
     ~azure.mgmt.securityinsight.models.TIDataConnectorDataTypesIndicators
    """

    _attribute_map = {
        'indicators': {'key': 'indicators', 'type': 'TIDataConnectorDataTypesIndicators'},
    }

    def __init__(self, **kwargs):
        super(TIDataConnectorDataTypes, self).__init__(**kwargs)
        self.indicators = kwargs.get('indicators', None)


class TIDataConnectorDataTypesIndicators(DataConnectorDataTypeCommon):
    """Data type for Threat Intelligence Platforms data connector.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TIDataConnectorDataTypesIndicators, self).__init__(**kwargs)


class TimelineAggregation(Model):
    """timeline aggregation information per kind.

    All required parameters must be populated in order to send to Azure.

    :param count: Required. the total items found for a kind
    :type count: int
    :param kind: Required. the query kind. Possible values include:
     'Activity', 'Bookmark', 'SecurityAlert'
    :type kind: str or ~azure.mgmt.securityinsight.models.EntityTimelineKind
    """

    _validation = {
        'count': {'required': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TimelineAggregation, self).__init__(**kwargs)
        self.count = kwargs.get('count', None)
        self.kind = kwargs.get('kind', None)


class TimelineError(Model):
    """Timeline Query Errors.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. the query kind. Possible values include:
     'Activity', 'Bookmark', 'SecurityAlert'
    :type kind: str or ~azure.mgmt.securityinsight.models.EntityTimelineKind
    :param query_id: the query id
    :type query_id: str
    :param error_message: Required. the error message
    :type error_message: str
    """

    _validation = {
        'kind': {'required': True},
        'error_message': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'query_id': {'key': 'queryId', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TimelineError, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)
        self.query_id = kwargs.get('query_id', None)
        self.error_message = kwargs.get('error_message', None)


class TimelineResultsMetadata(Model):
    """Expansion result metadata.

    All required parameters must be populated in order to send to Azure.

    :param total_count: Required. the total items found for the timeline
     request
    :type total_count: int
    :param aggregations: Required. timeline aggregation per kind
    :type aggregations:
     list[~azure.mgmt.securityinsight.models.TimelineAggregation]
    :param errors: information about the failure queries
    :type errors: list[~azure.mgmt.securityinsight.models.TimelineError]
    """

    _validation = {
        'total_count': {'required': True},
        'aggregations': {'required': True},
    }

    _attribute_map = {
        'total_count': {'key': 'totalCount', 'type': 'int'},
        'aggregations': {'key': 'aggregations', 'type': '[TimelineAggregation]'},
        'errors': {'key': 'errors', 'type': '[TimelineError]'},
    }

    def __init__(self, **kwargs):
        super(TimelineResultsMetadata, self).__init__(**kwargs)
        self.total_count = kwargs.get('total_count', None)
        self.aggregations = kwargs.get('aggregations', None)
        self.errors = kwargs.get('errors', None)


class TiTaxiiCheckRequirements(DataConnectorsCheckRequirements):
    """Threat Intelligence TAXII data connector check requirements.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TiTaxiiCheckRequirements, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.kind = 'ThreatIntelligenceTaxii'


class TiTaxiiDataConnector(DataConnector):
    """Data connector to pull Threat intelligence data from TAXII 2.0/2.1 server.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param workspace_id: The workspace id.
    :type workspace_id: str
    :param friendly_name: The friendly name for the TAXII server.
    :type friendly_name: str
    :param taxii_server: The API root for the TAXII server.
    :type taxii_server: str
    :param collection_id: The collection id of the TAXII server.
    :type collection_id: str
    :param user_name: The userName for the TAXII server.
    :type user_name: str
    :param password: The password for the TAXII server.
    :type password: str
    :param data_types: The available data types for Threat Intelligence TAXII
     data connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.TiTaxiiDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'workspace_id': {'key': 'properties.workspaceId', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'taxii_server': {'key': 'properties.taxiiServer', 'type': 'str'},
        'collection_id': {'key': 'properties.collectionId', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'TiTaxiiDataConnectorDataTypes'},
    }

    def __init__(self, **kwargs):
        super(TiTaxiiDataConnector, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.friendly_name = kwargs.get('friendly_name', None)
        self.taxii_server = kwargs.get('taxii_server', None)
        self.collection_id = kwargs.get('collection_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.password = kwargs.get('password', None)
        self.data_types = kwargs.get('data_types', None)
        self.kind = 'ThreatIntelligenceTaxii'


class TiTaxiiDataConnectorDataTypes(Model):
    """The available data types for Threat Intelligence TAXII data connector.

    :param taxii_client: Data type for TAXII connector.
    :type taxii_client:
     ~azure.mgmt.securityinsight.models.TiTaxiiDataConnectorDataTypesTaxiiClient
    """

    _attribute_map = {
        'taxii_client': {'key': 'taxiiClient', 'type': 'TiTaxiiDataConnectorDataTypesTaxiiClient'},
    }

    def __init__(self, **kwargs):
        super(TiTaxiiDataConnectorDataTypes, self).__init__(**kwargs)
        self.taxii_client = kwargs.get('taxii_client', None)


class TiTaxiiDataConnectorDataTypesTaxiiClient(DataConnectorDataTypeCommon):
    """Data type for TAXII connector.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TiTaxiiDataConnectorDataTypesTaxiiClient, self).__init__(**kwargs)


class Ueba(Settings):
    """Settings with single toggle.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param data_sources: The relevant data sources that enriched by ueba
    :type data_sources: list[str or
     ~azure.mgmt.securityinsight.models.UebaDataSources]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_sources': {'key': 'properties.dataSources', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(Ueba, self).__init__(**kwargs)
        self.data_sources = kwargs.get('data_sources', None)
        self.kind = 'Ueba'


class UrlEntity(Entity):
    """Represents a url entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar url: A full URL the entity points to
    :vartype url: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'url': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'url': {'key': 'properties.url', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UrlEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.url = None
        self.kind = 'Url'


class UserInfo(Model):
    """User information that made some action.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar email: The email of the user.
    :vartype email: str
    :ivar name: The name of the user.
    :vartype name: str
    :param object_id: The object id of the user.
    :type object_id: str
    """

    _validation = {
        'email': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UserInfo, self).__init__(**kwargs)
        self.email = None
        self.name = None
        self.object_id = kwargs.get('object_id', None)


class Watchlist(ResourceWithEtag):
    """Represents a Watchlist in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param watchlist_id: The id (a Guid) of the watchlist
    :type watchlist_id: str
    :param display_name: Required. The display name of the watchlist
    :type display_name: str
    :param provider: Required. The provider of the watchlist
    :type provider: str
    :param source: Required. The source of the watchlist. Possible values
     include: 'Local file', 'Remote storage'
    :type source: str or ~azure.mgmt.securityinsight.models.Source
    :param created: The time the watchlist was created
    :type created: datetime
    :param updated: The last time the watchlist was updated
    :type updated: datetime
    :param created_by: Describes a user that created the watchlist
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param updated_by: Describes a user that updated the watchlist
    :type updated_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param description: A description of the watchlist
    :type description: str
    :param watchlist_type: The type of the watchlist
    :type watchlist_type: str
    :param watchlist_alias: The alias of the watchlist
    :type watchlist_alias: str
    :param is_deleted: A flag that indicates if the watchlist is deleted or
     not
    :type is_deleted: bool
    :param labels: List of labels relevant to this watchlist
    :type labels: list[str]
    :param default_duration: The default duration of a watchlist (in ISO 8601
     duration format)
    :type default_duration: timedelta
    :param tenant_id: The tenantId where the watchlist belongs to
    :type tenant_id: str
    :param number_of_lines_to_skip: The number of lines in a csv/tsv content
     to skip before the header
    :type number_of_lines_to_skip: int
    :param raw_content: The raw content that represents to watchlist items to
     create. In case of csv/tsv content type, it's the content of the file that
     will parsed by the endpoint
    :type raw_content: str
    :param content_type: The content type of the raw content. Example :
     text/csv or text/tsv
    :type content_type: str
    :param upload_status: The status of the Watchlist upload : New, InProgress
     or Complete. Pls note : When a Watchlist upload status is equal to
     InProgress, the Watchlist cannot be deleted
    :type upload_status: str
    :param watchlist_items_count: The number of Watchlist Items in the
     Watchlist
    :type watchlist_items_count: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'required': True},
        'provider': {'required': True},
        'source': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'watchlist_id': {'key': 'properties.watchlistId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'provider': {'key': 'properties.provider', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'iso-8601'},
        'updated': {'key': 'properties.updated', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'UserInfo'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'UserInfo'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'watchlist_type': {'key': 'properties.watchlistType', 'type': 'str'},
        'watchlist_alias': {'key': 'properties.watchlistAlias', 'type': 'str'},
        'is_deleted': {'key': 'properties.isDeleted', 'type': 'bool'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'default_duration': {'key': 'properties.defaultDuration', 'type': 'duration'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'number_of_lines_to_skip': {'key': 'properties.numberOfLinesToSkip', 'type': 'int'},
        'raw_content': {'key': 'properties.rawContent', 'type': 'str'},
        'content_type': {'key': 'properties.contentType', 'type': 'str'},
        'upload_status': {'key': 'properties.uploadStatus', 'type': 'str'},
        'watchlist_items_count': {'key': 'properties.watchlistItemsCount', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Watchlist, self).__init__(**kwargs)
        self.watchlist_id = kwargs.get('watchlist_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.provider = kwargs.get('provider', None)
        self.source = kwargs.get('source', None)
        self.created = kwargs.get('created', None)
        self.updated = kwargs.get('updated', None)
        self.created_by = kwargs.get('created_by', None)
        self.updated_by = kwargs.get('updated_by', None)
        self.description = kwargs.get('description', None)
        self.watchlist_type = kwargs.get('watchlist_type', None)
        self.watchlist_alias = kwargs.get('watchlist_alias', None)
        self.is_deleted = kwargs.get('is_deleted', None)
        self.labels = kwargs.get('labels', None)
        self.default_duration = kwargs.get('default_duration', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.number_of_lines_to_skip = kwargs.get('number_of_lines_to_skip', None)
        self.raw_content = kwargs.get('raw_content', None)
        self.content_type = kwargs.get('content_type', None)
        self.upload_status = kwargs.get('upload_status', None)
        self.watchlist_items_count = kwargs.get('watchlist_items_count', None)


class WatchlistItem(ResourceWithEtag):
    """Represents a Watchlist item in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param watchlist_item_type: The type of the watchlist item
    :type watchlist_item_type: str
    :param watchlist_item_id: The id (a Guid) of the watchlist item
    :type watchlist_item_id: str
    :param tenant_id: The tenantId to which the watchlist item belongs to
    :type tenant_id: str
    :param is_deleted: A flag that indicates if the watchlist item is deleted
     or not
    :type is_deleted: bool
    :param created: The time the watchlist item was created
    :type created: datetime
    :param updated: The last time the watchlist item was updated
    :type updated: datetime
    :param created_by: Describes a user that created the watchlist item
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param updated_by: Describes a user that updated the watchlist item
    :type updated_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param items_key_value: Required. key-value pairs for a watchlist item
    :type items_key_value: object
    :param entity_mapping: key-value pairs for a watchlist item entity mapping
    :type entity_mapping: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'items_key_value': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'watchlist_item_type': {'key': 'properties.watchlistItemType', 'type': 'str'},
        'watchlist_item_id': {'key': 'properties.watchlistItemId', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'is_deleted': {'key': 'properties.isDeleted', 'type': 'bool'},
        'created': {'key': 'properties.created', 'type': 'iso-8601'},
        'updated': {'key': 'properties.updated', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'UserInfo'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'UserInfo'},
        'items_key_value': {'key': 'properties.itemsKeyValue', 'type': 'object'},
        'entity_mapping': {'key': 'properties.entityMapping', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(WatchlistItem, self).__init__(**kwargs)
        self.watchlist_item_type = kwargs.get('watchlist_item_type', None)
        self.watchlist_item_id = kwargs.get('watchlist_item_id', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.is_deleted = kwargs.get('is_deleted', None)
        self.created = kwargs.get('created', None)
        self.updated = kwargs.get('updated', None)
        self.created_by = kwargs.get('created_by', None)
        self.updated_by = kwargs.get('updated_by', None)
        self.items_key_value = kwargs.get('items_key_value', None)
        self.entity_mapping = kwargs.get('entity_mapping', None)
