# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._lab_services_client_enums import *


class AutoShutdownProfile(msrest.serialization.Model):
    """Profile for how to handle shutting down virtual machines.

    :param shutdown_on_disconnect: Whether shutdown on disconnect is enabled. Possible values
     include: "Enabled", "Disabled".
    :type shutdown_on_disconnect: str or ~azure.mgmt.labservices.models.EnableState
    :param shutdown_when_not_connected: Whether a VM will get shutdown when it hasn't been
     connected to after a period of time. Possible values include: "Enabled", "Disabled".
    :type shutdown_when_not_connected: str or ~azure.mgmt.labservices.models.EnableState
    :param shutdown_on_idle: Whether a VM will get shutdown when it has idled for a period of time.
     Possible values include: "None", "UserAbsence", "LowUsage".
    :type shutdown_on_idle: str or ~azure.mgmt.labservices.models.ShutdownOnIdleMode
    :param disconnect_delay: The amount of time a VM will stay running after a user disconnects if
     this behavior is enabled.
    :type disconnect_delay: ~datetime.timedelta
    :param no_connect_delay: The amount of time a VM will stay running before it is shutdown if no
     connection is made and this behavior is enabled.
    :type no_connect_delay: ~datetime.timedelta
    :param idle_delay: The amount of time a VM will idle before it is shutdown if this behavior is
     enabled.
    :type idle_delay: ~datetime.timedelta
    """

    _attribute_map = {
        'shutdown_on_disconnect': {'key': 'shutdownOnDisconnect', 'type': 'str'},
        'shutdown_when_not_connected': {'key': 'shutdownWhenNotConnected', 'type': 'str'},
        'shutdown_on_idle': {'key': 'shutdownOnIdle', 'type': 'str'},
        'disconnect_delay': {'key': 'disconnectDelay', 'type': 'duration'},
        'no_connect_delay': {'key': 'noConnectDelay', 'type': 'duration'},
        'idle_delay': {'key': 'idleDelay', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        shutdown_on_disconnect: Optional[Union[str, "EnableState"]] = None,
        shutdown_when_not_connected: Optional[Union[str, "EnableState"]] = None,
        shutdown_on_idle: Optional[Union[str, "ShutdownOnIdleMode"]] = None,
        disconnect_delay: Optional[datetime.timedelta] = None,
        no_connect_delay: Optional[datetime.timedelta] = None,
        idle_delay: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(AutoShutdownProfile, self).__init__(**kwargs)
        self.shutdown_on_disconnect = shutdown_on_disconnect
        self.shutdown_when_not_connected = shutdown_when_not_connected
        self.shutdown_on_idle = shutdown_on_idle
        self.disconnect_delay = disconnect_delay
        self.no_connect_delay = no_connect_delay
        self.idle_delay = idle_delay


class ConnectionProfile(msrest.serialization.Model):
    """Connection profile for how users connect to lab virtual machines.

    :param web_ssh_access: The enabled access level for Web Access over SSH. Possible values
     include: "Public", "Private", "None".
    :type web_ssh_access: str or ~azure.mgmt.labservices.models.ConnectionType
    :param web_rdp_access: The enabled access level for Web Access over RDP. Possible values
     include: "Public", "Private", "None".
    :type web_rdp_access: str or ~azure.mgmt.labservices.models.ConnectionType
    :param client_ssh_access: The enabled access level for Client Access over SSH. Possible values
     include: "Public", "Private", "None".
    :type client_ssh_access: str or ~azure.mgmt.labservices.models.ConnectionType
    :param client_rdp_access: The enabled access level for Client Access over RDP. Possible values
     include: "Public", "Private", "None".
    :type client_rdp_access: str or ~azure.mgmt.labservices.models.ConnectionType
    """

    _attribute_map = {
        'web_ssh_access': {'key': 'webSshAccess', 'type': 'str'},
        'web_rdp_access': {'key': 'webRdpAccess', 'type': 'str'},
        'client_ssh_access': {'key': 'clientSshAccess', 'type': 'str'},
        'client_rdp_access': {'key': 'clientRdpAccess', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        web_ssh_access: Optional[Union[str, "ConnectionType"]] = None,
        web_rdp_access: Optional[Union[str, "ConnectionType"]] = None,
        client_ssh_access: Optional[Union[str, "ConnectionType"]] = None,
        client_rdp_access: Optional[Union[str, "ConnectionType"]] = None,
        **kwargs
    ):
        super(ConnectionProfile, self).__init__(**kwargs)
        self.web_ssh_access = web_ssh_access
        self.web_rdp_access = web_rdp_access
        self.client_ssh_access = client_ssh_access
        self.client_rdp_access = client_rdp_access


class Credentials(msrest.serialization.Model):
    """Credentials for a user on a lab VM.

    All required parameters must be populated in order to send to Azure.

    :param username: Required. The username to use when signing in to lab VMs.
    :type username: str
    :param password: The password for the user. This is required for the TemplateVM createOption.
    :type password: str
    """

    _validation = {
        'username': {'required': True},
    }

    _attribute_map = {
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        username: str,
        password: Optional[str] = None,
        **kwargs
    ):
        super(Credentials, self).__init__(**kwargs)
        self.username = username
        self.password = password


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.labservices.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.labservices.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.mgmt.labservices.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class Image(ProxyResource):
    """Lab services virtual machine image.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the image.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :param enabled_state: Is the image enabled. Possible values include: "Enabled", "Disabled".
    :type enabled_state: str or ~azure.mgmt.labservices.models.EnableState
    :ivar provisioning_state: Current provisioning state of the image. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :ivar display_name: The image display name.
    :vartype display_name: str
    :ivar description: A description of the image.
    :vartype description: str
    :ivar icon_url: URL of the image icon.
    :vartype icon_url: str
    :ivar author: The image author.
    :vartype author: str
    :ivar os_type: The OS Type of the image. Possible values include: "Windows", "Linux".
    :vartype os_type: str or ~azure.mgmt.labservices.models.OsType
    :ivar plan: The ID of marketplace plan associated with the image (optional).
    :vartype plan: str
    :ivar terms_status: The status of image terms of use (enabled = accepted, disabled = not
     accepted). Possible values include: "Enabled", "Disabled".
    :vartype terms_status: str or ~azure.mgmt.labservices.models.EnableState
    :ivar offer: The ID of an offer associated with the image.
    :vartype offer: str
    :ivar publisher: The ID of the publisher of the image.
    :vartype publisher: str
    :ivar sku: The image SKU.
    :vartype sku: str
    :ivar version: The image version.
    :vartype version: str
    :ivar shared_gallery_id: The ID for the image in the shared gallery.
    :vartype shared_gallery_id: str
    :param available_regions: The available regions of the image in the shared gallery.
    :type available_regions: list[str]
    :ivar os_state: The OS State of the image. Possible values include: "Generalized",
     "Specialized".
    :vartype os_state: str or ~azure.mgmt.labservices.models.OsState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'display_name': {'readonly': True},
        'description': {'readonly': True},
        'icon_url': {'readonly': True},
        'author': {'readonly': True},
        'os_type': {'readonly': True},
        'plan': {'readonly': True},
        'terms_status': {'readonly': True},
        'offer': {'readonly': True},
        'publisher': {'readonly': True},
        'sku': {'readonly': True},
        'version': {'readonly': True},
        'shared_gallery_id': {'readonly': True, 'max_length': 2000, 'min_length': 3},
        'os_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'enabled_state': {'key': 'properties.enabledState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'icon_url': {'key': 'properties.iconUrl', 'type': 'str'},
        'author': {'key': 'properties.author', 'type': 'str'},
        'os_type': {'key': 'properties.osType', 'type': 'str'},
        'plan': {'key': 'properties.plan', 'type': 'str'},
        'terms_status': {'key': 'properties.termsStatus', 'type': 'str'},
        'offer': {'key': 'properties.offer', 'type': 'str'},
        'publisher': {'key': 'properties.publisher', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'shared_gallery_id': {'key': 'properties.sharedGalleryId', 'type': 'str'},
        'available_regions': {'key': 'properties.availableRegions', 'type': '[str]'},
        'os_state': {'key': 'properties.osState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled_state: Optional[Union[str, "EnableState"]] = None,
        available_regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(Image, self).__init__(**kwargs)
        self.system_data = None
        self.enabled_state = enabled_state
        self.provisioning_state = None
        self.display_name = None
        self.description = None
        self.icon_url = None
        self.author = None
        self.os_type = None
        self.plan = None
        self.terms_status = None
        self.offer = None
        self.publisher = None
        self.sku = None
        self.version = None
        self.shared_gallery_id = None
        self.available_regions = available_regions
        self.os_state = None


class ImageUpdateProperties(msrest.serialization.Model):
    """Properties of an image resource update.

    :param enabled_state: Is the image enabled. Possible values include: "Enabled", "Disabled".
    :type enabled_state: str or ~azure.mgmt.labservices.models.EnableState
    """

    _attribute_map = {
        'enabled_state': {'key': 'enabledState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled_state: Optional[Union[str, "EnableState"]] = None,
        **kwargs
    ):
        super(ImageUpdateProperties, self).__init__(**kwargs)
        self.enabled_state = enabled_state


class ImageProperties(ImageUpdateProperties):
    """Properties of an image resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param enabled_state: Is the image enabled. Possible values include: "Enabled", "Disabled".
    :type enabled_state: str or ~azure.mgmt.labservices.models.EnableState
    :ivar provisioning_state: Current provisioning state of the image. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :ivar display_name: The image display name.
    :vartype display_name: str
    :ivar description: A description of the image.
    :vartype description: str
    :ivar icon_url: URL of the image icon.
    :vartype icon_url: str
    :ivar author: The image author.
    :vartype author: str
    :ivar os_type: The OS Type of the image. Possible values include: "Windows", "Linux".
    :vartype os_type: str or ~azure.mgmt.labservices.models.OsType
    :ivar plan: The ID of marketplace plan associated with the image (optional).
    :vartype plan: str
    :ivar terms_status: The status of image terms of use (enabled = accepted, disabled = not
     accepted). Possible values include: "Enabled", "Disabled".
    :vartype terms_status: str or ~azure.mgmt.labservices.models.EnableState
    :ivar offer: The ID of an offer associated with the image.
    :vartype offer: str
    :ivar publisher: The ID of the publisher of the image.
    :vartype publisher: str
    :ivar sku: The image SKU.
    :vartype sku: str
    :ivar version: The image version.
    :vartype version: str
    :ivar shared_gallery_id: The ID for the image in the shared gallery.
    :vartype shared_gallery_id: str
    :param available_regions: The available regions of the image in the shared gallery.
    :type available_regions: list[str]
    :ivar os_state: The OS State of the image. Possible values include: "Generalized",
     "Specialized".
    :vartype os_state: str or ~azure.mgmt.labservices.models.OsState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'display_name': {'readonly': True},
        'description': {'readonly': True},
        'icon_url': {'readonly': True},
        'author': {'readonly': True},
        'os_type': {'readonly': True},
        'plan': {'readonly': True},
        'terms_status': {'readonly': True},
        'offer': {'readonly': True},
        'publisher': {'readonly': True},
        'sku': {'readonly': True},
        'version': {'readonly': True},
        'shared_gallery_id': {'readonly': True, 'max_length': 2000, 'min_length': 3},
        'os_state': {'readonly': True},
    }

    _attribute_map = {
        'enabled_state': {'key': 'enabledState', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'icon_url': {'key': 'iconUrl', 'type': 'str'},
        'author': {'key': 'author', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'plan': {'key': 'plan', 'type': 'str'},
        'terms_status': {'key': 'termsStatus', 'type': 'str'},
        'offer': {'key': 'offer', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'shared_gallery_id': {'key': 'sharedGalleryId', 'type': 'str'},
        'available_regions': {'key': 'availableRegions', 'type': '[str]'},
        'os_state': {'key': 'osState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled_state: Optional[Union[str, "EnableState"]] = None,
        available_regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(ImageProperties, self).__init__(enabled_state=enabled_state, **kwargs)
        self.provisioning_state = None
        self.display_name = None
        self.description = None
        self.icon_url = None
        self.author = None
        self.os_type = None
        self.plan = None
        self.terms_status = None
        self.offer = None
        self.publisher = None
        self.sku = None
        self.version = None
        self.shared_gallery_id = None
        self.available_regions = available_regions
        self.os_state = None


class ImageReference(msrest.serialization.Model):
    """Image reference information. Used in the virtual machine profile.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Image resource ID.
    :type id: str
    :param offer: The image offer if applicable.
    :type offer: str
    :param publisher: The image publisher.
    :type publisher: str
    :param sku: The image SKU.
    :type sku: str
    :param version: The image version specified on creation.
    :type version: str
    :ivar exact_version: The actual version of the image after use.
    :vartype exact_version: str
    """

    _validation = {
        'id': {'max_length': 2000, 'min_length': 3},
        'exact_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'offer': {'key': 'offer', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'exact_version': {'key': 'exactVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        offer: Optional[str] = None,
        publisher: Optional[str] = None,
        sku: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(ImageReference, self).__init__(**kwargs)
        self.id = id
        self.offer = offer
        self.publisher = publisher
        self.sku = sku
        self.version = version
        self.exact_version = None


class ImageUpdate(msrest.serialization.Model):
    """Lab services virtual machine image for updates.

    :param enabled_state: Is the image enabled. Possible values include: "Enabled", "Disabled".
    :type enabled_state: str or ~azure.mgmt.labservices.models.EnableState
    """

    _attribute_map = {
        'enabled_state': {'key': 'properties.enabledState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled_state: Optional[Union[str, "EnableState"]] = None,
        **kwargs
    ):
        super(ImageUpdate, self).__init__(**kwargs)
        self.enabled_state = enabled_state


class InviteBody(msrest.serialization.Model):
    """Body for a user invite request.

    :param text: Custom text for the invite email.
    :type text: str
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        **kwargs
    ):
        super(InviteBody, self).__init__(**kwargs)
        self.text = text


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class Lab(TrackedResource):
    """The lab resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the lab.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :param auto_shutdown_profile: The resource auto shutdown configuration for the lab. This
     controls whether actions are taken on resources that are sitting idle.
    :type auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param connection_profile: The connection profile for the lab. This controls settings such as
     web access to lab resources or whether RDP or SSH ports are open.
    :type connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param virtual_machine_profile: The profile used for creating lab virtual machines.
    :type virtual_machine_profile: ~azure.mgmt.labservices.models.VirtualMachineProfile
    :param security_profile: The lab security profile.
    :type security_profile: ~azure.mgmt.labservices.models.SecurityProfile
    :param roster_profile: The lab user list management profile.
    :type roster_profile: ~azure.mgmt.labservices.models.RosterProfile
    :param lab_plan_id: The ID of the lab plan. Used during resource creation to provide defaults
     and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId
     on an existing lab provides organization..
    :type lab_plan_id: str
    :param title: The title of the lab.
    :type title: str
    :param description: The description of the lab.
    :type description: str
    :ivar provisioning_state: Current provisioning state of the lab. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :param network_profile: The network profile for the lab, typically applied via a lab plan. This
     profile cannot be modified once a lab has been created.
    :type network_profile: ~azure.mgmt.labservices.models.LabNetworkProfile
    :ivar state: The lab state. Possible values include: "Draft", "Publishing", "Scaling",
     "Syncing", "Published".
    :vartype state: str or ~azure.mgmt.labservices.models.LabState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'lab_plan_id': {'max_length': 2000, 'min_length': 3},
        'title': {'max_length': 120, 'min_length': 1},
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'auto_shutdown_profile': {'key': 'properties.autoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'connection_profile': {'key': 'properties.connectionProfile', 'type': 'ConnectionProfile'},
        'virtual_machine_profile': {'key': 'properties.virtualMachineProfile', 'type': 'VirtualMachineProfile'},
        'security_profile': {'key': 'properties.securityProfile', 'type': 'SecurityProfile'},
        'roster_profile': {'key': 'properties.rosterProfile', 'type': 'RosterProfile'},
        'lab_plan_id': {'key': 'properties.labPlanId', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'LabNetworkProfile'},
        'state': {'key': 'properties.state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        connection_profile: Optional["ConnectionProfile"] = None,
        virtual_machine_profile: Optional["VirtualMachineProfile"] = None,
        security_profile: Optional["SecurityProfile"] = None,
        roster_profile: Optional["RosterProfile"] = None,
        lab_plan_id: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        network_profile: Optional["LabNetworkProfile"] = None,
        **kwargs
    ):
        super(Lab, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.auto_shutdown_profile = auto_shutdown_profile
        self.connection_profile = connection_profile
        self.virtual_machine_profile = virtual_machine_profile
        self.security_profile = security_profile
        self.roster_profile = roster_profile
        self.lab_plan_id = lab_plan_id
        self.title = title
        self.description = description
        self.provisioning_state = None
        self.network_profile = network_profile
        self.state = None


class LabNetworkProfile(msrest.serialization.Model):
    """Profile for how to handle networking for Labs.

    :param subnet_id: The external subnet resource id.
    :type subnet_id: str
    :param load_balancer_id: The external load balancer resource id.
    :type load_balancer_id: str
    :param public_ip_id: The external public IP resource id.
    :type public_ip_id: str
    """

    _validation = {
        'subnet_id': {'max_length': 2000, 'min_length': 3},
        'load_balancer_id': {'max_length': 2000, 'min_length': 3},
        'public_ip_id': {'max_length': 2000, 'min_length': 3},
    }

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'load_balancer_id': {'key': 'loadBalancerId', 'type': 'str'},
        'public_ip_id': {'key': 'publicIpId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
        load_balancer_id: Optional[str] = None,
        public_ip_id: Optional[str] = None,
        **kwargs
    ):
        super(LabNetworkProfile, self).__init__(**kwargs)
        self.subnet_id = subnet_id
        self.load_balancer_id = load_balancer_id
        self.public_ip_id = public_ip_id


class LabPlan(TrackedResource):
    """Lab Plans act as a permission container for creating labs via labs.azure.com. Additionally, they can provide a set of default configurations that will apply at the time of creating a lab, but these defaults can still be overwritten.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the lab plan.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :param default_connection_profile: The default lab connection profile. This can be changed on a
     lab resource and only provides a default profile.
    :type default_connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param default_auto_shutdown_profile: The default lab shutdown profile. This can be changed on
     a lab resource and only provides a default profile.
    :type default_auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param default_network_profile: The lab plan network profile. To enforce lab network policies
     they must be defined here and cannot be changed when there are existing labs associated with
     this lab plan.
    :type default_network_profile: ~azure.mgmt.labservices.models.LabPlanNetworkProfile
    :param allowed_regions: The allowed regions for the lab creator to use when creating labs using
     this lab plan.
    :type allowed_regions: list[str]
    :param shared_gallery_id: Resource ID of the Shared Image Gallery attached to this lab plan.
     When saving a lab template virtual machine image it will be persisted in this gallery. Shared
     images from the gallery can be made available to use when creating new labs.
    :type shared_gallery_id: str
    :param support_info: Support contact information and instructions for users of the lab plan.
     This information is displayed to lab owners and virtual machine users for all labs in the lab
     plan.
    :type support_info: ~azure.mgmt.labservices.models.SupportInfo
    :param linked_lms_instance: Base Url of the lms instance this lab plan can link lab rosters
     against.
    :type linked_lms_instance: str
    :ivar provisioning_state: Current provisioning state of the lab plan. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'shared_gallery_id': {'max_length': 2000, 'min_length': 3},
        'linked_lms_instance': {'max_length': 2000, 'min_length': 3},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'default_connection_profile': {'key': 'properties.defaultConnectionProfile', 'type': 'ConnectionProfile'},
        'default_auto_shutdown_profile': {'key': 'properties.defaultAutoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'default_network_profile': {'key': 'properties.defaultNetworkProfile', 'type': 'LabPlanNetworkProfile'},
        'allowed_regions': {'key': 'properties.allowedRegions', 'type': '[str]'},
        'shared_gallery_id': {'key': 'properties.sharedGalleryId', 'type': 'str'},
        'support_info': {'key': 'properties.supportInfo', 'type': 'SupportInfo'},
        'linked_lms_instance': {'key': 'properties.linkedLmsInstance', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        default_connection_profile: Optional["ConnectionProfile"] = None,
        default_auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        default_network_profile: Optional["LabPlanNetworkProfile"] = None,
        allowed_regions: Optional[List[str]] = None,
        shared_gallery_id: Optional[str] = None,
        support_info: Optional["SupportInfo"] = None,
        linked_lms_instance: Optional[str] = None,
        **kwargs
    ):
        super(LabPlan, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.default_connection_profile = default_connection_profile
        self.default_auto_shutdown_profile = default_auto_shutdown_profile
        self.default_network_profile = default_network_profile
        self.allowed_regions = allowed_regions
        self.shared_gallery_id = shared_gallery_id
        self.support_info = support_info
        self.linked_lms_instance = linked_lms_instance
        self.provisioning_state = None


class LabPlanNetworkProfile(msrest.serialization.Model):
    """Profile for how to handle networking for Lab Plans.

    :param subnet_id: The external subnet resource id.
    :type subnet_id: str
    """

    _validation = {
        'subnet_id': {'max_length': 2000, 'min_length': 3},
    }

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
        **kwargs
    ):
        super(LabPlanNetworkProfile, self).__init__(**kwargs)
        self.subnet_id = subnet_id


class LabPlanUpdateProperties(msrest.serialization.Model):
    """Lab plan resource properties for updates.

    :param default_connection_profile: The default lab connection profile. This can be changed on a
     lab resource and only provides a default profile.
    :type default_connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param default_auto_shutdown_profile: The default lab shutdown profile. This can be changed on
     a lab resource and only provides a default profile.
    :type default_auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param default_network_profile: The lab plan network profile. To enforce lab network policies
     they must be defined here and cannot be changed when there are existing labs associated with
     this lab plan.
    :type default_network_profile: ~azure.mgmt.labservices.models.LabPlanNetworkProfile
    :param allowed_regions: The allowed regions for the lab creator to use when creating labs using
     this lab plan.
    :type allowed_regions: list[str]
    :param shared_gallery_id: Resource ID of the Shared Image Gallery attached to this lab plan.
     When saving a lab template virtual machine image it will be persisted in this gallery. Shared
     images from the gallery can be made available to use when creating new labs.
    :type shared_gallery_id: str
    :param support_info: Support contact information and instructions for users of the lab plan.
     This information is displayed to lab owners and virtual machine users for all labs in the lab
     plan.
    :type support_info: ~azure.mgmt.labservices.models.SupportInfo
    :param linked_lms_instance: Base Url of the lms instance this lab plan can link lab rosters
     against.
    :type linked_lms_instance: str
    """

    _validation = {
        'shared_gallery_id': {'max_length': 2000, 'min_length': 3},
        'linked_lms_instance': {'max_length': 2000, 'min_length': 3},
    }

    _attribute_map = {
        'default_connection_profile': {'key': 'defaultConnectionProfile', 'type': 'ConnectionProfile'},
        'default_auto_shutdown_profile': {'key': 'defaultAutoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'default_network_profile': {'key': 'defaultNetworkProfile', 'type': 'LabPlanNetworkProfile'},
        'allowed_regions': {'key': 'allowedRegions', 'type': '[str]'},
        'shared_gallery_id': {'key': 'sharedGalleryId', 'type': 'str'},
        'support_info': {'key': 'supportInfo', 'type': 'SupportInfo'},
        'linked_lms_instance': {'key': 'linkedLmsInstance', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        default_connection_profile: Optional["ConnectionProfile"] = None,
        default_auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        default_network_profile: Optional["LabPlanNetworkProfile"] = None,
        allowed_regions: Optional[List[str]] = None,
        shared_gallery_id: Optional[str] = None,
        support_info: Optional["SupportInfo"] = None,
        linked_lms_instance: Optional[str] = None,
        **kwargs
    ):
        super(LabPlanUpdateProperties, self).__init__(**kwargs)
        self.default_connection_profile = default_connection_profile
        self.default_auto_shutdown_profile = default_auto_shutdown_profile
        self.default_network_profile = default_network_profile
        self.allowed_regions = allowed_regions
        self.shared_gallery_id = shared_gallery_id
        self.support_info = support_info
        self.linked_lms_instance = linked_lms_instance


class LabPlanProperties(LabPlanUpdateProperties):
    """Lab plan resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param default_connection_profile: The default lab connection profile. This can be changed on a
     lab resource and only provides a default profile.
    :type default_connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param default_auto_shutdown_profile: The default lab shutdown profile. This can be changed on
     a lab resource and only provides a default profile.
    :type default_auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param default_network_profile: The lab plan network profile. To enforce lab network policies
     they must be defined here and cannot be changed when there are existing labs associated with
     this lab plan.
    :type default_network_profile: ~azure.mgmt.labservices.models.LabPlanNetworkProfile
    :param allowed_regions: The allowed regions for the lab creator to use when creating labs using
     this lab plan.
    :type allowed_regions: list[str]
    :param shared_gallery_id: Resource ID of the Shared Image Gallery attached to this lab plan.
     When saving a lab template virtual machine image it will be persisted in this gallery. Shared
     images from the gallery can be made available to use when creating new labs.
    :type shared_gallery_id: str
    :param support_info: Support contact information and instructions for users of the lab plan.
     This information is displayed to lab owners and virtual machine users for all labs in the lab
     plan.
    :type support_info: ~azure.mgmt.labservices.models.SupportInfo
    :param linked_lms_instance: Base Url of the lms instance this lab plan can link lab rosters
     against.
    :type linked_lms_instance: str
    :ivar provisioning_state: Current provisioning state of the lab plan. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    """

    _validation = {
        'shared_gallery_id': {'max_length': 2000, 'min_length': 3},
        'linked_lms_instance': {'max_length': 2000, 'min_length': 3},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'default_connection_profile': {'key': 'defaultConnectionProfile', 'type': 'ConnectionProfile'},
        'default_auto_shutdown_profile': {'key': 'defaultAutoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'default_network_profile': {'key': 'defaultNetworkProfile', 'type': 'LabPlanNetworkProfile'},
        'allowed_regions': {'key': 'allowedRegions', 'type': '[str]'},
        'shared_gallery_id': {'key': 'sharedGalleryId', 'type': 'str'},
        'support_info': {'key': 'supportInfo', 'type': 'SupportInfo'},
        'linked_lms_instance': {'key': 'linkedLmsInstance', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        default_connection_profile: Optional["ConnectionProfile"] = None,
        default_auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        default_network_profile: Optional["LabPlanNetworkProfile"] = None,
        allowed_regions: Optional[List[str]] = None,
        shared_gallery_id: Optional[str] = None,
        support_info: Optional["SupportInfo"] = None,
        linked_lms_instance: Optional[str] = None,
        **kwargs
    ):
        super(LabPlanProperties, self).__init__(default_connection_profile=default_connection_profile, default_auto_shutdown_profile=default_auto_shutdown_profile, default_network_profile=default_network_profile, allowed_regions=allowed_regions, shared_gallery_id=shared_gallery_id, support_info=support_info, linked_lms_instance=linked_lms_instance, **kwargs)
        self.provisioning_state = None


class TrackedResourceUpdate(msrest.serialization.Model):
    """Base tracked resource type for all PATCH updates.

    :param tags: A set of tags. Resource tags.
    :type tags: list[str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        **kwargs
    ):
        super(TrackedResourceUpdate, self).__init__(**kwargs)
        self.tags = tags


class LabPlanUpdate(TrackedResourceUpdate):
    """Contains lab configuration and default settings. This variant is used for PATCH.

    :param tags: A set of tags. Resource tags.
    :type tags: list[str]
    :param default_connection_profile: The default lab connection profile. This can be changed on a
     lab resource and only provides a default profile.
    :type default_connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param default_auto_shutdown_profile: The default lab shutdown profile. This can be changed on
     a lab resource and only provides a default profile.
    :type default_auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param default_network_profile: The lab plan network profile. To enforce lab network policies
     they must be defined here and cannot be changed when there are existing labs associated with
     this lab plan.
    :type default_network_profile: ~azure.mgmt.labservices.models.LabPlanNetworkProfile
    :param allowed_regions: The allowed regions for the lab creator to use when creating labs using
     this lab plan.
    :type allowed_regions: list[str]
    :param shared_gallery_id: Resource ID of the Shared Image Gallery attached to this lab plan.
     When saving a lab template virtual machine image it will be persisted in this gallery. Shared
     images from the gallery can be made available to use when creating new labs.
    :type shared_gallery_id: str
    :param support_info: Support contact information and instructions for users of the lab plan.
     This information is displayed to lab owners and virtual machine users for all labs in the lab
     plan.
    :type support_info: ~azure.mgmt.labservices.models.SupportInfo
    :param linked_lms_instance: Base Url of the lms instance this lab plan can link lab rosters
     against.
    :type linked_lms_instance: str
    """

    _validation = {
        'shared_gallery_id': {'max_length': 2000, 'min_length': 3},
        'linked_lms_instance': {'max_length': 2000, 'min_length': 3},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
        'default_connection_profile': {'key': 'properties.defaultConnectionProfile', 'type': 'ConnectionProfile'},
        'default_auto_shutdown_profile': {'key': 'properties.defaultAutoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'default_network_profile': {'key': 'properties.defaultNetworkProfile', 'type': 'LabPlanNetworkProfile'},
        'allowed_regions': {'key': 'properties.allowedRegions', 'type': '[str]'},
        'shared_gallery_id': {'key': 'properties.sharedGalleryId', 'type': 'str'},
        'support_info': {'key': 'properties.supportInfo', 'type': 'SupportInfo'},
        'linked_lms_instance': {'key': 'properties.linkedLmsInstance', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        default_connection_profile: Optional["ConnectionProfile"] = None,
        default_auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        default_network_profile: Optional["LabPlanNetworkProfile"] = None,
        allowed_regions: Optional[List[str]] = None,
        shared_gallery_id: Optional[str] = None,
        support_info: Optional["SupportInfo"] = None,
        linked_lms_instance: Optional[str] = None,
        **kwargs
    ):
        super(LabPlanUpdate, self).__init__(tags=tags, **kwargs)
        self.default_connection_profile = default_connection_profile
        self.default_auto_shutdown_profile = default_auto_shutdown_profile
        self.default_network_profile = default_network_profile
        self.allowed_regions = allowed_regions
        self.shared_gallery_id = shared_gallery_id
        self.support_info = support_info
        self.linked_lms_instance = linked_lms_instance


class LabUpdateProperties(msrest.serialization.Model):
    """Properties of a lab resource used for updates.

    :param auto_shutdown_profile: The resource auto shutdown configuration for the lab. This
     controls whether actions are taken on resources that are sitting idle.
    :type auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param connection_profile: The connection profile for the lab. This controls settings such as
     web access to lab resources or whether RDP or SSH ports are open.
    :type connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param virtual_machine_profile: The profile used for creating lab virtual machines.
    :type virtual_machine_profile: ~azure.mgmt.labservices.models.VirtualMachineProfile
    :param security_profile: The lab security profile.
    :type security_profile: ~azure.mgmt.labservices.models.SecurityProfile
    :param roster_profile: The lab user list management profile.
    :type roster_profile: ~azure.mgmt.labservices.models.RosterProfile
    :param lab_plan_id: The ID of the lab plan. Used during resource creation to provide defaults
     and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId
     on an existing lab provides organization..
    :type lab_plan_id: str
    :param title: The title of the lab.
    :type title: str
    :param description: The description of the lab.
    :type description: str
    """

    _validation = {
        'lab_plan_id': {'max_length': 2000, 'min_length': 3},
        'title': {'max_length': 120, 'min_length': 1},
    }

    _attribute_map = {
        'auto_shutdown_profile': {'key': 'autoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'connection_profile': {'key': 'connectionProfile', 'type': 'ConnectionProfile'},
        'virtual_machine_profile': {'key': 'virtualMachineProfile', 'type': 'VirtualMachineProfile'},
        'security_profile': {'key': 'securityProfile', 'type': 'SecurityProfile'},
        'roster_profile': {'key': 'rosterProfile', 'type': 'RosterProfile'},
        'lab_plan_id': {'key': 'labPlanId', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        connection_profile: Optional["ConnectionProfile"] = None,
        virtual_machine_profile: Optional["VirtualMachineProfile"] = None,
        security_profile: Optional["SecurityProfile"] = None,
        roster_profile: Optional["RosterProfile"] = None,
        lab_plan_id: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(LabUpdateProperties, self).__init__(**kwargs)
        self.auto_shutdown_profile = auto_shutdown_profile
        self.connection_profile = connection_profile
        self.virtual_machine_profile = virtual_machine_profile
        self.security_profile = security_profile
        self.roster_profile = roster_profile
        self.lab_plan_id = lab_plan_id
        self.title = title
        self.description = description


class LabProperties(LabUpdateProperties):
    """Properties of a lab resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param auto_shutdown_profile: The resource auto shutdown configuration for the lab. This
     controls whether actions are taken on resources that are sitting idle.
    :type auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param connection_profile: The connection profile for the lab. This controls settings such as
     web access to lab resources or whether RDP or SSH ports are open.
    :type connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param virtual_machine_profile: The profile used for creating lab virtual machines.
    :type virtual_machine_profile: ~azure.mgmt.labservices.models.VirtualMachineProfile
    :param security_profile: The lab security profile.
    :type security_profile: ~azure.mgmt.labservices.models.SecurityProfile
    :param roster_profile: The lab user list management profile.
    :type roster_profile: ~azure.mgmt.labservices.models.RosterProfile
    :param lab_plan_id: The ID of the lab plan. Used during resource creation to provide defaults
     and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId
     on an existing lab provides organization..
    :type lab_plan_id: str
    :param title: The title of the lab.
    :type title: str
    :param description: The description of the lab.
    :type description: str
    :ivar provisioning_state: Current provisioning state of the lab. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :param network_profile: The network profile for the lab, typically applied via a lab plan. This
     profile cannot be modified once a lab has been created.
    :type network_profile: ~azure.mgmt.labservices.models.LabNetworkProfile
    :ivar state: The lab state. Possible values include: "Draft", "Publishing", "Scaling",
     "Syncing", "Published".
    :vartype state: str or ~azure.mgmt.labservices.models.LabState
    """

    _validation = {
        'lab_plan_id': {'max_length': 2000, 'min_length': 3},
        'title': {'max_length': 120, 'min_length': 1},
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'auto_shutdown_profile': {'key': 'autoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'connection_profile': {'key': 'connectionProfile', 'type': 'ConnectionProfile'},
        'virtual_machine_profile': {'key': 'virtualMachineProfile', 'type': 'VirtualMachineProfile'},
        'security_profile': {'key': 'securityProfile', 'type': 'SecurityProfile'},
        'roster_profile': {'key': 'rosterProfile', 'type': 'RosterProfile'},
        'lab_plan_id': {'key': 'labPlanId', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'network_profile': {'key': 'networkProfile', 'type': 'LabNetworkProfile'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        connection_profile: Optional["ConnectionProfile"] = None,
        virtual_machine_profile: Optional["VirtualMachineProfile"] = None,
        security_profile: Optional["SecurityProfile"] = None,
        roster_profile: Optional["RosterProfile"] = None,
        lab_plan_id: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        network_profile: Optional["LabNetworkProfile"] = None,
        **kwargs
    ):
        super(LabProperties, self).__init__(auto_shutdown_profile=auto_shutdown_profile, connection_profile=connection_profile, virtual_machine_profile=virtual_machine_profile, security_profile=security_profile, roster_profile=roster_profile, lab_plan_id=lab_plan_id, title=title, description=description, **kwargs)
        self.provisioning_state = None
        self.network_profile = network_profile
        self.state = None


class LabUpdate(TrackedResourceUpdate):
    """The lab resource for updates.

    :param tags: A set of tags. Resource tags.
    :type tags: list[str]
    :param auto_shutdown_profile: The resource auto shutdown configuration for the lab. This
     controls whether actions are taken on resources that are sitting idle.
    :type auto_shutdown_profile: ~azure.mgmt.labservices.models.AutoShutdownProfile
    :param connection_profile: The connection profile for the lab. This controls settings such as
     web access to lab resources or whether RDP or SSH ports are open.
    :type connection_profile: ~azure.mgmt.labservices.models.ConnectionProfile
    :param virtual_machine_profile: The profile used for creating lab virtual machines.
    :type virtual_machine_profile: ~azure.mgmt.labservices.models.VirtualMachineProfile
    :param security_profile: The lab security profile.
    :type security_profile: ~azure.mgmt.labservices.models.SecurityProfile
    :param roster_profile: The lab user list management profile.
    :type roster_profile: ~azure.mgmt.labservices.models.RosterProfile
    :param lab_plan_id: The ID of the lab plan. Used during resource creation to provide defaults
     and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId
     on an existing lab provides organization..
    :type lab_plan_id: str
    :param title: The title of the lab.
    :type title: str
    :param description: The description of the lab.
    :type description: str
    """

    _validation = {
        'lab_plan_id': {'max_length': 2000, 'min_length': 3},
        'title': {'max_length': 120, 'min_length': 1},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
        'auto_shutdown_profile': {'key': 'properties.autoShutdownProfile', 'type': 'AutoShutdownProfile'},
        'connection_profile': {'key': 'properties.connectionProfile', 'type': 'ConnectionProfile'},
        'virtual_machine_profile': {'key': 'properties.virtualMachineProfile', 'type': 'VirtualMachineProfile'},
        'security_profile': {'key': 'properties.securityProfile', 'type': 'SecurityProfile'},
        'roster_profile': {'key': 'properties.rosterProfile', 'type': 'RosterProfile'},
        'lab_plan_id': {'key': 'properties.labPlanId', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        auto_shutdown_profile: Optional["AutoShutdownProfile"] = None,
        connection_profile: Optional["ConnectionProfile"] = None,
        virtual_machine_profile: Optional["VirtualMachineProfile"] = None,
        security_profile: Optional["SecurityProfile"] = None,
        roster_profile: Optional["RosterProfile"] = None,
        lab_plan_id: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(LabUpdate, self).__init__(tags=tags, **kwargs)
        self.auto_shutdown_profile = auto_shutdown_profile
        self.connection_profile = connection_profile
        self.virtual_machine_profile = virtual_machine_profile
        self.security_profile = security_profile
        self.roster_profile = roster_profile
        self.lab_plan_id = lab_plan_id
        self.title = title
        self.description = description


class Operation(msrest.serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :param display: Localized display information for this particular operation.
    :type display: ~azure.mgmt.labservices.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Possible values include: "user",
     "system", "user,system".
    :vartype origin: str or ~azure.mgmt.labservices.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. Possible values include: "Internal".
    :vartype action_type: str or ~azure.mgmt.labservices.models.ActionType
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'origin': {'readonly': True},
        'action_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display: Optional["OperationDisplay"] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(msrest.serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.labservices.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationResult(msrest.serialization.Model):
    """A long running operation result.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :param status: Required. The operation status. Possible values include: "NotStarted",
     "InProgress", "Succeeded", "Failed", "Canceled".
    :type status: str or ~azure.mgmt.labservices.models.OperationStatus
    :param start_time: Start time.
    :type start_time: ~datetime.datetime
    :param end_time: End time.
    :type end_time: ~datetime.datetime
    :param percent_complete: Percent completion.
    :type percent_complete: float
    :param error: The error for a failure if the operation failed.
    :type error: ~azure.mgmt.labservices.models.ErrorDetail
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'percent_complete': {'key': 'percentComplete', 'type': 'float'},
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        percent_complete: Optional[float] = None,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(OperationResult, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = status
        self.start_time = start_time
        self.end_time = end_time
        self.percent_complete = percent_complete
        self.error = error


class PagedImages(msrest.serialization.Model):
    """Paged list of Lab services virtual machine images.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of virtual machine images.
    :vartype value: list[~azure.mgmt.labservices.models.Image]
    :ivar next_link: The link to get the next page of image results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Image]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedImages, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PagedLabPlans(msrest.serialization.Model):
    """Paged list of lab plans.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of lab plans.
    :vartype value: list[~azure.mgmt.labservices.models.LabPlan]
    :ivar next_link: The link to get the next page of lab plan results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LabPlan]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedLabPlans, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PagedLabs(msrest.serialization.Model):
    """Paged list of labs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of lab results.
    :vartype value: list[~azure.mgmt.labservices.models.Lab]
    :ivar next_link: The link to get the next page of image results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Lab]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedLabs, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PagedSchedules(msrest.serialization.Model):
    """Paged list of schedules.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of schedule results.
    :vartype value: list[~azure.mgmt.labservices.models.Schedule]
    :ivar next_link: The link to get the next page of schedule results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Schedule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedSchedules, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PagedUsers(msrest.serialization.Model):
    """Paged list of users.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of user results.
    :vartype value: list[~azure.mgmt.labservices.models.User]
    :ivar next_link: The link to get the next page of image results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[User]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedUsers, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PagedVirtualMachines(msrest.serialization.Model):
    """Paged list of lab services virtual machines.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of virtual machine results.
    :vartype value: list[~azure.mgmt.labservices.models.VirtualMachine]
    :ivar next_link: The link to get the next page of virtual machine results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualMachine]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PagedVirtualMachines, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class RecurrencePattern(msrest.serialization.Model):
    """Recurrence pattern of a lab schedule.

    All required parameters must be populated in order to send to Azure.

    :param frequency: Required. The frequency of the recurrence. Possible values include: "Daily",
     "Weekly".
    :type frequency: str or ~azure.mgmt.labservices.models.RecurrenceFrequency
    :param week_days: The week days the schedule runs. Used for when the Frequency is set to
     Weekly.
    :type week_days: list[str or ~azure.mgmt.labservices.models.WeekDay]
    :param interval: The interval to invoke the schedule on. For example, interval = 2 and
     RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1
     is used.
    :type interval: int
    :param expiration_date: Required. When the recurrence will expire. This date is inclusive.
    :type expiration_date: ~datetime.date
    """

    _validation = {
        'frequency': {'required': True},
        'interval': {'maximum': 365, 'minimum': 1},
        'expiration_date': {'required': True},
    }

    _attribute_map = {
        'frequency': {'key': 'frequency', 'type': 'str'},
        'week_days': {'key': 'weekDays', 'type': '[str]'},
        'interval': {'key': 'interval', 'type': 'int'},
        'expiration_date': {'key': 'expirationDate', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        frequency: Union[str, "RecurrenceFrequency"],
        expiration_date: datetime.date,
        week_days: Optional[List[Union[str, "WeekDay"]]] = None,
        interval: Optional[int] = None,
        **kwargs
    ):
        super(RecurrencePattern, self).__init__(**kwargs)
        self.frequency = frequency
        self.week_days = week_days
        self.interval = interval
        self.expiration_date = expiration_date


class ResetPasswordBody(msrest.serialization.Model):
    """Body of a reset password request.

    All required parameters must be populated in order to send to Azure.

    :param username: Required. The user whose password is being reset.
    :type username: str
    :param password: Required. The password.
    :type password: str
    """

    _validation = {
        'username': {'required': True},
        'password': {'required': True},
    }

    _attribute_map = {
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        username: str,
        password: str,
        **kwargs
    ):
        super(ResetPasswordBody, self).__init__(**kwargs)
        self.username = username
        self.password = password


class RosterProfile(msrest.serialization.Model):
    """The lab user list management profile.

    :param active_directory_group_id: The AAD group ID which this lab roster is populated from.
     Having this set enables AAD sync mode.
    :type active_directory_group_id: str
    :param lti_context_id: The unique context identifier for the lab in the lms.
    :type lti_context_id: str
    :param lms_instance: The base URI identifying the lms instance.
    :type lms_instance: str
    :param lti_client_id: The unique id of the azure lab services tool in the lms.
    :type lti_client_id: str
    :param lti_roster_endpoint: The uri of the names and roles service endpoint on the lms for the
     class attached to this lab.
    :type lti_roster_endpoint: str
    """

    _attribute_map = {
        'active_directory_group_id': {'key': 'activeDirectoryGroupId', 'type': 'str'},
        'lti_context_id': {'key': 'ltiContextId', 'type': 'str'},
        'lms_instance': {'key': 'lmsInstance', 'type': 'str'},
        'lti_client_id': {'key': 'ltiClientId', 'type': 'str'},
        'lti_roster_endpoint': {'key': 'ltiRosterEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        active_directory_group_id: Optional[str] = None,
        lti_context_id: Optional[str] = None,
        lms_instance: Optional[str] = None,
        lti_client_id: Optional[str] = None,
        lti_roster_endpoint: Optional[str] = None,
        **kwargs
    ):
        super(RosterProfile, self).__init__(**kwargs)
        self.active_directory_group_id = active_directory_group_id
        self.lti_context_id = lti_context_id
        self.lms_instance = lms_instance
        self.lti_client_id = lti_client_id
        self.lti_roster_endpoint = lti_roster_endpoint


class SaveImageBody(msrest.serialization.Model):
    """Body for the save image POST.

    :param name: The name for the image we create.
    :type name: str
    :param lab_virtual_machine_id: The ID of the lab virtual machine you want to save an image
     from.
    :type lab_virtual_machine_id: str
    """

    _validation = {
        'lab_virtual_machine_id': {'max_length': 2000, 'min_length': 3},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'lab_virtual_machine_id': {'key': 'labVirtualMachineId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        lab_virtual_machine_id: Optional[str] = None,
        **kwargs
    ):
        super(SaveImageBody, self).__init__(**kwargs)
        self.name = name
        self.lab_virtual_machine_id = lab_virtual_machine_id


class Schedule(ProxyResource):
    """Schedule for automatically turning virtual machines in a lab on and off at specified times.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the schedule.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :param start_at: When lab user virtual machines will be started. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type start_at: ~datetime.datetime
    :param stop_at: When lab user virtual machines will be stopped. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type stop_at: ~datetime.datetime
    :param recurrence_pattern: The recurrence pattern of the scheduled actions.
    :type recurrence_pattern: ~azure.mgmt.labservices.models.RecurrencePattern
    :param time_zone_id: The IANA timezone id for the schedule.
    :type time_zone_id: str
    :param notes: Notes for this schedule.
    :type notes: str
    :ivar provisioning_state: Current provisioning state of the schedule. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'time_zone_id': {'max_length': 50, 'min_length': 0},
        'notes': {'max_length': 1000, 'min_length': 0},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'start_at': {'key': 'properties.startAt', 'type': 'iso-8601'},
        'stop_at': {'key': 'properties.stopAt', 'type': 'iso-8601'},
        'recurrence_pattern': {'key': 'properties.recurrencePattern', 'type': 'RecurrencePattern'},
        'time_zone_id': {'key': 'properties.timeZoneId', 'type': 'str'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_at: Optional[datetime.datetime] = None,
        stop_at: Optional[datetime.datetime] = None,
        recurrence_pattern: Optional["RecurrencePattern"] = None,
        time_zone_id: Optional[str] = None,
        notes: Optional[str] = None,
        **kwargs
    ):
        super(Schedule, self).__init__(**kwargs)
        self.system_data = None
        self.start_at = start_at
        self.stop_at = stop_at
        self.recurrence_pattern = recurrence_pattern
        self.time_zone_id = time_zone_id
        self.notes = notes
        self.provisioning_state = None


class ScheduleUpdateProperties(msrest.serialization.Model):
    """Schedule resource properties used for updates.

    :param start_at: When lab user virtual machines will be started. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type start_at: ~datetime.datetime
    :param stop_at: When lab user virtual machines will be stopped. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type stop_at: ~datetime.datetime
    :param recurrence_pattern: The recurrence pattern of the scheduled actions.
    :type recurrence_pattern: ~azure.mgmt.labservices.models.RecurrencePattern
    :param time_zone_id: The IANA timezone id for the schedule.
    :type time_zone_id: str
    :param notes: Notes for this schedule.
    :type notes: str
    """

    _validation = {
        'time_zone_id': {'max_length': 50, 'min_length': 0},
        'notes': {'max_length': 1000, 'min_length': 0},
    }

    _attribute_map = {
        'start_at': {'key': 'startAt', 'type': 'iso-8601'},
        'stop_at': {'key': 'stopAt', 'type': 'iso-8601'},
        'recurrence_pattern': {'key': 'recurrencePattern', 'type': 'RecurrencePattern'},
        'time_zone_id': {'key': 'timeZoneId', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_at: Optional[datetime.datetime] = None,
        stop_at: Optional[datetime.datetime] = None,
        recurrence_pattern: Optional["RecurrencePattern"] = None,
        time_zone_id: Optional[str] = None,
        notes: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleUpdateProperties, self).__init__(**kwargs)
        self.start_at = start_at
        self.stop_at = stop_at
        self.recurrence_pattern = recurrence_pattern
        self.time_zone_id = time_zone_id
        self.notes = notes


class ScheduleProperties(ScheduleUpdateProperties):
    """Schedule resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param start_at: When lab user virtual machines will be started. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type start_at: ~datetime.datetime
    :param stop_at: When lab user virtual machines will be stopped. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type stop_at: ~datetime.datetime
    :param recurrence_pattern: The recurrence pattern of the scheduled actions.
    :type recurrence_pattern: ~azure.mgmt.labservices.models.RecurrencePattern
    :param time_zone_id: The IANA timezone id for the schedule.
    :type time_zone_id: str
    :param notes: Notes for this schedule.
    :type notes: str
    :ivar provisioning_state: Current provisioning state of the schedule. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    """

    _validation = {
        'time_zone_id': {'max_length': 50, 'min_length': 0},
        'notes': {'max_length': 1000, 'min_length': 0},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'start_at': {'key': 'startAt', 'type': 'iso-8601'},
        'stop_at': {'key': 'stopAt', 'type': 'iso-8601'},
        'recurrence_pattern': {'key': 'recurrencePattern', 'type': 'RecurrencePattern'},
        'time_zone_id': {'key': 'timeZoneId', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_at: Optional[datetime.datetime] = None,
        stop_at: Optional[datetime.datetime] = None,
        recurrence_pattern: Optional["RecurrencePattern"] = None,
        time_zone_id: Optional[str] = None,
        notes: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleProperties, self).__init__(start_at=start_at, stop_at=stop_at, recurrence_pattern=recurrence_pattern, time_zone_id=time_zone_id, notes=notes, **kwargs)
        self.provisioning_state = None


class ScheduleUpdate(msrest.serialization.Model):
    """Schedule for automatically turning virtual machines in a lab on and off at specified times. Used for updates.

    :param start_at: When lab user virtual machines will be started. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type start_at: ~datetime.datetime
    :param stop_at: When lab user virtual machines will be stopped. Timestamp offsets will be
     ignored and timeZoneId is used instead.
    :type stop_at: ~datetime.datetime
    :param recurrence_pattern: The recurrence pattern of the scheduled actions.
    :type recurrence_pattern: ~azure.mgmt.labservices.models.RecurrencePattern
    :param time_zone_id: The IANA timezone id for the schedule.
    :type time_zone_id: str
    :param notes: Notes for this schedule.
    :type notes: str
    """

    _validation = {
        'time_zone_id': {'max_length': 50, 'min_length': 0},
        'notes': {'max_length': 1000, 'min_length': 0},
    }

    _attribute_map = {
        'start_at': {'key': 'properties.startAt', 'type': 'iso-8601'},
        'stop_at': {'key': 'properties.stopAt', 'type': 'iso-8601'},
        'recurrence_pattern': {'key': 'properties.recurrencePattern', 'type': 'RecurrencePattern'},
        'time_zone_id': {'key': 'properties.timeZoneId', 'type': 'str'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_at: Optional[datetime.datetime] = None,
        stop_at: Optional[datetime.datetime] = None,
        recurrence_pattern: Optional["RecurrencePattern"] = None,
        time_zone_id: Optional[str] = None,
        notes: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleUpdate, self).__init__(**kwargs)
        self.start_at = start_at
        self.stop_at = stop_at
        self.recurrence_pattern = recurrence_pattern
        self.time_zone_id = time_zone_id
        self.notes = notes


class SecurityProfile(msrest.serialization.Model):
    """The lab security profile.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar registration_code: The registration code for the lab.
    :vartype registration_code: str
    :param open_access: Whether any user or only specified users can register to a lab. Possible
     values include: "Enabled", "Disabled".
    :type open_access: str or ~azure.mgmt.labservices.models.EnableState
    """

    _validation = {
        'registration_code': {'readonly': True},
    }

    _attribute_map = {
        'registration_code': {'key': 'registrationCode', 'type': 'str'},
        'open_access': {'key': 'openAccess', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        open_access: Optional[Union[str, "EnableState"]] = None,
        **kwargs
    ):
        super(SecurityProfile, self).__init__(**kwargs)
        self.registration_code = None
        self.open_access = open_access


class Sku(msrest.serialization.Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU. Ex - P3. It is typically a letter+number code.
    :type name: str
    :param tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Possible values include: "Free", "Basic",
     "Standard", "Premium".
    :type tier: str or ~azure.mgmt.labservices.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for the same SKU, then
     that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class SupportInfo(msrest.serialization.Model):
    """Support contact information and instructions.

    :param url: Support web address.
    :type url: str
    :param email: Support contact email address.
    :type email: str
    :param phone: Support contact phone number.
    :type phone: str
    :param instructions: Support instructions.
    :type instructions: str
    """

    _validation = {
        'url': {'max_length': 2000, 'min_length': 3},
        'email': {'max_length': 254, 'min_length': 6},
        'phone': {'max_length': 31, 'min_length': 1},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
        'instructions': {'key': 'instructions', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: Optional[str] = None,
        email: Optional[str] = None,
        phone: Optional[str] = None,
        instructions: Optional[str] = None,
        **kwargs
    ):
        super(SupportInfo, self).__init__(**kwargs)
        self.url = url
        self.email = email
        self.phone = phone
        self.instructions = instructions


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.labservices.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.labservices.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class User(ProxyResource):
    """User of a lab that can register for and use virtual machines within the lab.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the user resource.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :param additional_usage_quota: The amount of usage quota time the user gets in addition to the
     lab usage quota.
    :type additional_usage_quota: ~datetime.timedelta
    :ivar provisioning_state: Current provisioning state of the user resource. Possible values
     include: "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :ivar display_name: Display name of the user, for example user's full name.
    :vartype display_name: str
    :param email: Required. Email address of the user.
    :type email: str
    :ivar registration_state: State of the user's registration within the lab. Possible values
     include: "Registered", "NotRegistered".
    :vartype registration_state: str or ~azure.mgmt.labservices.models.RegistrationState
    :ivar invitation_state: State of the invitation message for the user. Possible values include:
     "NotSent", "Sending", "Sent", "Failed".
    :vartype invitation_state: str or ~azure.mgmt.labservices.models.InvitationState
    :ivar invitation_sent: Date and time when the invitation message was sent to the user.
    :vartype invitation_sent: ~datetime.datetime
    :ivar total_usage: How long the user has used their virtual machines in this lab.
    :vartype total_usage: ~datetime.timedelta
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'display_name': {'readonly': True},
        'email': {'required': True, 'max_length': 254, 'min_length': 6},
        'registration_state': {'readonly': True},
        'invitation_state': {'readonly': True},
        'invitation_sent': {'readonly': True},
        'total_usage': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'additional_usage_quota': {'key': 'properties.additionalUsageQuota', 'type': 'duration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'email': {'key': 'properties.email', 'type': 'str'},
        'registration_state': {'key': 'properties.registrationState', 'type': 'str'},
        'invitation_state': {'key': 'properties.invitationState', 'type': 'str'},
        'invitation_sent': {'key': 'properties.invitationSent', 'type': 'iso-8601'},
        'total_usage': {'key': 'properties.totalUsage', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        email: str,
        additional_usage_quota: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.system_data = None
        self.additional_usage_quota = additional_usage_quota
        self.provisioning_state = None
        self.display_name = None
        self.email = email
        self.registration_state = None
        self.invitation_state = None
        self.invitation_sent = None
        self.total_usage = None


class UserUpdateProperties(msrest.serialization.Model):
    """User resource properties used for updates.

    :param additional_usage_quota: The amount of usage quota time the user gets in addition to the
     lab usage quota.
    :type additional_usage_quota: ~datetime.timedelta
    """

    _attribute_map = {
        'additional_usage_quota': {'key': 'additionalUsageQuota', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        additional_usage_quota: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(UserUpdateProperties, self).__init__(**kwargs)
        self.additional_usage_quota = additional_usage_quota


class UserProperties(UserUpdateProperties):
    """User resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_usage_quota: The amount of usage quota time the user gets in addition to the
     lab usage quota.
    :type additional_usage_quota: ~datetime.timedelta
    :ivar provisioning_state: Current provisioning state of the user resource. Possible values
     include: "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :ivar display_name: Display name of the user, for example user's full name.
    :vartype display_name: str
    :param email: Required. Email address of the user.
    :type email: str
    :ivar registration_state: State of the user's registration within the lab. Possible values
     include: "Registered", "NotRegistered".
    :vartype registration_state: str or ~azure.mgmt.labservices.models.RegistrationState
    :ivar invitation_state: State of the invitation message for the user. Possible values include:
     "NotSent", "Sending", "Sent", "Failed".
    :vartype invitation_state: str or ~azure.mgmt.labservices.models.InvitationState
    :ivar invitation_sent: Date and time when the invitation message was sent to the user.
    :vartype invitation_sent: ~datetime.datetime
    :ivar total_usage: How long the user has used their virtual machines in this lab.
    :vartype total_usage: ~datetime.timedelta
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'display_name': {'readonly': True},
        'email': {'required': True, 'max_length': 254, 'min_length': 6},
        'registration_state': {'readonly': True},
        'invitation_state': {'readonly': True},
        'invitation_sent': {'readonly': True},
        'total_usage': {'readonly': True},
    }

    _attribute_map = {
        'additional_usage_quota': {'key': 'additionalUsageQuota', 'type': 'duration'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'registration_state': {'key': 'registrationState', 'type': 'str'},
        'invitation_state': {'key': 'invitationState', 'type': 'str'},
        'invitation_sent': {'key': 'invitationSent', 'type': 'iso-8601'},
        'total_usage': {'key': 'totalUsage', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        email: str,
        additional_usage_quota: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(UserProperties, self).__init__(additional_usage_quota=additional_usage_quota, **kwargs)
        self.provisioning_state = None
        self.display_name = None
        self.email = email
        self.registration_state = None
        self.invitation_state = None
        self.invitation_sent = None
        self.total_usage = None


class UserUpdate(msrest.serialization.Model):
    """User of a lab that can register for and use virtual machines within the lab. Used for updates.

    :param additional_usage_quota: The amount of usage quota time the user gets in addition to the
     lab usage quota.
    :type additional_usage_quota: ~datetime.timedelta
    """

    _attribute_map = {
        'additional_usage_quota': {'key': 'properties.additionalUsageQuota', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        additional_usage_quota: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(UserUpdate, self).__init__(**kwargs)
        self.additional_usage_quota = additional_usage_quota


class VirtualMachine(ProxyResource):
    """A lab virtual machine resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: System data of the Lab virtual machine.
    :vartype system_data: ~azure.mgmt.labservices.models.SystemData
    :ivar provisioning_state: Current provisioning state of the virtual machine. Possible values
     include: "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked".
    :vartype provisioning_state: str or ~azure.mgmt.labservices.models.ProvisioningState
    :ivar state: The current state of the virtual machine. Possible values include: "Stopped",
     "Starting", "Running", "Stopping", "ResettingPassword", "Reimaging", "Redeploying".
    :vartype state: str or ~azure.mgmt.labservices.models.VirtualMachineState
    :ivar connection_profile: Profile for information about connecting to the virtual machine.
    :vartype connection_profile: ~azure.mgmt.labservices.models.VirtualMachineConnectionProfile
    :ivar claimed_by_user_id: The lab user ID (not the PUID!) of who claimed the virtual machine.
    :vartype claimed_by_user_id: str
    :ivar vm_type: The type of this VM resource. Possible values include: "User", "Template".
    :vartype vm_type: str or ~azure.mgmt.labservices.models.VirtualMachineType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
        'connection_profile': {'readonly': True},
        'claimed_by_user_id': {'readonly': True},
        'vm_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'connection_profile': {'key': 'properties.connectionProfile', 'type': 'VirtualMachineConnectionProfile'},
        'claimed_by_user_id': {'key': 'properties.claimedByUserId', 'type': 'str'},
        'vm_type': {'key': 'properties.vmType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualMachine, self).__init__(**kwargs)
        self.system_data = None
        self.provisioning_state = None
        self.state = None
        self.connection_profile = None
        self.claimed_by_user_id = None
        self.vm_type = None


class VirtualMachineAdditionalCapabilities(msrest.serialization.Model):
    """The additional capabilities for a lab VM.

    :param install_gpu_drivers: Flag to pre-install dedicated GPU drivers. Possible values include:
     "Enabled", "Disabled".
    :type install_gpu_drivers: str or ~azure.mgmt.labservices.models.EnableState
    """

    _attribute_map = {
        'install_gpu_drivers': {'key': 'installGpuDrivers', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        install_gpu_drivers: Optional[Union[str, "EnableState"]] = None,
        **kwargs
    ):
        super(VirtualMachineAdditionalCapabilities, self).__init__(**kwargs)
        self.install_gpu_drivers = install_gpu_drivers


class VirtualMachineConnectionProfile(msrest.serialization.Model):
    """The connection information for the virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar private_ip_address: The private IP address of the virtual machine.
    :vartype private_ip_address: str
    :ivar ssh_authority: Port and host name separated by semicolon for connecting via SSH protocol
     to the virtual machine.
    :vartype ssh_authority: str
    :ivar ssh_in_browser_url: URL for connecting via SSH protocol to the virtual machine in
     browser.
    :vartype ssh_in_browser_url: str
    :ivar rdp_authority: Port and host name separated by semicolon for connecting via RDP protocol
     to the virtual machine.
    :vartype rdp_authority: str
    :ivar rdp_in_browser_url: URL for connecting via RDP protocol to the virtual machine in
     browser.
    :vartype rdp_in_browser_url: str
    :ivar admin_username: The username used to log on to the virtual machine as admin.
    :vartype admin_username: str
    :ivar non_admin_username: The username used to log on to the virtual machine as non-admin, if
     one exists.
    :vartype non_admin_username: str
    """

    _validation = {
        'private_ip_address': {'readonly': True},
        'ssh_authority': {'readonly': True},
        'ssh_in_browser_url': {'readonly': True, 'max_length': 2000, 'min_length': 3},
        'rdp_authority': {'readonly': True},
        'rdp_in_browser_url': {'readonly': True, 'max_length': 2000, 'min_length': 3},
        'admin_username': {'readonly': True},
        'non_admin_username': {'readonly': True},
    }

    _attribute_map = {
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'ssh_authority': {'key': 'sshAuthority', 'type': 'str'},
        'ssh_in_browser_url': {'key': 'sshInBrowserUrl', 'type': 'str'},
        'rdp_authority': {'key': 'rdpAuthority', 'type': 'str'},
        'rdp_in_browser_url': {'key': 'rdpInBrowserUrl', 'type': 'str'},
        'admin_username': {'key': 'adminUsername', 'type': 'str'},
        'non_admin_username': {'key': 'nonAdminUsername', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualMachineConnectionProfile, self).__init__(**kwargs)
        self.private_ip_address = None
        self.ssh_authority = None
        self.ssh_in_browser_url = None
        self.rdp_authority = None
        self.rdp_in_browser_url = None
        self.admin_username = None
        self.non_admin_username = None


class VirtualMachineProfile(msrest.serialization.Model):
    """The base virtual machine configuration for a lab.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param create_option: Required. Indicates what lab virtual machines are created from. Possible
     values include: "Image", "TemplateVM".
    :type create_option: str or ~azure.mgmt.labservices.models.CreateOption
    :param image_reference: Required. The image configuration for lab virtual machines.
    :type image_reference: ~azure.mgmt.labservices.models.ImageReference
    :ivar os_type: The OS type of the image. Possible values include: "Windows", "Linux".
    :vartype os_type: str or ~azure.mgmt.labservices.models.OsType
    :param sku: Required. The SKU for the lab. Defines the type of virtual machines used in the
     lab.
    :type sku: ~azure.mgmt.labservices.models.Sku
    :param additional_capabilities: Additional VM capabilities.
    :type additional_capabilities:
     ~azure.mgmt.labservices.models.VirtualMachineAdditionalCapabilities
    :param usage_quota: Required. The initial quota alloted to each lab user. Must be a time span
     between 0 and 9999 hours.
    :type usage_quota: ~datetime.timedelta
    :param use_shared_password: Enabling this option will use the same password for all user VMs.
     Possible values include: "Enabled", "Disabled".
    :type use_shared_password: str or ~azure.mgmt.labservices.models.EnableState
    :param admin_user: Required. Credentials for the admin user on the VM.
    :type admin_user: ~azure.mgmt.labservices.models.Credentials
    :param non_admin_user: Credentials for the non-admin user on the VM, if one exists.
    :type non_admin_user: ~azure.mgmt.labservices.models.Credentials
    """

    _validation = {
        'create_option': {'required': True},
        'image_reference': {'required': True},
        'os_type': {'readonly': True},
        'sku': {'required': True},
        'usage_quota': {'required': True},
        'admin_user': {'required': True},
    }

    _attribute_map = {
        'create_option': {'key': 'createOption', 'type': 'str'},
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'additional_capabilities': {'key': 'additionalCapabilities', 'type': 'VirtualMachineAdditionalCapabilities'},
        'usage_quota': {'key': 'usageQuota', 'type': 'duration'},
        'use_shared_password': {'key': 'useSharedPassword', 'type': 'str'},
        'admin_user': {'key': 'adminUser', 'type': 'Credentials'},
        'non_admin_user': {'key': 'nonAdminUser', 'type': 'Credentials'},
    }

    def __init__(
        self,
        *,
        create_option: Union[str, "CreateOption"],
        image_reference: "ImageReference",
        sku: "Sku",
        usage_quota: datetime.timedelta,
        admin_user: "Credentials",
        additional_capabilities: Optional["VirtualMachineAdditionalCapabilities"] = None,
        use_shared_password: Optional[Union[str, "EnableState"]] = None,
        non_admin_user: Optional["Credentials"] = None,
        **kwargs
    ):
        super(VirtualMachineProfile, self).__init__(**kwargs)
        self.create_option = create_option
        self.image_reference = image_reference
        self.os_type = None
        self.sku = sku
        self.additional_capabilities = additional_capabilities
        self.usage_quota = usage_quota
        self.use_shared_password = use_shared_password
        self.admin_user = admin_user
        self.non_admin_user = non_admin_user
